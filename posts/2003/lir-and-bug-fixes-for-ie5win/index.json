{
    "data": {
    "kind": "page",
    "title": "LIR And Bug Fixes for IE5/Win",
    "description": "",
    "summary": {
        "content": "Internet Explorer Sucks Most real web designers already know this. Most who don’t are generally either amateurs or are way, way behind the times. You’d think that with all of the money, power, and research and development resources Microsoft has, that they could produce a web browser better than crap. Apparently I’m mistaken. Langridge Image Replacement I’ve been using the LIR technique for swapping out text in favor of images for a while now. While no image replacement technique is perfect, LIR is better than the alternatives (namely FIR).",
        "isTruncated": true
    },
    "published": "2003-12-10T00:24:42Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2003/lir-and-bug-fixes-for-ie5win/",
    "relativePermalink": "/posts/2003/lir-and-bug-fixes-for-ie5win/",
    "aliases": ["/2003/12/09/lir-and-bug-fixes-for-ie5win/"],
    "images": [],
    "videos": [],
    "categories": ["Browsers"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 1578,
        "readingTime": "8 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2003/20031210-lir-and-bug-fixes-for-ie5win.md",
        "logicalName": "20031210-lir-and-bug-fixes-for-ie5win.md",
        "translationBaseName": "20031210-lir-and-bug-fixes-for-ie5win",
        "baseFileName": "20031210-lir-and-bug-fixes-for-ie5win",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2003/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#internet-explorer-sucks\"\u003eInternet Explorer Sucks\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#langridge-image-replacement\"\u003eLangridge Image Replacement\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#next\"\u003eNext…\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003ch2 id=\"internet-explorer-sucks\"\u003eInternet Explorer Sucks\u003c/h2\u003e\n\u003cp\u003eMost \u003cem\u003ereal\u003c/em\u003e web designers already know this. Most who don’t are generally either amateurs or are way, \u003cem\u003eway\u003c/em\u003e behind the times. You’d think that with all of the money, power, and research and development resources Microsoft has, that they could produce a web browser better than crap. Apparently I’m mistaken.\u003c/p\u003e\n\u003ch2 id=\"langridge-image-replacement\"\u003eLangridge Image Replacement\u003c/h2\u003e\n\u003cp\u003eI’ve been using the \u003ca href=\"https://web.archive.org/web/20031210002442/http://www.kryogenix.org/code/browser/lir/\"\u003eLIR\u003c/a\u003e technique for swapping out text in favor of images for a while now. While no image replacement technique is perfect, LIR is better than the alternatives (namely \u003ca href=\"https://web.archive.org/web/20031210002442/http://www.stopdesign.com/articles/replace_text/\"\u003eFIR\u003c/a\u003e). What I like about LIR is that is does not require any extra HTML “hooks” to pull it all off. I know that FIR requires additional \u003ccode\u003e\u0026lt;span\u0026gt;\u003c/code\u003e tags.\u003c/p\u003e\n\u003cp\u003eNow, here is some sample XHTML markup for your basic LIR method:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eid\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;header\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;\u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/\u0026#34;\u003c/span\u003e\u0026gt;Skyzyx.com\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eSimple enough, right? We have a top-level heading (\u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e) that encloses a link (\u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e). Got it? Cool.\u003c/p\u003e\n\u003cp\u003eHere would be the CSS used to swap out the text in favor of an image:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header \u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e {\n    \u003cspan style=\"color:#66d9ef\"\u003edisplay\u003c/span\u003e:\u003cspan style=\"color:#66d9ef\"\u003eblock\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003emargin\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eoverflow\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003ehidden\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003ewidth\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e710\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n}\n\n\u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header \u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e {\n    \u003cspan style=\"color:#66d9ef\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etransparent\u003c/span\u003e url(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/img/skyzyxcom.gif\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eno-repeat\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etop\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eleft\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e!important\u003c/span\u003e;\n    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003eheight\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e/**/\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:80px\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow, what’s going on here? Well, the first rule sets up the parameters for both the \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e tag and the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e tag. Shared properties require less space than writing the same things twice, obviously. The second rule is only for the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e element nested inside the \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\u003cp\u003eStarting with the first rule, \u003ccode\u003edisplay:block;\u003c/code\u003e says that we want to make both tags block-level elements. Since \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e already is, this really only effects \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e. Since you can’t apply \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e properties to inline elements, we need to set the inline \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e element to block-level.\u003c/p\u003e\n\u003cp\u003eSetting the \u003ccode\u003emargin\u003c/code\u003e and \u003ccode\u003epadding\u003c/code\u003e to zero allows us to keep the box exactly the same size as the \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e — no more, no less — which is what we want. Since there is no \u003ccode\u003emargin\u003c/code\u003e or \u003ccode\u003epadding\u003c/code\u003e (as well as no \u003ccode\u003eborder\u003c/code\u003e), Internet Explorer’s faulty box model issue doesn’t apply… yet.\u003c/p\u003e\n\u003cp\u003eThe next property is \u003ccode\u003eoverflow:hidden;\u003c/code\u003e. This says that any content inside the box (being the \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e elements) that stretches outside the confines of the \u003ccode\u003ewidth\u003c/code\u003e and \u003ccode\u003eheight\u003c/code\u003e will be hidden. That’s good, as that’s exactly what we want. But there is a slight problem here, as we will get to in a few minutes.\u003c/p\u003e\n\u003cp\u003eLastly, we specify the \u003ccode\u003ewidth\u003c/code\u003e and the \u003ccode\u003eheight\u003c/code\u003e that we want for the replacement image. At this point, you can still see the text, but we’ll get to that in a minute. We have now established the properties that the \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e and the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e have in common. Once again, Internet Explorer’s faulty box model issue has not come into effect yet, but it will… and we’ll be ready.\u003c/p\u003e\n\u003cp\u003eIn the second rule (repeated from above):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header \u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e {\n    \u003cspan style=\"color:#66d9ef\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etransparent\u003c/span\u003e url(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/img/skyzyxcom.gif\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eno-repeat\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etop\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eleft\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e!important\u003c/span\u003e;\n    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003eheight\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e/**/\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:80px\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe first thing we do is overwrite the original value for the \u003ccode\u003epadding\u003c/code\u003e property with a new value. Note that this entire second rule only effects the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e element, and NOT the \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e element.\u003c/p\u003e\n\u003cp\u003eHere’s the concept behind this method: The correct box model (properly implemented in Gecko-based browsers like Mozilla and Netscape 6/7, as well as Opera) says that if you give an element a certain width, then that will be the width of the “content”.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003ePadding\u003c/strong\u003e is empty space \u003cem\u003einside\u003c/em\u003e the box. If padding is applied, it will constrict the amount of room inside the box, which is good for giving space between text and any borders that may be around the box.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMargin\u003c/strong\u003e is empty space \u003cem\u003eoutside\u003c/em\u003e the box. If margin is applied, it pushes outside elements away from the box, which is good if you want an element to be a certain distance away from another element. As an example, the content of this page has 50 pixels of margin on the top as well as on the bottom. That’s why you can see the grid behind it.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eBorder\u003c/strong\u003e is exactly that… a border around the width of the box. You can set a border of 1 pixel, 2 pixels, 3 pixels, 50 pixels, or whatever you want. This all takes up space, and this space is taken \u003cem\u003eoutside\u003c/em\u003e the box, but before the margin is applied.\u003c/p\u003e\n\u003cp\u003eApparently, according to \u003ca href=\"https://web.archive.org/web/20031210002442/http://www.codingforums.com/showthread.php?s=\u0026amp;threadid=30318\"\u003ethese sources\u003c/a\u003e, although the box is made up of the content width + the padding, the actual \u003ccode\u003ewidth\u003c/code\u003e only applies to the content itself. This doesn’t make much sense to me, but that’s just how it is anyways.\u003c/p\u003e\n\u003cp\u003eThe problem with the Internet Explorer box model is that instead of having the \u003ccode\u003ewidth\u003c/code\u003eall of that stuff (content+padding+border+margin) has to fit inside the width. Oh no! (By the way, when I say “width”, the same issue occurs with the “height”.)\u003c/p\u003e\n\u003cp\u003eThe way that this method works is that we create a “box”, eliminate all \u003ccode\u003eheight\u003c/code\u003e, apply \u003ccode\u003epadding\u003c/code\u003e to hold the box open (to push the content text down below the border of the box), use \u003ccode\u003eoverflow\u003c/code\u003e to hide that text, and then set a \u003ccode\u003ebackground\u003c/code\u003e image to it. Simple really.\u003c/p\u003e\n\u003cp\u003eBut as I always say, “one horrible CSS rendering bug deserves another” (well, I don’t really \u003cem\u003ealways\u003c/em\u003e say that, but that’s what we’re going to do here).\u003c/p\u003e\n\u003cp\u003eBack to our regularly scheduled program, next we set the \u003ccode\u003epadding-top\u003c/code\u003e property to the height that we want to end up with, while setting the other paddings to zero. This will be critical to pulling this off.\u003c/p\u003e\n\u003cp\u003eAfter that, we address the \u003ccode\u003ebackground\u003c/code\u003e property. Here, we’re combining several \u003ccode\u003ebackground\u003c/code\u003e rules at once. We want the background color to be transparent, we want the background image to display (don’t use quotes for this, as IE5/Mac will crash), set the background to not repeat, and have it begin in the top-left corner.\u003c/p\u003e\n\u003cp\u003eThis next part is what brings it all together. Internet Explorer 5.x doesn’t properly implement \u003ccode\u003e!important\u003c/code\u003e, so when other browsers see the \u003ccode\u003e!important\u003c/code\u003e, they’ll not allow the next line to overwrite this line.\u003c/p\u003e\n\u003cp\u003eWe want to set the height to zero. Why? Because setting it to zero means that everything inside of it will be hidden because of the \u003ccode\u003eoverflow\u003c/code\u003e property we set earlier. And since we set padding inside it, the element is held open by this padding… which gives it plenty of room to show the background image.\u003c/p\u003e\n\u003cp\u003eThe last part of this whole equation is the box model fix for Internet Explorer 5.x. In this example, we use \u003ccode\u003eheight /**/:80px;\u003c/code\u003e. IE5.x doesn’t properly handle \u003ccode\u003e!important\u003c/code\u003e, so when it comes across this line, it re-adjusts itself. Since IE5.x needs everything to be within the width (or height in this case), this fixes it’s problem.\u003c/p\u003e\n\u003cp\u003eInternet Explorer 6.0 also doesn’t understand \u003ccode\u003e!important\u003c/code\u003e, but it does have a parsing bug that this last line utilizes, so that IE6 never even sees it. Pretty nifty, huh?\u003c/p\u003e\n\u003ch2 id=\"next\"\u003eNext…\u003c/h2\u003e\n\u003cp\u003eNow, I explained all of that so that this next part would make sense. This method can be used with any element. Normally it’ll be an h-something tag, but what if you wanted to use a \u003ccode\u003e\u0026lt;div\u0026gt;\u003c/code\u003e tag? Well, it’d work just fine, except in IE5/Mac. \u003ca href=\"https://web.archive.org/web/20031210002442/http://sidesh0w.com/weblog/2003/09/16/css_only_mostly_stupid/\"\u003eEthan Marcotte\u003c/a\u003e has shown us how to fix this.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header \u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e {\n    \u003cspan style=\"color:#66d9ef\"\u003edisplay\u003c/span\u003e:\u003cspan style=\"color:#66d9ef\"\u003eblock\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003emargin\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eoverflow\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003ehidden\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003ewidth\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e710\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eclip\u003c/span\u003e:rect(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e710\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n}\n\n\u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header \u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e {\n    \u003cspan style=\"color:#66d9ef\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etransparent\u003c/span\u003e url(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/img/skyzyxcom.gif\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eno-repeat\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etop\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eleft\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e!important\u003c/span\u003e;\n    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003eheight\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e/**/\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:80px\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eRepetitive to be sure, but it works just great. However, there’s still a slight problem with Internet Explorer. This is a quirk that I noticed just recently in Internet Explorer 6.0, and was able to verify as bugs in \u003ca href=\"/archives/000094.php\"\u003eearlier versions of Internet Explorer\u003c/a\u003e. For whatever reason, tiny bits of the tops of the letters peek up higher than they’re supposed to.\u003c/p\u003e\n\u003cp\u003eAfter looking around for information, I came across a site that said to set a negative indent for the text inside the link. So that’s what I did.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header \u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e {\n    \u003cspan style=\"color:#66d9ef\"\u003edisplay\u003c/span\u003e:\u003cspan style=\"color:#66d9ef\"\u003eblock\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003emargin\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eoverflow\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003ehidden\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003ewidth\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e710\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eclip\u003c/span\u003e:rect(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e710\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n}\n\n\u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header \u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e {\n    \u003cspan style=\"color:#66d9ef\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etransparent\u003c/span\u003e url(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/img/skyzyxcom.gif\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eno-repeat\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etop\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eleft\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003etext-indent\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e-1000\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003eem\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e!important\u003c/span\u003e;\n    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003eheight\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e/**/\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:80px\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt works! Great! Now I’m off to the ne— wait a minute. What happened to the image in Internet Explorer 5.0? Where’d it go? Oh no! So, I got rid of the \u003ccode\u003etext-indent\u003c/code\u003e property, and took a look again. The image was back. Apparently, the \u003ccode\u003etext-indent\u003c/code\u003e property also moves the background image in IE 5.0. 4.01 and 5.5 get it right, but 5.0 screws it up. Sheesh!\u003c/p\u003e\n\u003cp\u003eI spent a few more minutes working with it, and decided to try something. In the first rule, the one that included both the \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e and the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e, we set the following property: \u003ccode\u003eoverflow:hidden;\u003c/code\u003e. And since the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e is nested inside the \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e, if the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e element is taller than the \u003ccode\u003e\u0026lt;h1\u0026gt;\u003c/code\u003e element, then the extra height will be hidden! Sure enough, it worked.\u003c/p\u003e\n\u003cp\u003eAfter getting rid of the \u003ccode\u003etext-indent\u003c/code\u003e property, I added 10 pixels to the height of the \u003ccode\u003e\u0026lt;a\u0026gt;\u003c/code\u003e element. Here was the final chunk of CSS code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-css\" data-lang=\"css\"\u003e\u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header\u003cspan style=\"color:#f92672\"\u003e,\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header \u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e {\n    \u003cspan style=\"color:#66d9ef\"\u003edisplay\u003c/span\u003e:\u003cspan style=\"color:#66d9ef\"\u003eblock\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003emargin\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eoverflow\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003ehidden\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003ewidth\u003c/span\u003e:\u003cspan style=\"color:#ae81ff\"\u003e710\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eclip\u003c/span\u003e:rect(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e710\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e);\n}\n\n\u003cspan style=\"color:#f92672\"\u003eh1\u003c/span\u003e#header \u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e {\n    \u003cspan style=\"color:#66d9ef\"\u003epadding\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e90\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003ebackground\u003c/span\u003e: \u003cspan style=\"color:#66d9ef\"\u003etransparent\u003c/span\u003e url(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/img/skyzyxcom.gif\u0026#34;\u003c/span\u003e) \u003cspan style=\"color:#66d9ef\"\u003eno-repeat\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etop\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eleft\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003eheight\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003epx\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e!important\u003c/span\u003e;\n    \u003cspan style=\"color:#960050;background-color:#1e0010\"\u003eheight\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e/**/\u003c/span\u003e\u003cspan style=\"color:#960050;background-color:#1e0010\"\u003e:90px\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eKids, don’t try this at home.\u003c/p\u003e\n",
        "plain":"Internet Explorer Sucks Most real web designers already know this. Most who don’t are generally either amateurs or are way, way behind the times. You’d think that with all of the money, power, and research and development resources Microsoft has, that they could produce a web browser better than crap. Apparently I’m mistaken.\nLangridge Image Replacement I’ve been using the LIR technique for swapping out text in favor of images for a while now. While no image replacement technique is perfect, LIR is better than the alternatives (namely FIR). What I like about LIR is that is does not require any extra HTML “hooks” to pull it all off. I know that FIR requires additional \u0026lt;span\u0026gt; tags.\nNow, here is some sample XHTML markup for your basic LIR method:\n\u0026lt;h1 id=\u0026#34;header\u0026#34;\u0026gt;\u0026lt;a href=\u0026#34;/\u0026#34;\u0026gt;Skyzyx.com\u0026lt;/a\u0026gt;\u0026lt;/h1\u0026gt; Simple enough, right? We have a top-level heading (\u0026lt;h1\u0026gt;) that encloses a link (\u0026lt;a\u0026gt;). Got it? Cool.\nHere would be the CSS used to swap out the text in favor of an image:\nh1#header, h1#header a { display:block; margin:0px; padding: 0px; overflow: hidden; width:710px; height: 80px; } h1#header a { padding: 80px 0 0 0; background: transparent url(\u0026#34;/img/skyzyxcom.gif\u0026#34;) no-repeat top left; height: 0px !important; height /**/:80px; } Now, what’s going on here? Well, the first rule sets up the parameters for both the \u0026lt;h1\u0026gt; tag and the \u0026lt;a\u0026gt; tag. Shared properties require less space than writing the same things twice, obviously. The second rule is only for the \u0026lt;a\u0026gt; element nested inside the \u0026lt;h1\u0026gt; element.\nStarting with the first rule, display:block; says that we want to make both tags block-level elements. Since \u0026lt;h1\u0026gt; already is, this really only effects \u0026lt;a\u0026gt;. Since you can’t apply width and height properties to inline elements, we need to set the inline \u0026lt;a\u0026gt; element to block-level.\nSetting the margin and padding to zero allows us to keep the box exactly the same size as the width and height — no more, no less — which is what we want. Since there is no margin or padding (as well as no border), Internet Explorer’s faulty box model issue doesn’t apply… yet.\nThe next property is overflow:hidden;. This says that any content inside the box (being the \u0026lt;h1\u0026gt; and \u0026lt;a\u0026gt; elements) that stretches outside the confines of the width and height will be hidden. That’s good, as that’s exactly what we want. But there is a slight problem here, as we will get to in a few minutes.\nLastly, we specify the width and the height that we want for the replacement image. At this point, you can still see the text, but we’ll get to that in a minute. We have now established the properties that the \u0026lt;h1\u0026gt; and the \u0026lt;a\u0026gt; have in common. Once again, Internet Explorer’s faulty box model issue has not come into effect yet, but it will… and we’ll be ready.\nIn the second rule (repeated from above):\nh1#header a { padding: 80px 0 0 0; background: transparent url(\u0026#34;/img/skyzyxcom.gif\u0026#34;) no-repeat top left; height: 0px !important; height /**/:80px; } The first thing we do is overwrite the original value for the padding property with a new value. Note that this entire second rule only effects the \u0026lt;a\u0026gt; element, and NOT the \u0026lt;h1\u0026gt; element.\nHere’s the concept behind this method: The correct box model (properly implemented in Gecko-based browsers like Mozilla and Netscape 6/7, as well as Opera) says that if you give an element a certain width, then that will be the width of the “content”.\nPadding is empty space inside the box. If padding is applied, it will constrict the amount of room inside the box, which is good for giving space between text and any borders that may be around the box.\nMargin is empty space outside the box. If margin is applied, it pushes outside elements away from the box, which is good if you want an element to be a certain distance away from another element. As an example, the content of this page has 50 pixels of margin on the top as well as on the bottom. That’s why you can see the grid behind it.\nBorder is exactly that… a border around the width of the box. You can set a border of 1 pixel, 2 pixels, 3 pixels, 50 pixels, or whatever you want. This all takes up space, and this space is taken outside the box, but before the margin is applied.\nApparently, according to these sources, although the box is made up of the content width + the padding, the actual width only applies to the content itself. This doesn’t make much sense to me, but that’s just how it is anyways.\nThe problem with the Internet Explorer box model is that instead of having the widthall of that stuff (content+padding+border+margin) has to fit inside the width. Oh no! (By the way, when I say “width”, the same issue occurs with the “height”.)\nThe way that this method works is that we create a “box”, eliminate all height, apply padding to hold the box open (to push the content text down below the border of the box), use overflow to hide that text, and then set a background image to it. Simple really.\nBut as I always say, “one horrible CSS rendering bug deserves another” (well, I don’t really always say that, but that’s what we’re going to do here).\nBack to our regularly scheduled program, next we set the padding-top property to the height that we want to end up with, while setting the other paddings to zero. This will be critical to pulling this off.\nAfter that, we address the background property. Here, we’re combining several background rules at once. We want the background color to be transparent, we want the background image to display (don’t use quotes for this, as IE5/Mac will crash), set the background to not repeat, and have it begin in the top-left corner.\nThis next part is what brings it all together. Internet Explorer 5.x doesn’t properly implement !important, so when other browsers see the !important, they’ll not allow the next line to overwrite this line.\nWe want to set the height to zero. Why? Because setting it to zero means that everything inside of it will be hidden because of the overflow property we set earlier. And since we set padding inside it, the element is held open by this padding… which gives it plenty of room to show the background image.\nThe last part of this whole equation is the box model fix for Internet Explorer 5.x. In this example, we use height /**/:80px;. IE5.x doesn’t properly handle !important, so when it comes across this line, it re-adjusts itself. Since IE5.x needs everything to be within the width (or height in this case), this fixes it’s problem.\nInternet Explorer 6.0 also doesn’t understand !important, but it does have a parsing bug that this last line utilizes, so that IE6 never even sees it. Pretty nifty, huh?\nNext… Now, I explained all of that so that this next part would make sense. This method can be used with any element. Normally it’ll be an h-something tag, but what if you wanted to use a \u0026lt;div\u0026gt; tag? Well, it’d work just fine, except in IE5/Mac. Ethan Marcotte has shown us how to fix this.\nh1#header, h1#header a { display:block; margin:0px; padding: 0px; overflow: hidden; width:710px; height: 80px; clip:rect(0, 710px, 80px, 0); } h1#header a { padding: 80px 0 0 0; background: transparent url(\u0026#34;/img/skyzyxcom.gif\u0026#34;) no-repeat top left; height: 0px !important; height /**/:80px; } Repetitive to be sure, but it works just great. However, there’s still a slight problem with Internet Explorer. This is a quirk that I noticed just recently in Internet Explorer 6.0, and was able to verify as bugs in earlier versions of Internet Explorer. For whatever reason, tiny bits of the tops of the letters peek up higher than they’re supposed to.\nAfter looking around for information, I came across a site that said to set a negative indent for the text inside the link. So that’s what I did.\nh1#header, h1#header a { display:block; margin:0px; padding: 0px; overflow: hidden; width:710px; height: 80px; clip:rect(0, 710px, 80px, 0); } h1#header a { padding: 80px 0 0 0; background: transparent url(\u0026#34;/img/skyzyxcom.gif\u0026#34;) no-repeat top left; text-indent: -1000em; height: 0px !important; height /**/:80px; } It works! Great! Now I’m off to the ne— wait a minute. What happened to the image in Internet Explorer 5.0? Where’d it go? Oh no! So, I got rid of the text-indent property, and took a look again. The image was back. Apparently, the text-indent property also moves the background image in IE 5.0. 4.01 and 5.5 get it right, but 5.0 screws it up. Sheesh!\nI spent a few more minutes working with it, and decided to try something. In the first rule, the one that included both the \u0026lt;h1\u0026gt; and the \u0026lt;a\u0026gt;, we set the following property: overflow:hidden;. And since the \u0026lt;a\u0026gt; is nested inside the \u0026lt;h1\u0026gt;, if the \u0026lt;a\u0026gt; element is taller than the \u0026lt;h1\u0026gt; element, then the extra height will be hidden! Sure enough, it worked.\nAfter getting rid of the text-indent property, I added 10 pixels to the height of the \u0026lt;a\u0026gt; element. Here was the final chunk of CSS code:\nh1#header, h1#header a { display:block; margin:0px; padding: 0px; overflow: hidden; width:710px; height: 80px; clip:rect(0, 710px, 80px, 0); } h1#header a { padding: 90px 0 0 0; background: transparent url(\u0026#34;/img/skyzyxcom.gif\u0026#34;) no-repeat top left; height: 0px !important; height /**/:90px; } Kids, don’t try this at home.\n",
        "source":"\n## Internet Explorer Sucks\n\nMost *real* web designers already know this. Most who don’t are generally either amateurs or are way, *way* behind the times. You’d think that with all of the money, power, and research and development resources Microsoft has, that they could produce a web browser better than crap. Apparently I’m mistaken.\n\n## Langridge Image Replacement\n\nI’ve been using the [LIR]({{% wayback \"http://www.kryogenix.org/code/browser/lir/\" %}}) technique for swapping out text in favor of images for a while now. While no image replacement technique is perfect, LIR is better than the alternatives (namely [FIR]({{% wayback \"http://www.stopdesign.com/articles/replace_text/\" %}})). What I like about LIR is that is does not require any extra HTML “hooks” to pull it all off. I know that FIR requires additional `\u003cspan\u003e` tags.\n\nNow, here is some sample XHTML markup for your basic LIR method:\n\n```html\n\u003ch1 id=\"header\"\u003e\u003ca href=\"/\"\u003eSkyzyx.com\u003c/a\u003e\u003c/h1\u003e\n```\n\nSimple enough, right? We have a top-level heading (`\u003ch1\u003e`) that encloses a link (`\u003ca\u003e`). Got it? Cool.\n\nHere would be the CSS used to swap out the text in favor of an image:\n\n```css\nh1#header, h1#header a {\n    display:block;\n    margin:0px;\n    padding: 0px;\n    overflow: hidden;\n    width:710px;\n    height: 80px;\n}\n\nh1#header a {\n    padding: 80px 0 0 0;\n    background: transparent url(\"/img/skyzyxcom.gif\") no-repeat top left;\n    height: 0px !important;\n    height /**/:80px;\n}\n```\n\nNow, what’s going on here? Well, the first rule sets up the parameters for both the `\u003ch1\u003e` tag and the `\u003ca\u003e` tag. Shared properties require less space than writing the same things twice, obviously. The second rule is only for the `\u003ca\u003e` element nested inside the `\u003ch1\u003e` element.\n\nStarting with the first rule, `display:block;` says that we want to make both tags block-level elements. Since `\u003ch1\u003e` already is, this really only effects `\u003ca\u003e`. Since you can’t apply `width` and `height` properties to inline elements, we need to set the inline `\u003ca\u003e` element to block-level.\n\nSetting the `margin` and `padding` to zero allows us to keep the box exactly the same size as the `width` and `height` — no more, no less — which is what we want. Since there is no `margin` or `padding` (as well as no `border`), Internet Explorer’s faulty box model issue doesn’t apply… yet.\n\nThe next property is `overflow:hidden;`. This says that any content inside the box (being the `\u003ch1\u003e` and `\u003ca\u003e` elements) that stretches outside the confines of the `width` and `height` will be hidden. That’s good, as that’s exactly what we want. But there is a slight problem here, as we will get to in a few minutes.\n\nLastly, we specify the `width` and the `height` that we want for the replacement image. At this point, you can still see the text, but we’ll get to that in a minute. We have now established the properties that the `\u003ch1\u003e` and the `\u003ca\u003e` have in common. Once again, Internet Explorer’s faulty box model issue has not come into effect yet, but it will… and we’ll be ready.\n\nIn the second rule (repeated from above):\n\n```css\nh1#header a {\n    padding: 80px 0 0 0;\n    background: transparent url(\"/img/skyzyxcom.gif\") no-repeat top left;\n    height: 0px !important;\n    height /**/:80px;\n}\n```\n\nThe first thing we do is overwrite the original value for the `padding` property with a new value. Note that this entire second rule only effects the `\u003ca\u003e` element, and NOT the `\u003ch1\u003e` element.\n\nHere’s the concept behind this method: The correct box model (properly implemented in Gecko-based browsers like Mozilla and Netscape 6/7, as well as Opera) says that if you give an element a certain width, then that will be the width of the “content”.\n\n**Padding** is empty space *inside* the box. If padding is applied, it will constrict the amount of room inside the box, which is good for giving space between text and any borders that may be around the box.\n\n**Margin** is empty space *outside* the box. If margin is applied, it pushes outside elements away from the box, which is good if you want an element to be a certain distance away from another element. As an example, the content of this page has 50 pixels of margin on the top as well as on the bottom. That’s why you can see the grid behind it.\n\n**Border** is exactly that… a border around the width of the box. You can set a border of 1 pixel, 2 pixels, 3 pixels, 50 pixels, or whatever you want. This all takes up space, and this space is taken *outside* the box, but before the margin is applied.\n\nApparently, according to [these sources]({{% wayback \"http://www.codingforums.com/showthread.php?s=\u0026threadid=30318\" %}}), although the box is made up of the content width + the padding, the actual `width` only applies to the content itself. This doesn’t make much sense to me, but that’s just how it is anyways.\n\nThe problem with the Internet Explorer box model is that instead of having the `width`all of that stuff (content+padding+border+margin) has to fit inside the width. Oh no! (By the way, when I say “width”, the same issue occurs with the “height”.)\n\nThe way that this method works is that we create a “box”, eliminate all `height`, apply `padding` to hold the box open (to push the content text down below the border of the box), use `overflow` to hide that text, and then set a `background` image to it. Simple really.\n\nBut as I always say, “one horrible CSS rendering bug deserves another” (well, I don’t really *always* say that, but that’s what we’re going to do here).\n\nBack to our regularly scheduled program, next we set the `padding-top` property to the height that we want to end up with, while setting the other paddings to zero. This will be critical to pulling this off.\n\nAfter that, we address the `background` property. Here, we’re combining several `background` rules at once. We want the background color to be transparent, we want the background image to display (don’t use quotes for this, as IE5/Mac will crash), set the background to not repeat, and have it begin in the top-left corner.\n\nThis next part is what brings it all together. Internet Explorer 5.x doesn’t properly implement `!important`, so when other browsers see the `!important`, they’ll not allow the next line to overwrite this line.\n\nWe want to set the height to zero. Why? Because setting it to zero means that everything inside of it will be hidden because of the `overflow` property we set earlier. And since we set padding inside it, the element is held open by this padding… which gives it plenty of room to show the background image.\n\nThe last part of this whole equation is the box model fix for Internet Explorer 5.x. In this example, we use `height /**/:80px;`. IE5.x doesn’t properly handle `!important`, so when it comes across this line, it re-adjusts itself. Since IE5.x needs everything to be within the width (or height in this case), this fixes it’s problem.\n\nInternet Explorer 6.0 also doesn’t understand `!important`, but it does have a parsing bug that this last line utilizes, so that IE6 never even sees it. Pretty nifty, huh?\n\n## Next…\n\nNow, I explained all of that so that this next part would make sense. This method can be used with any element. Normally it’ll be an h-something tag, but what if you wanted to use a `\u003cdiv\u003e` tag? Well, it’d work just fine, except in IE5/Mac. [Ethan Marcotte]({{% wayback \"http://sidesh0w.com/weblog/2003/09/16/css_only_mostly_stupid/\" %}}) has shown us how to fix this.\n\n```css\nh1#header, h1#header a {\n    display:block;\n    margin:0px;\n    padding: 0px;\n    overflow: hidden;\n    width:710px;\n    height: 80px;\n    clip:rect(0, 710px, 80px, 0);\n}\n\nh1#header a {\n    padding: 80px 0 0 0;\n    background: transparent url(\"/img/skyzyxcom.gif\") no-repeat top left;\n    height: 0px !important;\n    height /**/:80px;\n}\n```\n\nRepetitive to be sure, but it works just great. However, there’s still a slight problem with Internet Explorer. This is a quirk that I noticed just recently in Internet Explorer 6.0, and was able to verify as bugs in [earlier versions of Internet Explorer](/archives/000094.php). For whatever reason, tiny bits of the tops of the letters peek up higher than they’re supposed to.\n\nAfter looking around for information, I came across a site that said to set a negative indent for the text inside the link. So that’s what I did.\n\n```css\nh1#header, h1#header a {\n    display:block;\n    margin:0px;\n    padding: 0px;\n    overflow: hidden;\n    width:710px;\n    height: 80px;\n    clip:rect(0, 710px, 80px, 0);\n}\n\nh1#header a {\n    padding: 80px 0 0 0;\n    background: transparent url(\"/img/skyzyxcom.gif\") no-repeat top left;\n    text-indent: -1000em;\n    height: 0px !important;\n    height /**/:80px;\n}\n```\n\nIt works! Great! Now I’m off to the ne— wait a minute. What happened to the image in Internet Explorer 5.0? Where’d it go? Oh no! So, I got rid of the `text-indent` property, and took a look again. The image was back. Apparently, the `text-indent` property also moves the background image in IE 5.0. 4.01 and 5.5 get it right, but 5.0 screws it up. Sheesh!\n\nI spent a few more minutes working with it, and decided to try something. In the first rule, the one that included both the `\u003ch1\u003e` and the `\u003ca\u003e`, we set the following property: `overflow:hidden;`. And since the `\u003ca\u003e` is nested inside the `\u003ch1\u003e`, if the `\u003ca\u003e` element is taller than the `\u003ch1\u003e` element, then the extra height will be hidden! Sure enough, it worked.\n\nAfter getting rid of the `text-indent` property, I added 10 pixels to the height of the `\u003ca\u003e` element. Here was the final chunk of CSS code:\n\n```css\nh1#header, h1#header a {\n    display:block;\n    margin:0px;\n    padding: 0px;\n    overflow: hidden;\n    width:710px;\n    height: 80px;\n    clip:rect(0, 710px, 80px, 0);\n}\n\nh1#header a {\n    padding: 90px 0 0 0;\n    background: transparent url(\"/img/skyzyxcom.gif\") no-repeat top left;\n    height: 0px !important;\n    height /**/:90px;\n}\n```\n\nKids, don’t try this at home.\n"},
    "links": {
        "prev": {"title": "Lots of RSS-Related Changes", "permalink": "https://ryanparman.com/posts/2003/lots-of-rss-related-changes/"},
        "next": {"title": "Weird IE Rendering Bug Fixed", "permalink": "https://ryanparman.com/posts/2003/wierd-ie-rendering-bug-fixed/"},
        "ignore": "me"
    }
}

}
