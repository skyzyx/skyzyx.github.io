{
    "data": {
    "kind": "page",
    "title": "To Infinity And Beyond!",
    "description": "",
    "summary": {
        "content": "I’ve discovered something cool about JavaScript… not something useful, but something cool. I’ve discovered the end of the rainbow, or at least the Math object. I was sitting at home in my underwear eating Cheetos® and watching Cartoon Network this past Saturday, when something dawned on me. I recalled a conversation I had with my best frind about 8 years ago about the Mac’s 256, Thousands, and Millions of colors versus Windows 8, 16, and 24-bit color. He was saying that he was excited because he’d pushed his Windows 95 computer to display 16.",
        "isTruncated": true
    },
    "published": "2003-10-03T01:35:19Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2003/to-infinity-and-beyond/",
    "relativePermalink": "/posts/2003/to-infinity-and-beyond/",
    "aliases": ["/2003/10/02/to-infinity-and-beyond/"],
    "images": [],
    "videos": [],
    "categories": ["Tech Life"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 437,
        "readingTime": "3 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2003/20031003-to-infinity-and-beyond.md",
        "logicalName": "20031003-to-infinity-and-beyond.md",
        "translationBaseName": "20031003-to-infinity-and-beyond",
        "baseFileName": "20031003-to-infinity-and-beyond",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2003/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI’ve discovered something cool about JavaScript… not something \u003cem\u003euseful\u003c/em\u003e, but something \u003cem\u003ecool\u003c/em\u003e. I’ve discovered the end of the rainbow, or at least the Math object.\u003c/p\u003e\n\u003cp\u003eI was sitting at home in my underwear eating \u003ca href=\"https://web.archive.org/web/20031003013519/http://www.cheetos.com\"\u003eCheetos®\u003c/a\u003e and watching \u003ca href=\"https://web.archive.org/web/20031003013519/http://www.cartoonnetwork.com\"\u003eCartoon Network\u003c/a\u003e this past Saturday, when something dawned on me. I recalled a conversation I had with my best frind about 8 years ago about the Mac’s 256, Thousands, and Millions of colors versus Windows 8, 16, and 24-bit color. He was saying that he was excited because he’d pushed his \u003ca href=\"https://web.archive.org/web/20031003013519/http://www.microsoft.com/windows95/\"\u003eWindows 95\u003c/a\u003e computer to display 16.7 million colors.\u003c/p\u003e\n\u003cp\u003eIt was Saturday when the obvious struck me. Mac OS’s “Millions” of colors is equal to 16,777,216 colors, which is equal to Windows’ 24-bit color, because in binary, 111111111111111111111111 is equal to 16,777,216 in decimal. Duh!\u003c/p\u003e\n\u003cp\u003eFor the next few hours, my brain was into binary. I licked the cheese powder off my fingers, turned off the TV, put some pants on, and sat down at my computer. A few months ago, I wrote a \u003ca href=\"/scripts/convert.php\"\u003eNumber Conversion Object\u003c/a\u003e that is able to convert between Decimal (base 10) and Binary (base 2). I decided to put it to use.\u003c/p\u003e\n\u003cp\u003eFrom there, my mind wandered into video games. Nintendo was 8-bit (256 colors), Super Nintendo and Sega Genesis were 16-bit (65,536 colors), Sony Playstation and Sega Saturn were 32-bit (4,294,967,296 colors). JavaScript’s Math object gets a little flaky if the numbers get too big. It’ll hold the places with zeroes. I went ahead with the next calculations. Atari Jaguar and Nintendo 64 were 64-bit (18,446,744,073,709,552,000 colors). I don’t even know how many “-illions” that is.\u003c/p\u003e\n\u003cp\u003eCurrent video game systems are 128-bit. That translates to 3.402823669209385 × 10³⁸. That’s a freakin’ big number. Then I began thinking about encryption. Most browsers have 128-bit encryption. Some security applications have 256-bit encryption. I haven’t heard of 512-bit encryption, but I’m sure it’s out there.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e256-bit:\u003c/strong\u003e 1.157920892373162 × 10⁷⁷\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003e512-bit:\u003c/strong\u003e 1.3407807929942597 × 10¹⁵⁴\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eWOW! Those numbers are huge! In binary, 512 bits is written as 512 “1’s” right next to each other. And 10¹⁵⁴ is a 1 with 155 zeroes behind it. A billion only has 9 zeroes behind it.\u003c/p\u003e\n\u003cp\u003eThen I decided to push it one step further, and I discovered something particularly interesting. What you will see in the next paragraph is \u003cem\u003eyour browser’s rendering\u003c/em\u003e of the number that JavaScript produces for a 1024-bit number. Here we go…\u003c/p\u003e\n\u003cp\u003eI feel like I’ve discovered the end of the universe or something. I’m having a tough time comprehending how big that number actually is.\u003c/p\u003e\n\u003cp\u003eAs I said earlier, it’s not very \u003cem\u003euseful\u003c/em\u003e, but it is kinda cool.\u003c/p\u003e\n",
        "plain":"I’ve discovered something cool about JavaScript… not something useful, but something cool. I’ve discovered the end of the rainbow, or at least the Math object.\nI was sitting at home in my underwear eating Cheetos® and watching Cartoon Network this past Saturday, when something dawned on me. I recalled a conversation I had with my best frind about 8 years ago about the Mac’s 256, Thousands, and Millions of colors versus Windows 8, 16, and 24-bit color. He was saying that he was excited because he’d pushed his Windows 95 computer to display 16.7 million colors.\nIt was Saturday when the obvious struck me. Mac OS’s “Millions” of colors is equal to 16,777,216 colors, which is equal to Windows’ 24-bit color, because in binary, 111111111111111111111111 is equal to 16,777,216 in decimal. Duh!\nFor the next few hours, my brain was into binary. I licked the cheese powder off my fingers, turned off the TV, put some pants on, and sat down at my computer. A few months ago, I wrote a Number Conversion Object that is able to convert between Decimal (base 10) and Binary (base 2). I decided to put it to use.\nFrom there, my mind wandered into video games. Nintendo was 8-bit (256 colors), Super Nintendo and Sega Genesis were 16-bit (65,536 colors), Sony Playstation and Sega Saturn were 32-bit (4,294,967,296 colors). JavaScript’s Math object gets a little flaky if the numbers get too big. It’ll hold the places with zeroes. I went ahead with the next calculations. Atari Jaguar and Nintendo 64 were 64-bit (18,446,744,073,709,552,000 colors). I don’t even know how many “-illions” that is.\nCurrent video game systems are 128-bit. That translates to 3.402823669209385 × 10³⁸. That’s a freakin’ big number. Then I began thinking about encryption. Most browsers have 128-bit encryption. Some security applications have 256-bit encryption. I haven’t heard of 512-bit encryption, but I’m sure it’s out there.\n 256-bit: 1.157920892373162 × 10⁷⁷ 512-bit: 1.3407807929942597 × 10¹⁵⁴  WOW! Those numbers are huge! In binary, 512 bits is written as 512 “1’s” right next to each other. And 10¹⁵⁴ is a 1 with 155 zeroes behind it. A billion only has 9 zeroes behind it.\nThen I decided to push it one step further, and I discovered something particularly interesting. What you will see in the next paragraph is your browser’s rendering of the number that JavaScript produces for a 1024-bit number. Here we go…\nI feel like I’ve discovered the end of the universe or something. I’m having a tough time comprehending how big that number actually is.\nAs I said earlier, it’s not very useful, but it is kinda cool.\n",
        "source":"\nI’ve discovered something cool about JavaScript… not something *useful*, but something *cool*. I’ve discovered the end of the rainbow, or at least the Math object.\n\nI was sitting at home in my underwear eating [Cheetos®]({{% wayback \"http://www.cheetos.com\" %}}) and watching [Cartoon Network]({{% wayback \"http://www.cartoonnetwork.com\" %}}) this past Saturday, when something dawned on me. I recalled a conversation I had with my best frind about 8 years ago about the Mac’s 256, Thousands, and Millions of colors versus Windows 8, 16, and 24-bit color. He was saying that he was excited because he’d pushed his [Windows 95]({{% wayback \"http://www.microsoft.com/windows95/\" %}}) computer to display 16.7 million colors.\n\nIt was Saturday when the obvious struck me. Mac OS’s “Millions” of colors is equal to 16,777,216 colors, which is equal to Windows’ 24-bit color, because in binary, 111111111111111111111111 is equal to 16,777,216 in decimal. Duh!\n\nFor the next few hours, my brain was into binary. I licked the cheese powder off my fingers, turned off the TV, put some pants on, and sat down at my computer. A few months ago, I wrote a [Number Conversion Object](/scripts/convert.php) that is able to convert between Decimal (base 10) and Binary (base 2). I decided to put it to use.\n\nFrom there, my mind wandered into video games. Nintendo was 8-bit (256 colors), Super Nintendo and Sega Genesis were 16-bit (65,536 colors), Sony Playstation and Sega Saturn were 32-bit (4,294,967,296 colors). JavaScript’s Math object gets a little flaky if the numbers get too big. It’ll hold the places with zeroes. I went ahead with the next calculations. Atari Jaguar and Nintendo 64 were 64-bit (18,446,744,073,709,552,000 colors). I don’t even know how many “-illions” that is.\n\nCurrent video game systems are 128-bit. That translates to 3.402823669209385 × 10³⁸. That’s a freakin’ big number. Then I began thinking about encryption. Most browsers have 128-bit encryption. Some security applications have 256-bit encryption. I haven’t heard of 512-bit encryption, but I’m sure it’s out there.\n\n* **256-bit:** 1.157920892373162 × 10⁷⁷\n* **512-bit:** 1.3407807929942597 × 10¹⁵⁴\n\nWOW! Those numbers are huge! In binary, 512 bits is written as 512 “1’s” right next to each other. And 10¹⁵⁴ is a 1 with 155 zeroes behind it. A billion only has 9 zeroes behind it.\n\nThen I decided to push it one step further, and I discovered something particularly interesting. What you will see in the next paragraph is *your browser’s rendering* of the number that JavaScript produces for a 1024-bit number. Here we go…\n\nI feel like I’ve discovered the end of the universe or something. I’m having a tough time comprehending how big that number actually is.\n\nAs I said earlier, it’s not very *useful*, but it is kinda cool.\n"},
    "links": {
        "prev": {"title": "Season Premiere of Alias", "permalink": "https://ryanparman.com/posts/2003/season-premiere-of-alias/"},
        "next": {"title": "Slickly Packaged Garbage", "permalink": "https://ryanparman.com/posts/2003/slickly-packaged-garbage/"},
        "ignore": "me"
    }
}

}
