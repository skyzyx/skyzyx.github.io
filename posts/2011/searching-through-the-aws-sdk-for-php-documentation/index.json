{
    "data": {
    "kind": "page",
    "title": "Searching through the AWS SDK for PHP documentation",
    "description": "",
    "summary": {
        "content": "Although the AWS SDK for PHP is growing as fast as Amazon’s breadth of web services, it should still be easy to find the information that you need in order to develop. This is a goal that I take very seriously. Back in 2005, I took a job with Stryker Endoscopy as a member of their Internal User Experience team, where our focus was on Usability and User-Centered Design (UCD). (I take no responsibility for how bad their public website is!",
        "isTruncated": true
    },
    "published": "2011-02-28T02:15:20Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2011/searching-through-the-aws-sdk-for-php-documentation/",
    "relativePermalink": "/posts/2011/searching-through-the-aws-sdk-for-php-documentation/",
    "aliases": ["/2011/02/27/searching-through-the-aws-sdk-for-php-documentation/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 1141,
        "readingTime": "6 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2011/20110228-searching-through-the-aws-sdk-for-php-documentation.md",
        "logicalName": "20110228-searching-through-the-aws-sdk-for-php-documentation.md",
        "translationBaseName": "20110228-searching-through-the-aws-sdk-for-php-documentation",
        "baseFileName": "20110228-searching-through-the-aws-sdk-for-php-documentation",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2011/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#i--quality\"\u003eI ♥ Quality\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#making-it-better\"\u003eMaking It Better\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#searching-the-aws-sdk-for-php-documentation-from-google-chrome\"\u003eSearching the AWS SDK for PHP documentation from Google Chrome\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#searching-the-aws-sdk-for-php-documentation-from-mozilla-firefox\"\u003eSearching the AWS SDK for PHP documentation from Mozilla Firefox\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#searching-the-aws-sdk-for-php-documentation-from-alfred\"\u003eSearching the AWS SDK for PHP documentation from Alfred\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#the-end\"\u003eThe End\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eAlthough the AWS SDK for PHP is growing as fast as Amazon’s breadth of web services, it should still be easy to find the information that you need in order to develop. This is a goal that I take very seriously.\u003c/p\u003e\n\u003cp\u003eBack in 2005, I took a job with \u003ca href=\"https://web.archive.org/web/20110228021520/http://stryker.com/endoscopy/\"\u003eStryker Endoscopy\u003c/a\u003e as a member of their Internal User Experience team, where our focus was on Usability and User-Centered Design (UCD). (I take no responsibility for how bad their public website is!) I gained some invaluable insight into the usability process and the principles behind UCD that I’ve carried with me over the years as I’ve migrated from UX and Front-End Development toward building Software Development Kits (SDKs) for infrastructure services. The most valuable of these is this:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYou can have all of the greatest functionality in the world. But if nobody can use it, what’s the point?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI’m tempted to launch into a tirade against the stunning ignorance of software engineers who think we UX people “make it look pretty.” \u003cem\u003eA Photoshop mockup does not a user experience make.\u003c/em\u003e Those same \u003cem\u003ewoefully\u003c/em\u003e uneducated people don’t understand how much science is involved in producing high-quality user interfaces — nor do they understand that if a person can’t figure out how to use the software, it’s not a problem with the person… it’s a problem with the software. As I’ve shifted toward producing developer-facing software, I’ve always maintained the notion that “developers are people too.” The administration and developer tools of \u003ca href=\"https://web.archive.org/web/20110228021520/http://reardencommerce.com\"\u003esome web applications\u003c/a\u003e are a \u003cem\u003ecrime against humanity\u003c/em\u003e. Of course, that’s what happens when you make the mistake of thinking that corporate stakeholders are your customers instead of \u003cem\u003eReal Human Beings™\u003c/em\u003e. [I’m starting to rant. Let me switch gears.]\u003c/p\u003e\n\u003ch2 id=\"i--quality\"\u003eI ♥ Quality\u003c/h2\u003e\n\u003cp\u003eI believe that documentation is equally — if not more — important as the code itself. It’s a critical part of the user (i.e., developer) experience right up there with API design and SDK design. When I was building \u003cem\u003eCloudFusion\u003c/em\u003e (the pre-cursor to the AWS SDK for PHP), I spent quite a bit of time trying to find a high-quality documentation tool that delivered what I believed my users deserved. After searching for a good tool over the course of 2–3 years, I finally broke down and wrote my own tool that produced the kind of high-quality documentation that my users deserve. (That project is called “Vanity”, and is currently incubating).\u003c/p\u003e\n\u003ch2 id=\"making-it-better\"\u003eMaking It Better\u003c/h2\u003e\n\u003cp\u003eWith the release of the \u003ca href=\"https://web.archive.org/web/20110228021520/https://aws.amazon.com/releasenotes/release-aws-sdk-for-php-1-2-4/\"\u003eAWS SDK for PHP 1.2.4\u003c/a\u003e, we really tried to raise the bar for our documentation. Here are some of the features that we now provide:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eRewrote the in-file documentation blocks to use the more common and better supported \u003ca href=\"https://web.archive.org/web/20110228021520/http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_phpDocumentor.quickstart.pkg.html#coding.phpcomments\"\u003ePHPDoc\u003c/a\u003e format instead of the \u003ca href=\"https://web.archive.org/web/20110228021520/http://naturaldocs.org/documenting.html\"\u003eNaturalDocs\u003c/a\u003e format we used previously.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eComplete API reference documentation for all methods and classes.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOne or more usage examples for nearly every single method.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUsage examples are generated from real \u003ca href=\"https://web.archive.org/web/20110228021520/http://qa.php.net/write-test.php\"\u003ePHPT\u003c/a\u003e tests, ensuring that the sample code actually works.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eA breakdown of all complex parameters so that you can see what all of the possible options are.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe API reference documentation is available in HTML, raw XML, raw JSON and Serialized PHP formats.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOffline documentation can be downloaded as \u003ccode\u003e.zip\u003c/code\u003e, \u003ccode\u003e.gz\u003c/code\u003e and \u003ccode\u003e.bz2\u003c/code\u003e archives.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIntelligent search along with a class browser.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eView the source code of any method in the SDK.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe file that a given method is defined in.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLinks out to the \u003ca href=\"https://web.archive.org/web/20110228021520/https://github.com/amazonwebservices/aws-sdk-for-php\"\u003eGitHub repository\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eComplete inheritance chains and interface conformity.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMethods that are related to the one you’re looking at.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLinks out to \u003ca href=\"https://web.archive.org/web/20110228021520/http://php.net\"\u003ePHP.net\u003c/a\u003e, where appropriate.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eInstant feedback, as in the ability to point out an error or some other issue directly on a page itself, instead of needing to hunt for a feedback link somewhere else in the site.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe ability to link directly to a search query.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt’s this last feature that I’ve come to talk about today — the ability to easily search the docs from tools you already use.\u003c/p\u003e\n\u003ch2 id=\"searching-the-aws-sdk-for-php-documentation-from-google-chrome\"\u003eSearching the AWS SDK for PHP documentation from Google Chrome\u003c/h2\u003e\n\u003cp\u003eFor this, we need to tell Chrome to use the following pattern when searching the API reference.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-plain\" data-lang=\"plain\"\u003ehttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eOpen the Google Chrome preferences panel.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome1.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the \u003cem\u003eSearch\u003c/em\u003e section, click \u003cem\u003eManage Search Engines…\u003c/em\u003e. This will show the \u003cem\u003eSearch Engines\u003c/em\u003e panel.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome2.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the \u003cem\u003eOther search engines\u003c/em\u003e section, fill out the fields as shown below. The URL in the last field is the one I posted above.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome3.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOpen a new tab. Typing \u0026ldquo;\u003cem\u003eaws[space]\u003c/em\u003e\u0026rdquo; will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome4.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThis will open the SDK API reference documentation. Your search terms will be pre-filled in the search field on the left. You can navigate through the documentation from there!\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome5.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"searching-the-aws-sdk-for-php-documentation-from-mozilla-firefox\"\u003eSearching the AWS SDK for PHP documentation from Mozilla Firefox\u003c/h2\u003e\n\u003cp\u003eThis process is very similar to Google Chrome. For this, we need to tell Firefox to use the following pattern when searching the API reference.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-plain\" data-lang=\"plain\"\u003ehttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eOpen the Firefox Bookmarks Manager by choosing \u003cem\u003eBookmarks \u0026gt; Show All Bookmarks\u003c/em\u003e from the menubar. Once that’s open, click the gear icon and create a new bookmark.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox1.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFirefox will present a \u003cem\u003eNew Bookmark\u003c/em\u003e dialog.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox2.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFill out the fields as shown below. The URL in the \u003cem\u003eLocation\u003c/em\u003e field is the one I posted above. Firefox calls this a \u003cem\u003eKeyword Search\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox3.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOpen a new tab. Typing \u0026ldquo;\u003cem\u003eaws[space]\u003c/em\u003e\u0026rdquo; will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox4.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThis will open the SDK API reference documentation. Your search terms will be pre-filled in the search field on the left. You can navigate through the documentation from there!\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox5.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"searching-the-aws-sdk-for-php-documentation-from-alfred\"\u003eSearching the AWS SDK for PHP documentation from Alfred\u003c/h2\u003e\n\u003cp\u003eThis approach is my personal favorite, but is specific to \u003ca href=\"https://web.archive.org/web/20110228021520/http://alfredapp.com\"\u003eAlfred\u003c/a\u003e, an app launcher for Mac OS X. For this, we need to tell Alfred to use the following pattern when searching the API reference.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-plain\" data-lang=\"plain\"\u003ehttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAlternatively, you can use the \u003ca href=\"alfredapp://customsearch/AWS%20SDK%20for%20PHP/sdk/utf8/url=http://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%7Bquery%7D\"\u003efollowing URL\u003c/a\u003e to accomplish what we’re going to do here:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-plain\" data-lang=\"plain\"\u003ealfredapp://customsearch/AWS%20SDK%20for%20PHP/aws/utf8/url=http://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eOpen the Alfred preferences, and choose \u003cem\u003eCustom Searches\u003c/em\u003e from the sidebar. Once there, click the plus symbol at the bottom to add a new custom search.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred1.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFill out the fields as shown below. The URL in the \u003cem\u003eSearch URL\u003c/em\u003e field is the one I posted above. Click \u003cem\u003eAdd\u003c/em\u003e when you’re done.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred2.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eClose the preferences, and bring up Alfred! Typing \u0026ldquo;\u003cem\u003eaws[space]\u003c/em\u003e\u0026rdquo; will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred3.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"the-end\"\u003eThe End\u003c/h2\u003e\n\u003cp\u003eI hope that this tutorial helps make your use of the AWS SDK for PHP even easier! Are there some other cool uses for the SDK docs that I might not be aware of? Let me know in the comments!\u003c/p\u003e\n",
        "plain":"Although the AWS SDK for PHP is growing as fast as Amazon’s breadth of web services, it should still be easy to find the information that you need in order to develop. This is a goal that I take very seriously.\nBack in 2005, I took a job with Stryker Endoscopy as a member of their Internal User Experience team, where our focus was on Usability and User-Centered Design (UCD). (I take no responsibility for how bad their public website is!) I gained some invaluable insight into the usability process and the principles behind UCD that I’ve carried with me over the years as I’ve migrated from UX and Front-End Development toward building Software Development Kits (SDKs) for infrastructure services. The most valuable of these is this:\n You can have all of the greatest functionality in the world. But if nobody can use it, what’s the point?\n I’m tempted to launch into a tirade against the stunning ignorance of software engineers who think we UX people “make it look pretty.” A Photoshop mockup does not a user experience make. Those same woefully uneducated people don’t understand how much science is involved in producing high-quality user interfaces — nor do they understand that if a person can’t figure out how to use the software, it’s not a problem with the person… it’s a problem with the software. As I’ve shifted toward producing developer-facing software, I’ve always maintained the notion that “developers are people too.” The administration and developer tools of some web applications are a crime against humanity. Of course, that’s what happens when you make the mistake of thinking that corporate stakeholders are your customers instead of Real Human Beings™. [I’m starting to rant. Let me switch gears.]\nI ♥ Quality I believe that documentation is equally — if not more — important as the code itself. It’s a critical part of the user (i.e., developer) experience right up there with API design and SDK design. When I was building CloudFusion (the pre-cursor to the AWS SDK for PHP), I spent quite a bit of time trying to find a high-quality documentation tool that delivered what I believed my users deserved. After searching for a good tool over the course of 2–3 years, I finally broke down and wrote my own tool that produced the kind of high-quality documentation that my users deserve. (That project is called “Vanity”, and is currently incubating).\nMaking It Better With the release of the AWS SDK for PHP 1.2.4, we really tried to raise the bar for our documentation. Here are some of the features that we now provide:\n  Rewrote the in-file documentation blocks to use the more common and better supported PHPDoc format instead of the NaturalDocs format we used previously.\n  Complete API reference documentation for all methods and classes.\n  One or more usage examples for nearly every single method.\n  Usage examples are generated from real PHPT tests, ensuring that the sample code actually works.\n  A breakdown of all complex parameters so that you can see what all of the possible options are.\n  The API reference documentation is available in HTML, raw XML, raw JSON and Serialized PHP formats.\n  Offline documentation can be downloaded as .zip, .gz and .bz2 archives.\n  Intelligent search along with a class browser.\n  View the source code of any method in the SDK.\n  The file that a given method is defined in.\n  Links out to the GitHub repository.\n  Complete inheritance chains and interface conformity.\n  Methods that are related to the one you’re looking at.\n  Links out to PHP.net, where appropriate.\n  Instant feedback, as in the ability to point out an error or some other issue directly on a page itself, instead of needing to hunt for a feedback link somewhere else in the site.\n  The ability to link directly to a search query.\n  It’s this last feature that I’ve come to talk about today — the ability to easily search the docs from tools you already use.\nSearching the AWS SDK for PHP documentation from Google Chrome For this, we need to tell Chrome to use the following pattern when searching the API reference.\nhttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%s   Open the Google Chrome preferences panel.\n    In the Search section, click Manage Search Engines…. This will show the Search Engines panel.\n    In the Other search engines section, fill out the fields as shown below. The URL in the last field is the one I posted above.\n    Open a new tab. Typing \u0026ldquo;aws[space]\u0026rdquo; will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\n    This will open the SDK API reference documentation. Your search terms will be pre-filled in the search field on the left. You can navigate through the documentation from there!\n    Searching the AWS SDK for PHP documentation from Mozilla Firefox This process is very similar to Google Chrome. For this, we need to tell Firefox to use the following pattern when searching the API reference.\nhttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%s   Open the Firefox Bookmarks Manager by choosing Bookmarks \u0026gt; Show All Bookmarks from the menubar. Once that’s open, click the gear icon and create a new bookmark.\n    Firefox will present a New Bookmark dialog.\n    Fill out the fields as shown below. The URL in the Location field is the one I posted above. Firefox calls this a Keyword Search.\n    Open a new tab. Typing \u0026ldquo;aws[space]\u0026rdquo; will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\n    This will open the SDK API reference documentation. Your search terms will be pre-filled in the search field on the left. You can navigate through the documentation from there!\n    Searching the AWS SDK for PHP documentation from Alfred This approach is my personal favorite, but is specific to Alfred, an app launcher for Mac OS X. For this, we need to tell Alfred to use the following pattern when searching the API reference.\nhttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query} Alternatively, you can use the following URL to accomplish what we’re going to do here:\nalfredapp://customsearch/AWS%20SDK%20for%20PHP/aws/utf8/url=http://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query}   Open the Alfred preferences, and choose Custom Searches from the sidebar. Once there, click the plus symbol at the bottom to add a new custom search.\n    Fill out the fields as shown below. The URL in the Search URL field is the one I posted above. Click Add when you’re done.\n    Close the preferences, and bring up Alfred! Typing \u0026ldquo;aws[space]\u0026rdquo; will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\n    The End I hope that this tutorial helps make your use of the AWS SDK for PHP even easier! Are there some other cool uses for the SDK docs that I might not be aware of? Let me know in the comments!\n",
        "source":"\nAlthough the AWS SDK for PHP is growing as fast as Amazon’s breadth of web services, it should still be easy to find the information that you need in order to develop. This is a goal that I take very seriously.\n\nBack in 2005, I took a job with [Stryker Endoscopy]({{% wayback \"http://stryker.com/endoscopy/\" %}}) as a member of their Internal User Experience team, where our focus was on Usability and User-Centered Design (UCD). (I take no responsibility for how bad their public website is!) I gained some invaluable insight into the usability process and the principles behind UCD that I’ve carried with me over the years as I’ve migrated from UX and Front-End Development toward building Software Development Kits (SDKs) for infrastructure services. The most valuable of these is this:\n\n\u003e You can have all of the greatest functionality in the world. But if nobody can use it, what’s the point?\n\nI’m tempted to launch into a tirade against the stunning ignorance of software engineers who think we UX people “make it look pretty.” *A Photoshop mockup does not a user experience make.* Those same *woefully* uneducated people don’t understand how much science is involved in producing high-quality user interfaces — nor do they understand that if a person can’t figure out how to use the software, it’s not a problem with the person… it’s a problem with the software. As I’ve shifted toward producing developer-facing software, I’ve always maintained the notion that “developers are people too.” The administration and developer tools of [some web applications]({{% wayback \"http://reardencommerce.com\" %}}) are a *crime against humanity*. Of course, that’s what happens when you make the mistake of thinking that corporate stakeholders are your customers instead of *Real Human Beings™*. \\[I’m starting to rant. Let me switch gears.\\]\n\n## I ♥ Quality\n\nI believe that documentation is equally — if not more — important as the code itself. It’s a critical part of the user (i.e., developer) experience right up there with API design and SDK design. When I was building *CloudFusion* (the pre-cursor to the AWS SDK for PHP), I spent quite a bit of time trying to find a high-quality documentation tool that delivered what I believed my users deserved. After searching for a good tool over the course of 2–3 years, I finally broke down and wrote my own tool that produced the kind of high-quality documentation that my users deserve. (That project is called “Vanity”, and is currently incubating).\n\n## Making It Better\n\nWith the release of the [AWS SDK for PHP 1.2.4]({{% wayback \"https://aws.amazon.com/releasenotes/release-aws-sdk-for-php-1-2-4/\" %}}), we really tried to raise the bar for our documentation. Here are some of the features that we now provide:\n\n* Rewrote the in-file documentation blocks to use the more common and better supported [PHPDoc]({{% wayback \"http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_phpDocumentor.quickstart.pkg.html#coding.phpcomments\" %}}) format instead of the [NaturalDocs]({{% wayback \"http://naturaldocs.org/documenting.html\" %}}) format we used previously.\n\n* Complete API reference documentation for all methods and classes.\n\n* One or more usage examples for nearly every single method.\n\n* Usage examples are generated from real [PHPT]({{% wayback \"http://qa.php.net/write-test.php\" %}}) tests, ensuring that the sample code actually works.\n\n* A breakdown of all complex parameters so that you can see what all of the possible options are.\n\n* The API reference documentation is available in HTML, raw XML, raw JSON and Serialized PHP formats.\n\n* Offline documentation can be downloaded as `.zip`, `.gz` and `.bz2` archives.\n\n* Intelligent search along with a class browser.\n\n* View the source code of any method in the SDK.\n\n* The file that a given method is defined in.\n\n* Links out to the [GitHub repository]({{% wayback \"https://github.com/amazonwebservices/aws-sdk-for-php\" %}}).\n\n* Complete inheritance chains and interface conformity.\n\n* Methods that are related to the one you’re looking at.\n\n* Links out to [PHP.net]({{% wayback \"http://php.net\" %}}), where appropriate.\n\n* Instant feedback, as in the ability to point out an error or some other issue directly on a page itself, instead of needing to hunt for a feedback link somewhere else in the site.\n\n* The ability to link directly to a search query.\n\nIt’s this last feature that I’ve come to talk about today — the ability to easily search the docs from tools you already use.\n\n## Searching the AWS SDK for PHP documentation from Google Chrome\n\nFor this, we need to tell Chrome to use the following pattern when searching the API reference.\n\n```plain\nhttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%s\n```\n\n1. Open the Google Chrome preferences panel.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome1.png\"\u003e}}\n\n2. In the *Search* section, click *Manage Search Engines…*. This will show the *Search Engines* panel.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome2.png\"\u003e}}\n\n3. In the *Other search engines* section, fill out the fields as shown below. The URL in the last field is the one I posted above.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome3.png\"\u003e}}\n\n4. Open a new tab. Typing \"*aws\\[space\\]*\" will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome4.png\"\u003e}}\n\n5. This will open the SDK API reference documentation. Your search terms will be pre-filled in the search field on the left. You can navigate through the documentation from there!\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome5.png\"\u003e}}\n\n## Searching the AWS SDK for PHP documentation from Mozilla Firefox\n\nThis process is very similar to Google Chrome. For this, we need to tell Firefox to use the following pattern when searching the API reference.\n\n```plain\nhttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%s\n```\n\n1. Open the Firefox Bookmarks Manager by choosing *Bookmarks \u0026gt; Show All Bookmarks* from the menubar. Once that’s open, click the gear icon and create a new bookmark.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox1.png\"\u003e}}\n\n2. Firefox will present a *New Bookmark* dialog.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox2.png\"\u003e}}\n\n3. Fill out the fields as shown below. The URL in the *Location* field is the one I posted above. Firefox calls this a *Keyword Search*.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox3.png\"\u003e}}\n\n4. Open a new tab. Typing \"*aws\\[space\\]*\" will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox4.png\"\u003e}}\n\n5. This will open the SDK API reference documentation. Your search terms will be pre-filled in the search field on the left. You can navigate through the documentation from there!\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox5.png\"\u003e}}\n\n## Searching the AWS SDK for PHP documentation from Alfred\n\nThis approach is my personal favorite, but is specific to [Alfred]({{% wayback \"http://alfredapp.com\" %}}), an app launcher for Mac OS X. For this, we need to tell Alfred to use the following pattern when searching the API reference.\n\n```plain\nhttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query}\n```\n\nAlternatively, you can use the [following URL](alfredapp://customsearch/AWS%20SDK%20for%20PHP/sdk/utf8/url=http://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query}) to accomplish what we’re going to do here:\n\n```plain\nalfredapp://customsearch/AWS%20SDK%20for%20PHP/aws/utf8/url=http://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query}\n```\n\n1. Open the Alfred preferences, and choose *Custom Searches* from the sidebar. Once there, click the plus symbol at the bottom to add a new custom search.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred1.png\"\u003e}}\n\n2. Fill out the fields as shown below. The URL in the *Search URL* field is the one I posted above. Click *Add* when you’re done.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred2.png\"\u003e}}\n\n3. Close the preferences, and bring up Alfred! Typing \"*aws\\[space\\]*\" will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred3.png\"\u003e}}\n\n## The End\n\nI hope that this tutorial helps make your use of the AWS SDK for PHP even easier! Are there some other cool uses for the SDK docs that I might not be aware of? Let me know in the comments!\n"},
    "links": {
        "prev": {"title": "Creating iPhone ringtones with iTunes and QuickTime", "permalink": "https://ryanparman.com/posts/2011/creating-iphone-ringtones-with-itunes-and-quicktime/"},
        "next": {"title": "Death to Recruiters", "permalink": "https://ryanparman.com/posts/2011/death-to-recruiters/"},
        "ignore": "me"
    }
}

}
