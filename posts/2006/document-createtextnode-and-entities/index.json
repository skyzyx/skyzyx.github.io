{
    "data": {
    "kind": "page",
    "title": "document.createTextNode and entities",
    "description": "",
    "summary": {
        "content": "One problem that I’ve had when working with dynamic DOM nodes is the inability to use entities with document.createTextElement(). I’ve read suggestions about using utf–16/ucs–2 values, but how do you find them and how do you convert them? This led me on a journey to figure out how to handle this. I ended up digging through some TinyMCE source code, and found a gem of a function that I then added a ‘stupefy’ mode to. Here’s the code: function entity(str, mode) { var str = (str) ?",
        "isTruncated": true
    },
    "published": "2006-02-25T19:32:33Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2006/document-createtextnode-and-entities/",
    "relativePermalink": "/posts/2006/document-createtextnode-and-entities/",
    "aliases": ["/2006/02/25/document-createtextnode-and-entities/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 254,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2006/20060225-document-createtextnode-and-entities.md",
        "logicalName": "20060225-document-createtextnode-and-entities.md",
        "translationBaseName": "20060225-document-createtextnode-and-entities",
        "baseFileName": "20060225-document-createtextnode-and-entities",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2006/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eOne problem that I’ve had when working with dynamic DOM nodes is the inability to use entities with \u003ccode\u003edocument.createTextElement()\u003c/code\u003e. I’ve read suggestions about using utf–16/ucs–2 values, but how do you find them and how do you convert them? This led me on a journey to figure out how to handle this. I ended up digging through some \u003ca href=\"https://web.archive.org/web/20060225193233/http://tinymce.moxiecode.com/\"\u003eTinyMCE\u003c/a\u003e source code, and found a gem of a function that I then added a ‘stupefy’ mode to. Here’s the code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eentity\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e) {\n    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;string\u0026#39;\u003c/span\u003e;\n\n    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document.\u003cspan style=\"color:#a6e22e\"\u003ecreateElement\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;div\u0026#34;\u003c/span\u003e);\n    \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einnerHTML\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e;\n\n    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;numeric\u0026#39;\u003c/span\u003e) {\n        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026amp;#\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einnerHTML\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003echarCodeAt\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;;\u0026#39;\u003c/span\u003e;\n    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf16\u0026#39;\u003c/span\u003e) {\n        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eun\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einnerHTML\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003echarCodeAt\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003etoString\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e);\n\n        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eun\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e) {\n            \u003cspan style=\"color:#a6e22e\"\u003eun\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eun\u003c/span\u003e;\n        }\n\n        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\\u\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eun\u003c/span\u003e;\n    }\n\n    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einnerHTML\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eentity()\u003c/code\u003e has two parameters:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eentity:\u003c/strong\u003e is a string which can be either a named entity (») or a numeric entity (\u0026amp;#187;)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emode:\u003c/strong\u003e is an optional value that accepts ‘numeric’, ‘utf16’, or ‘string’. Defaults to ‘string’.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYou’d use it like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"color:#75715e\"\u003e// Normal mode\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document.\u003cspan style=\"color:#a6e22e\"\u003ecreateElement\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;div\u0026#39;\u003c/span\u003e);\n\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document.\u003cspan style=\"color:#a6e22e\"\u003ecreateTextNode\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Parent \u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eentity\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;»\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39; Child\u0026#39;\u003c/span\u003e);\n\u003cspan style=\"color:#a6e22e\"\u003ediv\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eappendChild\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e);\n\n\u003cspan style=\"color:#75715e\"\u003e// Stupefy mode\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The numeric entity for » is \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eentity\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;»\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;numeric\u0026#39;\u003c/span\u003e);\n\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eutf\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The UTF-16 entity for » is \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eentity\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;»\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf16\u0026#39;\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI hope this can help other people out there who’ve run into the same problem as many times as I have!\u003c/p\u003e\n",
        "plain":"One problem that I’ve had when working with dynamic DOM nodes is the inability to use entities with document.createTextElement(). I’ve read suggestions about using utf–16/ucs–2 values, but how do you find them and how do you convert them? This led me on a journey to figure out how to handle this. I ended up digging through some TinyMCE source code, and found a gem of a function that I then added a ‘stupefy’ mode to. Here’s the code:\nfunction entity(str, mode) { var str = (str) ? str : \u0026#39;\u0026#39;; var mode = (mode) ? mode : \u0026#39;string\u0026#39;; var e = document.createElement(\u0026#34;div\u0026#34;); e.innerHTML = str; if (mode === \u0026#39;numeric\u0026#39;) { return \u0026#39;\u0026amp;#\u0026#39; + e.innerHTML.charCodeAt(0) + \u0026#39;;\u0026#39;; } else if (mode === \u0026#39;utf16\u0026#39;) { var un = e.innerHTML.charCodeAt(0).toString(16); while (un.length \u0026lt; 4) { un = \u0026#34;0\u0026#34; + un; } return \u0026#34;\\\\u\u0026#34; + un; } return e.innerHTML; } entity() has two parameters:\n entity: is a string which can be either a named entity (») or a numeric entity (\u0026amp;#187;) mode: is an optional value that accepts ‘numeric’, ‘utf16’, or ‘string’. Defaults to ‘string’.  You’d use it like this:\n// Normal mode var div = document.createElement(\u0026#39;div\u0026#39;); var text = document.createTextNode(\u0026#39;Parent \u0026#39; + entity(\u0026#39;»\u0026#39;) + \u0026#39; Child\u0026#39;); div.appendChild(text); // Stupefy mode var num = \u0026#34;The numeric entity for » is \u0026#34; + entity(\u0026#39;»\u0026#39;, \u0026#39;numeric\u0026#39;); var utf = \u0026#34;The UTF-16 entity for » is \u0026#34; + entity(\u0026#39;»\u0026#39;, \u0026#39;utf16\u0026#39;); I hope this can help other people out there who’ve run into the same problem as many times as I have!\n",
        "source":"\nOne problem that I’ve had when working with dynamic DOM nodes is the inability to use entities with `document.createTextElement()`. I’ve read suggestions about using utf–16/ucs–2 values, but how do you find them and how do you convert them? This led me on a journey to figure out how to handle this. I ended up digging through some [TinyMCE]({{% wayback \"http://tinymce.moxiecode.com/\" %}}) source code, and found a gem of a function that I then added a ‘stupefy’ mode to. Here’s the code:\n\n```javascript\nfunction entity(str, mode) {\n    var str = (str) ? str : '';\n    var mode = (mode) ? mode : 'string';\n\n    var e = document.createElement(\"div\");\n    e.innerHTML = str;\n\n    if (mode === 'numeric') {\n        return '\u0026#' + e.innerHTML.charCodeAt(0) + ';';\n    } else if (mode === 'utf16') {\n        var un = e.innerHTML.charCodeAt(0).toString(16);\n\n        while (un.length \u003c 4) {\n            un = \"0\" + un;\n        }\n\n        return \"\\\\u\" + un;\n    }\n\n    return e.innerHTML;\n}\n```\n\n`entity()` has two parameters:\n\n1. **entity:** is a string which can be either a named entity (\u0026raquo;) or a numeric entity (\u0026\\#187;)\n2. **mode:** is an optional value that accepts ‘numeric’, ‘utf16’, or ‘string’. Defaults to ‘string’.\n\nYou’d use it like this:\n\n```javascript\n// Normal mode\nvar div = document.createElement('div');\nvar text = document.createTextNode('Parent ' + entity('»') + ' Child');\ndiv.appendChild(text);\n\n// Stupefy mode\nvar num = \"The numeric entity for » is \" + entity('»', 'numeric');\nvar utf = \"The UTF-16 entity for » is \" + entity('»', 'utf16');\n```\n\nI hope this can help other people out there who’ve run into the same problem as many times as I have!\n"},
    "links": {
        "prev": {"title": "Camino has left the building", "permalink": "https://ryanparman.com/posts/2006/camino-has-left-the-building/"},
        "next": {"title": "TinyMCE Issue", "permalink": "https://ryanparman.com/posts/2006/tinymce-issue/"},
        "ignore": "me"
    }
}

}
