{
    "data": {
    "kind": "page",
    "title": "Introducing Tarzan",
    "description": "",
    "summary": {
        "content": "My birthday is in November, and Christmas is in December, so the “holidays” go for about a month-and-a-half. Every year, I’d start getting these questions like “What do you want for your birthday? What do you want for Christmas?”. Of course, when you’re asked on the spot like that, you can never remember what it is that you want, and you end up like the kid from A Christmas Story telling people you want a football or something. So, a few years ago, I came up with the brilliant idea of making my wishlist available on my website somewhere.",
        "isTruncated": true
    },
    "published": "2005-01-23T16:08:47Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2005/introducing-tarzan/",
    "relativePermalink": "/posts/2005/introducing-tarzan/",
    "aliases": ["/2005/01/23/introducing-tarzan/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 481,
        "readingTime": "3 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2005/20050123-introducing-tarzan.md",
        "logicalName": "20050123-introducing-tarzan.md",
        "translationBaseName": "20050123-introducing-tarzan",
        "baseFileName": "20050123-introducing-tarzan",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2005/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#update\"\u003eUpdate\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eMy birthday is in November, and Christmas is in December, so the “holidays” go for about a month-and-a-half. Every year, I’d start getting these questions like “What do you want for your birthday? What do you want for Christmas?”. Of course, when you’re asked on the spot like that, you can never remember what it is that you want, and you end up like the kid from \u003ca href=\"https://web.archive.org/web/20050123160847/http://www.amazon.com/dp/B0000AYJUW/skyzyxcom-20/\"\u003eA Christmas Story\u003c/a\u003e telling people you want a football or something.\u003c/p\u003e\n\u003cp\u003eSo, a few years ago, I came up with the brilliant idea of making my wishlist available on my website somewhere. That way, when people asked what I wanted for Christmas or my birthday, I could just point them over to some big-ticket items on my list, and wouldn’t have to waste brain cycles on it. Great idea, huh?\u003c/p\u003e\n\u003cp\u003eWell, my website has certainly evolved over the last few years, and so has my wishlist. This past holiday saw my biggest wishlist ever with over 170 items (mostly old CD’s that are scratched and need to be re-bought). Updating and adding items was a real pain, and I figured that after the holidays I’d try to figure out a way to make it all easier.\u003c/p\u003e\n\u003cp\u003eMost of the items on my wishlist are pointing back to Amazon, and I’ve got my referral ID in there so that I also get credited on all of the purchases made from my site. I also know that Amazon makes their database information available through their Web Services program. Ideally, all I’d like to have to do is pass either the ISBN number (of a book), or the ASIN number (of most other items) to a function, and have that function figure it all out for me. How on earth can I make it all happen?\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"/projects/tarzan/\"\u003eIntroducing Tarzan\u003c/a\u003e\u003c/strong\u003e, an easy-to-use set of functions for accessing all sorts of data from Amazon’s product database. It’s as simple to use as \u003ca href=\"/projects/simplepie/\"\u003eSimplePie\u003c/a\u003e (if not, simpler), and has a built-in extension model that allows developers to extend the functionality of Tarzan simply and easily.\u003c/p\u003e\n\u003cp\u003eTarzan caches everything it can for 30 days (since Amazon’s data doesn’t change much, and as to not overload anyone’s server), supports resizing images using GD functions (all behind the scenes), and most functions will work as expected by just passing the ASIN/ISBN number as a parameter. For more \u003ca href=\"/projects/tarzan/\"\u003einformation\u003c/a\u003e, \u003ca href=\"/projects/tarzan/docs/documentation.htm\"\u003edocumentation\u003c/a\u003e, a \u003ca href=\"/projects/tarzan/sample.php\"\u003esample demo\u003c/a\u003e, \u003ca href=\"/projects/tarzan/breakdown.php\"\u003etools\u003c/a\u003e for \u003ca href=\"/projects/tarzan/docs/extension_guidelines.htm\"\u003ebuilding your own extensions\u003c/a\u003e, and \u003ca href=\"/projects/tarzan/#get\"\u003edownloads\u003c/a\u003e, check out the \u003ca href=\"/projects/tarzan/\"\u003eTarzan Project Page\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"update\"\u003eUpdate\u003c/h2\u003e\n\u003cp\u003eI make a minor tweak to the code and released Tarzan 1.0 RC1a. I added cache stats to the \u003ccode\u003etarzaninfo()\u003c/code\u003e function (which can be seen in action by viewing your \u003ccode\u003etarzan_info.php\u003c/code\u003e page.) This certainly isn’t critical, and you can definitely wait for RC2, but if you got Tarzan already and you want to see the new info, simply replace your current \u003ccode\u003etarzan.inc\u003c/code\u003e file with the new one.\u003c/p\u003e\n",
        "plain":"My birthday is in November, and Christmas is in December, so the “holidays” go for about a month-and-a-half. Every year, I’d start getting these questions like “What do you want for your birthday? What do you want for Christmas?”. Of course, when you’re asked on the spot like that, you can never remember what it is that you want, and you end up like the kid from A Christmas Story telling people you want a football or something.\nSo, a few years ago, I came up with the brilliant idea of making my wishlist available on my website somewhere. That way, when people asked what I wanted for Christmas or my birthday, I could just point them over to some big-ticket items on my list, and wouldn’t have to waste brain cycles on it. Great idea, huh?\nWell, my website has certainly evolved over the last few years, and so has my wishlist. This past holiday saw my biggest wishlist ever with over 170 items (mostly old CD’s that are scratched and need to be re-bought). Updating and adding items was a real pain, and I figured that after the holidays I’d try to figure out a way to make it all easier.\nMost of the items on my wishlist are pointing back to Amazon, and I’ve got my referral ID in there so that I also get credited on all of the purchases made from my site. I also know that Amazon makes their database information available through their Web Services program. Ideally, all I’d like to have to do is pass either the ISBN number (of a book), or the ASIN number (of most other items) to a function, and have that function figure it all out for me. How on earth can I make it all happen?\nIntroducing Tarzan, an easy-to-use set of functions for accessing all sorts of data from Amazon’s product database. It’s as simple to use as SimplePie (if not, simpler), and has a built-in extension model that allows developers to extend the functionality of Tarzan simply and easily.\nTarzan caches everything it can for 30 days (since Amazon’s data doesn’t change much, and as to not overload anyone’s server), supports resizing images using GD functions (all behind the scenes), and most functions will work as expected by just passing the ASIN/ISBN number as a parameter. For more information, documentation, a sample demo, tools for building your own extensions, and downloads, check out the Tarzan Project Page.\nUpdate I make a minor tweak to the code and released Tarzan 1.0 RC1a. I added cache stats to the tarzaninfo() function (which can be seen in action by viewing your tarzan_info.php page.) This certainly isn’t critical, and you can definitely wait for RC2, but if you got Tarzan already and you want to see the new info, simply replace your current tarzan.inc file with the new one.\n",
        "source":"\nMy birthday is in November, and Christmas is in December, so the “holidays” go for about a month-and-a-half. Every year, I’d start getting these questions like “What do you want for your birthday? What do you want for Christmas?”. Of course, when you’re asked on the spot like that, you can never remember what it is that you want, and you end up like the kid from [A Christmas Story]({{% wayback \"http://www.amazon.com/dp/B0000AYJUW/skyzyxcom-20/\" %}}) telling people you want a football or something.\n\nSo, a few years ago, I came up with the brilliant idea of making my wishlist available on my website somewhere. That way, when people asked what I wanted for Christmas or my birthday, I could just point them over to some big-ticket items on my list, and wouldn’t have to waste brain cycles on it. Great idea, huh?\n\nWell, my website has certainly evolved over the last few years, and so has my wishlist. This past holiday saw my biggest wishlist ever with over 170 items (mostly old CD’s that are scratched and need to be re-bought). Updating and adding items was a real pain, and I figured that after the holidays I’d try to figure out a way to make it all easier.\n\nMost of the items on my wishlist are pointing back to Amazon, and I’ve got my referral ID in there so that I also get credited on all of the purchases made from my site. I also know that Amazon makes their database information available through their Web Services program. Ideally, all I’d like to have to do is pass either the ISBN number (of a book), or the ASIN number (of most other items) to a function, and have that function figure it all out for me. How on earth can I make it all happen?\n\n**[Introducing Tarzan](/projects/tarzan/)**, an easy-to-use set of functions for accessing all sorts of data from Amazon’s product database. It’s as simple to use as [SimplePie](/projects/simplepie/) (if not, simpler), and has a built-in extension model that allows developers to extend the functionality of Tarzan simply and easily.\n\nTarzan caches everything it can for 30 days (since Amazon’s data doesn’t change much, and as to not overload anyone’s server), supports resizing images using GD functions (all behind the scenes), and most functions will work as expected by just passing the ASIN/ISBN number as a parameter. For more [information](/projects/tarzan/), [documentation](/projects/tarzan/docs/documentation.htm), a [sample demo](/projects/tarzan/sample.php), [tools](/projects/tarzan/breakdown.php) for [building your own extensions](/projects/tarzan/docs/extension_guidelines.htm), and [downloads](/projects/tarzan/#get), check out the [Tarzan Project Page](/projects/tarzan/).\n\n## Update\n\nI make a minor tweak to the code and released Tarzan 1.0 RC1a. I added cache stats to the `tarzaninfo()` function (which can be seen in action by viewing your `tarzan_info.php` page.) This certainly isn’t critical, and you can definitely wait for RC2, but if you got Tarzan already and you want to see the new info, simply replace your current `tarzan.inc` file with the new one.\n"},
    "links": {
        "prev": {"title": "Guys Rules", "permalink": "https://ryanparman.com/posts/2005/guys-rules/"},
        "next": {"title": "Localizing Tarzan and AWS 4.0", "permalink": "https://ryanparman.com/posts/2005/localizing-tarzan-and-aws-40/"},
        "ignore": "me"
    }
}

}
