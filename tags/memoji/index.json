{
    "data": {
        
        
        "taxonomy": "tag",
        "term": "memoji",
        
        "count": 1,
        "items": [
            
            {
    "kind": "page",
    "title": "Converting iMessage Stickers, Animoji, and Memoji to Slackmoji (Slack Emoji)",
    "description": "",
    "summary": {
        "content": "With the impending shutdown of HipChat (February 2019), my team has been working hard on migrating everything over to Slack. Why not have some fun while we're at it? Slackmoji Firstly, what is Slackmoji? Slackmoji (the word) refers to Slack + emoji — namely, the custom emoji you can add to your Slack account. It adds a bit of color and personality to the default Slack experience. Since I work in technology and the web, my set of Slackmoji tends to be Mac/Web/Browser-centric.",
        "isTruncated": true
    },
    "published": "2019-02-10T21:29:11Z",
    "updated": "2019-06-09T19:57:53-07:00",
    "permalink": "https://ryanparman.com/posts/2019/converting-imessage-stickers-animoji-and-memoji-to-slackmoji-slack-emoji/",
    "relativePermalink": "/posts/2019/converting-imessage-stickers-animoji-and-memoji-to-slackmoji-slack-emoji/",
    "aliases": ["/2019/02/10/converting-imessage-stickers-animoji-and-memoji-to-slackmoji-slack-emoji"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2019/emoji@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/imageoptim@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/animoji-editing@2x.jpg"],
    "videos": [],
    "categories": ["Tech Life"],
    "tags": ["slack", "emoji", "slackmoji", "animoji", "memoji", "imessage", "messages", "stickers", "zelda", "breath of the wild", "heart", "heart container", "apng", "png", "gif", "ffmpeg", "imagemagick"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 1176,
        "readingTime": "6 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2019/20190210-converting-imessage-stickers-animoji-and-memoji-to-slackmoji-slack-emoji.md",
        "logicalName": "20190210-converting-imessage-stickers-animoji-and-memoji-to-slackmoji-slack-emoji.md",
        "translationBaseName": "20190210-converting-imessage-stickers-animoji-and-memoji-to-slackmoji-slack-emoji",
        "baseFileName": "20190210-converting-imessage-stickers-animoji-and-memoji-to-slackmoji-slack-emoji",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2019/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#slackmoji\"\u003eSlackmoji\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#before-we-begin\"\u003eBefore We Begin…\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#animated-imessage-stickers\"\u003eAnimated iMessage Stickers\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#send-yourself-a-sticker\"\u003eSend yourself a sticker\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#receive-the-sticker-and-save-it\"\u003eReceive the sticker and save it\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#process-the-images-into-something-usable\"\u003eProcess the images into something usable\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#cleaning-up\"\u003eCleaning up\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#converting-animoji-or-memoji-videos\"\u003eConverting Animoji or Memoji videos\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#sendingreceiving-videos\"\u003eSending/receiving videos\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#process-the-images-into-something-usable-1\"\u003eProcess the images into something usable\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nWith the impending shutdown of HipChat (February 2019), my team has been working hard on migrating everything over to Slack. Why not have some fun while we're at it?\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/emoji@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"slackmoji\"\u003eSlackmoji\u003c/h2\u003e\n\u003cp\u003eFirstly, what is \u003cem\u003eSlackmoji\u003c/em\u003e? Slackmoji (the word) refers to Slack + emoji — namely, the custom emoji you can add to your Slack account. It adds a bit of color and personality to the default Slack experience. Since I work in technology and the web, my set of Slackmoji tends to be Mac/Web/Browser-centric.\u003c/p\u003e\n\n\u003caside class=\"age aside container flex\"\u003e\n\u003cp\u003eMuch like the words \u003cem\u003eemoji\u003c/em\u003e and \u003cem\u003efish\u003c/em\u003e, the plural of \u003cem\u003eSlackmoji\u003c/em\u003e is also \u003cem\u003eSlackmoji\u003c/em\u003e.\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003cdiv align=\"center\"\u003e\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/browser-chrome.png\" title=\":browser-chrome:\" alt=\":browser-chrome:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/browser-edge.png\" title=\":browser-edge:\" alt=\":browser-edge:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/browser-firefox-developer-edition.png\" title=\":browser-firefox-developer-edition:\" alt=\":browser-firefox-developer-edition:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/browser-firefox.png\" title=\":browser-firefox:\" alt=\":browser-firefox:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/browser-internetexplorer.png\" title=\":browser-internetexplorer:\" alt=\":browser-internetexplorer:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/browser-opera.png\" title=\":browser-opera:\" alt=\":browser-opera:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/browser-safari.png\" title=\":browser-safari:\" alt=\":browser-safari:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/browser-safari-technology-preview.png\" title=\":browser-safari-technology-preview:\" alt=\":browser-safari-technology-preview:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n\u003c/div\u003e\n\u003cdiv align=\"center\"\u003e\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/activity.png\" title=\":activity:\" alt=\":activity:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/activity-arrow-up.gif\" title=\":activity-arrow-up:\" alt=\":activity-arrow-up:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/activity-circular-arrow.gif\" title=\":activity-circular-arrow:\" alt=\":activity-circular-arrow:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/activity-double-arrow.gif\" title=\":activity-double-arrow:\" alt=\":activity-double-arrow:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/activity-red-arrow.gif\" title=\":activity-red-arrow:\" alt=\":activity-red-arrow:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/activity-pingpong.gif\" title=\":activity-pingpong:\" alt=\":activity-pingpong:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/activity-finger-number1.gif\" title=\":activity-finger-number1:\" alt=\":activity-finger-number1:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/activity-circle-321.gif\" title=\":activity-circle-321:\" alt=\":activity-circle-321:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/activity-crown.gif\" title=\":activity-crown:\" alt=\":activity-crown:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/activity-diamond.gif\" title=\":activity-diamond:\" alt=\":activity-diamond:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/activity-trophy.gif\" title=\":activity-trophy:\" alt=\":activity-trophy:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n\u003c/div\u003e\n\u003cdiv align=\"center\"\u003e\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/icon-1password.png\" title=\":icon-1password:\" alt=\":icon-1password:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/icon-alfredapp.png\" title=\":icon-alfredapp:\" alt=\":icon-alfredapp:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/icon-casper.png\" title=\":icon-casper:\" alt=\":icon-casper:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/icon-hipchat.png\" title=\":icon-hipchat:\" alt=\":icon-hipchat:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/icon-keybase.png\" title=\":icon-keybase:\" alt=\":icon-keybase:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/icon-msexcel.png\" title=\":icon-msexcel:\" alt=\":icon-msexcel:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/icon-msword.png\" title=\":icon-msword:\" alt=\":icon-msword:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/icon-sublime.png\" title=\":icon-sublime:\" alt=\":icon-sublime:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/icon-things-app.png\" title=\":icon-things-app:\" alt=\":icon-things-app:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/icon-virtualbox.png\" title=\":icon-virtualbox:\" alt=\":icon-virtualbox:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/icon-vmware-fusion.png\" title=\":icon-vmware-fusion:\" alt=\":icon-vmware-fusion:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n\u003c/div\u003e\n\u003cdiv align=\"center\"\u003e\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/lang-swift.png\" title=\":lang-swift:\" alt=\":lang-swift:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/lang-typescript.png\" title=\":lang-typescript:\" alt=\":lang-typescript:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/lang-python.png\" title=\":lang-python:\" alt=\":lang-python:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/kubernetes.png\" title=\":kubernetes:\" alt=\":kubernetes:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/docker2.png\" title=\":docker2:\" alt=\":docker2:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/datadog.png\" title=\":datadog:\" alt=\":datadog:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n  \u003cpicture class=\"dib \"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/zeldabotw-heart-container.gif\" title=\":zeldabotw-heart-container:\" alt=\":zeldabotw-heart-container:\" class=\"dib slackmoji \" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\n\u003c/div\u003e\n\u003cp\u003eThere are a few things I\u0026rsquo;ve learned as I\u0026rsquo;ve been creating my own slackmoji recently.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e128 pixels is a pretty solid target for the size of the image — especially animated GIFs. Anything smaller and you end up with some nasty dithering around the edges of the animation.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSimilar to emoji in iMessage (iOS), emoji-only lines will be at one size (32 points), while emoji+text lines are smaller (24 points).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWhen converting an \u003ca href=\"https://support.apple.com/en-us/HT208190\"\u003eAnimoji\u003c/a\u003e recording into an animated GIF, expect you\u0026rsquo;ll need to edit each PNG frame to remove as much whitespace (and get as much character on-screen) as possible.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"before-we-begin\"\u003eBefore We Begin…\u003c/h2\u003e\n\u003cp\u003eWhile it\u0026rsquo;s possible that you can adapt these instructions to another platform, this tutorial is written assuming that:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eYou have a modern iOS device (like an iPhone or iPad), that is running at least iOS 11, and is signed into your iCloud account.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou have a modern Mac that is logged into the same iCloud account as your iOS device. In other words, you can receive your iMessages on your Mac.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou are not afraid of the Terminal, and you have \u003ca href=\"https://brew.sh\"\u003eHomebrew\u003c/a\u003e already installed.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"animated-imessage-stickers\"\u003eAnimated iMessage Stickers\u003c/h2\u003e\n\n\u003caside class=\"age aside container flex\"\u003e\n\u003cp\u003eiMessage stickers use a format called Animated PNG (APNG) that was created by Mozilla back in 2008. Whereas PNG files have superior image fidelity over the older GIF format, the same is true for the animated versions of these formats. APNG is supported in Firefox, Safari, Chrome, and Opera.\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003ch3 id=\"send-yourself-a-sticker\"\u003eSend yourself a sticker\u003c/h3\u003e\n\u003cp\u003eStart out by sending yourself an iMessage sticker from one of your favorite iMessage apps. In my case, I\u0026rsquo;m going to use the \u003cem\u003eHeart Container\u003c/em\u003e sticker from \u003ca href=\"https://itunes.apple.com/us/app/zelda-breath-of-the-wild/id1321192590?mt=8\"\u003eZelda: Breath of the Wild\u003c/a\u003e. You can use whatever (animated) sticker you\u0026rsquo;d like.\u003c/p\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; overflow: hidden;\"\u003e\n    \u003cvideo poster=\"https://cdn.ryanparman.com/hls/emoji-ios-send-sticker.fmp4/poster.jpg\" controls preload=\"none\" style=\"position: absolute; width: 100%; height: 100%;\"\u003e\n      \u003csource src=\"https://cdn.ryanparman.com/hls/emoji-ios-send-sticker.fmp4/index.m3u8\" type=\"application/vnd.apple.mpegurl\"\u003e\n      \u003csource src=\"https://cdn.ryanparman.com/hls/emoji-ios-send-sticker.fmp4/progressive.mp4\" type='video/mp4; codecs=\"avc1.4d401f, mp4a.40.2\"'\u003e\n    \u003c/video\u003e\n\u003c/div\u003e\n\u003ch3 id=\"receive-the-sticker-and-save-it\"\u003eReceive the sticker and save it\u003c/h3\u003e\n\u003cp\u003eOnce the message has come through in Messages on your Mac, you can drag the image into a folder in Finder. I would recommend renaming it to something more memorable.\u003c/p\u003e\n\u003cp\u003e\u003cdiv style=\"position: relative; padding-bottom: 56.25%; overflow: hidden;\"\u003e\n    \u003cvideo poster=\"https://cdn.ryanparman.com/hls/emoji-drag-to-mac.fmp4/poster.jpg\" controls preload=\"none\" style=\"position: absolute; width: 100%; height: 100%;\"\u003e\n      \u003csource src=\"https://cdn.ryanparman.com/hls/emoji-drag-to-mac.fmp4/index.m3u8\" type=\"application/vnd.apple.mpegurl\"\u003e\n      \u003csource src=\"https://cdn.ryanparman.com/hls/emoji-drag-to-mac.fmp4/progressive.mp4\" type='video/mp4; codecs=\"avc1.4d401f, mp4a.40.2\"'\u003e\n    \u003c/video\u003e\n\u003c/div\u003e\n\u003cbr\u003e\u003c/p\u003e\n\n\u003caside class=\"age aside container flex\"\u003e\n\u003cp\u003eNeither Finder nor QuickLook is able to preview the animation in the APNG format, and simply shows the first frame. You can see the animation if you were to drag the image into Safari.\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003ch3 id=\"process-the-images-into-something-usable\"\u003eProcess the images into something usable\u003c/h3\u003e\n\u003cp\u003eIn \u003cem\u003eTerminal\u003c/em\u003e, install FFMPEG and Imagemagick using Homebrew.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ebrew install ffmpeg imagemagick\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ca href=\"https://engineering.giphy.com/how-to-make-gifs-with-ffmpeg/\"\u003eHow to make GIFs with FFMPEG\u003c/a\u003e and \u003ca href=\"https://www.alecjacobson.com/weblog/?p=2601\"\u003eImagemagick animated GIF layers showing through transparency\u003c/a\u003e were helpful in figuring this out.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#75715e\"\u003e#! /usr/bin/env bash\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003eset -exo pipefail;\n\nfind . -maxdepth \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e -type f -name \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.png\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    | xargs -P \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003enproc\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e -I \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e bash -c \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        ff=$(basename -- \u0026#34;${1%.png}\u0026#34;);\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        if [ ! -f \u0026#34;${ff}.gif\u0026#34; ]; then\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e            mkdir -p \u0026#34;/tmp/${ff}\u0026#34; \u0026amp;\u0026amp; \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e            ffmpeg \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e                -i \u0026#34;$1\u0026#34; \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e                -filter_complex \u0026#34;[0:v] fps=12,scale=w=128:h=-1,split [a][b];[a] palettegen=stats_mode=single [p];[b][p] paletteuse=new=1\u0026#34; \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e                -y \u0026#34;/tmp/${ff}/%05d.png\u0026#34; \u0026amp;\u0026amp; \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e            convert -dispose 2 \u0026#34;/tmp/${ff}/*.png\u0026#34; \u0026#34;${ff}.gif\u0026#34; \u0026amp;\u0026amp; \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e            rm -Rf \u0026#34;/tmp/${ff}\u0026#34;;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        fi;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#39;\u003c/span\u003e _ \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet\u0026rsquo;s break this down:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eFind all files in the current directory that end with \u003ccode\u003e.png\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003efind . -maxdepth \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e -type f -name \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.png\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePipe those results into \u003ccode\u003exargs\u003c/code\u003e. Parallelize the processes according to the number of cores you have (\u003ccode\u003enproc\u003c/code\u003e). Each process will be a \u003ccode\u003ebash\u003c/code\u003e process.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003exargs -P \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003enproc\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e -I \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e bash -c \u003cspan style=\"color:#e6db74\"\u003e\u0026#39; ... \u0026#39;\u003c/span\u003e _ \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFigure out the filename of the input, without the file extension. Save this value into the \u003ccode\u003eff\u003c/code\u003e variable.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eff\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003ebasename -- \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003e1%.png\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnly process the files if we do not already have a same-named GIF file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e[\u003c/span\u003e ! -f \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eff\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e.gif\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e]\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003ethen\u003c/span\u003e\n  ...\n\u003cspan style=\"color:#66d9ef\"\u003efi\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWe\u0026rsquo;ll use the \u003ccode\u003e/tmp\u003c/code\u003e directory for our processing. Let\u0026rsquo;s create a working directory with the name of the image.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emkdir -p \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/tmp/\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eff\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eHere\u0026rsquo;s the complex part.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eWe call FFMPEG and specify our input file with \u003ccode\u003e-i\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWe specify a set of complex rules using \u003ccode\u003e-filter_complex\u003c/code\u003e, but they key takeaways are that:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eSet \u003cem\u003eframes per second\u003c/em\u003e to 12.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSet the \u003cem\u003ewidth\u003c/em\u003e to 128px, and the \u003cem\u003eheight\u003c/em\u003e as auto.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWe will pre-process the PNG first to generate a color palette, and the GIF processor will use this to help create better-colored images and cleaner transparency.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWe set \u003ccode\u003e-y\u003c/code\u003e to overwrite any existing files.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eWe use some \u003ccode\u003ebash\u003c/code\u003e goodness to create filenames for each frame as a 5-digit value.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003effmpeg -i \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$1\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    -filter_complex \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;[0:v] fps=12,scale=w=128:h=-1,split [a][b];[a] palettegen=stats_mode=single [p];[b][p] paletteuse=new=1\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    -y \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/tmp/\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eff\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e/%05d.png\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUse the \u003ccode\u003econvert\u003c/code\u003e command to read all of the PNG files and write a new GIF file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003econvert -dispose \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/tmp/\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eff\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e/*.png\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eff\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e.gif\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLet\u0026rsquo;s clean up after ourselves by deleting our working directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003erm -Rf \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/tmp/\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eff\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"cleaning-up\"\u003eCleaning up\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/imageoptim@2x.webp\" alt=\"ImageOptim\" class=\"db fullimage-noshadow\" decoding=\"async\" style=\"margin-left: auto; margin-right: auto; \"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/imageoptim@2x.png\" alt=\"ImageOptim\" class=\"db fullimage-noshadow\" decoding=\"async\" style=\"margin-left: auto; margin-right: auto; \"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003eUsing ImageOptim to squeeze unnecessary data out of your images.\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAt the end, you will have a new animated GIF image that you can upload into Slack. \u003cpicture class=\"dib slackmoji small\"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/zeldabotw-heart-container.gif\" title=\":zeldabotw-heart-container:\" alt=\":zeldabotw-heart-container:\" class=\"dib slackmoji small\" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\u003c/p\u003e\n\u003ch2 id=\"converting-animoji-or-memoji-videos\"\u003eConverting Animoji or Memoji videos\u003c/h2\u003e\n\n\u003caside class=\"age aside container flex\"\u003e\n\u003cp\u003eAnimoji and Memoji videos are sent as H.264 video and AAC audio, wrapped inside a QuickTime container. Audio will be removed as part of this process.\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003ch3 id=\"sendingreceiving-videos\"\u003eSending/receiving videos\u003c/h3\u003e\n\u003cp\u003eThis is done the same way as stickers. Follow the same process to get a file into Finder.\u003c/p\u003e\n\u003ch3 id=\"process-the-images-into-something-usable-1\"\u003eProcess the images into something usable\u003c/h3\u003e\n\u003cp\u003eOverall, this is the exact same process, only we\u0026rsquo;re going to stop mid-way and edit the frames.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eI\u0026rsquo;ve already explained what most of this does above, but this step is essentially extracting all of the frames in the video into a working folder under the \u003ccode\u003e/tmp\u003c/code\u003e directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003efind . -maxdepth \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e -type f -name \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.mov\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    | xargs -P \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003enproc\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e -I \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e bash -c \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        ff=$(basename -- \u0026#34;${1%.mov}\u0026#34;);\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        if [ ! -f \u0026#34;${ff}.gif\u0026#34; ]; then\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e            mkdir -p \u0026#34;/tmp/${ff}\u0026#34; \u0026amp;\u0026amp; \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e            ffmpeg \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e                -i \u0026#34;$1\u0026#34; \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e                -filter_complex \u0026#34;[0:v] fps=12,scale=w=300:h=-1,split [a][b];[a] palettegen=stats_mode=single [p];[b][p] paletteuse=new=1\u0026#34; \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e                -y \u0026#34;/tmp/${ff}/%05d.png\u0026#34;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        fi;\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e    \u0026#39;\u003c/span\u003e _ \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou\u0026rsquo;ll want to use your favorite image editing tool (e.g., \u003ca href=\"https://itunes.apple.com/us/app/pixelmator/id407963104?mt=12\"\u003ePixelmator\u003c/a\u003e, Photoshop). Crop as closely to the face as possible:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eKeep every image an identical size.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCrop in an identical spot. Otherwise the frame location is going to be wrong.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou can use something like QuickLook to preview the frames. Feel free to delete any that don\u0026rsquo;t make the animation better.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSince you need to squeeze your animation into a maximum of \u003cem\u003e128kb\u003c/em\u003e, you have about 10–15 frames, \u003cem\u003etops\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/animoji-editing@2x.jpg\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce the frame editing is complete, merge each frame back into a single GIF image.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003econvert -dispose \u003cspan style=\"color:#ae81ff\"\u003e2\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/tmp/\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eff\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e/*.png\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eff\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e.gif\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eCleanup once you\u0026rsquo;re done.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003erm -Rf \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;/tmp/\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eff\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAt the end, you will have a new animated GIF image that you can upload into Slack. \u003cpicture class=\"dib slackmoji small\"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/boom.gif\" title=\":boom:\" alt=\":boom:\" class=\"dib slackmoji small\" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWith your new custom \u003cem\u003eSlackmoji\u003c/em\u003e, you can bring your own style and personality to your Slack account. By borrowing some style from things that you enjoy, you can add a fun bit of flavor to your work conversations. \u003cpicture class=\"dib slackmoji small\"\u003e\u003cimg src=\"https://media.githubusercontent.com/media/skyzyx/slackmoji/master/activity-diamond.gif\" title=\":activity-diamond:\" alt=\":activity-diamond:\" class=\"dib slackmoji small\" decoding=\"async\"\u003e\n\u003c/picture\u003e\n\u003c/p\u003e\n",
        "plain":"With the impending shutdown of HipChat (February 2019), my team has been working hard on migrating everything over to Slack. Why not have some fun while we're at it?   Slackmoji Firstly, what is Slackmoji? Slackmoji (the word) refers to Slack + emoji — namely, the custom emoji you can add to your Slack account. It adds a bit of color and personality to the default Slack experience. Since I work in technology and the web, my set of Slackmoji tends to be Mac/Web/Browser-centric.\nMuch like the words emoji and fish, the plural of Slackmoji is also Slackmoji.\n                                          There are a few things I\u0026rsquo;ve learned as I\u0026rsquo;ve been creating my own slackmoji recently.\n  128 pixels is a pretty solid target for the size of the image — especially animated GIFs. Anything smaller and you end up with some nasty dithering around the edges of the animation.\n  Similar to emoji in iMessage (iOS), emoji-only lines will be at one size (32 points), while emoji+text lines are smaller (24 points).\n  When converting an Animoji recording into an animated GIF, expect you\u0026rsquo;ll need to edit each PNG frame to remove as much whitespace (and get as much character on-screen) as possible.\n  Before We Begin… While it\u0026rsquo;s possible that you can adapt these instructions to another platform, this tutorial is written assuming that:\n  You have a modern iOS device (like an iPhone or iPad), that is running at least iOS 11, and is signed into your iCloud account.\n  You have a modern Mac that is logged into the same iCloud account as your iOS device. In other words, you can receive your iMessages on your Mac.\n  You are not afraid of the Terminal, and you have Homebrew already installed.\n  Animated iMessage Stickers iMessage stickers use a format called Animated PNG (APNG) that was created by Mozilla back in 2008. Whereas PNG files have superior image fidelity over the older GIF format, the same is true for the animated versions of these formats. APNG is supported in Firefox, Safari, Chrome, and Opera.\n Send yourself a sticker Start out by sending yourself an iMessage sticker from one of your favorite iMessage apps. In my case, I\u0026rsquo;m going to use the Heart Container sticker from Zelda: Breath of the Wild. You can use whatever (animated) sticker you\u0026rsquo;d like.\n  Receive the sticker and save it Once the message has come through in Messages on your Mac, you can drag the image into a folder in Finder. I would recommend renaming it to something more memorable.\n  Neither Finder nor QuickLook is able to preview the animation in the APNG format, and simply shows the first frame. You can see the animation if you were to drag the image into Safari.\n Process the images into something usable In Terminal, install FFMPEG and Imagemagick using Homebrew.\nbrew install ffmpeg imagemagick How to make GIFs with FFMPEG and Imagemagick animated GIF layers showing through transparency were helpful in figuring this out.\n#! /usr/bin/env bash set -exo pipefail; find . -maxdepth 1 -type f -name \u0026#39;*.png\u0026#39; \\  | xargs -P $(nproc) -I {} bash -c \u0026#39; ff=$(basename -- \u0026#34;${1%.png}\u0026#34;); if [ ! -f \u0026#34;${ff}.gif\u0026#34; ]; then mkdir -p \u0026#34;/tmp/${ff}\u0026#34; \u0026amp;\u0026amp; \\ ffmpeg \\ -i \u0026#34;$1\u0026#34; \\ -filter_complex \u0026#34;[0:v] fps=12,scale=w=128:h=-1,split [a][b];[a] palettegen=stats_mode=single [p];[b][p] paletteuse=new=1\u0026#34; \\ -y \u0026#34;/tmp/${ff}/%05d.png\u0026#34; \u0026amp;\u0026amp; \\ convert -dispose 2 \u0026#34;/tmp/${ff}/*.png\u0026#34; \u0026#34;${ff}.gif\u0026#34; \u0026amp;\u0026amp; \\ rm -Rf \u0026#34;/tmp/${ff}\u0026#34;; fi; \u0026#39; _ {} \\; Let\u0026rsquo;s break this down:\n  Find all files in the current directory that end with .png.\nfind . -maxdepth 1 -type f -name \u0026#39;*.png\u0026#39;   Pipe those results into xargs. Parallelize the processes according to the number of cores you have (nproc). Each process will be a bash process.\nxargs -P $(nproc) -I {} bash -c \u0026#39; ... \u0026#39; _ {} \\;   Figure out the filename of the input, without the file extension. Save this value into the ff variable.\nff=$(basename -- \u0026#34;${1%.png}\u0026#34;);   Only process the files if we do not already have a same-named GIF file.\nif [ ! -f \u0026#34;${ff}.gif\u0026#34; ]; then ... fi;   We\u0026rsquo;ll use the /tmp directory for our processing. Let\u0026rsquo;s create a working directory with the name of the image.\nmkdir -p \u0026#34;/tmp/${ff}\u0026#34;   Here\u0026rsquo;s the complex part.\n  We call FFMPEG and specify our input file with -i.\n  We specify a set of complex rules using -filter_complex, but they key takeaways are that:\n  Set frames per second to 12.\n  Set the width to 128px, and the height as auto.\n  We will pre-process the PNG first to generate a color palette, and the GIF processor will use this to help create better-colored images and cleaner transparency.\n    We set -y to overwrite any existing files.\n  We use some bash goodness to create filenames for each frame as a 5-digit value.\n  ffmpeg -i \u0026#34;$1\u0026#34; \\  -filter_complex \u0026#34;[0:v] fps=12,scale=w=128:h=-1,split [a][b];[a] palettegen=stats_mode=single [p];[b][p] paletteuse=new=1\u0026#34; \\  -y \u0026#34;/tmp/${ff}/%05d.png\u0026#34;   Use the convert command to read all of the PNG files and write a new GIF file.\nconvert -dispose 2 \u0026#34;/tmp/${ff}/*.png\u0026#34; \u0026#34;${ff}.gif\u0026#34;   Let\u0026rsquo;s clean up after ourselves by deleting our working directory.\nrm -Rf \u0026#34;/tmp/${ff}\u0026#34;;   Cleaning up  Using ImageOptim to squeeze unnecessary data out of your images.\n At the end, you will have a new animated GIF image that you can upload into Slack.  Converting Animoji or Memoji videos Animoji and Memoji videos are sent as H.264 video and AAC audio, wrapped inside a QuickTime container. Audio will be removed as part of this process.\n Sending/receiving videos This is done the same way as stickers. Follow the same process to get a file into Finder.\nProcess the images into something usable Overall, this is the exact same process, only we\u0026rsquo;re going to stop mid-way and edit the frames.\n  I\u0026rsquo;ve already explained what most of this does above, but this step is essentially extracting all of the frames in the video into a working folder under the /tmp directory.\nfind . -maxdepth 1 -type f -name \u0026#39;*.mov\u0026#39; \\  | xargs -P $(nproc) -I {} bash -c \u0026#39; ff=$(basename -- \u0026#34;${1%.mov}\u0026#34;); if [ ! -f \u0026#34;${ff}.gif\u0026#34; ]; then mkdir -p \u0026#34;/tmp/${ff}\u0026#34; \u0026amp;\u0026amp; \\ ffmpeg \\ -i \u0026#34;$1\u0026#34; \\ -filter_complex \u0026#34;[0:v] fps=12,scale=w=300:h=-1,split [a][b];[a] palettegen=stats_mode=single [p];[b][p] paletteuse=new=1\u0026#34; \\ -y \u0026#34;/tmp/${ff}/%05d.png\u0026#34; fi; \u0026#39; _ {} \\;   You\u0026rsquo;ll want to use your favorite image editing tool (e.g., Pixelmator, Photoshop). Crop as closely to the face as possible:\n  Keep every image an identical size.\n  Crop in an identical spot. Otherwise the frame location is going to be wrong.\n  You can use something like QuickLook to preview the frames. Feel free to delete any that don\u0026rsquo;t make the animation better.\n  Since you need to squeeze your animation into a maximum of 128kb, you have about 10–15 frames, tops.\n      Once the frame editing is complete, merge each frame back into a single GIF image.\nconvert -dispose 2 \u0026#34;/tmp/${ff}/*.png\u0026#34; \u0026#34;${ff}.gif\u0026#34;   Cleanup once you\u0026rsquo;re done.\nrm -Rf \u0026#34;/tmp/${ff}\u0026#34;;   At the end, you will have a new animated GIF image that you can upload into Slack.  Conclusion With your new custom Slackmoji, you can bring your own style and personality to your Slack account. By borrowing some style from things that you enjoy, you can add a fun bit of flavor to your work conversations.  ",
        "source":"\n{{\u003cdescription\u003e}}\nWith the impending shutdown of HipChat (February 2019), my team has been working hard on migrating everything over to Slack. Why not have some fun while we're at it?\n{{\u003c/description\u003e}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/emoji@2x.png\" alt=\"Emoji\"\u003e}}\n\n## Slackmoji\n\nFirstly, what is _Slackmoji_? Slackmoji (the word) refers to Slack + emoji — namely, the custom emoji you can add to your Slack account. It adds a bit of color and personality to the default Slack experience. Since I work in technology and the web, my set of Slackmoji tends to be Mac/Web/Browser-centric.\n\n{{\u003caside\u003e}}\n\u003cp\u003eMuch like the words \u003cem\u003eemoji\u003c/em\u003e and \u003cem\u003efish\u003c/em\u003e, the plural of \u003cem\u003eSlackmoji\u003c/em\u003e is also \u003cem\u003eSlackmoji\u003c/em\u003e.\u003c/p\u003e\n{{\u003c/aside\u003e}}\n\n\u003cdiv align=\"center\"\u003e\n  {{\u003cslackmoji src=\"browser-chrome.png\"\u003e}}\n  {{\u003cslackmoji src=\"browser-edge.png\"\u003e}}\n  {{\u003cslackmoji src=\"browser-firefox-developer-edition.png\"\u003e}}\n  {{\u003cslackmoji src=\"browser-firefox.png\"\u003e}}\n  {{\u003cslackmoji src=\"browser-internetexplorer.png\"\u003e}}\n  {{\u003cslackmoji src=\"browser-opera.png\"\u003e}}\n  {{\u003cslackmoji src=\"browser-safari.png\"\u003e}}\n  {{\u003cslackmoji src=\"browser-safari-technology-preview.png\"\u003e}}\n\u003c/div\u003e\n\n\u003cdiv align=\"center\"\u003e\n  {{\u003cslackmoji src=\"activity.png\"\u003e}}\n  {{\u003cslackmoji src=\"activity-arrow-up.gif\"\u003e}}\n  {{\u003cslackmoji src=\"activity-circular-arrow.gif\"\u003e}}\n  {{\u003cslackmoji src=\"activity-double-arrow.gif\"\u003e}}\n  {{\u003cslackmoji src=\"activity-red-arrow.gif\"\u003e}}\n  {{\u003cslackmoji src=\"activity-pingpong.gif\"\u003e}}\n  {{\u003cslackmoji src=\"activity-finger-number1.gif\"\u003e}}\n  {{\u003cslackmoji src=\"activity-circle-321.gif\"\u003e}}\n  {{\u003cslackmoji src=\"activity-crown.gif\"\u003e}}\n  {{\u003cslackmoji src=\"activity-diamond.gif\"\u003e}}\n  {{\u003cslackmoji src=\"activity-trophy.gif\"\u003e}}\n\u003c/div\u003e\n\n\u003cdiv align=\"center\"\u003e\n  {{\u003cslackmoji src=\"icon-1password.png\"\u003e}}\n  {{\u003cslackmoji src=\"icon-alfredapp.png\"\u003e}}\n  {{\u003cslackmoji src=\"icon-casper.png\"\u003e}}\n  {{\u003cslackmoji src=\"icon-hipchat.png\"\u003e}}\n  {{\u003cslackmoji src=\"icon-keybase.png\"\u003e}}\n  {{\u003cslackmoji src=\"icon-msexcel.png\"\u003e}}\n  {{\u003cslackmoji src=\"icon-msword.png\"\u003e}}\n  {{\u003cslackmoji src=\"icon-sublime.png\"\u003e}}\n  {{\u003cslackmoji src=\"icon-things-app.png\"\u003e}}\n  {{\u003cslackmoji src=\"icon-virtualbox.png\"\u003e}}\n  {{\u003cslackmoji src=\"icon-vmware-fusion.png\"\u003e}}\n\u003c/div\u003e\n\n\u003cdiv align=\"center\"\u003e\n  {{\u003cslackmoji src=\"lang-swift.png\"\u003e}}\n  {{\u003cslackmoji src=\"lang-typescript.png\"\u003e}}\n  {{\u003cslackmoji src=\"lang-python.png\"\u003e}}\n  {{\u003cslackmoji src=\"kubernetes.png\"\u003e}}\n  {{\u003cslackmoji src=\"docker2.png\"\u003e}}\n  {{\u003cslackmoji src=\"datadog.png\"\u003e}}\n  {{\u003cslackmoji src=\"zeldabotw-heart-container.gif\"\u003e}}\n\u003c/div\u003e\n\nThere are a few things I've learned as I've been creating my own slackmoji recently.\n\n1. 128 pixels is a pretty solid target for the size of the image — especially animated GIFs. Anything smaller and you end up with some nasty dithering around the edges of the animation.\n\n1. Similar to emoji in iMessage (iOS), emoji-only lines will be at one size (32 points), while emoji+text lines are smaller (24 points).\n\n1. When converting an [Animoji]({{\u003c wayback \"https://support.apple.com/en-us/HT208190\" \u003e}}) recording into an animated GIF, expect you'll need to edit each PNG frame to remove as much whitespace (and get as much character on-screen) as possible.\n\n## Before We Begin…\n\nWhile it's possible that you can adapt these instructions to another platform, this tutorial is written assuming that:\n\n* You have a modern iOS device (like an iPhone or iPad), that is running at least iOS 11, and is signed into your iCloud account.\n\n* You have a modern Mac that is logged into the same iCloud account as your iOS device. In other words, you can receive your iMessages on your Mac.\n\n* You are not afraid of the Terminal, and you have [Homebrew](https://brew.sh) already installed.\n\n## Animated iMessage Stickers\n\n{{\u003caside\u003e}}\n\u003cp\u003eiMessage stickers use a format called Animated PNG (APNG) that was created by Mozilla back in 2008. Whereas PNG files have superior image fidelity over the older GIF format, the same is true for the animated versions of these formats. APNG is supported in Firefox, Safari, Chrome, and Opera.\u003c/p\u003e\n{{\u003c/aside\u003e}}\n\n### Send yourself a sticker\n\nStart out by sending yourself an iMessage sticker from one of your favorite iMessage apps. In my case, I'm going to use the _Heart Container_ sticker from [Zelda: Breath of the Wild](https://itunes.apple.com/us/app/zelda-breath-of-the-wild/id1321192590?mt=8). You can use whatever (animated) sticker you'd like.\n\n{{\u003c hls src=\"emoji-ios-send-sticker\" \u003e}}\n\n### Receive the sticker and save it\n\nOnce the message has come through in Messages on your Mac, you can drag the image into a folder in Finder. I would recommend renaming it to something more memorable.\n\n{{\u003c hls src=\"emoji-drag-to-mac\" \u003e}}\n\u003cbr\u003e\n\n{{\u003caside\u003e}}\n\u003cp\u003eNeither Finder nor QuickLook is able to preview the animation in the APNG format, and simply shows the first frame. You can see the animation if you were to drag the image into Safari.\u003c/p\u003e\n{{\u003c/aside\u003e}}\n\n### Process the images into something usable\n\nIn _Terminal_, install FFMPEG and Imagemagick using Homebrew.\n\n```bash\nbrew install ffmpeg imagemagick\n```\n\n[How to make GIFs with FFMPEG](https://engineering.giphy.com/how-to-make-gifs-with-ffmpeg/) and [Imagemagick animated GIF layers showing through transparency](https://www.alecjacobson.com/weblog/?p=2601) were helpful in figuring this out.\n\n```bash\n#! /usr/bin/env bash\nset -exo pipefail;\n\nfind . -maxdepth 1 -type f -name '*.png' \\\n    | xargs -P $(nproc) -I {} bash -c '\n        ff=$(basename -- \"${1%.png}\");\n        if [ ! -f \"${ff}.gif\" ]; then\n            mkdir -p \"/tmp/${ff}\" \u0026\u0026 \\\n            ffmpeg \\\n                -i \"$1\" \\\n                -filter_complex \"[0:v] fps=12,scale=w=128:h=-1,split [a][b];[a] palettegen=stats_mode=single [p];[b][p] paletteuse=new=1\" \\\n                -y \"/tmp/${ff}/%05d.png\" \u0026\u0026 \\\n            convert -dispose 2 \"/tmp/${ff}/*.png\" \"${ff}.gif\" \u0026\u0026 \\\n            rm -Rf \"/tmp/${ff}\";\n        fi;\n    ' _ {} \\;\n```\n\nLet's break this down:\n\n1. Find all files in the current directory that end with `.png`.\n\n    ```bash\n    find . -maxdepth 1 -type f -name '*.png'\n    ```\n\n1. Pipe those results into `xargs`. Parallelize the processes according to the number of cores you have (`nproc`). Each process will be a `bash` process.\n\n    ```bash\n    xargs -P $(nproc) -I {} bash -c ' ... ' _ {} \\;\n    ```\n\n1. Figure out the filename of the input, without the file extension. Save this value into the `ff` variable.\n\n    ```bash\n    ff=$(basename -- \"${1%.png}\");\n    ```\n\n1. Only process the files if we do not already have a same-named GIF file.\n\n    ```bash\n    if [ ! -f \"${ff}.gif\" ]; then\n      ...\n    fi;\n    ```\n\n1. We'll use the `/tmp` directory for our processing. Let's create a working directory with the name of the image.\n\n    ```bash\n    mkdir -p \"/tmp/${ff}\"\n    ```\n\n1. Here's the complex part.\n\n    1. We call FFMPEG and specify our input file with `-i`.\n\n    1. We specify a set of complex rules using `-filter_complex`, but they key takeaways are that:\n\n        1. Set _frames per second_ to 12.\n\n        1. Set the _width_ to 128px, and the _height_ as auto.\n\n        1. We will pre-process the PNG first to generate a color palette, and the GIF processor will use this to help create better-colored images and cleaner transparency.\n\n    1. We set `-y` to overwrite any existing files.\n\n    1. We use some `bash` goodness to create filenames for each frame as a 5-digit value.\n\n    ```bash\n    ffmpeg -i \"$1\" \\\n        -filter_complex \"[0:v] fps=12,scale=w=128:h=-1,split [a][b];[a] palettegen=stats_mode=single [p];[b][p] paletteuse=new=1\" \\\n        -y \"/tmp/${ff}/%05d.png\"\n    ```\n\n1. Use the `convert` command to read all of the PNG files and write a new GIF file.\n\n    ```bash\n    convert -dispose 2 \"/tmp/${ff}/*.png\" \"${ff}.gif\"\n    ```\n\n1. Let's clean up after ourselves by deleting our working directory.\n\n    ```bash\n    rm -Rf \"/tmp/${ff}\";\n    ```\n\n### Cleaning up\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/imageoptim@2x.png\" alt=\"ImageOptim\" figure=\"Using ImageOptim to squeeze unnecessary data out of your images.\"\u003e}}\n\nAt the end, you will have a new animated GIF image that you can upload into Slack. {{\u003cslackmoji src=\"zeldabotw-heart-container.gif\" inline=\"true\" \u003e}}\n\n## Converting Animoji or Memoji videos\n\n{{\u003caside\u003e}}\n\u003cp\u003eAnimoji and Memoji videos are sent as H.264 video and AAC audio, wrapped inside a QuickTime container. Audio will be removed as part of this process.\u003c/p\u003e\n{{\u003c/aside\u003e}}\n\n### Sending/receiving videos\n\nThis is done the same way as stickers. Follow the same process to get a file into Finder.\n\n### Process the images into something usable\n\nOverall, this is the exact same process, only we're going to stop mid-way and edit the frames.\n\n1. I've already explained what most of this does above, but this step is essentially extracting all of the frames in the video into a working folder under the `/tmp` directory.\n    \n    ```bash\n    find . -maxdepth 1 -type f -name '*.mov' \\\n        | xargs -P $(nproc) -I {} bash -c '\n            ff=$(basename -- \"${1%.mov}\");\n            if [ ! -f \"${ff}.gif\" ]; then\n                mkdir -p \"/tmp/${ff}\" \u0026\u0026 \\\n                ffmpeg \\\n                    -i \"$1\" \\\n                    -filter_complex \"[0:v] fps=12,scale=w=300:h=-1,split [a][b];[a] palettegen=stats_mode=single [p];[b][p] paletteuse=new=1\" \\\n                    -y \"/tmp/${ff}/%05d.png\"\n            fi;\n        ' _ {} \\;\n    ```\n\n1. You'll want to use your favorite image editing tool (e.g., [Pixelmator](https://itunes.apple.com/us/app/pixelmator/id407963104?mt=12), Photoshop). Crop as closely to the face as possible:\n\n    1. Keep every image an identical size.\n\n    1. Crop in an identical spot. Otherwise the frame location is going to be wrong.\n\n    1. You can use something like QuickLook to preview the frames. Feel free to delete any that don't make the animation better.\n\n    1. Since you need to squeeze your animation into a maximum of _128kb_, you have about 10–15 frames, _tops_.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/animoji-editing@2x.jpg\" alt=\"Animating Animoji\"\u003e}}\n\n1. Once the frame editing is complete, merge each frame back into a single GIF image.\n    \n    ```bash\n    convert -dispose 2 \"/tmp/${ff}/*.png\" \"${ff}.gif\"\n    ```\n\n1. Cleanup once you're done.\n    \n    ```bash\n    rm -Rf \"/tmp/${ff}\";\n    ```\n\nAt the end, you will have a new animated GIF image that you can upload into Slack. {{\u003cslackmoji src=\"boom.gif\" inline=\"true\" \u003e}}\n\n## Conclusion\n\nWith your new custom _Slackmoji_, you can bring your own style and personality to your Slack account. By borrowing some style from things that you enjoy, you can add a fun bit of flavor to your work conversations. {{\u003cslackmoji src=\"activity-diamond.gif\" inline=\"true\" \u003e}}\n"},
    "links": {
        "prev": {"title": "Playlist: Best of P.O.D.", "permalink": "https://ryanparman.com/posts/2019/playlist-best-of-pod/"},
        "next": {"title": "Running aws-vault in macOS with local Docker containers", "permalink": "https://ryanparman.com/posts/2019/running-aws-vault-with-local-docker-containers/"},
        "ignore": "me"
    }
}

            
        ]
    }
}
