{
    "data": {
        
        
        "taxonomy": "tag",
        "term": "xslt",
        
        "count": 2,
        "items": [
            
            {
    "kind": "page",
    "title": "PHP, DOMDocument, XPath 1.0, Case-Insensitivity, and Performance",
    "description": "",
    "summary": {
        "content": "TL;DR: How I improved the performance of case-insensitive XPath queries by 30–35%, reducing an 8× performance hit to only 4.5–5×. This was originally posted to the SimplePie NG blog. Parse-at-all-costs Most feeds are a mess. The old SimplePie “OG” took a parse-at-all-costs philosophy, and could handle many of the most broken feeds you could find — at a cost. While the early versions of SimplePie supported the letter of the RSS 2.0 specification, there were a surprising number of feeds which didn’t.",
        "isTruncated": true
    },
    "published": "2018-02-04T00:26:21Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2018/php-domdocument-xpath-1-0-case-insensitivity-and-performance/",
    "relativePermalink": "/posts/2018/php-domdocument-xpath-1-0-case-insensitivity-and-performance/",
    "aliases": ["/2018/02/04/php-domdocument-xpath-1-0-case-insensitivity-and-performance"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2017/hackerman.jpg"],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": ["simplepie", "simplepie-ng", "php", "xpath", "xslt", "rss", "domdocument", "performance"],
    "series": ["Editors Choice"],
    "keywords": [],
    "meta": {
        "wordCount": 1178,
        "readingTime": "6 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2018/20180204-php-domdocument-xpath-1-0-case-insensitivity-and-performance.md",
        "logicalName": "20180204-php-domdocument-xpath-1-0-case-insensitivity-and-performance.md",
        "translationBaseName": "20180204-php-domdocument-xpath-1-0-case-insensitivity-and-performance",
        "baseFileName": "20180204-php-domdocument-xpath-1-0-case-insensitivity-and-performance",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2018/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#parse-at-all-costs\"\u003eParse-at-all-costs\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#introducing-xpath\"\u003eIntroducing XPath\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#performance-testing\"\u003ePerformance-testing\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#test-machine-and-environment\"\u003eTest machine and environment\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#first-pass-case-insensitive-with-xpath-translate\"\u003eFirst pass; Case-insensitive with XPath translate()\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#second-pass-normal-case-sensitive\"\u003eSecond pass; Normal, case-sensitive\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#experimentation\"\u003eExperimentation\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#xslt\"\u003eXSLT\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#enabling-php-functions-in-xpath\"\u003eEnabling PHP functions in XPath\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#simplify-translate\"\u003eSimplify translate()\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#wrapping-up\"\u003eWrapping-up\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nTL;DR: How I improved the performance of case-insensitive XPath queries by 30–35%, reducing an 8× performance hit to only 4.5–5×.\n\u003c/p\u003e\n\n\n\u003caside class=\"age aside container flex\"\u003e\u003cp\u003eThis was originally posted to the \u003ca href=\"https://medium.com/simplepie-ng/php-domdocument-xpath-1-0-case-insensitivity-and-performance-ad962b98e71c\"\u003eSimplePie NG blog\u003c/a\u003e.\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2017/hackerman.jpg\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"parse-at-all-costs\"\u003eParse-at-all-costs\u003c/h2\u003e\n\u003cp\u003eMost feeds are a mess. The old SimplePie “OG” took a parse-at-all-costs philosophy, and could handle many of the most broken feeds you could find — at a cost. While the early versions of SimplePie supported the letter of the RSS 2.0 specification, there were a surprising number of feeds which didn’t.\u003c/p\u003e\n\u003cp\u003eOnce SimplePie started to get popular (2006–2008), we started getting bug reports from users who were working with RSS feeds containing elements such as \u003ccode\u003e\u0026lt;pubdate\u0026gt;\u003c/code\u003e (instead of \u003ca href=\"https://web.archive.org/web/20180204002621/http://www.rssboard.org/rss-specification\"\u003e\u003ccode\u003e\u0026lt;pubDate\u0026gt;\u003c/code\u003e\u003c/a\u003e) and \u003ccode\u003e\u0026lt;managingeditor\u0026gt;\u003c/code\u003e (instead of \u003ca href=\"https://web.archive.org/web/20180204002621/http://www.rssboard.org/rss-specification\"\u003e\u003ccode\u003e\u0026lt;managingEditor\u0026gt;\u003c/code\u003e\u003c/a\u003e). At first we told users that the feeds were broken — which they were. But then we started getting enough reports that we decided to do something about it.\u003c/p\u003e\n\u003ch2 id=\"introducing-xpath\"\u003eIntroducing XPath\u003c/h2\u003e\n\u003cp\u003eFast-forward to the summer of 2017 when I started work on SimplePie NG in earnest. There are a number of things I’m doing differently (read: better) this time around. The first is that the \u003cem\u003efastest\u003c/em\u003e approach is the \u003cem\u003edefault\u003c/em\u003e approach. A corollary to this principle is that if you want to do more things, you will pay for them with performance penalties.\u003c/p\u003e\n\u003cp\u003eDuring my time working at Amazon Web Services on the SDK for PHP, I discovered some substantial performance gains by moving a lot of the response-parsing code to XPath. As such, the core XML parsing in SimplePie NG is all built around \u003ca href=\"https://web.archive.org/web/20180204002621/https://secure.php.net/domdocument\"\u003eDOMDocument\u003c/a\u003e and \u003ca href=\"https://web.archive.org/web/20180204002621/https://secure.php.net/domxpath\"\u003eXPath\u003c/a\u003e queries.\u003c/p\u003e\n\u003cp\u003eTo solve this case-insensitivity problem, \u003ca href=\"https://web.archive.org/web/20180204002621/https://stackoverflow.com/questions/2893551/case-insensitive-matching-in-xpath\"\u003esearching Stack Overflow for “case insensitive xpath”\u003c/a\u003e tells you about the XPath 2.0 functions \u003ca href=\"https://web.archive.org/web/20180204002621/https://www.w3.org/TR/xpath-functions/#func-matches\"\u003e\u003ccode\u003ematches()\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://web.archive.org/web/20180204002621/https://www.w3.org/TR/xpath-functions/#func-lower-case\"\u003e\u003ccode\u003elower-case()\u003c/code\u003e\u003c/a\u003e. However, I was surprised to learn that PHP only supports XPath 1.0. After doing some digging, the reason appears to be that the underlying \u003ca href=\"https://web.archive.org/web/20180204002621/http://xmlsoft.org\"\u003elibxml2\u003c/a\u003e library only supports XPath 1.0, with \u003ca href=\"https://web.archive.org/web/20180204002621/https://mail.gnome.org/archives/xml/2007-February/msg00077.html\"\u003eno updated support on the horizon\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe only alternative that Google and Stack Overflow had for me was the XPath 1.0 function, \u003ca href=\"https://web.archive.org/web/20180204002621/https://www.w3.org/TR/xpath/#function-translate\"\u003e\u003ccode\u003etranslate()\u003c/code\u003e\u003c/a\u003e. In PHP, the case-insensitive query for the \u003ccode\u003e\u0026lt;rss\u0026gt;\u003c/code\u003e element would be:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e/*[translate(name(), \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39;, \u0026#39;abcdefghijklmnopqrstuvwxyz\u0026#39;) = \u0026#39;rss\u0026#39;]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt’s simple enough to turn this into a pattern inside of a function. Case-insensitive XML parsing. Done. Boo-yah.\u003c/p\u003e\n\u003ch2 id=\"performance-testing\"\u003ePerformance-testing\u003c/h2\u003e\n\u003cp\u003eA little while later, I started some early work on benchmarking SimplePie NG. I parsed a number of normal-sized feeds, and got back a bunch of perfectly reasonable results. But one thing that I wanted to test was memory usage to make sure there were no memory leaks.\u003c/p\u003e\n\u003cp\u003eI put together a quick and dirty test suite by starting with Tim Bray’s feed (one of the more nuanced and complex Atom 1.0 feeds), \u003ca href=\"https://web.archive.org/web/20180204002621/https://raw.githubusercontent.com/simplepie/simplepie-ng/master/tests/Integration/feeds/full/atom10/tim-bray-500.xml\"\u003eduplicating the entries to a total of 500\u003c/a\u003e (increasing the size to around 3 MB), and then \u003ca href=\"https://web.archive.org/web/20180204002621/https://github.com/simplepie/simplepie-ng/blob/master/tests/benchmarks/atom10.php\"\u003ewrote a test that flexed everything\u003c/a\u003e about SimplePie NG that I could think of. I then started running the test over and over again, collecting data about the timing and memory usage, and when the cache kicks-in and the engine warms up.\u003c/p\u003e\n\u003ch3 id=\"test-machine-and-environment\"\u003eTest machine and environment\u003c/h3\u003e\n\u003cp\u003eI’m running this on a \u003ca href=\"https://web.archive.org/web/20180204002621/https://everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i7-2.2-17-early-2011-unibody-thunderbolt-specs.html\"\u003e2011 “Core i7” MacBook Pro\u003c/a\u003e, with 16 GB of RAM and an after-market SATA-III SSD. I have various background processes running, so it isn’t the same as running it on a fresh Linux web server. I also have \u003cem\u003eXDebug\u003c/em\u003e enabled, and I’m testing on the CLI where \u003cem\u003eZend OpCache\u003c/em\u003e is disabled.\u003c/p\u003e\n\u003ch3 id=\"first-pass-case-insensitive-with-xpath-translate\"\u003eFirst pass; Case-insensitive with XPath translate()\u003c/h3\u003e\n\u003cp\u003eThe intial results for this 3 MB, 500-entry feed — with case-insensitivity enabled by way of the XPath \u003ccode\u003etranslate()\u003c/code\u003e function — had an average runtime of \u003cstrong\u003e26 seconds\u003c/strong\u003e. That was \u003cem\u003equite\u003c/em\u003e a bit slower than I was hoping for (especially on PHP 7.2), but then again it \u003cem\u003ewas\u003c/em\u003e a big file with \u003cem\u003ea lot\u003c/em\u003e of entries.\u003c/p\u003e\n\u003cp\u003eLet’s compare to case-insensitivity turned off (i.e., case-sensitive XML parsing).\u003c/p\u003e\n\u003ch3 id=\"second-pass-normal-case-sensitive\"\u003eSecond pass; Normal, case-sensitive\u003c/h3\u003e\n\u003cp\u003eThe next round of results on the same 3 MB, 500-entry feed—with standard case-sensitive XPath queries—had an average runtime of \u003cstrong\u003e3.5 seconds\u003c/strong\u003e. That’s \u003cem\u003ea lot\u003c/em\u003e better.\u003c/p\u003e\n\u003cp\u003eTo do some quick math, the normal query took only \u003cstrong\u003e14%\u003c/strong\u003e of the amount of time it took to do a case-insensitive query. Or, put another way, the case-insensitive query took around \u003cstrong\u003e7.5×\u003c/strong\u003e longer than the normal query. \u003cem\u003eThat’s awful!\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"experimentation\"\u003eExperimentation\u003c/h2\u003e\n\u003cp\u003eI had to find a way to improve the performance of the case-insensitive XPath query. Could I reduce the number of times I had to call \u003ccode\u003etranslate()\u003c/code\u003e?\u003c/p\u003e\n\u003ch3 id=\"xslt\"\u003eXSLT\u003c/h3\u003e\n\u003cp\u003eI tried experimenting with XSLT for a few days. The goal was to transform the XML \u003cem\u003eonce\u003c/em\u003e with XSLT into a new XML document where all elements were lowercase, then I could just use regular XPath queries and avoid \u003ccode\u003etranslate()\u003c/code\u003e all-together.\u003c/p\u003e\n\u003cp\u003eOverall, I still think this is a fantastic idea if \u003cem\u003eyou know where your XML data is coming from\u003c/em\u003e. Unfortunately for me, I don’t, and I was completely unable to craft an appropriate XSLT template that would allow me to convert all tag names to lowercase without breaking a bunch of other things (e.g., entities). I ended up having to abandon this path.\u003c/p\u003e\n\u003ch3 id=\"enabling-php-functions-in-xpath\"\u003eEnabling PHP functions in XPath\u003c/h3\u003e\n\u003cp\u003eI only dabbled with this briefly, but there was no discernable performance improvement that I can recall. Also, the PHP documentation is lacking around this feature, so it was a lot of trial and error.\u003c/p\u003e\n\u003ch3 id=\"simplify-translate\"\u003eSimplify translate()\u003c/h3\u003e\n\u003cp\u003eFinally, I wondered if I could reduce the amount of time that \u003ccode\u003etranslate()\u003c/code\u003e takes if I simply gave it less work to do. Instead of giving it the entire alphabet, what if I only gave it the letters that were in the XML element name?\u003c/p\u003e\n\u003cp\u003ePHP has a function \u003ca href=\"https://web.archive.org/web/20180204002621/https://secure.php.net/manual/en/function.count-chars.php\"\u003e\u003ccode\u003ecount_chars()\u003c/code\u003e\u003c/a\u003e that can return the unique characters in a string. From here, we can create upper and lower-case versions of the string, and just use those in the \u003cem\u003etranslate()\u003c/em\u003e function.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?php\u003c/span\u003e\n\n$word           \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;rss\u0026#39;\u003c/span\u003e;\n$elementLetters \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e\\count_chars\u003c/span\u003e($word, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e);\n$lettersLower   \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e\\mb_strtolower\u003c/span\u003e($elementLetters);\n$lettersUpper   \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e\\mb_strtoupper\u003c/span\u003e($elementLetters);\n\n$query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e\\sprintf\u003c/span\u003e(\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/*[translate(name(), \\\u0026#39;%s\\\u0026#39;, \\\u0026#39;%s\\\u0026#39;) = \\\u0026#39;%s\\\u0026#39;]\u0026#39;\u003c/span\u003e,\n    $lettersUpper,\n    $lettersLower,\n    $word\n);\n\n\u003cspan style=\"color:#75715e\"\u003e# /*[translate(name(), \u0026#39;RS\u0026#39;, \u0026#39;rs\u0026#39;) = \u0026#39;rss\u0026#39;\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e$results \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e $domxpath\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e($query);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTesting this approach on the same 3 MB, 500-entry feed — with case-insensitivity enabled by way of our smarter \u003ccode\u003etranslate()\u003c/code\u003e function — had an average runtime of \u003cstrong\u003e17 seconds\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eRunning the same benchmarks against my other test feeds consistently showed a \u003cstrong\u003e30–35% improvement\u003c/strong\u003e in performance when using only the required letters in the \u003ccode\u003etranslate()\u003c/code\u003e function instead of the entire alphabet.\u003c/p\u003e\n\u003ch2 id=\"wrapping-up\"\u003eWrapping-up\u003c/h2\u003e\n\u003cp\u003eEven with this technique (on this particular set of data, with this particular testing approach), case-insensitive queries are still \u003cstrong\u003e4.5–5×\u003c/strong\u003e slower than their case-sensitive counterparts. Using the \u003ccode\u003etranslate()\u003c/code\u003e XPath 1.0 function in PHP has a substantial impact on performance, so \u003cem\u003edon’t use it if you don’t have to\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eI still think that there is some viability in leveraging XSLT in a first pass, which I expect would substantially reduce the case-insensitive processing time, but someone with more XSLT experience than me would need to contribute that code.\u003c/p\u003e\n\u003cp\u003eLastly, SimplePie NG performs the faster case-sensitive queries by default. You are able to opt-in to case-insensitive mode on a per-feed basis. If you’re just processing a few average-sized feeds with this mode enabled, you probably won’t notice much of an impact.\u003c/p\u003e\n",
        "plain":"TL;DR: How I improved the performance of case-insensitive XPath queries by 30–35%, reducing an 8× performance hit to only 4.5–5×. This was originally posted to the SimplePie NG blog.\n   Parse-at-all-costs Most feeds are a mess. The old SimplePie “OG” took a parse-at-all-costs philosophy, and could handle many of the most broken feeds you could find — at a cost. While the early versions of SimplePie supported the letter of the RSS 2.0 specification, there were a surprising number of feeds which didn’t.\nOnce SimplePie started to get popular (2006–2008), we started getting bug reports from users who were working with RSS feeds containing elements such as \u0026lt;pubdate\u0026gt; (instead of \u0026lt;pubDate\u0026gt;) and \u0026lt;managingeditor\u0026gt; (instead of \u0026lt;managingEditor\u0026gt;). At first we told users that the feeds were broken — which they were. But then we started getting enough reports that we decided to do something about it.\nIntroducing XPath Fast-forward to the summer of 2017 when I started work on SimplePie NG in earnest. There are a number of things I’m doing differently (read: better) this time around. The first is that the fastest approach is the default approach. A corollary to this principle is that if you want to do more things, you will pay for them with performance penalties.\nDuring my time working at Amazon Web Services on the SDK for PHP, I discovered some substantial performance gains by moving a lot of the response-parsing code to XPath. As such, the core XML parsing in SimplePie NG is all built around DOMDocument and XPath queries.\nTo solve this case-insensitivity problem, searching Stack Overflow for “case insensitive xpath” tells you about the XPath 2.0 functions matches() and lower-case(). However, I was surprised to learn that PHP only supports XPath 1.0. After doing some digging, the reason appears to be that the underlying libxml2 library only supports XPath 1.0, with no updated support on the horizon.\nThe only alternative that Google and Stack Overflow had for me was the XPath 1.0 function, translate(). In PHP, the case-insensitive query for the \u0026lt;rss\u0026gt; element would be:\n/*[translate(name(), \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39;, \u0026#39;abcdefghijklmnopqrstuvwxyz\u0026#39;) = \u0026#39;rss\u0026#39;] It’s simple enough to turn this into a pattern inside of a function. Case-insensitive XML parsing. Done. Boo-yah.\nPerformance-testing A little while later, I started some early work on benchmarking SimplePie NG. I parsed a number of normal-sized feeds, and got back a bunch of perfectly reasonable results. But one thing that I wanted to test was memory usage to make sure there were no memory leaks.\nI put together a quick and dirty test suite by starting with Tim Bray’s feed (one of the more nuanced and complex Atom 1.0 feeds), duplicating the entries to a total of 500 (increasing the size to around 3 MB), and then wrote a test that flexed everything about SimplePie NG that I could think of. I then started running the test over and over again, collecting data about the timing and memory usage, and when the cache kicks-in and the engine warms up.\nTest machine and environment I’m running this on a 2011 “Core i7” MacBook Pro, with 16 GB of RAM and an after-market SATA-III SSD. I have various background processes running, so it isn’t the same as running it on a fresh Linux web server. I also have XDebug enabled, and I’m testing on the CLI where Zend OpCache is disabled.\nFirst pass; Case-insensitive with XPath translate() The intial results for this 3 MB, 500-entry feed — with case-insensitivity enabled by way of the XPath translate() function — had an average runtime of 26 seconds. That was quite a bit slower than I was hoping for (especially on PHP 7.2), but then again it was a big file with a lot of entries.\nLet’s compare to case-insensitivity turned off (i.e., case-sensitive XML parsing).\nSecond pass; Normal, case-sensitive The next round of results on the same 3 MB, 500-entry feed—with standard case-sensitive XPath queries—had an average runtime of 3.5 seconds. That’s a lot better.\nTo do some quick math, the normal query took only 14% of the amount of time it took to do a case-insensitive query. Or, put another way, the case-insensitive query took around 7.5× longer than the normal query. That’s awful!\nExperimentation I had to find a way to improve the performance of the case-insensitive XPath query. Could I reduce the number of times I had to call translate()?\nXSLT I tried experimenting with XSLT for a few days. The goal was to transform the XML once with XSLT into a new XML document where all elements were lowercase, then I could just use regular XPath queries and avoid translate() all-together.\nOverall, I still think this is a fantastic idea if you know where your XML data is coming from. Unfortunately for me, I don’t, and I was completely unable to craft an appropriate XSLT template that would allow me to convert all tag names to lowercase without breaking a bunch of other things (e.g., entities). I ended up having to abandon this path.\nEnabling PHP functions in XPath I only dabbled with this briefly, but there was no discernable performance improvement that I can recall. Also, the PHP documentation is lacking around this feature, so it was a lot of trial and error.\nSimplify translate() Finally, I wondered if I could reduce the amount of time that translate() takes if I simply gave it less work to do. Instead of giving it the entire alphabet, what if I only gave it the letters that were in the XML element name?\nPHP has a function count_chars() that can return the unique characters in a string. From here, we can create upper and lower-case versions of the string, and just use those in the translate() function.\n\u0026lt;?php $word = \u0026#39;rss\u0026#39;; $elementLetters = \\count_chars($word, 3); $lettersLower = \\mb_strtolower($elementLetters); $lettersUpper = \\mb_strtoupper($elementLetters); $query = \\sprintf( \u0026#39;/*[translate(name(), \\\u0026#39;%s\\\u0026#39;, \\\u0026#39;%s\\\u0026#39;) = \\\u0026#39;%s\\\u0026#39;]\u0026#39;, $lettersUpper, $lettersLower, $word ); # /*[translate(name(), \u0026#39;RS\u0026#39;, \u0026#39;rs\u0026#39;) = \u0026#39;rss\u0026#39; $results = $domxpath-\u0026gt;query($query); Testing this approach on the same 3 MB, 500-entry feed — with case-insensitivity enabled by way of our smarter translate() function — had an average runtime of 17 seconds.\nRunning the same benchmarks against my other test feeds consistently showed a 30–35% improvement in performance when using only the required letters in the translate() function instead of the entire alphabet.\nWrapping-up Even with this technique (on this particular set of data, with this particular testing approach), case-insensitive queries are still 4.5–5× slower than their case-sensitive counterparts. Using the translate() XPath 1.0 function in PHP has a substantial impact on performance, so don’t use it if you don’t have to.\nI still think that there is some viability in leveraging XSLT in a first pass, which I expect would substantially reduce the case-insensitive processing time, but someone with more XSLT experience than me would need to contribute that code.\nLastly, SimplePie NG performs the faster case-sensitive queries by default. You are able to opt-in to case-insensitive mode on a per-feed basis. If you’re just processing a few average-sized feeds with this mode enabled, you probably won’t notice much of an impact.\n",
        "source":"\n{{\u003cdescription\u003e}}\nTL;DR: How I improved the performance of case-insensitive XPath queries by 30–35%, reducing an 8× performance hit to only 4.5–5×.\n{{\u003c/description\u003e}}\n\n{{% aside %}}\nThis was originally posted to the \u003ca href=\"https://medium.com/simplepie-ng/php-domdocument-xpath-1-0-case-insensitivity-and-performance-ad962b98e71c\"\u003eSimplePie NG blog\u003c/a\u003e.\n{{% /aside %}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2017/hackerman.jpg\" alt=\"Title card for “Hackerman”, a character from the short film “Kung Fury”. http://www.kungfury.com\" \u003e}}\n\n## Parse-at-all-costs\n\nMost feeds are a mess. The old SimplePie “OG” took a parse-at-all-costs philosophy, and could handle many of the most broken feeds you could find — at a cost. While the early versions of SimplePie supported the letter of the RSS 2.0 specification, there were a surprising number of feeds which didn’t.\n\nOnce SimplePie started to get popular (2006–2008), we started getting bug reports from users who were working with RSS feeds containing elements such as `\u003cpubdate\u003e` (instead of [`\u003cpubDate\u003e`]({{\u003c wayback \"http://www.rssboard.org/rss-specification\" \u003e}})) and `\u003cmanagingeditor\u003e` (instead of [`\u003cmanagingEditor\u003e`]({{\u003c wayback \"http://www.rssboard.org/rss-specification\" \u003e}})). At first we told users that the feeds were broken — which they were. But then we started getting enough reports that we decided to do something about it.\n\n## Introducing XPath\n\nFast-forward to the summer of 2017 when I started work on SimplePie NG in earnest. There are a number of things I’m doing differently (read: better) this time around. The first is that the _fastest_ approach is the _default_ approach. A corollary to this principle is that if you want to do more things, you will pay for them with performance penalties.\n\nDuring my time working at Amazon Web Services on the SDK for PHP, I discovered some substantial performance gains by moving a lot of the response-parsing code to XPath. As such, the core XML parsing in SimplePie NG is all built around [DOMDocument]({{\u003c wayback \"https://secure.php.net/domdocument\" \u003e}}) and [XPath]({{\u003c wayback \"https://secure.php.net/domxpath\" \u003e}}) queries.\n\nTo solve this case-insensitivity problem, [searching Stack Overflow for “case insensitive xpath”]({{\u003c wayback \"https://stackoverflow.com/questions/2893551/case-insensitive-matching-in-xpath\" \u003e}}) tells you about the XPath 2.0 functions [`matches()`]({{\u003c wayback \"https://www.w3.org/TR/xpath-functions/#func-matches\" \u003e}}) and [`lower-case()`]({{\u003c wayback \"https://www.w3.org/TR/xpath-functions/#func-lower-case\" \u003e}}). However, I was surprised to learn that PHP only supports XPath 1.0. After doing some digging, the reason appears to be that the underlying [libxml2]({{\u003c wayback \"http://xmlsoft.org\" \u003e}}) library only supports XPath 1.0, with [no updated support on the horizon]({{\u003c wayback \"https://mail.gnome.org/archives/xml/2007-February/msg00077.html\" \u003e}}).\n\nThe only alternative that Google and Stack Overflow had for me was the XPath 1.0 function, [`translate()`]({{\u003c wayback \"https://www.w3.org/TR/xpath/#function-translate\" \u003e}}). In PHP, the case-insensitive query for the `\u003crss\u003e` element would be:\n\n```php\n/*[translate(name(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rss']\n```\n\nIt’s simple enough to turn this into a pattern inside of a function. Case-insensitive XML parsing. Done. Boo-yah.\n\n## Performance-testing\n\nA little while later, I started some early work on benchmarking SimplePie NG. I parsed a number of normal-sized feeds, and got back a bunch of perfectly reasonable results. But one thing that I wanted to test was memory usage to make sure there were no memory leaks.\n\nI put together a quick and dirty test suite by starting with Tim Bray’s feed (one of the more nuanced and complex Atom 1.0 feeds), [duplicating the entries to a total of 500]({{\u003c wayback \"https://raw.githubusercontent.com/simplepie/simplepie-ng/master/tests/Integration/feeds/full/atom10/tim-bray-500.xml\" \u003e}}) (increasing the size to around 3 MB), and then [wrote a test that flexed everything]({{\u003c wayback \"https://github.com/simplepie/simplepie-ng/blob/master/tests/benchmarks/atom10.php\" \u003e}}) about SimplePie NG that I could think of. I then started running the test over and over again, collecting data about the timing and memory usage, and when the cache kicks-in and the engine warms up.\n\n### Test machine and environment\n\nI’m running this on a [2011 “Core i7” MacBook Pro]({{\u003c wayback \"https://everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i7-2.2-17-early-2011-unibody-thunderbolt-specs.html\" \u003e}}), with 16 GB of RAM and an after-market SATA-III SSD. I have various background processes running, so it isn’t the same as running it on a fresh Linux web server. I also have _XDebug_ enabled, and I’m testing on the CLI where _Zend OpCache_ is disabled.\n\n### First pass; Case-insensitive with XPath translate()\n\nThe intial results for this 3 MB, 500-entry feed — with case-insensitivity enabled by way of the XPath `translate()` function — had an average runtime of **26 seconds**. That was _quite_ a bit slower than I was hoping for (especially on PHP 7.2), but then again it _was_ a big file with _a lot_ of entries.\n\nLet’s compare to case-insensitivity turned off (i.e., case-sensitive XML parsing).\n\n### Second pass; Normal, case-sensitive\n\nThe next round of results on the same 3 MB, 500-entry feed—with standard case-sensitive XPath queries—had an average runtime of **3.5 seconds**. That’s _a lot_ better.\n\nTo do some quick math, the normal query took only **14%** of the amount of time it took to do a case-insensitive query. Or, put another way, the case-insensitive query took around **7.5×** longer than the normal query. _That’s awful!_\n\n## Experimentation\n\nI had to find a way to improve the performance of the case-insensitive XPath query. Could I reduce the number of times I had to call `translate()`?\n\n### XSLT\n\nI tried experimenting with XSLT for a few days. The goal was to transform the XML _once_ with XSLT into a new XML document where all elements were lowercase, then I could just use regular XPath queries and avoid `translate()` all-together.\n\nOverall, I still think this is a fantastic idea if _you know where your XML data is coming from_. Unfortunately for me, I don’t, and I was completely unable to craft an appropriate XSLT template that would allow me to convert all tag names to lowercase without breaking a bunch of other things (e.g., entities). I ended up having to abandon this path.\n\n### Enabling PHP functions in XPath\n\nI only dabbled with this briefly, but there was no discernable performance improvement that I can recall. Also, the PHP documentation is lacking around this feature, so it was a lot of trial and error.\n\n### Simplify translate()\n\nFinally, I wondered if I could reduce the amount of time that `translate()` takes if I simply gave it less work to do. Instead of giving it the entire alphabet, what if I only gave it the letters that were in the XML element name?\n\nPHP has a function [`count_chars()`]({{\u003c wayback \"https://secure.php.net/manual/en/function.count-chars.php\" \u003e}}) that can return the unique characters in a string. From here, we can create upper and lower-case versions of the string, and just use those in the _translate()_ function.\n\n```php\n\u003c?php\n\n$word           = 'rss';\n$elementLetters = \\count_chars($word, 3);\n$lettersLower   = \\mb_strtolower($elementLetters);\n$lettersUpper   = \\mb_strtoupper($elementLetters);\n\n$query = \\sprintf(\n    '/*[translate(name(), \\'%s\\', \\'%s\\') = \\'%s\\']',\n    $lettersUpper,\n    $lettersLower,\n    $word\n);\n\n# /*[translate(name(), 'RS', 'rs') = 'rss'\n$results = $domxpath-\u003equery($query);\n```\n\nTesting this approach on the same 3 MB, 500-entry feed — with case-insensitivity enabled by way of our smarter `translate()` function — had an average runtime of **17 seconds**.\n\nRunning the same benchmarks against my other test feeds consistently showed a **30–35% improvement** in performance when using only the required letters in the `translate()` function instead of the entire alphabet.\n\n## Wrapping-up\n\nEven with this technique (on this particular set of data, with this particular testing approach), case-insensitive queries are still **4.5–5×** slower than their case-sensitive counterparts. Using the `translate()` XPath 1.0 function in PHP has a substantial impact on performance, so _don’t use it if you don’t have to_.\n\nI still think that there is some viability in leveraging XSLT in a first pass, which I expect would substantially reduce the case-insensitive processing time, but someone with more XSLT experience than me would need to contribute that code.\n\nLastly, SimplePie NG performs the faster case-sensitive queries by default. You are able to opt-in to case-insensitive mode on a per-feed basis. If you’re just processing a few average-sized feeds with this mode enabled, you probably won’t notice much of an impact.\n"},
    "links": {
        "prev": {"title": "A Refresh of the SimplePie Logo", "permalink": "https://ryanparman.com/posts/2017/a-refresh-of-the-simplepie-logo/"},
        "next": {"title": "Dear Nintendo, Part II", "permalink": "https://ryanparman.com/posts/2018/dear-nintendo-part-ii/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Clueless Recruiters, Issue #7",
    "description": "",
    "summary": {
        "content": "Pure, unadulterated incompetence in this week's episode of Clueless Recruiters! (Cue theme music!) Explanation There are few things that technical people are more annoyed by than technical recruiters. A very large segment of the technical recruiting industry has made a bad name for the rest of their industry by relentlessly spamming technical professionals after having not done their homework. These people hock job openings the same way that sleazy salesmen hock used cars. These recruiting companies need to radically change how they do business with the technical crowd, and the Clueless Recruiters series is an attempt to call out clueless technical recruiters who contact me for jobs that are clearly a terrible fit.",
        "isTruncated": true
    },
    "published": "2016-02-26T12:30:00Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2016/clueless-recruiters-issue-7/",
    "relativePermalink": "/posts/2016/clueless-recruiters-issue-7/",
    "aliases": ["/2016/02/26/clueless-recruiters-issue-7/"],
    "images": [],
    "videos": [],
    "categories": ["Clueless Recruiters"],
    "tags": ["schlock", "technical recruiters", "cattle-call", "xslt", "soa", "rest", "incompetent"],
    "series": ["Clueless Recruiters"],
    "keywords": [],
    "meta": {
        "wordCount": 515,
        "readingTime": "3 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2016/20160226-clueless-recruiters-issue-7.md",
        "logicalName": "20160226-clueless-recruiters-issue-7.md",
        "translationBaseName": "20160226-clueless-recruiters-issue-7",
        "baseFileName": "20160226-clueless-recruiters-issue-7",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2016/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#explanation\"\u003eExplanation\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#recruiter-schlock\"\u003eRecruiter Schlock\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nPure, unadulterated incompetence in this week's episode of \u003cem\u003eClueless Recruiters\u003c/em\u003e! (Cue theme music!)\n\u003c/p\u003e\n\n\u003ch2 id=\"explanation\"\u003eExplanation\u003c/h2\u003e\n\n\u003caside class=\"age aside container flex\"\u003e\u003cp\u003eThere are few things that technical people are more annoyed by than technical recruiters. A very large segment of the technical recruiting industry has made a bad name for the rest of their industry by relentlessly spamming technical professionals after having \u003ca href=\"/2011/11/05/how-to-make-technical-professionals-not-hate-your-guts-a-guide-for-technical-recruiters/\"\u003enot done their homework\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThese people hock job openings the same way that sleazy salesmen hock used cars. These recruiting companies need to radically change how they do business with the technical crowd, and the \u003ca href=\"/categories/clueless-recruiters/\"\u003eClueless Recruiters\u003c/a\u003e series is an attempt to call out clueless technical recruiters who contact me for jobs that are clearly a terrible fit. Everything here is posted from \u003cem\u003ereal\u003c/em\u003e exchanges between myself and recruiters, entirely uncut. Enjoy!\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003ch2 id=\"recruiter-schlock\"\u003eRecruiter Schlock\u003c/h2\u003e\n\u003cp\u003eHere\u0026rsquo;s one I got this morning from a \u003cem\u003eclueless recruiter\u003c/em\u003e. For reference, here is my \u003ca href=\"http://ryanparman.com/resume/\"\u003erésumé\u003c/a\u003e.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSubject: Immediate Hiring :: Web Developer :: 6+ Months :: Los Angeles, CA\u003cbr\u003e\nFrom: {redacted recruiter email address}\u003cbr\u003e\nTo: {the same redacted recruiter email address}\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eOh, this is gonna be fun.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHi Associates,\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003e\u003ccode\u003e/me is quizzical\u003c/code\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eHope you are doing great !\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAt least you didn’t say “your”.\u003c/p\u003e\n\u003cp\u003eAlthough that’s a weird space at the end of the sentence. Non-native english speaker?\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eIf you are good for the below position please send me your most updated resume along with the contact details.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThey\u0026rsquo;re not even spamming me directly, \u003cem\u003eby name\u003c/em\u003e anymore. This is just a cattle call.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eJob Title : Web Developer\u003cbr\u003e\nDuration : 6+ Months\u003cbr\u003e\nLocation : Los Angeles, CA\u003c/p\u003e\n\u003cp\u003eRequired Skills:\u003cbr\u003e\nOne of our client is looking for a Web developer with strong experience on SOA, XSLT and Resful.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI think you mean, “One of our \u003cstrike\u003eclient\u003c/strike\u003e \u003cstrong\u003eclients\u003c/strong\u003e is looking for a \u003cstrike\u003eWeb\u003c/strike\u003e \u003cstrong\u003eweb\u003c/strong\u003e developer with strong experience \u003cstrike\u003eon\u003c/strike\u003e \u003cstrong\u003ewith\u003c/strong\u003e \u003cstrike\u003eSOA\u003c/strike\u003e \u003cstrong\u003eservice-oriented architecture (e.g., micro-services)\u003c/strong\u003e, XSLT and \u003cstrike\u003eResful\u003c/strike\u003e \u003cstrong\u003eREST-like web service interfaces\u003c/strong\u003e.”\u003c/p\u003e\n\u003cp\u003eI was mistaken. Not \u003cem\u003eonly\u003c/em\u003e are you clearly a non-native english speaker (which I don’t necessarily mind), but more of a \u003cem\u003enot-going-to-try-very-hard\u003c/em\u003e english speaker. Word usage is the issue here instead of sentence structure, which means you’re not simply an American who can’t \u003cem\u003eRITE GUD\u003c/em\u003e. You used periods and commas and everything!\u003c/p\u003e\n\u003cp\u003eIncompetent Americans will shorten \u003cem\u003eyou are\u003c/em\u003e to \u003cem\u003eur\u003c/em\u003e for brevity (because apparently we all still have Nokia dumb-phones with “T-9” texting), or gleefully confuse then/than, lose/loose, formally/formerly, or to/too/two, but also lack a fundamental understanding of basic sentence structure. The usage of periods and commas in your sentences tells me that you weren’t raised in the American school system. HAHA I FIGURED YOU OUT!\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e{Name redacted}\u003cbr\u003e\nSenior Recruiting Manager\u003cbr\u003e\n{Company redacted}\u003cbr\u003e\n{Address redacted}\u003cbr\u003e\nHackensack, NJ 07601\u003cbr\u003e\nVoice: {redacted}\u003cbr\u003e\nFax: {redacted}\u003cbr\u003e\n{email redacted}\u003cbr\u003e\n{www redacted}\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThat’s it?! No sales pitch? No carrot to dangle to even make me \u003cem\u003econsider\u003c/em\u003e packing up my life and moving 6 hours away for a 6-month \u0026ldquo;gig\u0026rdquo;? No company name? Is this a 1099 pr W-2 position? What do the stock offerings look like? What is the ballpark salary range, \u003cem\u003edepending on experience?\u003c/em\u003e\u003c/p\u003e\n\u003cblockquote\u003e\n\u003chr\u003e\n\u003cp\u003eThis email has been scanned by the Symantec Email Security.cloud service.\u003cbr\u003e\nFor more information please visit \u003ca href=\"http://www.symanteccloud.com\"\u003ehttp://www.symanteccloud.com\u003c/a\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003c/blockquote\u003e\n",
        "plain":"Pure, unadulterated incompetence in this week's episode of Clueless Recruiters! (Cue theme music!) Explanation There are few things that technical people are more annoyed by than technical recruiters. A very large segment of the technical recruiting industry has made a bad name for the rest of their industry by relentlessly spamming technical professionals after having not done their homework.\nThese people hock job openings the same way that sleazy salesmen hock used cars. These recruiting companies need to radically change how they do business with the technical crowd, and the Clueless Recruiters series is an attempt to call out clueless technical recruiters who contact me for jobs that are clearly a terrible fit. Everything here is posted from real exchanges between myself and recruiters, entirely uncut. Enjoy!\n Recruiter Schlock Here\u0026rsquo;s one I got this morning from a clueless recruiter. For reference, here is my résumé.\n Subject: Immediate Hiring :: Web Developer :: 6+ Months :: Los Angeles, CA\nFrom: {redacted recruiter email address}\nTo: {the same redacted recruiter email address}\n Oh, this is gonna be fun.\n Hi Associates,\n /me is quizzical\n Hope you are doing great !\n At least you didn’t say “your”.\nAlthough that’s a weird space at the end of the sentence. Non-native english speaker?\n If you are good for the below position please send me your most updated resume along with the contact details.\n They\u0026rsquo;re not even spamming me directly, by name anymore. This is just a cattle call.\n Job Title : Web Developer\nDuration : 6+ Months\nLocation : Los Angeles, CA\nRequired Skills:\nOne of our client is looking for a Web developer with strong experience on SOA, XSLT and Resful.\n I think you mean, “One of our client clients is looking for a Web web developer with strong experience on with SOA service-oriented architecture (e.g., micro-services), XSLT and Resful REST-like web service interfaces.”\nI was mistaken. Not only are you clearly a non-native english speaker (which I don’t necessarily mind), but more of a not-going-to-try-very-hard english speaker. Word usage is the issue here instead of sentence structure, which means you’re not simply an American who can’t RITE GUD. You used periods and commas and everything!\nIncompetent Americans will shorten you are to ur for brevity (because apparently we all still have Nokia dumb-phones with “T-9” texting), or gleefully confuse then/than, lose/loose, formally/formerly, or to/too/two, but also lack a fundamental understanding of basic sentence structure. The usage of periods and commas in your sentences tells me that you weren’t raised in the American school system. HAHA I FIGURED YOU OUT!\n {Name redacted}\nSenior Recruiting Manager\n{Company redacted}\n{Address redacted}\nHackensack, NJ 07601\nVoice: {redacted}\nFax: {redacted}\n{email redacted}\n{www redacted}\n That’s it?! No sales pitch? No carrot to dangle to even make me consider packing up my life and moving 6 hours away for a 6-month \u0026ldquo;gig\u0026rdquo;? No company name? Is this a 1099 pr W-2 position? What do the stock offerings look like? What is the ballpark salary range, depending on experience?\n  This email has been scanned by the Symantec Email Security.cloud service.\nFor more information please visit http://www.symanteccloud.com\n  ",
        "source":"\n{{\u003cdescription\u003e}}\nPure, unadulterated incompetence in this week's episode of \u003cem\u003eClueless Recruiters\u003c/em\u003e! (Cue theme music!)\n{{\u003c/description\u003e}}\n\n## Explanation\n\n{{% aside %}}\nThere are few things that technical people are more annoyed by than technical recruiters. A very large segment of the technical recruiting industry has made a bad name for the rest of their industry by relentlessly spamming technical professionals after having [not done their homework](/2011/11/05/how-to-make-technical-professionals-not-hate-your-guts-a-guide-for-technical-recruiters/).\n\nThese people hock job openings the same way that sleazy salesmen hock used cars. These recruiting companies need to radically change how they do business with the technical crowd, and the [Clueless Recruiters](/categories/clueless-recruiters/) series is an attempt to call out clueless technical recruiters who contact me for jobs that are clearly a terrible fit. Everything here is posted from *real* exchanges between myself and recruiters, entirely uncut. Enjoy!\n{{% /aside %}}\n\n## Recruiter Schlock\n\nHere's one I got this morning from a *clueless recruiter*. For reference, here is my [résumé][3].\n\n\u003e Subject: Immediate Hiring :: Web Developer :: 6+ Months :: Los Angeles, CA  \n\u003e From: {redacted recruiter email address}  \n\u003e To: {the same redacted recruiter email address}\n\nOh, this is gonna be fun.\n\n\u003e Hi Associates,\n\n`/me is quizzical`\n\n\u003e Hope you are doing great !\n\nAt least you didn’t say “your”.\n\nAlthough that’s a weird space at the end of the sentence. Non-native english speaker?\n\n\u003e If you are good for the below position please send me your most updated resume along with the contact details.\n\nThey're not even spamming me directly, *by name* anymore. This is just a cattle call.\n\n\u003e Job Title : Web Developer  \n\u003e Duration : 6+ Months  \n\u003e Location : Los Angeles, CA\n\u003e \n\u003e Required Skills:  \n\u003e One of our client is looking for a Web developer with strong experience on SOA, XSLT and Resful.\n\nI think you mean, “One of our \u003cstrike\u003eclient\u003c/strike\u003e **clients** is looking for a \u003cstrike\u003eWeb\u003c/strike\u003e **web** developer with strong experience \u003cstrike\u003eon\u003c/strike\u003e **with** \u003cstrike\u003eSOA\u003c/strike\u003e **service-oriented architecture (e.g., micro-services)**, XSLT and \u003cstrike\u003eResful\u003c/strike\u003e **REST-like web service interfaces**.”\n\nI was mistaken. Not *only* are you clearly a non-native english speaker (which I don’t necessarily mind), but more of a *not-going-to-try-very-hard* english speaker. Word usage is the issue here instead of sentence structure, which means you’re not simply an American who can’t *RITE GUD*. You used periods and commas and everything!\n\nIncompetent Americans will shorten *you are* to *ur* for brevity (because apparently we all still have Nokia dumb-phones with “T-9” texting), or gleefully confuse then/than, lose/loose, formally/formerly, or to/too/two, but also lack a fundamental understanding of basic sentence structure. The usage of periods and commas in your sentences tells me that you weren’t raised in the American school system. HAHA I FIGURED YOU OUT!\n\n\u003e {Name redacted}  \n\u003e Senior Recruiting Manager  \n\u003e {Company redacted}  \n\u003e {Address redacted}  \n\u003e Hackensack, NJ 07601  \n\u003e Voice: {redacted}  \n\u003e Fax: {redacted}  \n\u003e {email redacted}  \n\u003e {www redacted}\n\nThat’s it?! No sales pitch? No carrot to dangle to even make me *consider* packing up my life and moving 6 hours away for a 6-month \"gig\"? No company name? Is this a 1099 pr W-2 position? What do the stock offerings look like? What is the ballpark salary range, *depending on experience?*\n\n\u003e * * *\n\u003e \n\u003e This email has been scanned by the Symantec Email Security.cloud service.  \n\u003e For more information please visit http://www.symanteccloud.com\n\u003e \n\u003e * * *\n\n  [1]: http://blog.ryanparman.com/2011/11/05/how-to-make-technical-professionals-not-hate-your-guts-a-guide-for-technical-recruiters/\n  [2]: http://blog.ryanparman.com/tags/clueless-recruiters/\n  [3]: http://ryanparman.com/resume/\n"},
    "links": {
        "prev": {"title": "A View of the Current Presidential Candidates by a Political Moderate", "permalink": "https://ryanparman.com/posts/2015/a-view-of-the-current-presidential-candidates-by-a-political-moderate/"},
        "next": {"title": "Stupid, Short-Term Self-Interest", "permalink": "https://ryanparman.com/posts/2016/stupid-short-term-self-interest/"},
        "ignore": "me"
    }
}

            
        ]
    }
}
