{
    "data": {
        
        
        "taxonomy": "tag",
        "term": "h.264",
        
        "count": 4,
        "items": [
            
            {
    "kind": "page",
    "title": "Serving Bandwidth-Friendly Video with HTTP Live Streaming (HLS)",
    "description": "",
    "summary": {
        "content": "While YouTube is free (as in money) to use, the cost is paid in terms of privacy and advertising analytics. So I've decided to investigate self-hosting my video content. The Cost of YouTube With YouTube, you sacrifice privacy in favor of cost. YouTube is the very best at what they do (serve video to all resolutions and bandwidths), and they are backed by Google who is the very best at what they do (collect data in order to facilitate selling a primed audience to advertisers).",
        "isTruncated": true
    },
    "published": "2018-09-09T03:18:33Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2018/serving-bandwidth-friendly-video-with-hls/",
    "relativePermalink": "/posts/2018/serving-bandwidth-friendly-video-with-hls/",
    "aliases": ["/2018/09/09/serving-bandwidth-friendly-video-with-hls"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2018/adaptive-bitrate-streaming.png", "https://cdn.ryanparman.com/hugo/posts/2018/youtube-2017.png"],
    "videos": ["https://cdn.ryanparman.com/hls/hallelujah.fmp4/progressive.mp4"],
    "categories": ["Projects and Code"],
    "tags": ["youtube", "h.264", "hls", "mpeg", "dash", "streaming", "s3", "cloudfront", "safari", "chrome", "firefox", "edge"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 1611,
        "readingTime": "8 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2018/20180909-serving-bandwidth-friendly-video-with-hls.md",
        "logicalName": "20180909-serving-bandwidth-friendly-video-with-hls.md",
        "translationBaseName": "20180909-serving-bandwidth-friendly-video-with-hls",
        "baseFileName": "20180909-serving-bandwidth-friendly-video-with-hls",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2018/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#the-cost-of-youtube\"\u003eThe Cost of YouTube\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#self-hosting-video-content\"\u003eSelf-Hosting Video Content\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#adaptive-bitrate-streaming\"\u003eAdaptive Bitrate Streaming\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#http-live-streaming-hls\"\u003eHTTP Live Streaming (HLS)\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#sample-video\"\u003eSample Video\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#implementation\"\u003eImplementation\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#encoding-and-deploying-video\"\u003eEncoding and Deploying Video\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#the-client-side-code\"\u003eThe Client-Side Code\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#enabling-chrome-firefox-and-edge-using-hlsjs\"\u003eEnabling Chrome, Firefox, and Edge using hls.js\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#cors\"\u003eCORS\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nWhile YouTube is free (as in money) to use, the cost is paid in terms of privacy and advertising analytics. So I've decided to investigate self-hosting my video content.\n\u003c/p\u003e\n\n\u003ch2 id=\"the-cost-of-youtube\"\u003eThe Cost of YouTube\u003c/h2\u003e\n\u003cp\u003eWith YouTube, you sacrifice privacy in favor of cost. YouTube is the very best at what they do (serve video to all resolutions and bandwidths), and they are backed by Google who is the very best at what they do (collect data in order to facilitate selling a primed audience to advertisers).\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2018/youtube-2017.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThere’s nothing inherently wrong with that. We live in a capitalistic society; there is money to be made; Google/YouTube is providing a service to advertisers; many consumers will (knowingly or unknowingly) give up their privacy in exchange for free-as-in-money services.\u003c/p\u003e\n\u003cp\u003eBut as I\u0026rsquo;ve gotten older and started to realize just \u003cem\u003ehow much\u003c/em\u003e data Google has on each and every one of us, I\u0026rsquo;ve started valuing my privacy a lot more. I\u0026rsquo;d like to provide an option for you to protect your privacy as well.\u003c/p\u003e\n\u003ch2 id=\"self-hosting-video-content\"\u003eSelf-Hosting Video Content\u003c/h2\u003e\n\u003cp\u003eEven with efficient video codecs, video can still cost a lot of money to serve.\u003c/p\u003e\n\u003cp\u003eMany websites provide \u003cem\u003ea video\u003c/em\u003e to their users, wherein this video is a single file, and the browser will begin loading and playing the video from start to finish. This means that even if the user only watches the first few seconds of a 5 minute video, it\u0026rsquo;s possible that the video is downloaded in its entirety — which is an unnecessary cost.\u003c/p\u003e\n\u003cp\u003eHowever, we can provide a \u003cem\u003ebetter user experience\u003c/em\u003e as well as \u003cem\u003ereduce hosting costs\u003c/em\u003e by leveraging the ability to serve bandwidth-adaptive chunks of video to players on-demand.\u003c/p\u003e\n\u003ch3 id=\"adaptive-bitrate-streaming\"\u003eAdaptive Bitrate Streaming\u003c/h3\u003e\n\u003cp\u003eThere are two major, semi-compatible approaches to \u003ca href=\"https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming\"\u003eadaptive bitrate streaming\u003c/a\u003e over HTTP. One is called \u003ca href=\"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\"\u003eHTTP Live Streaming\u003c/a\u003e (“HLS”), and the other is called \u003ca href=\"https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP\"\u003eDynamic Adaptive Streaming over HTTP\u003c/a\u003e (“MPEG-DASH”).\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2018/adaptive-bitrate-streaming.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eFrom \u003ca href=\"https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming\"\u003eWikipedia\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAdaptive bitrate streaming is a technique used in streaming multimedia over computer networks. While in the past most video or audio streaming technologies utilized streaming protocols such as RTP with RTSP, today\u0026rsquo;s adaptive streaming technologies are almost exclusively based on HTTP and designed to work efficiently over large distributed HTTP networks such as the Internet.\u003c/p\u003e\n\u003cp\u003eIt works by detecting a user\u0026rsquo;s bandwidth and CPU capacity in real time and adjusting the quality of the media stream accordingly. It requires the use of an encoder which can encode a single source media (video or audio) at multiple bit rates. The player client switches between streaming the different encodings depending on available resources. \u0026ldquo;The result: very little buffering, fast start time and a good experience for both high-end and low-end connections.\u0026rdquo; […]\u003c/p\u003e\n\u003cp\u003eHTTP-based adaptive bitrate streaming technologies yield additional benefits over traditional server-driven adaptive bitrate streaming. First, since the streaming technology is built on top of HTTP, contrary to RTP-based adaptive streaming, the packets have no difficulties traversing firewall and NAT devices. Second, since HTTP streaming is purely client-driven, all adaptation logic resides at the client. This reduces the requirement of persistent connections between server and client application. Furthermore, the server is not required to maintain session state information on each client, increasing scalability. Finally, existing HTTP delivery infrastructure, such as HTTP caches and servers can be seamlessly adopted.\u003c/p\u003e\n\u003cp\u003eA scalable CDN is used to deliver media streaming to an Internet audience. The CDN receives the stream from the source at its Origin server, then replicates it to many or all of its Edge cache servers. The end-user requests the stream and is redirected to the \u0026ldquo;closest\u0026rdquo; Edge server. […] The use of HTTP-based adaptive streaming allows the Edge server to run a simple HTTP server software, whose licence cost is cheap or free, reducing software licensing cost, compared to costly media server licences (e.g. Adobe Flash Media Streaming Server). The CDN cost for HTTP streaming media is then similar to HTTP web caching CDN cost.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis means that we can use off-the-shelf services like \u003ca href=\"https://aws.amazon.com/s3\"\u003eAmazon S3\u003c/a\u003e and \u003ca href=\"https://aws.amazon.com/cloudfront\"\u003eAmazon CloudFront\u003c/a\u003e to serve video, which are relatively inexpensive and have large user-bases who can answer questions when you run into issues.\u003c/p\u003e\n\u003ch3 id=\"http-live-streaming-hls\"\u003eHTTP Live Streaming (HLS)\u003c/h3\u003e\n\u003cp\u003eAfter doing some research, I came across a blog post that was particularly helpful — “\u003ca href=\"https://vincent.bernat.ch/en/blog/2018-self-hosted-videos\"\u003eSelf-hosted videos with HLS\u003c/a\u003e” by Vincent Bernat.\u003c/p\u003e\n\u003cp\u003eVincent writes:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTo serve HLS videos, you need three kinds of files:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ethe media segments (encoded with different bitrates/resolutions),\u003c/li\u003e\n\u003cli\u003ea media playlist for each variant, listing the media segments, and\u003c/li\u003e\n\u003cli\u003ea master playlist, listing the media playlists.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMedia segments can come in two formats:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMPEG-2 Transport Streams (TS), or\u003c/li\u003e\n\u003cli\u003eFragmented MP4.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFragmented MP4 media segments are supported since iOS 10. They are a bit more efficient and can be reused to serve the same content as MPEG-DASH (only the playlists are different). Also, they can be served from the same file with range requests. However, if you want to target older versions of iOS, you need to stick with MPEG-2 TS.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAt the time of this writing, iOS 12 will be out in a week or two. A quick search tells me that \u003ca href=\"https://data.apteligent.com/ios/\"\u003eiOS 10 and newer make up 85% of all iOS users\u003c/a\u003e. This means that I can pretty safely use the \u003cem\u003eFragmented MP4\u003c/em\u003e method which, according to \u003ca href=\"https://bitmovin.com/hls-news-wwdc-2016/\"\u003ethese\u003c/a\u003e \u003ca href=\"http://www.streamingmedia.com/Articles/ReadArticle.aspx?ArticleID=111796\"\u003esources\u003c/a\u003e, is more compatible with MPEG-DASH for some cross-over implementations in the future.\u003c/p\u003e\n\u003ch2 id=\"sample-video\"\u003eSample Video\u003c/h2\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; overflow: hidden;\"\u003e\n    \u003cvideo poster=\"https://cdn.ryanparman.com/hls/hallelujah.fmp4/poster.jpg\" controls preload=\"none\" style=\"position: absolute; width: 100%; height: 100%;\"\u003e\n      \u003csource src=\"https://cdn.ryanparman.com/hls/hallelujah.fmp4/index.m3u8\" type=\"application/vnd.apple.mpegurl\"\u003e\n      \u003csource src=\"https://cdn.ryanparman.com/hls/hallelujah.fmp4/progressive.mp4\" type='video/mp4; codecs=\"avc1.4d401f, mp4a.40.2\"'\u003e\n    \u003c/video\u003e\n\u003c/div\u003e\u003cp class=\"tc black-60 db mb2\"\u003e\u003csmall\u003e\u003cb\u003eSource:\u003c/b\u003e \u003ca href=\"https://youtu.be/e1C9kpMV2e8\"\u003eHallelujah - Brooklyn Duo (Piano \u0026#43; Cello)\u003c/a\u003e\u003c/small\u003e\u003c/p\u003e\n\u003ch2 id=\"implementation\"\u003eImplementation\u003c/h2\u003e\n\u003ch3 id=\"encoding-and-deploying-video\"\u003eEncoding and Deploying Video\u003c/h3\u003e\n\u003cp\u003eVincent Bernat provides a tool on GitHub which greatly simplifies the process of creating the various video fragments called \u003ca href=\"https://github.com/vincentbernat/video2hls\"\u003evideo2hls\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFor \u003ca href=\"https://github.com/skyzyx/blog/blob/master/Makefile\"\u003ethis website\u003c/a\u003e, I have put together a workflow for creating and serving HLS video content.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eI use \u003cstrong\u003eH.264\u003c/strong\u003e video with \u003cstrong\u003eAAC\u003c/strong\u003e audio wrapped inside an \u003cstrong\u003eMP4\u003c/strong\u003e container, \u003cem\u003eexclusively\u003c/em\u003e. These are all defined as part of the MPEG-4 specification, and is the \u003ca href=\"https://caniuse.com/#search=H.264\"\u003ebest-supported grouping of codecs and containers across all browsers and devices\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eHardware-level decoders are commonplace inside computers, phones, tablets, and set-top boxes like Xbox, PlayStation, and Apple TV.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eI have a directory called \u003ccode\u003estreaming-video\u003c/code\u003e, which is separate from the images that I use and push to S3. Video files are large, and I don\u0026rsquo;t want to accidentally push partially-completed video data to my caching CDN before they\u0026rsquo;re ready.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eI have a command which takes any video file inside the \u003ccode\u003estreaming-video\u003c/code\u003e folder, with a filename ending in \u003ccode\u003e-source.mp4\u003c/code\u003e, and passes it through \u003ccode\u003evideo2hls\u003c/code\u003e, creating a folder called \u003ccode\u003e{video}.fmp4\u003c/code\u003e which contains all of the video and playlist files I need across a large variety of bandwidths and resolutions.\u003c/p\u003e\n\u003cp\u003eIt will only do the work to create the directory and all of the fragmented files if the directory doesn\u0026rsquo;t already exist.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003efind ./streaming-video -type f -name \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*-source.mp4\u0026#34;\u003c/span\u003e | xargs -I \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    bash -c \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;if [ ! -d \u0026#34;${1%-source.mp4}.fmp4\u0026#34; ]; then \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        video2hls --debug --output \u0026#34;${1%-source.mp4}.fmp4\u0026#34; --hls-type fmp4 \u0026#34;$1\u0026#34;; \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e    fi;\u0026#39;\u003c/span\u003e _ \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eI find all of the \u003ccode\u003e.m3u8\u003c/code\u003e playlist files and gzip them (since they\u0026rsquo;re just text). This is essentially an in-place rewrite of the files.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003efind ./streaming-video -type f -name \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*.m3u8\u0026#34;\u003c/span\u003e | xargs -P \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e -I \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    bash -c \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;! gunzip -t $1 2\u0026gt;/dev/null \u0026amp;\u0026amp; gzip -v $1 \u0026amp;\u0026amp; mv -v $1.gz $1;\u0026#39;\u003c/span\u003e _ \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLastly, I push all of the files up to the \u003ccode\u003ehls\u003c/code\u003e folder in my S3 bucket using the \u003ca href=\"https://github.com/aws/aws-cli\"\u003eAWS Unified CLI Tools\u003c/a\u003e, setting the correct \u003ccode\u003eContent-Type\u003c/code\u003e and \u003ccode\u003eContent-Encoding\u003c/code\u003e headers.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#75715e\"\u003e# The .m3u8 playlists that we gzipped\u003c/span\u003e\naws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --exclude \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.*\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --include \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.m3u8\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --acl\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epublic-read \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --cache-control max-age\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e31536000,public \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --content-type \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;application/vnd.apple.mpegurl\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --content-encoding \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;gzip\u0026#39;\u003c/span\u003e\n\n\u003cspan style=\"color:#75715e\"\u003e# The video \u0026#34;posters\u0026#34;\u003c/span\u003e\naws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --exclude \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.*\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --include \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.jpg\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --acl\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epublic-read \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --cache-control max-age\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e31536000,public \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --content-type \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;image/jpeg\u0026#39;\u003c/span\u003e\n\n\u003cspan style=\"color:#75715e\"\u003e# The fragmented MP4 files\u003c/span\u003e\naws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --exclude \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.*\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --include \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.mp4\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --acl\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epublic-read \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --cache-control max-age\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e31536000,public \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --content-type \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;video/mp4\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"the-client-side-code\"\u003eThe Client-Side Code\u003c/h3\u003e\n\u003cp\u003eAfter pushing the content to our CDN, we can use the standard HTML5 \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e tag to tell browsers how to load the requested assets.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003evideo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eposter\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cdn.ryanparman.com/hls/hallelujah.fmp4/poster.jpg\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtrols\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epreload\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;none\u0026#34;\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan style=\"color:#f92672\"\u003esource\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cdn.ryanparman.com/hls/hallelujah.fmp4/index.m3u8\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;application/vnd.apple.mpegurl\u0026#34;\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan style=\"color:#f92672\"\u003esource\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cdn.ryanparman.com/hls/hallelujah.fmp4/progressive.mp4\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;video/mp4; codecs=\u0026#34;avc1.4d401f, mp4a.40.2\u0026#34;\u0026#39;\u003c/span\u003e\u0026gt;\n\u0026lt;/\u003cspan style=\"color:#f92672\"\u003evideo\u003c/span\u003e\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eHere, we have a static \u003cem\u003eposter\u003c/em\u003e image that the \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e element loads by default.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNext, we have an HLS-compatible playlist file (\u003ccode\u003e.m3u8\u003c/code\u003e), which ultimately points to the correct \u003ccode\u003e.mp4\u003c/code\u003e files.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLastly, we have a standard \u003ccode\u003e.mp4\u003c/code\u003e fallback.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"enabling-chrome-firefox-and-edge-using-hlsjs\"\u003eEnabling Chrome, Firefox, and Edge using hls.js\u003c/h3\u003e\n\u003cp\u003eDailymotion has released a JavaScript library called \u003ca href=\"https://github.com/video-dev/hls.js\"\u003ehls.js\u003c/a\u003e which enables HLS playback on browsers like Chrome, Firefox, and Edge using Fragmented MP4 sources.\u003c/p\u003e\n\u003cp\u003eYou can load the script from the CDN:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cdn.jsdelivr.net/npm/hls.js@latest\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter that, we have the implementation. Here, we start with a working \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e element, then use JavaScript to swap over to HLS.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e(() =\u0026gt; {\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;use strict\u0026#39;\u003c/span\u003e;\n\n  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eHls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eisSupported\u003c/span\u003e()) {\n    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eselector\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;video source[type=\u0026#39;application/vnd.apple.mpegurl\u0026#39;]\u0026#34;\u003c/span\u003e,\n        \u003cspan style=\"color:#a6e22e\"\u003evideoSources\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document.\u003cspan style=\"color:#a6e22e\"\u003equerySelectorAll\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eselector\u003c/span\u003e);\n\n    \u003cspan style=\"color:#a6e22e\"\u003evideoSources\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003evideoSource\u003c/span\u003e =\u0026gt; {\n      \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em3u8\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evideoSource\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esrc\u003c/span\u003e,\n          \u003cspan style=\"color:#a6e22e\"\u003eonce\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\n      \u003cspan style=\"color:#75715e\"\u003e// Clone the video to remove any source\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e      \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eoldVideo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evideoSource\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparentNode\u003c/span\u003e,\n          \u003cspan style=\"color:#a6e22e\"\u003enewVideo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eoldVideo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecloneNode\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e);\n\n      \u003cspan style=\"color:#75715e\"\u003e// Replace video tag with our clone.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e      \u003cspan style=\"color:#a6e22e\"\u003eoldVideo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparentNode\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereplaceChild\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enewVideo\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eoldVideo\u003c/span\u003e);\n\n      \u003cspan style=\"color:#75715e\"\u003e// On play, initialize hls.js, once.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e      \u003cspan style=\"color:#a6e22e\"\u003enewVideo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eaddEventListener\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;play\u0026#39;\u003c/span\u003e, () =\u0026gt; {\n        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eonce\u003c/span\u003e) {\n          \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n        };\n        \u003cspan style=\"color:#a6e22e\"\u003eonce\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\n        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehls\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHls\u003c/span\u003e({\n          \u003cspan style=\"color:#a6e22e\"\u003ecapLevelToPlayerSize\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n        });\n        \u003cspan style=\"color:#a6e22e\"\u003ehls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eattachMedia\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enewVideo\u003c/span\u003e);\n        \u003cspan style=\"color:#a6e22e\"\u003ehls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eloadSource\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003em3u8\u003c/span\u003e);\n        \u003cspan style=\"color:#a6e22e\"\u003ehls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eon\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eHls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEvents\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMANIFEST_PARSED\u003c/span\u003e, (\u003cspan style=\"color:#a6e22e\"\u003eevent\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e) =\u0026gt; {\n          \u003cspan style=\"color:#a6e22e\"\u003enewVideo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eplay\u003c/span\u003e();\n        });\n      }, \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e);\n    });\n  }\n})();\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"cors\"\u003eCORS\u003c/h3\u003e\n\u003cp\u003eIf you are serving the files from a third-party host (such as Amazon S3), you will need to enable \u003ca href=\"https://caniuse.com/#search=cors\"\u003eCORS\u003c/a\u003e support on your bucket.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e\u0026lt;CORSConfiguration\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exmlns=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://s3.amazonaws.com/doc/2006-03-01/\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;CORSRule\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;AllowedHeader\u0026gt;\u003c/span\u003e*\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/AllowedHeader\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;AllowedOrigin\u0026gt;\u003c/span\u003e*\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/AllowedOrigin\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;AllowedMethod\u0026gt;\u003c/span\u003eGET\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/AllowedMethod\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;AllowedMethod\u0026gt;\u003c/span\u003eHEAD\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/AllowedMethod\u0026gt;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/CORSRule\u0026gt;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/CORSConfiguration\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAdditionally, if you have a CDN cache in front of that S3 bucket (e.g., Amazon CloudFront), you\u0026rsquo;ll need to make sure that it is configured to allow the \u003ccode\u003eOrigin\u003c/code\u003e headers through and also respond to the HTTP \u003ccode\u003eOPTIONS\u003c/code\u003e verb.\u003c/p\u003e\n\u003cp\u003eYou can find more information about solving this problem with CloudFront at “\u003ca href=\"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html#header-caching-web-cors\"\u003eConfiguring CloudFront to Respect CORS Settings\u003c/a\u003e”.\u003c/p\u003e\n\u003cscript src=\"https://cdn.jsdelivr.net/npm/hls.js@latest\"\u003e\u003c/script\u003e\n\u003cscript type=\"text/javascript\" src=\"https://ryanparman.com/js/stream-hls.min.270faa3c315322e584846228fe3da0897e67544a45ac2646b9050c886baa54b9.js\" integrity=\"sha256-Jw\u0026#43;qPDFTIuWEhGIo/j2giX5nVEpFrCZGuQUMiGuqVLk=\"\u003e\u003c/script\u003e\n\n",
        "plain":"While YouTube is free (as in money) to use, the cost is paid in terms of privacy and advertising analytics. So I've decided to investigate self-hosting my video content. The Cost of YouTube With YouTube, you sacrifice privacy in favor of cost. YouTube is the very best at what they do (serve video to all resolutions and bandwidths), and they are backed by Google who is the very best at what they do (collect data in order to facilitate selling a primed audience to advertisers).\n  There’s nothing inherently wrong with that. We live in a capitalistic society; there is money to be made; Google/YouTube is providing a service to advertisers; many consumers will (knowingly or unknowingly) give up their privacy in exchange for free-as-in-money services.\nBut as I\u0026rsquo;ve gotten older and started to realize just how much data Google has on each and every one of us, I\u0026rsquo;ve started valuing my privacy a lot more. I\u0026rsquo;d like to provide an option for you to protect your privacy as well.\nSelf-Hosting Video Content Even with efficient video codecs, video can still cost a lot of money to serve.\nMany websites provide a video to their users, wherein this video is a single file, and the browser will begin loading and playing the video from start to finish. This means that even if the user only watches the first few seconds of a 5 minute video, it\u0026rsquo;s possible that the video is downloaded in its entirety — which is an unnecessary cost.\nHowever, we can provide a better user experience as well as reduce hosting costs by leveraging the ability to serve bandwidth-adaptive chunks of video to players on-demand.\nAdaptive Bitrate Streaming There are two major, semi-compatible approaches to adaptive bitrate streaming over HTTP. One is called HTTP Live Streaming (“HLS”), and the other is called Dynamic Adaptive Streaming over HTTP (“MPEG-DASH”).\n  From Wikipedia:\n Adaptive bitrate streaming is a technique used in streaming multimedia over computer networks. While in the past most video or audio streaming technologies utilized streaming protocols such as RTP with RTSP, today\u0026rsquo;s adaptive streaming technologies are almost exclusively based on HTTP and designed to work efficiently over large distributed HTTP networks such as the Internet.\nIt works by detecting a user\u0026rsquo;s bandwidth and CPU capacity in real time and adjusting the quality of the media stream accordingly. It requires the use of an encoder which can encode a single source media (video or audio) at multiple bit rates. The player client switches between streaming the different encodings depending on available resources. \u0026ldquo;The result: very little buffering, fast start time and a good experience for both high-end and low-end connections.\u0026rdquo; […]\nHTTP-based adaptive bitrate streaming technologies yield additional benefits over traditional server-driven adaptive bitrate streaming. First, since the streaming technology is built on top of HTTP, contrary to RTP-based adaptive streaming, the packets have no difficulties traversing firewall and NAT devices. Second, since HTTP streaming is purely client-driven, all adaptation logic resides at the client. This reduces the requirement of persistent connections between server and client application. Furthermore, the server is not required to maintain session state information on each client, increasing scalability. Finally, existing HTTP delivery infrastructure, such as HTTP caches and servers can be seamlessly adopted.\nA scalable CDN is used to deliver media streaming to an Internet audience. The CDN receives the stream from the source at its Origin server, then replicates it to many or all of its Edge cache servers. The end-user requests the stream and is redirected to the \u0026ldquo;closest\u0026rdquo; Edge server. […] The use of HTTP-based adaptive streaming allows the Edge server to run a simple HTTP server software, whose licence cost is cheap or free, reducing software licensing cost, compared to costly media server licences (e.g. Adobe Flash Media Streaming Server). The CDN cost for HTTP streaming media is then similar to HTTP web caching CDN cost.\n This means that we can use off-the-shelf services like Amazon S3 and Amazon CloudFront to serve video, which are relatively inexpensive and have large user-bases who can answer questions when you run into issues.\nHTTP Live Streaming (HLS) After doing some research, I came across a blog post that was particularly helpful — “Self-hosted videos with HLS” by Vincent Bernat.\nVincent writes:\n To serve HLS videos, you need three kinds of files:\n the media segments (encoded with different bitrates/resolutions), a media playlist for each variant, listing the media segments, and a master playlist, listing the media playlists.  Media segments can come in two formats:\n MPEG-2 Transport Streams (TS), or Fragmented MP4.  Fragmented MP4 media segments are supported since iOS 10. They are a bit more efficient and can be reused to serve the same content as MPEG-DASH (only the playlists are different). Also, they can be served from the same file with range requests. However, if you want to target older versions of iOS, you need to stick with MPEG-2 TS.\n At the time of this writing, iOS 12 will be out in a week or two. A quick search tells me that iOS 10 and newer make up 85% of all iOS users. This means that I can pretty safely use the Fragmented MP4 method which, according to these sources, is more compatible with MPEG-DASH for some cross-over implementations in the future.\nSample Video  Source: Hallelujah - Brooklyn Duo (Piano \u0026#43; Cello)\nImplementation Encoding and Deploying Video Vincent Bernat provides a tool on GitHub which greatly simplifies the process of creating the various video fragments called video2hls.\nFor this website, I have put together a workflow for creating and serving HLS video content.\n  I use H.264 video with AAC audio wrapped inside an MP4 container, exclusively. These are all defined as part of the MPEG-4 specification, and is the best-supported grouping of codecs and containers across all browsers and devices.\nHardware-level decoders are commonplace inside computers, phones, tablets, and set-top boxes like Xbox, PlayStation, and Apple TV.\n  I have a directory called streaming-video, which is separate from the images that I use and push to S3. Video files are large, and I don\u0026rsquo;t want to accidentally push partially-completed video data to my caching CDN before they\u0026rsquo;re ready.\n  I have a command which takes any video file inside the streaming-video folder, with a filename ending in -source.mp4, and passes it through video2hls, creating a folder called {video}.fmp4 which contains all of the video and playlist files I need across a large variety of bandwidths and resolutions.\nIt will only do the work to create the directory and all of the fragmented files if the directory doesn\u0026rsquo;t already exist.\nfind ./streaming-video -type f -name \u0026#34;*-source.mp4\u0026#34; | xargs -I {} \\  bash -c \u0026#39;if [ ! -d \u0026#34;${1%-source.mp4}.fmp4\u0026#34; ]; then \\ video2hls --debug --output \u0026#34;${1%-source.mp4}.fmp4\u0026#34; --hls-type fmp4 \u0026#34;$1\u0026#34;; \\ fi;\u0026#39; _ {} \\;   I find all of the .m3u8 playlist files and gzip them (since they\u0026rsquo;re just text). This is essentially an in-place rewrite of the files.\nfind ./streaming-video -type f -name \u0026#34;*.m3u8\u0026#34; | xargs -P 8 -I {} \\  bash -c \u0026#39;! gunzip -t $1 2\u0026gt;/dev/null \u0026amp;\u0026amp; gzip -v $1 \u0026amp;\u0026amp; mv -v $1.gz $1;\u0026#39; _ {} \\;   Lastly, I push all of the files up to the hls folder in my S3 bucket using the AWS Unified CLI Tools, setting the correct Content-Type and Content-Encoding headers.\n# The .m3u8 playlists that we gzipped aws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \\  --exclude \u0026#39;*.*\u0026#39; \\  --include \u0026#39;*.m3u8\u0026#39; \\  --acl=public-read \\  --cache-control max-age=31536000,public \\  --content-type \u0026#39;application/vnd.apple.mpegurl\u0026#39; \\  --content-encoding \u0026#39;gzip\u0026#39; # The video \u0026#34;posters\u0026#34; aws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \\  --exclude \u0026#39;*.*\u0026#39; \\  --include \u0026#39;*.jpg\u0026#39; \\  --acl=public-read \\  --cache-control max-age=31536000,public \\  --content-type \u0026#39;image/jpeg\u0026#39; # The fragmented MP4 files aws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \\  --exclude \u0026#39;*.*\u0026#39; \\  --include \u0026#39;*.mp4\u0026#39; \\  --acl=public-read \\  --cache-control max-age=31536000,public \\  --content-type \u0026#39;video/mp4\u0026#39;   The Client-Side Code After pushing the content to our CDN, we can use the standard HTML5 \u0026lt;video\u0026gt; tag to tell browsers how to load the requested assets.\n\u0026lt;video poster=\u0026#34;https://cdn.ryanparman.com/hls/hallelujah.fmp4/poster.jpg\u0026#34; controls preload=\u0026#34;none\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;https://cdn.ryanparman.com/hls/hallelujah.fmp4/index.m3u8\u0026#34; type=\u0026#34;application/vnd.apple.mpegurl\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;https://cdn.ryanparman.com/hls/hallelujah.fmp4/progressive.mp4\u0026#34; type=\u0026#39;video/mp4; codecs=\u0026#34;avc1.4d401f, mp4a.40.2\u0026#34;\u0026#39;\u0026gt; \u0026lt;/video\u0026gt;   Here, we have a static poster image that the \u0026lt;video\u0026gt; element loads by default.\n  Next, we have an HLS-compatible playlist file (.m3u8), which ultimately points to the correct .mp4 files.\n  Lastly, we have a standard .mp4 fallback.\n  Enabling Chrome, Firefox, and Edge using hls.js Dailymotion has released a JavaScript library called hls.js which enables HLS playback on browsers like Chrome, Firefox, and Edge using Fragmented MP4 sources.\nYou can load the script from the CDN:\n\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/hls.js@latest\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; After that, we have the implementation. Here, we start with a working \u0026lt;video\u0026gt; element, then use JavaScript to swap over to HLS.\n(() =\u0026gt; { \u0026#39;use strict\u0026#39;; if (Hls.isSupported()) { let selector = \u0026#34;video source[type=\u0026#39;application/vnd.apple.mpegurl\u0026#39;]\u0026#34;, videoSources = document.querySelectorAll(selector); videoSources.forEach(videoSource =\u0026gt; { let m3u8 = videoSource.src, once = false; // Clone the video to remove any source  let oldVideo = videoSource.parentNode, newVideo = oldVideo.cloneNode(false); // Replace video tag with our clone.  oldVideo.parentNode.replaceChild(newVideo, oldVideo); // On play, initialize hls.js, once.  newVideo.addEventListener(\u0026#39;play\u0026#39;, () =\u0026gt; { if (once) { return; }; once = true; var hls = new Hls({ capLevelToPlayerSize: false }); hls.attachMedia(newVideo); hls.loadSource(m3u8); hls.on(Hls.Events.MANIFEST_PARSED, (event, data) =\u0026gt; { newVideo.play(); }); }, false); }); } })(); CORS If you are serving the files from a third-party host (such as Amazon S3), you will need to enable CORS support on your bucket.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;CORSConfiguration xmlns=\u0026#34;http://s3.amazonaws.com/doc/2006-03-01/\u0026#34;\u0026gt; \u0026lt;CORSRule\u0026gt; \u0026lt;AllowedHeader\u0026gt;*\u0026lt;/AllowedHeader\u0026gt; \u0026lt;AllowedOrigin\u0026gt;*\u0026lt;/AllowedOrigin\u0026gt; \u0026lt;AllowedMethod\u0026gt;GET\u0026lt;/AllowedMethod\u0026gt; \u0026lt;AllowedMethod\u0026gt;HEAD\u0026lt;/AllowedMethod\u0026gt; \u0026lt;/CORSRule\u0026gt; \u0026lt;/CORSConfiguration\u0026gt; Additionally, if you have a CDN cache in front of that S3 bucket (e.g., Amazon CloudFront), you\u0026rsquo;ll need to make sure that it is configured to allow the Origin headers through and also respond to the HTTP OPTIONS verb.\nYou can find more information about solving this problem with CloudFront at “Configuring CloudFront to Respect CORS Settings”.\n  ",
        "source":"\n{{\u003cdescription\u003e}}\nWhile YouTube is free (as in money) to use, the cost is paid in terms of privacy and advertising analytics. So I've decided to investigate self-hosting my video content.\n{{\u003c/description\u003e}}\n\n## The Cost of YouTube\n\nWith YouTube, you sacrifice privacy in favor of cost. YouTube is the very best at what they do (serve video to all resolutions and bandwidths), and they are backed by Google who is the very best at what they do (collect data in order to facilitate selling a primed audience to advertisers).\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2018/youtube-2017.png\"\u003e}}\n\nThere’s nothing inherently wrong with that. We live in a capitalistic society; there is money to be made; Google/YouTube is providing a service to advertisers; many consumers will (knowingly or unknowingly) give up their privacy in exchange for free-as-in-money services.\n\nBut as I've gotten older and started to realize just _how much_ data Google has on each and every one of us, I've started valuing my privacy a lot more. I'd like to provide an option for you to protect your privacy as well.\n\n## Self-Hosting Video Content\n\nEven with efficient video codecs, video can still cost a lot of money to serve.\n\nMany websites provide _a video_ to their users, wherein this video is a single file, and the browser will begin loading and playing the video from start to finish. This means that even if the user only watches the first few seconds of a 5 minute video, it's possible that the video is downloaded in its entirety — which is an unnecessary cost.\n\nHowever, we can provide a _better user experience_ as well as _reduce hosting costs_ by leveraging the ability to serve bandwidth-adaptive chunks of video to players on-demand.\n\n### Adaptive Bitrate Streaming\n\nThere are two major, semi-compatible approaches to [adaptive bitrate streaming](https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming) over HTTP. One is called [HTTP Live Streaming]({{\u003c wayback \"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\" \u003e}}) (“HLS”), and the other is called [Dynamic Adaptive Streaming over HTTP]({{\u003c wayback \"https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP\" \u003e}}) (“MPEG-DASH”).\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2018/adaptive-bitrate-streaming.png\"\u003e}}\n\nFrom [Wikipedia]({{\u003c wayback \"https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming\" \u003e}}):\n\n\u003e Adaptive bitrate streaming is a technique used in streaming multimedia over computer networks. While in the past most video or audio streaming technologies utilized streaming protocols such as RTP with RTSP, today's adaptive streaming technologies are almost exclusively based on HTTP and designed to work efficiently over large distributed HTTP networks such as the Internet.\n\u003e \n\u003e It works by detecting a user's bandwidth and CPU capacity in real time and adjusting the quality of the media stream accordingly. It requires the use of an encoder which can encode a single source media (video or audio) at multiple bit rates. The player client switches between streaming the different encodings depending on available resources. \"The result: very little buffering, fast start time and a good experience for both high-end and low-end connections.\" […]\n\u003e\n\u003e HTTP-based adaptive bitrate streaming technologies yield additional benefits over traditional server-driven adaptive bitrate streaming. First, since the streaming technology is built on top of HTTP, contrary to RTP-based adaptive streaming, the packets have no difficulties traversing firewall and NAT devices. Second, since HTTP streaming is purely client-driven, all adaptation logic resides at the client. This reduces the requirement of persistent connections between server and client application. Furthermore, the server is not required to maintain session state information on each client, increasing scalability. Finally, existing HTTP delivery infrastructure, such as HTTP caches and servers can be seamlessly adopted.\n\u003e\n\u003e A scalable CDN is used to deliver media streaming to an Internet audience. The CDN receives the stream from the source at its Origin server, then replicates it to many or all of its Edge cache servers. The end-user requests the stream and is redirected to the \"closest\" Edge server. […] The use of HTTP-based adaptive streaming allows the Edge server to run a simple HTTP server software, whose licence cost is cheap or free, reducing software licensing cost, compared to costly media server licences (e.g. Adobe Flash Media Streaming Server). The CDN cost for HTTP streaming media is then similar to HTTP web caching CDN cost.\n\nThis means that we can use off-the-shelf services like [Amazon S3](https://aws.amazon.com/s3) and [Amazon CloudFront](https://aws.amazon.com/cloudfront) to serve video, which are relatively inexpensive and have large user-bases who can answer questions when you run into issues.\n\n### HTTP Live Streaming (HLS)\n\nAfter doing some research, I came across a blog post that was particularly helpful — “[Self-hosted videos with HLS]({{\u003c wayback \"https://vincent.bernat.ch/en/blog/2018-self-hosted-videos\" \u003e}})” by Vincent Bernat.\n\nVincent writes:\n\n\u003e To serve HLS videos, you need three kinds of files:\n\u003e \n\u003e * the media segments (encoded with different bitrates/resolutions),\n\u003e * a media playlist for each variant, listing the media segments, and\n\u003e * a master playlist, listing the media playlists.\n\u003e \n\u003e Media segments can come in two formats:\n\u003e \n\u003e * MPEG-2 Transport Streams (TS), or\n\u003e * Fragmented MP4.\n\u003e \n\u003e Fragmented MP4 media segments are supported since iOS 10. They are a bit more efficient and can be reused to serve the same content as MPEG-DASH (only the playlists are different). Also, they can be served from the same file with range requests. However, if you want to target older versions of iOS, you need to stick with MPEG-2 TS.\n\nAt the time of this writing, iOS 12 will be out in a week or two. A quick search tells me that [iOS 10 and newer make up 85% of all iOS users]({{\u003c wayback \"https://data.apteligent.com/ios/\" \u003e}}). This means that I can pretty safely use the _Fragmented MP4_ method which, according to [these]({{\u003c wayback \"https://bitmovin.com/hls-news-wwdc-2016/\" \u003e}}) [sources]({{\u003c wayback \"http://www.streamingmedia.com/Articles/ReadArticle.aspx?ArticleID=111796\" \u003e}}), is more compatible with MPEG-DASH for some cross-over implementations in the future.\n\n## Sample Video\n\n{{\u003chls src=\"hallelujah\"\n       sourceUrl=\"https://youtu.be/e1C9kpMV2e8\"\n       sourceTitle=\"Hallelujah - Brooklyn Duo (Piano + Cello)\"\n\u003e}}\n\n## Implementation\n\n### Encoding and Deploying Video\n\nVincent Bernat provides a tool on GitHub which greatly simplifies the process of creating the various video fragments called [video2hls]({{\u003c wayback \"https://github.com/vincentbernat/video2hls\" \u003e}}).\n\nFor [this website](https://github.com/skyzyx/blog/blob/master/Makefile), I have put together a workflow for creating and serving HLS video content.\n\n1. I use **H.264** video with **AAC** audio wrapped inside an **MP4** container, _exclusively_. These are all defined as part of the MPEG-4 specification, and is the [best-supported grouping of codecs and containers across all browsers and devices](https://caniuse.com/#search=H.264).\n\n    Hardware-level decoders are commonplace inside computers, phones, tablets, and set-top boxes like Xbox, PlayStation, and Apple TV.\n\n1. I have a directory called `streaming-video`, which is separate from the images that I use and push to S3. Video files are large, and I don't want to accidentally push partially-completed video data to my caching CDN before they're ready.\n\n1. I have a command which takes any video file inside the `streaming-video` folder, with a filename ending in `-source.mp4`, and passes it through `video2hls`, creating a folder called `{video}.fmp4` which contains all of the video and playlist files I need across a large variety of bandwidths and resolutions.\n\n    It will only do the work to create the directory and all of the fragmented files if the directory doesn't already exist.\n\n    ```bash\n    find ./streaming-video -type f -name \"*-source.mp4\" | xargs -I {} \\\n        bash -c 'if [ ! -d \"${1%-source.mp4}.fmp4\" ]; then \\\n            video2hls --debug --output \"${1%-source.mp4}.fmp4\" --hls-type fmp4 \"$1\"; \\\n        fi;' _ {} \\;\n    ```\n\n1. I find all of the `.m3u8` playlist files and gzip them (since they're just text). This is essentially an in-place rewrite of the files.\n\n    ```bash\n    find ./streaming-video -type f -name \"*.m3u8\" | xargs -P 8 -I {} \\\n        bash -c '! gunzip -t $1 2\u003e/dev/null \u0026\u0026 gzip -v $1 \u0026\u0026 mv -v $1.gz $1;' _ {} \\;\n    ```\n\n1. Lastly, I push all of the files up to the `hls` folder in my S3 bucket using the [AWS Unified CLI Tools](https://github.com/aws/aws-cli), setting the correct `Content-Type` and `Content-Encoding` headers.\n\n    ```bash\n    # The .m3u8 playlists that we gzipped\n    aws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \\\n        --exclude '*.*' \\\n        --include '*.m3u8' \\\n        --acl=public-read \\\n        --cache-control max-age=31536000,public \\\n        --content-type 'application/vnd.apple.mpegurl' \\\n        --content-encoding 'gzip'\n\n    # The video \"posters\"\n    aws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \\\n        --exclude '*.*' \\\n        --include '*.jpg' \\\n        --acl=public-read \\\n        --cache-control max-age=31536000,public \\\n        --content-type 'image/jpeg'\n\n    # The fragmented MP4 files\n    aws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \\\n        --exclude '*.*' \\\n        --include '*.mp4' \\\n        --acl=public-read \\\n        --cache-control max-age=31536000,public \\\n        --content-type 'video/mp4'\n    ```\n\n### The Client-Side Code\n\nAfter pushing the content to our CDN, we can use the standard HTML5 `\u003cvideo\u003e` tag to tell browsers how to load the requested assets.\n\n```html\n\u003cvideo poster=\"https://cdn.ryanparman.com/hls/hallelujah.fmp4/poster.jpg\" controls preload=\"none\"\u003e\n    \u003csource src=\"https://cdn.ryanparman.com/hls/hallelujah.fmp4/index.m3u8\" type=\"application/vnd.apple.mpegurl\"\u003e\n    \u003csource src=\"https://cdn.ryanparman.com/hls/hallelujah.fmp4/progressive.mp4\" type='video/mp4; codecs=\"avc1.4d401f, mp4a.40.2\"'\u003e\n\u003c/video\u003e\n```\n\n1. Here, we have a static _poster_ image that the `\u003cvideo\u003e` element loads by default.\n\n1. Next, we have an HLS-compatible playlist file (`.m3u8`), which ultimately points to the correct `.mp4` files.\n\n1. Lastly, we have a standard `.mp4` fallback.\n\n### Enabling Chrome, Firefox, and Edge using hls.js\n\nDailymotion has released a JavaScript library called [hls.js](https://github.com/video-dev/hls.js) which enables HLS playback on browsers like Chrome, Firefox, and Edge using Fragmented MP4 sources.\n\nYou can load the script from the CDN:\n\n```html\n\u003cscript src=\"https://cdn.jsdelivr.net/npm/hls.js@latest\"\u003e\u003c/script\u003e\n```\n\nAfter that, we have the implementation. Here, we start with a working `\u003cvideo\u003e` element, then use JavaScript to swap over to HLS.\n\n```javascript\n(() =\u003e {\n  'use strict';\n\n  if (Hls.isSupported()) {\n    let selector = \"video source[type='application/vnd.apple.mpegurl']\",\n        videoSources = document.querySelectorAll(selector);\n\n    videoSources.forEach(videoSource =\u003e {\n      let m3u8 = videoSource.src,\n          once = false;\n\n      // Clone the video to remove any source\n      let oldVideo = videoSource.parentNode,\n          newVideo = oldVideo.cloneNode(false);\n\n      // Replace video tag with our clone.\n      oldVideo.parentNode.replaceChild(newVideo, oldVideo);\n\n      // On play, initialize hls.js, once.\n      newVideo.addEventListener('play', () =\u003e {\n        if (once) {\n          return;\n        };\n        once = true;\n\n        var hls = new Hls({\n          capLevelToPlayerSize: false\n        });\n        hls.attachMedia(newVideo);\n        hls.loadSource(m3u8);\n        hls.on(Hls.Events.MANIFEST_PARSED, (event, data) =\u003e {\n          newVideo.play();\n        });\n      }, false);\n    });\n  }\n})();\n```\n\n### CORS\n\nIf you are serving the files from a third-party host (such as Amazon S3), you will need to enable [CORS](https://caniuse.com/#search=cors) support on your bucket.\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cCORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"\u003e\n  \u003cCORSRule\u003e\n    \u003cAllowedHeader\u003e*\u003c/AllowedHeader\u003e\n    \u003cAllowedOrigin\u003e*\u003c/AllowedOrigin\u003e\n    \u003cAllowedMethod\u003eGET\u003c/AllowedMethod\u003e\n    \u003cAllowedMethod\u003eHEAD\u003c/AllowedMethod\u003e\n  \u003c/CORSRule\u003e\n\u003c/CORSConfiguration\u003e\n```\n\nAdditionally, if you have a CDN cache in front of that S3 bucket (e.g., Amazon CloudFront), you'll need to make sure that it is configured to allow the `Origin` headers through and also respond to the HTTP `OPTIONS` verb.\n\nYou can find more information about solving this problem with CloudFront at “[Configuring CloudFront to Respect CORS Settings]({{\u003c wayback \"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html#header-caching-web-cors\" \u003e}})”.\n\n\u003cscript src=\"https://cdn.jsdelivr.net/npm/hls.js@latest\"\u003e\u003c/script\u003e\n{{\u003cscript src=\"/js/stream-hls.js\"\u003e}}\n"},
    "links": {
        "prev": {"title": "Clueless Recruiters, Issue #8", "permalink": "https://ryanparman.com/posts/2018/clueless-recruiters-issue-8/"},
        "next": {"title": "The Hiring Process, Part I", "permalink": "https://ryanparman.com/posts/2018/the-hiring-process-part-i-what-i-look-for-in-a-cv-resume-remastered/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Converting MKV files to MP4, using Mac OS X, for playback on iPad, Apple TV, Playstation 3, Xbox 360, Roku and other players",
    "description": "",
    "summary": {
        "content": "Nearly 2 years ago, I became a Cord-Cutter. I couldn’t see the sense in paying a ton of money every month for 500 channels that I didn’t watch, just so that I could catch the occasional show. I invested in Netflix and Hulu Plus accounts so that I could watch most of my shows, and for the shows that haven’t made their way into the 21 century yet, there are plenty of places online where you can acquire the latest episodes.",
        "isTruncated": true
    },
    "published": "2013-04-10T07:45:02Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/",
    "relativePermalink": "/posts/2013/converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/",
    "aliases": ["/2013/04/09/converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/"],
    "images": ["https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mkv.png"],
    "videos": [],
    "categories": ["Tutorials"],
    "tags": ["netflix", "hulu", "blu-ray", "dvd", "handbrake", "mkv", "aac", "ac3", "mp4", "h.264", "atomicparsley", "metax", "metaz", "subler", "mp4v2", "itunes"],
    "series": ["Handbrake"],
    "keywords": [],
    "meta": {
        "wordCount": 843,
        "readingTime": "4 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130410-converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players.md",
        "logicalName": "20130410-converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players.md",
        "translationBaseName": "20130410-converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players",
        "baseFileName": "20130410-converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#crash-course-in-digital-video-formats\"\u003eCrash Course in Digital Video Formats\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#mkv--mp4\"\u003eMKV → MP4\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#metadata-and-artwork\"\u003eMetadata and Artwork\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#renaming\"\u003eRenaming\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#streaming-from-itunes\"\u003eStreaming from iTunes\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nNearly 2 years ago, I became a \u003cem\u003eCord-Cutter\u003c/em\u003e. I couldn’t see the sense in paying a ton of money every month for 500 channels that I didn’t watch, just so that I could catch the occasional show.\n\u003c/p\u003e\n\n\u003cp\u003eI invested in \u003ca href=\"https://web.archive.org/web/20130410074502/http://netflix.com\"\u003eNetflix\u003c/a\u003e and \u003ca href=\"https://web.archive.org/web/20130410074502/http://hulu.com/plus\"\u003eHulu Plus\u003c/a\u003e accounts so that I could watch most of my shows, and for the shows that haven’t made their way into the 21 century yet, there are plenty of places online where you can acquire the latest episodes.\u003c/p\u003e\n\u003cp\u003eIf you read my previous post on \u003ca href=\"/2013/04/08/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/\"\u003econverting Blu-ray and DVD movies to MP4\u003c/a\u003e, this process has a slightly different flow.\u003c/p\u003e\n\u003ch2 id=\"crash-course-in-digital-video-formats\"\u003eCrash Course in Digital Video Formats\u003c/h2\u003e\n\u003cp\u003eThese days, if you (ahem) \u003cem\u003eacquire\u003c/em\u003e a high-definition copy of your favorite show online (commonly in 720p), it will most likely be in MKV/H.264/AC3 format.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mkv.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe short explanation is that every video file is made up of \u003cstrong\u003e3 different parts\u003c/strong\u003e: the \u003cstrong\u003evideo stream\u003c/strong\u003e, the \u003cstrong\u003eaudio stream\u003c/strong\u003e, and the \u003cstrong\u003econtainer\u003c/strong\u003e. The audio and video are synced-up (a.k.a., “multiplexed” or “muxed”) and are bundled together into a single file using a container format.\u003c/p\u003e\n\u003cp\u003eIf you want to make yourself a little more educated about this stuff, check out the “\u003ca href=\"https://web.archive.org/web/20130410074502/http://diveintohtml5.info/video.html\"\u003eVideo on the Web\u003c/a\u003e” chapter of \u003cem\u003eDive Into HTML5\u003c/em\u003e by Mark Pilgrim.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMKV\u003c/strong\u003e is a popular container format because it’s designed to be a kitchen sink. You can throw all sorts of stuff inside this container, so people like to stash it full of subtitle files and other sorts of things. \u003cstrong\u003eAC3\u003c/strong\u003e is the name of the \u003cem\u003eDolby Digital\u003c/em\u003e surround-sound audio format. You typically need a dedicated decoder ship to handle this kind of audio, which is common in modern receivers and some TVs.\u003c/p\u003e\n\u003ch2 id=\"mkv--mp4\"\u003eMKV → MP4\u003c/h2\u003e\n\u003cp\u003eThe first thing we need to do download a copy of \u003ca href=\"https://web.archive.org/web/20130410074502/http://www.emmgunn.com/mp4tools/mp4toolshome.html\"\u003eMP4Tools\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhile you can use it without a license, it’s always a good idea to support the independent software developers who write this stuff — especially if its useful.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mp4tools-default.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhen you drag your MKV file into MP4Tools, you should see two entries — the video stream and the audio stream.\u003c/p\u003e\n\u003cp\u003eThe video stream should already be in \u003cstrong\u003eH.264\u003c/strong\u003e format. (If it isn’t, stop what you’re doing and run the file through \u003ca href=\"https://web.archive.org/web/20130410074502/http://handbrake.fr\"\u003eHandbrake\u003c/a\u003e instead.) Check the box next to the stream to select it.\u003c/p\u003e\n\u003cp\u003eIf the audio stream is already in \u003cstrong\u003eAAC\u003c/strong\u003e format, this will be very simple. If the audio stream is in \u003cstrong\u003eAC3\u003c/strong\u003e format, this will still be simple, but will take a little longer to complete.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mp4tools-working.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eFor \u003cstrong\u003eH.264\u003c/strong\u003e video, choose \u003cem\u003ePass Thru\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFor \u003cstrong\u003eAAC\u003c/strong\u003e audio (if available), choose \u003cem\u003ePass Thru\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFor \u003cstrong\u003eAC3\u003c/strong\u003e audio (if available), choose the highest AAC audio selection you have available (either \u003cem\u003eAAC (2-Ch.)\u003c/em\u003e or \u003cem\u003eAAC (5.1)\u003c/em\u003e). If you selected \u003cem\u003eAAC (5.1)\u003c/em\u003e, also check the box for \u003cem\u003eadd 2-Ch. Track\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLastly, choose your intended device. The \u003cem\u003eApple TV\u003c/em\u003e setting tends to have the broadest compatibility in my experience. Leave everything else as the default setting, and click the \u003cem\u003eConvert\u003c/em\u003e button.\u003c/p\u003e\n\u003cp\u003eIn a few minutes, you should have a new \u003ccode\u003e.m4v\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/m4v.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"metadata-and-artwork\"\u003eMetadata and Artwork\u003c/h2\u003e\n\u003cp\u003eIt’s possible that you may have heard of \u003cem\u003eAtomicParsley\u003c/em\u003e, \u003cem\u003eMetaX\u003c/em\u003e or \u003cem\u003eMetaZ\u003c/em\u003e before. They all suck. Check out \u003ca href=\"https://web.archive.org/web/20130410074502/http://code.google.com/p/subler/\"\u003eSubler\u003c/a\u003e instead.\u003c/p\u003e\n\u003cp\u003eOnce you have your \u003ccode\u003e.m4v\u003c/code\u003e file, you’ll want to add the metadata and artwork to the file. As long as the video file starts with a format similar to \u003ccode\u003e\u0026lt;show\u0026gt;.s\u0026lt;#\u0026gt;e\u0026lt;#\u0026gt;\u003c/code\u003e (e.g., \u003ccode\u003eWeeds.s7e1\u003c/code\u003e), Subler will be able to determine the right things to search for.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-metadata.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSubler queries \u003ca href=\"https://web.archive.org/web/20130410074502/http://thetvdb.com\"\u003eTVDB\u003c/a\u003e for TV show data, although I’m generally unimpressed with the TV show artwork. For that, I use \u003ca href=\"https://web.archive.org/web/20130410074502/http://getvideoartwork.com\"\u003eGet Video Artwork\u003c/a\u003e and download the iTunes-compatible, square-shaped TV show artwork.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-artwork.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhile Subler does a good job of checking the right boxes automatically, you’ll want to check the \u003cem\u003eOther Settings\u003c/em\u003e and make sure that the resolution and media kind are set correctly for your new \u003ccode\u003e.m4v\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-other.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"renaming\"\u003eRenaming\u003c/h2\u003e\n\u003cp\u003eI prefer to keep my video files sorted by \u003ccode\u003e\u0026lt;show\u0026gt;/\u0026lt;season\u0026gt;/\u0026lt;file\u0026gt;\u003c/code\u003e. I also go so far to name my files as \u003ccode\u003eS.E - Title.mp4\u003c/code\u003e (e.g., a recent episode of \u003cem\u003eSupernatural\u003c/em\u003e was labeled \u003cem\u003e8.15 - Man’s Best Friend with Benefits\u003c/em\u003e).\u003c/p\u003e\n\u003cp\u003eGoing episode-by-episode can be very tedious, so I wrote up a \u003ca href=\"https://web.archive.org/web/20130410074502/https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/rename-workflow.zip\"\u003eMac OS X service\u003c/a\u003e to handle this for me. The only prerequisite is to install a package called \u003ca href=\"https://web.archive.org/web/20130410074502/https://trac.macports.org/browser/trunk/dports/multimedia/mp4v2/Portfile\"\u003emp4v2\u003c/a\u003e from \u003ca href=\"https://web.archive.org/web/20130410074502/http://macports.org\"\u003eMacPorts\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo port install mp4v2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnce you’ve installed MacPorts (if you hadn’t already) and the \u003cstrong\u003emp4v2\u003c/strong\u003e package, you can install the OS X service by double-clicking it. (It’s an Automator action, so feel free to take a look at what it does before installing it.)\u003c/p\u003e\n\u003cp\u003eWith everything installed, you can now right-click on one or more video files, choose \u003cem\u003eServices\u003c/em\u003e, then “Rename video to 1.01 - Title.mp4”.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/workflow.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWithin a few seconds, the Automator workflow will read the contents of the video file for the season number, episode number, and episode title, and rename the file automatically.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/done.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"streaming-from-itunes\"\u003eStreaming from iTunes\u003c/h2\u003e\n\u003cp\u003eI’ve already covered this in my \u003ca href=\"/2013/04/08/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/\"\u003eprevious post\u003c/a\u003e, so I’m not going to go over it again here.\u003c/p\u003e\n\u003cp\u003eOnce it’s in iTunes, you can sync shows to your smartphone, iPad, or stream them to a variety of devices throughout your home.\u003c/p\u003e\n",
        "plain":"Nearly 2 years ago, I became a Cord-Cutter. I couldn’t see the sense in paying a ton of money every month for 500 channels that I didn’t watch, just so that I could catch the occasional show. I invested in Netflix and Hulu Plus accounts so that I could watch most of my shows, and for the shows that haven’t made their way into the 21 century yet, there are plenty of places online where you can acquire the latest episodes.\nIf you read my previous post on converting Blu-ray and DVD movies to MP4, this process has a slightly different flow.\nCrash Course in Digital Video Formats These days, if you (ahem) acquire a high-definition copy of your favorite show online (commonly in 720p), it will most likely be in MKV/H.264/AC3 format.\n  The short explanation is that every video file is made up of 3 different parts: the video stream, the audio stream, and the container. The audio and video are synced-up (a.k.a., “multiplexed” or “muxed”) and are bundled together into a single file using a container format.\nIf you want to make yourself a little more educated about this stuff, check out the “Video on the Web” chapter of Dive Into HTML5 by Mark Pilgrim.\nMKV is a popular container format because it’s designed to be a kitchen sink. You can throw all sorts of stuff inside this container, so people like to stash it full of subtitle files and other sorts of things. AC3 is the name of the Dolby Digital surround-sound audio format. You typically need a dedicated decoder ship to handle this kind of audio, which is common in modern receivers and some TVs.\nMKV → MP4 The first thing we need to do download a copy of MP4Tools.\nWhile you can use it without a license, it’s always a good idea to support the independent software developers who write this stuff — especially if its useful.\n  When you drag your MKV file into MP4Tools, you should see two entries — the video stream and the audio stream.\nThe video stream should already be in H.264 format. (If it isn’t, stop what you’re doing and run the file through Handbrake instead.) Check the box next to the stream to select it.\nIf the audio stream is already in AAC format, this will be very simple. If the audio stream is in AC3 format, this will still be simple, but will take a little longer to complete.\n    For H.264 video, choose Pass Thru.\n  For AAC audio (if available), choose Pass Thru.\n  For AC3 audio (if available), choose the highest AAC audio selection you have available (either AAC (2-Ch.) or AAC (5.1)). If you selected AAC (5.1), also check the box for add 2-Ch. Track.\n  Lastly, choose your intended device. The Apple TV setting tends to have the broadest compatibility in my experience. Leave everything else as the default setting, and click the Convert button.\nIn a few minutes, you should have a new .m4v file.\n  Metadata and Artwork It’s possible that you may have heard of AtomicParsley, MetaX or MetaZ before. They all suck. Check out Subler instead.\nOnce you have your .m4v file, you’ll want to add the metadata and artwork to the file. As long as the video file starts with a format similar to \u0026lt;show\u0026gt;.s\u0026lt;#\u0026gt;e\u0026lt;#\u0026gt; (e.g., Weeds.s7e1), Subler will be able to determine the right things to search for.\n  Subler queries TVDB for TV show data, although I’m generally unimpressed with the TV show artwork. For that, I use Get Video Artwork and download the iTunes-compatible, square-shaped TV show artwork.\n  While Subler does a good job of checking the right boxes automatically, you’ll want to check the Other Settings and make sure that the resolution and media kind are set correctly for your new .m4v file.\n  Renaming I prefer to keep my video files sorted by \u0026lt;show\u0026gt;/\u0026lt;season\u0026gt;/\u0026lt;file\u0026gt;. I also go so far to name my files as S.E - Title.mp4 (e.g., a recent episode of Supernatural was labeled 8.15 - Man’s Best Friend with Benefits).\nGoing episode-by-episode can be very tedious, so I wrote up a Mac OS X service to handle this for me. The only prerequisite is to install a package called mp4v2 from MacPorts.\nsudo port install mp4v2 Once you’ve installed MacPorts (if you hadn’t already) and the mp4v2 package, you can install the OS X service by double-clicking it. (It’s an Automator action, so feel free to take a look at what it does before installing it.)\nWith everything installed, you can now right-click on one or more video files, choose Services, then “Rename video to 1.01 - Title.mp4”.\n  Within a few seconds, the Automator workflow will read the contents of the video file for the season number, episode number, and episode title, and rename the file automatically.\n  Streaming from iTunes I’ve already covered this in my previous post, so I’m not going to go over it again here.\nOnce it’s in iTunes, you can sync shows to your smartphone, iPad, or stream them to a variety of devices throughout your home.\n",
        "source":"\n{{\u003c description \u003e}}\nNearly 2 years ago, I became a \u003cem\u003eCord-Cutter\u003c/em\u003e. I couldn’t see the sense in paying a ton of money every month for 500 channels that I didn’t watch, just so that I could catch the occasional show.\n{{\u003c /description \u003e}}\n\nI invested in [Netflix]({{% wayback \"http://netflix.com\" %}}) and [Hulu Plus]({{% wayback \"http://hulu.com/plus\" %}}) accounts so that I could watch most of my shows, and for the shows that haven’t made their way into the 21 century yet, there are plenty of places online where you can acquire the latest episodes.\n\nIf you read my previous post on [converting Blu-ray and DVD movies to MP4](/2013/04/08/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/), this process has a slightly different flow.\n\n\n## Crash Course in Digital Video Formats\n\nThese days, if you (ahem) *acquire* a high-definition copy of your favorite show online (commonly in 720p), it will most likely be in MKV/H.264/AC3 format.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mkv.png\"\u003e}}\n\nThe short explanation is that every video file is made up of **3 different parts**: the **video stream**, the **audio stream**, and the **container**. The audio and video are synced-up (a.k.a., “multiplexed” or “muxed”) and are bundled together into a single file using a container format.\n\nIf you want to make yourself a little more educated about this stuff, check out the “[Video on the Web]({{% wayback \"http://diveintohtml5.info/video.html\" %}})” chapter of *Dive Into HTML5* by Mark Pilgrim.\n\n**MKV** is a popular container format because it’s designed to be a kitchen sink. You can throw all sorts of stuff inside this container, so people like to stash it full of subtitle files and other sorts of things. **AC3** is the name of the *Dolby Digital* surround-sound audio format. You typically need a dedicated decoder ship to handle this kind of audio, which is common in modern receivers and some TVs.\n\n\n## MKV → MP4\n\nThe first thing we need to do download a copy of [MP4Tools]({{% wayback \"http://www.emmgunn.com/mp4tools/mp4toolshome.html\" %}}).\n\nWhile you can use it without a license, it’s always a good idea to support the independent software developers who write this stuff — especially if its useful.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mp4tools-default.png\"\u003e}}\n\nWhen you drag your MKV file into MP4Tools, you should see two entries — the video stream and the audio stream.\n\nThe video stream should already be in **H.264** format. (If it isn’t, stop what you’re doing and run the file through [Handbrake]({{% wayback \"http://handbrake.fr\" %}}) instead.) Check the box next to the stream to select it.\n\nIf the audio stream is already in **AAC** format, this will be very simple. If the audio stream is in **AC3** format, this will still be simple, but will take a little longer to complete.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mp4tools-working.png\"\u003e}}\n\n1. For **H.264** video, choose *Pass Thru*.\n\n2. For **AAC** audio (if available), choose *Pass Thru*.\n\n3. For **AC3** audio (if available), choose the highest AAC audio selection you have available (either *AAC (2-Ch.)* or *AAC (5.1)*). If you selected *AAC (5.1)*, also check the box for *add 2-Ch. Track*.\n\nLastly, choose your intended device. The *Apple TV* setting tends to have the broadest compatibility in my experience. Leave everything else as the default setting, and click the *Convert* button.\n\nIn a few minutes, you should have a new `.m4v` file.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/m4v.png\"\u003e}}\n\n\n## Metadata and Artwork\n\nIt’s possible that you may have heard of *AtomicParsley*, *MetaX* or *MetaZ* before. They all suck. Check out [Subler]({{% wayback \"http://code.google.com/p/subler/\" %}}) instead.\n\nOnce you have your `.m4v` file, you’ll want to add the metadata and artwork to the file. As long as the video file starts with a format similar to `\u003cshow\u003e.s\u003c#\u003ee\u003c#\u003e` (e.g., `Weeds.s7e1`), Subler will be able to determine the right things to search for.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-metadata.png\"\u003e}}\n\nSubler queries [TVDB]({{% wayback \"http://thetvdb.com\" %}}) for TV show data, although I’m generally unimpressed with the TV show artwork. For that, I use [Get Video Artwork]({{% wayback \"http://getvideoartwork.com\" %}}) and download the iTunes-compatible, square-shaped TV show artwork.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-artwork.png\"\u003e}}\n\nWhile Subler does a good job of checking the right boxes automatically, you’ll want to check the *Other Settings* and make sure that the resolution and media kind are set correctly for your new `.m4v` file.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-other.png\"\u003e}}\n\n\n## Renaming\n\nI prefer to keep my video files sorted by `\u003cshow\u003e/\u003cseason\u003e/\u003cfile\u003e`. I also go so far to name my files as `S.E - Title.mp4` (e.g., a recent episode of *Supernatural* was labeled *8.15 - Man’s Best Friend with Benefits*).\n\nGoing episode-by-episode can be very tedious, so I wrote up a [Mac OS X service]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/rename-workflow.zip\" %}}) to handle this for me. The only prerequisite is to install a package called [mp4v2]({{% wayback \"https://trac.macports.org/browser/trunk/dports/multimedia/mp4v2/Portfile\" %}}) from [MacPorts]({{% wayback \"http://macports.org\" %}}).\n\n```bash\nsudo port install mp4v2\n```\n\nOnce you’ve installed MacPorts (if you hadn’t already) and the **mp4v2** package, you can install the OS X service by double-clicking it. (It’s an Automator action, so feel free to take a look at what it does before installing it.)\n\nWith everything installed, you can now right-click on one or more video files, choose *Services*, then “Rename video to 1.01 - Title.mp4”.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/workflow.png\"\u003e}}\n\nWithin a few seconds, the Automator workflow will read the contents of the video file for the season number, episode number, and episode title, and rename the file automatically.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/done.png\"\u003e}}\n\n\n## Streaming from iTunes\n\nI’ve already covered this in my [previous post](/2013/04/08/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/), so I’m not going to go over it again here.\n\nOnce it’s in iTunes, you can sync shows to your smartphone, iPad, or stream them to a variety of devices throughout your home.\n"},
    "links": {
        "prev": {"title": "Converting Blu-ray and DVD movies to MP4, using Mac OS X, for playback on iPad, Apple TV, Playstation 3, Xbox 360, Roku and other players", "permalink": "https://ryanparman.com/posts/2013/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/"},
        "next": {"title": "The Microsoft Ecosystem", "permalink": "https://ryanparman.com/posts/2013/the-microsoft-ecosystem/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Converting Blu-ray and DVD movies to MP4, using Mac OS X, for playback on iPad, Apple TV, Playstation 3, Xbox 360, Roku and other players",
    "description": "",
    "summary": {
        "content": "I often find myself wanting to watch my movies when I’m on-the-go, or sitting at work writing code. I also have one Blu-ray player in the house, and hate having to sit through one unskippable warning or commercial after another. Because of this, I choose to exercise my fair-use right to format-shift my movies into something more convenient. Making a personal backup of movies you own is in a legal gray-area in the U.S. Historically, this sort of thing fell under fair use law, but the DMCA (1998) makes it illegal to crack the encryption.",
        "isTruncated": true
    },
    "published": "2013-04-09T07:04:04Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/",
    "relativePermalink": "/posts/2013/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/",
    "aliases": ["/2013/04/08/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/"],
    "images": ["https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/fbi-warning.png"],
    "videos": [],
    "categories": ["Tutorials"],
    "tags": ["netflix", "hulu", "blu-ray", "dvd", "handbrake", "mkv", "aac", "ac3", "mp4", "h.264", "atomicparsley", "metax", "metaz", "subler", "mp4v2", "itunes", "makemkv", "anydvd"],
    "series": ["Handbrake"],
    "keywords": [],
    "meta": {
        "wordCount": 1311,
        "readingTime": "7 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130409-converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players.md",
        "logicalName": "20130409-converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players.md",
        "translationBaseName": "20130409-converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players",
        "baseFileName": "20130409-converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#hardware\"\u003eHardware\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#backing-up-your-discs\"\u003eBacking-up your discs\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#format-shifting-to-mp4h264aac\"\u003eFormat-Shifting to MP4/H.264/AAC\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#metadata-and-artwork\"\u003eMetadata and Artwork\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#streaming-via-itunes\"\u003eStreaming via iTunes\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nI often find myself wanting to watch my movies when I’m on-the-go, or sitting at work writing code. I also have one Blu-ray player in the house, and hate having to sit through one unskippable warning or commercial after another.\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/fbi-warning.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eBecause of this, I choose to exercise my fair-use right to format-shift my movies into something more convenient. Making a personal backup of movies you own is in a legal gray-area in the U.S. Historically, this sort of thing fell under fair use law, but the DMCA (1998) makes it illegal to crack the encryption. This is why backing-up CDs is commonplace while backing-up DVDs and Blu-rays is frowned upon. The encryption is where the line is drawn. You’ve been warned!\u003c/p\u003e\n\u003ch2 id=\"hardware\"\u003eHardware\u003c/h2\u003e\n\u003cp\u003eThe Mac used for this tutorial is an \u003ca href=\"https://web.archive.org/web/20130409070404/http://www.everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i7-2.2-17-early-2011-unibody-thunderbolt-specs.html\"\u003e17\u0026rdquo; MacBook Pro (early–2011)\u003c/a\u003e with a 64-bit quad-core 2.2 GHz Intel Core i7 processor, 16 GB of RAM, OS X Mountain Lion, and a standard, built-in Superdrive. The external BD-R drive is a \u003ca href=\"https://web.archive.org/web/20130409070404/http://amazon.com/dp/B003CJTQPG/\"\u003eBuffalo MediaStation 6X USB 2.0 Portable Blu-Ray Writer\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"backing-up-your-discs\"\u003eBacking-up your discs\u003c/h2\u003e\n\u003cp\u003ePretty much every Mac since the early 2000s has shipped with a DVD drive, so these are easy to come by. For backing up personal DVDs so that they can be format-shifted, \u003ca href=\"https://web.archive.org/web/20130409070404/http://thelittleappfactory.com/ripit/\"\u003eRipIt\u003c/a\u003e is highly recommended. A license is a paltry $25, and I recommend supporting the developers of this software. Backing up is as simple as inserting the DVD, launching RipIt, and choosing “Rip”. You can expect a rip to take 15–30 minutes, depending on the size of the disc.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-ripit.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eFor Blu-ray discs, you first need a \u003ca href=\"https://web.archive.org/web/20130409070404/http://amazon.com/dp/B003CJTQPG/\"\u003eBlu-ray drive\u003c/a\u003e. For backing up personal Blu-rays so that they can be format-shifted, \u003ca href=\"https://web.archive.org/web/20130409070404/http://www.makemkv.com/download/\"\u003eMakeMKV\u003c/a\u003e is highly recommended. We won’t be making \u003ccode\u003e.mkv\u003c/code\u003e files, but it has support for backups. A license is somewhere in the $60-$80 range, and I recommend supporting the developers of this software. Backing up is as simple as inserting the Blu-ray disc, launching MakeMKV, and choosing “Backup”. You can expect a rip to take 45m–1h15m, depending on the size of the disc.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-makemkv.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIf you’re on Windows, check-out \u003ca href=\"https://web.archive.org/web/20130409070404/http://www.slysoft.com/en/anydvd.html\"\u003eAnyDVD\u003c/a\u003e and \u003ca href=\"https://web.archive.org/web/20130409070404/http://www.slysoft.com/en/anydvdhd.html\"\u003eAnyDVD HD\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"format-shifting-to-mp4h264aac\"\u003eFormat-Shifting to MP4/H.264/AAC\u003c/h2\u003e\n\u003cp\u003eVideo files are a lot more complicated than most people realize. You may have heard words like MKV, MPEG–4, AVI, MP3, AAC and other acronyms.\u003c/p\u003e\n\u003cp\u003eThe short explanation is that every video file is made up of \u003cstrong\u003e3 different parts\u003c/strong\u003e: the \u003cstrong\u003evideo stream\u003c/strong\u003e, the \u003cstrong\u003eaudio stream\u003c/strong\u003e, and the \u003cstrong\u003econtainer\u003c/strong\u003e. The audio and video are synced-up (a.k.a., “multiplexed” or “muxed”) and are bundled together into a single file using a container format.\u003c/p\u003e\n\u003cp\u003eIf you want to make yourself a little more educated about this stuff, check out the \u0026ldquo;\u003ca href=\"https://web.archive.org/web/20130409070404/http://diveintohtml5.info/video.html\"\u003eVideo on the Web\u003c/a\u003e\u0026rdquo; chapter of \u003cem\u003eDive Into HTML5\u003c/em\u003e by Mark Pilgrim. For this exercise, just know that we want to end up with an \u003cstrong\u003eH.264\u003c/strong\u003e video stream and an \u003cstrong\u003eAAC\u003c/strong\u003e audio stream, wrapped up inside an \u003cstrong\u003eMP4\u003c/strong\u003e container.\u003c/p\u003e\n\u003cp\u003eFor this, we’ll use \u003ca href=\"https://web.archive.org/web/20130409070404/http://handbrake.fr\"\u003eHandbrake\u003c/a\u003e. Handbrake will take our personal backups as input, and produce an \u003ccode\u003e.mp4\u003c/code\u003e (or \u003ccode\u003e.m4v\u003c/code\u003e — same thing) file as output.\u003c/p\u003e\n\u003cp\u003eHandbrake comes with a good set of default settings. If you don’t know what you’re doing, feel free to use those. I’ve tweaked my settings a bit as I prefer higher-quality files at the cost of a larger file size.\u003c/p\u003e\n\u003cp\u003eSee the following screenshots for information on my presets.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDVD:\u003c/strong\u003e \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-video.png\"\u003eVideo\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-audio.png\"\u003eAudio\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-subtitles.png\"\u003eSubtitles\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-advanced.png\"\u003eAdvanced\u003c/a\u003e, and \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-chapters.png\"\u003eChapters\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBlu-ray:\u003c/strong\u003e \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-video.png\"\u003eVideo\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-audio.png\"\u003eAudio\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-subtitles.png\"\u003eSubtitles\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-advanced.png\"\u003eAdvanced\u003c/a\u003e, and \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-chapters.png\"\u003eChapters\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe biggest difference between these is that the video bitrate for DVDs is 3,000 kbps while for Blu-rays it’s 10,000 kbps.\u003c/p\u003e\n\u003cp\u003eTo get started, click the \u003cem\u003eSource\u003c/em\u003e button in the upper-left corner of the main Handbrake window. Find your backup directory, and choose \u003cem\u003eOpen\u003c/em\u003e. Handbrake will parse the files and make sure it has a complete backup to work with. If you’re using my presets, choose \u003cem\u003eDVD (480p)\u003c/em\u003e if your source is a DVD backup, or \u003cem\u003eBlu-ray (1080p)\u003c/em\u003e if your source is a Blu-ray backup. It may also be helpful to check out the \u003ca href=\"https://web.archive.org/web/20130409070404/https://trac.handbrake.fr/wiki/MacGuiGuide\"\u003eHandbrake Quick-Start Guide\u003c/a\u003e if you’re new to the tool.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/handbrake-source.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNext, click the \u003cem\u003eAdd to Queue\u003c/em\u003e button. Once you’ve queued-up all of the movies you want to format-shift, click the \u003cem\u003eStart\u003c/em\u003e button. On the reference hardware listed above, DVDs typically take 45m–1h30m to fully encode a new MP4 file. Blu-rays take 4–6 hours. In both cases, Handbrake will leverage as much of your CPU and RAM as possible, so don’t expect to be able to do much with your computer until its done.\u003c/p\u003e\n\u003cp\u003eWith these settings, expect a \u003cstrong\u003e480p\u003c/strong\u003e MP4 to be around \u003cstrong\u003e1 GB/hour\u003c/strong\u003e of video and a \u003cstrong\u003e1080p\u003c/strong\u003e MP4 to be around \u003cstrong\u003e5 GB/hour\u003c/strong\u003e of video. If having a 15 GB copy of \u003cem\u003eTitanic\u003c/em\u003e is too much, lower the video bitrate for the \u003cem\u003eBlu-ray (1080p)\u003c/em\u003e setting from 10,000 kbps. The lower the setting, the worse the quality, but the smaller the file size.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/titanic.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eOne more tip:\u003c/strong\u003e 1080p video has a resolution of \u003ccode\u003e1920×1080\u003c/code\u003e. The smaller the screen, the less there is for your eyes to notice, so you can be more forgiving of lower-quality. However, if you’re stretching \u003ccode\u003e1920×1080\u003c/code\u003e across your nice new 55\u0026rdquo; LED TV, a low-quality file will make your whole movie-watching experience suck. The bigger the TV, the better you want the quality to be.\u003c/p\u003e\n\u003ch2 id=\"metadata-and-artwork\"\u003eMetadata and Artwork\u003c/h2\u003e\n\u003cp\u003eOnce you have your \u003ccode\u003e.mp4\u003c/code\u003e or \u003ccode\u003e.m4v\u003c/code\u003e file, you’ll want to give it a proper name and add the metadata and artwork to the file. The format I use is \u003ccode\u003e\u0026lt;name of movie\u0026gt; (\u0026lt;format\u0026gt;).mp4\u003c/code\u003e (e.g., \u003ccode\u003eMy Favorite Movie (1080p).mp4\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eIt’s possible that you may have heard of \u003cem\u003eAtomicParsley\u003c/em\u003e, \u003cem\u003eMetaX\u003c/em\u003e or \u003cem\u003eMetaZ\u003c/em\u003e before. They all suck. Check out \u003ca href=\"https://web.archive.org/web/20130409070404/http://code.google.com/p/subler/\"\u003eSubler\u003c/a\u003e instead.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/subler-metadata.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSubler queries \u003ca href=\"https://web.archive.org/web/20130409070404/http://themoviedb.org\"\u003eThe Movie DB\u003c/a\u003e for movie data and artwork, and uses \u003ca href=\"https://web.archive.org/web/20130409070404/http://thetvdb.com\"\u003eTVDB\u003c/a\u003e for TV show data. While The Movie DB has a pretty awesome selection of movie artwork, I’m generally unimpressed with the TV show artwork. For that, I use \u003ca href=\"https://web.archive.org/web/20130409070404/http://getvideoartwork.com\"\u003eGet Video Artwork\u003c/a\u003e and download the iTunes-compatible, square-shaped TV show artwork.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/subler-artwork.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSave your changes, and Subler will write the video metadata and artwork into the file.\u003c/p\u003e\n\u003ch2 id=\"streaming-via-itunes\"\u003eStreaming via iTunes\u003c/h2\u003e\n\u003cp\u003eI have an Xbox 360, a Playstation 3, and two Apple TVs at home. I also have an iPad 2, iPad 3 and an iPad mini. Needless to say, I watch a lot of movies and TV shows.\u003c/p\u003e\n\u003cp\u003eBecause the video files tend to be so large, I use an external hard drive attached to my Mac to store the video files. I then tell iTunes where to find the movie by \u003cem\u003eoption-dragging\u003c/em\u003e the MP4 file from Finder into iTunes’ \u003cem\u003eMovie\u003c/em\u003e pane. The \u003cem\u003eoption-drag\u003c/em\u003e tells iTunes “here’s a pointer to the movie, but don’t copy it onto my built-in hard drive”.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/itunes.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow it’s time to watch your movie!\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eAs of iOS 5, \u003cstrong\u003eiPad\u003c/strong\u003e supports 1080p video. Simply sync the movie to your iPad and watch it on-the-go.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAs long as your computer running iTunes and your \u003cstrong\u003eApple TV\u003c/strong\u003e are on the same network and are both configured to use the same \u003cem\u003eHome Sharing\u003c/em\u003e account, you should be able to start streaming the movie to your Apple TV right away. (I would always recommend a hard-wired network connection, otherwise a Wireless-N connection. A Wireless-G connection is likely going to require more buffering or have choppy playback.)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTo stream to your \u003cstrong\u003ePlaystation 3\u003c/strong\u003e, you’ll need to be running a \u003ca href=\"https://web.archive.org/web/20130409070404/https://en.wikipedia.org/wiki/Digital_Living_Network_Alliance\"\u003eDLNA\u003c/a\u003e server on your Mac. \u003ca href=\"https://web.archive.org/web/20130409070404/http://www.nullriver.com/products/medialink\"\u003eMedialink\u003c/a\u003e ($20) can be installed as a System Preference and automatically serve your iTunes content to your Playstation 3.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTo stream to your \u003cstrong\u003eXbox 360\u003c/strong\u003e, you’ll need to be running a similar server which the Xbox understands. \u003ca href=\"https://web.archive.org/web/20130409070404/http://www.nullriver.com/products/connect360\"\u003eConnect360\u003c/a\u003e ($20) can be installed as a System Preference and automatically serve your iTunes content to your Xbox 360.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSince MP4/H.264/AAC is the industry-wide \u003cem\u003estandard\u003c/em\u003e for all modern-age video, pretty much any smartphone, tablet, laptop, operating system, and streaming device created since 2004 can play this format out-of-the-box. Even ancient OS’s like Windows XP have been updated to support this format. Go nuts.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n",
        "plain":"I often find myself wanting to watch my movies when I’m on-the-go, or sitting at work writing code. I also have one Blu-ray player in the house, and hate having to sit through one unskippable warning or commercial after another.   Because of this, I choose to exercise my fair-use right to format-shift my movies into something more convenient. Making a personal backup of movies you own is in a legal gray-area in the U.S. Historically, this sort of thing fell under fair use law, but the DMCA (1998) makes it illegal to crack the encryption. This is why backing-up CDs is commonplace while backing-up DVDs and Blu-rays is frowned upon. The encryption is where the line is drawn. You’ve been warned!\nHardware The Mac used for this tutorial is an 17\u0026rdquo; MacBook Pro (early–2011) with a 64-bit quad-core 2.2 GHz Intel Core i7 processor, 16 GB of RAM, OS X Mountain Lion, and a standard, built-in Superdrive. The external BD-R drive is a Buffalo MediaStation 6X USB 2.0 Portable Blu-Ray Writer.\nBacking-up your discs Pretty much every Mac since the early 2000s has shipped with a DVD drive, so these are easy to come by. For backing up personal DVDs so that they can be format-shifted, RipIt is highly recommended. A license is a paltry $25, and I recommend supporting the developers of this software. Backing up is as simple as inserting the DVD, launching RipIt, and choosing “Rip”. You can expect a rip to take 15–30 minutes, depending on the size of the disc.\n  For Blu-ray discs, you first need a Blu-ray drive. For backing up personal Blu-rays so that they can be format-shifted, MakeMKV is highly recommended. We won’t be making .mkv files, but it has support for backups. A license is somewhere in the $60-$80 range, and I recommend supporting the developers of this software. Backing up is as simple as inserting the Blu-ray disc, launching MakeMKV, and choosing “Backup”. You can expect a rip to take 45m–1h15m, depending on the size of the disc.\n  If you’re on Windows, check-out AnyDVD and AnyDVD HD.\nFormat-Shifting to MP4/H.264/AAC Video files are a lot more complicated than most people realize. You may have heard words like MKV, MPEG–4, AVI, MP3, AAC and other acronyms.\nThe short explanation is that every video file is made up of 3 different parts: the video stream, the audio stream, and the container. The audio and video are synced-up (a.k.a., “multiplexed” or “muxed”) and are bundled together into a single file using a container format.\nIf you want to make yourself a little more educated about this stuff, check out the \u0026ldquo;Video on the Web\u0026rdquo; chapter of Dive Into HTML5 by Mark Pilgrim. For this exercise, just know that we want to end up with an H.264 video stream and an AAC audio stream, wrapped up inside an MP4 container.\nFor this, we’ll use Handbrake. Handbrake will take our personal backups as input, and produce an .mp4 (or .m4v — same thing) file as output.\nHandbrake comes with a good set of default settings. If you don’t know what you’re doing, feel free to use those. I’ve tweaked my settings a bit as I prefer higher-quality files at the cost of a larger file size.\nSee the following screenshots for information on my presets.\n  DVD: Video, Audio, Subtitles, Advanced, and Chapters.\n  Blu-ray: Video, Audio, Subtitles, Advanced, and Chapters.\n  The biggest difference between these is that the video bitrate for DVDs is 3,000 kbps while for Blu-rays it’s 10,000 kbps.\nTo get started, click the Source button in the upper-left corner of the main Handbrake window. Find your backup directory, and choose Open. Handbrake will parse the files and make sure it has a complete backup to work with. If you’re using my presets, choose DVD (480p) if your source is a DVD backup, or Blu-ray (1080p) if your source is a Blu-ray backup. It may also be helpful to check out the Handbrake Quick-Start Guide if you’re new to the tool.\n  Next, click the Add to Queue button. Once you’ve queued-up all of the movies you want to format-shift, click the Start button. On the reference hardware listed above, DVDs typically take 45m–1h30m to fully encode a new MP4 file. Blu-rays take 4–6 hours. In both cases, Handbrake will leverage as much of your CPU and RAM as possible, so don’t expect to be able to do much with your computer until its done.\nWith these settings, expect a 480p MP4 to be around 1 GB/hour of video and a 1080p MP4 to be around 5 GB/hour of video. If having a 15 GB copy of Titanic is too much, lower the video bitrate for the Blu-ray (1080p) setting from 10,000 kbps. The lower the setting, the worse the quality, but the smaller the file size.\n  One more tip: 1080p video has a resolution of 1920×1080. The smaller the screen, the less there is for your eyes to notice, so you can be more forgiving of lower-quality. However, if you’re stretching 1920×1080 across your nice new 55\u0026rdquo; LED TV, a low-quality file will make your whole movie-watching experience suck. The bigger the TV, the better you want the quality to be.\nMetadata and Artwork Once you have your .mp4 or .m4v file, you’ll want to give it a proper name and add the metadata and artwork to the file. The format I use is \u0026lt;name of movie\u0026gt; (\u0026lt;format\u0026gt;).mp4 (e.g., My Favorite Movie (1080p).mp4).\nIt’s possible that you may have heard of AtomicParsley, MetaX or MetaZ before. They all suck. Check out Subler instead.\n  Subler queries The Movie DB for movie data and artwork, and uses TVDB for TV show data. While The Movie DB has a pretty awesome selection of movie artwork, I’m generally unimpressed with the TV show artwork. For that, I use Get Video Artwork and download the iTunes-compatible, square-shaped TV show artwork.\n  Save your changes, and Subler will write the video metadata and artwork into the file.\nStreaming via iTunes I have an Xbox 360, a Playstation 3, and two Apple TVs at home. I also have an iPad 2, iPad 3 and an iPad mini. Needless to say, I watch a lot of movies and TV shows.\nBecause the video files tend to be so large, I use an external hard drive attached to my Mac to store the video files. I then tell iTunes where to find the movie by option-dragging the MP4 file from Finder into iTunes’ Movie pane. The option-drag tells iTunes “here’s a pointer to the movie, but don’t copy it onto my built-in hard drive”.\n  Now it’s time to watch your movie!\n  As of iOS 5, iPad supports 1080p video. Simply sync the movie to your iPad and watch it on-the-go.\n  As long as your computer running iTunes and your Apple TV are on the same network and are both configured to use the same Home Sharing account, you should be able to start streaming the movie to your Apple TV right away. (I would always recommend a hard-wired network connection, otherwise a Wireless-N connection. A Wireless-G connection is likely going to require more buffering or have choppy playback.)\n  To stream to your Playstation 3, you’ll need to be running a DLNA server on your Mac. Medialink ($20) can be installed as a System Preference and automatically serve your iTunes content to your Playstation 3.\n  To stream to your Xbox 360, you’ll need to be running a similar server which the Xbox understands. Connect360 ($20) can be installed as a System Preference and automatically serve your iTunes content to your Xbox 360.\n  Since MP4/H.264/AAC is the industry-wide standard for all modern-age video, pretty much any smartphone, tablet, laptop, operating system, and streaming device created since 2004 can play this format out-of-the-box. Even ancient OS’s like Windows XP have been updated to support this format. Go nuts.\n  ",
        "source":"\n{{\u003c description \u003e}}\nI often find myself wanting to watch my movies when I’m on-the-go, or sitting at work writing code. I also have one Blu-ray player in the house, and hate having to sit through one unskippable warning or commercial after another.\n{{\u003c /description \u003e}}\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/fbi-warning.png\"\u003e}}\n\nBecause of this, I choose to exercise my fair-use right to format-shift my movies into something more convenient. Making a personal backup of movies you own is in a legal gray-area in the U.S. Historically, this sort of thing fell under fair use law, but the DMCA (1998) makes it illegal to crack the encryption. This is why backing-up CDs is commonplace while backing-up DVDs and Blu-rays is frowned upon. The encryption is where the line is drawn. You’ve been warned!\n\n\n## Hardware\n\nThe Mac used for this tutorial is an [17\" MacBook Pro (early–2011)]({{% wayback \"http://www.everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i7-2.2-17-early-2011-unibody-thunderbolt-specs.html\" %}}) with a 64-bit quad-core 2.2 GHz Intel Core i7 processor, 16 GB of RAM, OS X Mountain Lion, and a standard, built-in Superdrive. The external BD-R drive is a [Buffalo MediaStation 6X USB 2.0 Portable Blu-Ray Writer]({{% wayback \"http://amazon.com/dp/B003CJTQPG/\" %}}).\n\n\n## Backing-up your discs\n\nPretty much every Mac since the early 2000s has shipped with a DVD drive, so these are easy to come by. For backing up personal DVDs so that they can be format-shifted, [RipIt]({{% wayback \"http://thelittleappfactory.com/ripit/\" %}}) is highly recommended. A license is a paltry $25, and I recommend supporting the developers of this software. Backing up is as simple as inserting the DVD, launching RipIt, and choosing “Rip”. You can expect a rip to take 15–30 minutes, depending on the size of the disc.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-ripit.png\"\u003e}}\n\nFor Blu-ray discs, you first need a [Blu-ray drive]({{% wayback \"http://amazon.com/dp/B003CJTQPG/\" %}}). For backing up personal Blu-rays so that they can be format-shifted, [MakeMKV]({{% wayback \"http://www.makemkv.com/download/\" %}}) is highly recommended. We won’t be making `.mkv` files, but it has support for backups. A license is somewhere in the $60-$80 range, and I recommend supporting the developers of this software. Backing up is as simple as inserting the Blu-ray disc, launching MakeMKV, and choosing “Backup”. You can expect a rip to take 45m–1h15m, depending on the size of the disc.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-makemkv.png\"\u003e}}\n\nIf you’re on Windows, check-out [AnyDVD]({{% wayback \"http://www.slysoft.com/en/anydvd.html\" %}}) and [AnyDVD HD]({{% wayback \"http://www.slysoft.com/en/anydvdhd.html\" %}}).\n\n\n## Format-Shifting to MP4/H.264/AAC\n\nVideo files are a lot more complicated than most people realize. You may have heard words like MKV, MPEG–4, AVI, MP3, AAC and other acronyms.\n\nThe short explanation is that every video file is made up of **3 different parts**: the **video stream**, the **audio stream**, and the **container**. The audio and video are synced-up (a.k.a., “multiplexed” or “muxed”) and are bundled together into a single file using a container format.\n\nIf you want to make yourself a little more educated about this stuff, check out the \"[Video on the Web]({{% wayback \"http://diveintohtml5.info/video.html\" %}})\" chapter of *Dive Into HTML5* by Mark Pilgrim. For this exercise, just know that we want to end up with an **H.264** video stream and an **AAC** audio stream, wrapped up inside an **MP4** container.\n\nFor this, we’ll use [Handbrake]({{% wayback \"http://handbrake.fr\" %}}). Handbrake will take our personal backups as input, and produce an `.mp4` (or `.m4v` — same thing) file as output.\n\nHandbrake comes with a good set of default settings. If you don’t know what you’re doing, feel free to use those. I’ve tweaked my settings a bit as I prefer higher-quality files at the cost of a larger file size.\n\nSee the following screenshots for information on my presets.\n\n* **DVD:** [Video]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-video.png\" %}}), [Audio]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-audio.png\" %}}), [Subtitles]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-subtitles.png\" %}}), [Advanced]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-advanced.png\" %}}), and [Chapters]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-chapters.png\" %}}).\n\n* **Blu-ray:** [Video]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-video.png\" %}}), [Audio]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-audio.png\" %}}), [Subtitles]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-subtitles.png\" %}}), [Advanced]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-advanced.png\" %}}), and [Chapters]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-chapters.png\" %}}).\n\nThe biggest difference between these is that the video bitrate for DVDs is 3,000 kbps while for Blu-rays it’s 10,000 kbps.\n\nTo get started, click the *Source* button in the upper-left corner of the main Handbrake window. Find your backup directory, and choose *Open*. Handbrake will parse the files and make sure it has a complete backup to work with. If you’re using my presets, choose *DVD (480p)* if your source is a DVD backup, or *Blu-ray (1080p)* if your source is a Blu-ray backup. It may also be helpful to check out the [Handbrake Quick-Start Guide]({{% wayback \"https://trac.handbrake.fr/wiki/MacGuiGuide\" %}}) if you’re new to the tool.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/handbrake-source.png\"\u003e}}\n\nNext, click the *Add to Queue* button. Once you’ve queued-up all of the movies you want to format-shift, click the *Start* button. On the reference hardware listed above, DVDs typically take 45m–1h30m to fully encode a new MP4 file. Blu-rays take 4–6 hours. In both cases, Handbrake will leverage as much of your CPU and RAM as possible, so don’t expect to be able to do much with your computer until its done.\n\nWith these settings, expect a **480p** MP4 to be around **1 GB/hour** of video and a **1080p** MP4 to be around **5 GB/hour** of video. If having a 15 GB copy of *Titanic* is too much, lower the video bitrate for the *Blu-ray (1080p)* setting from 10,000 kbps. The lower the setting, the worse the quality, but the smaller the file size.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/titanic.png\"\u003e}}\n\n**One more tip:** 1080p video has a resolution of `1920×1080`. The smaller the screen, the less there is for your eyes to notice, so you can be more forgiving of lower-quality. However, if you’re stretching `1920×1080` across your nice new 55\" LED TV, a low-quality file will make your whole movie-watching experience suck. The bigger the TV, the better you want the quality to be.\n\n\n## Metadata and Artwork\n\nOnce you have your `.mp4` or `.m4v` file, you’ll want to give it a proper name and add the metadata and artwork to the file. The format I use is `\u003cname of movie\u003e (\u003cformat\u003e).mp4` (e.g., `My Favorite Movie (1080p).mp4`).\n\nIt’s possible that you may have heard of *AtomicParsley*, *MetaX* or *MetaZ* before. They all suck. Check out [Subler]({{% wayback \"http://code.google.com/p/subler/\" %}}) instead.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/subler-metadata.png\"\u003e}}\n\nSubler queries [The Movie DB]({{% wayback \"http://themoviedb.org\" %}}) for movie data and artwork, and uses [TVDB]({{% wayback \"http://thetvdb.com\" %}}) for TV show data. While The Movie DB has a pretty awesome selection of movie artwork, I’m generally unimpressed with the TV show artwork. For that, I use [Get Video Artwork]({{% wayback \"http://getvideoartwork.com\" %}}) and download the iTunes-compatible, square-shaped TV show artwork.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/subler-artwork.png\"\u003e}}\n\nSave your changes, and Subler will write the video metadata and artwork into the file.\n\n\n## Streaming via iTunes\n\nI have an Xbox 360, a Playstation 3, and two Apple TVs at home. I also have an iPad 2, iPad 3 and an iPad mini. Needless to say, I watch a lot of movies and TV shows.\n\nBecause the video files tend to be so large, I use an external hard drive attached to my Mac to store the video files. I then tell iTunes where to find the movie by *option-dragging* the MP4 file from Finder into iTunes’ *Movie* pane. The *option-drag* tells iTunes “here’s a pointer to the movie, but don’t copy it onto my built-in hard drive”.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/itunes.png\"\u003e}}\n\nNow it’s time to watch your movie!\n\n1. As of iOS 5, **iPad** supports 1080p video. Simply sync the movie to your iPad and watch it on-the-go.\n\n2. As long as your computer running iTunes and your **Apple TV** are on the same network and are both configured to use the same *Home Sharing* account, you should be able to start streaming the movie to your Apple TV right away. (I would always recommend a hard-wired network connection, otherwise a Wireless-N connection. A Wireless-G connection is likely going to require more buffering or have choppy playback.)\n\n3. To stream to your **Playstation 3**, you’ll need to be running a [DLNA]({{% wayback \"https://en.wikipedia.org/wiki/Digital_Living_Network_Alliance\" %}}) server on your Mac. [Medialink]({{% wayback \"http://www.nullriver.com/products/medialink\" %}}) ($20) can be installed as a System Preference and automatically serve your iTunes content to your Playstation 3.\n\n4. To stream to your **Xbox 360**, you’ll need to be running a similar server which the Xbox understands. [Connect360]({{% wayback \"http://www.nullriver.com/products/connect360\" %}}) ($20) can be installed as a System Preference and automatically serve your iTunes content to your Xbox 360.\n\n5. Since MP4/H.264/AAC is the industry-wide *standard* for all modern-age video, pretty much any smartphone, tablet, laptop, operating system, and streaming device created since 2004 can play this format out-of-the-box. Even ancient OS’s like Windows XP have been updated to support this format. Go nuts.\n"},
    "links": {
        "prev": {"title": "H.265 has been approved", "permalink": "https://ryanparman.com/posts/2013/h265-has-been-approved/"},
        "next": {"title": "Converting MKV files to MP4, using Mac OS X, for playback on iPad, Apple TV, Playstation 3, Xbox 360, Roku and other players", "permalink": "https://ryanparman.com/posts/2013/converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "H.265 has been approved",
    "description": "",
    "summary": {
        "content": "For my fellow video nerds, the ITU announced today that its members had agreed upon the format for the successor to H.264 video — H.265, also known as “High-Efficiency Video Coding”. H.264 and HDTV Today, most TVs support 1080p, although most content (TV shows, most video games) are only 720p. Blu-ray movies and a handful of video games are “Full HD” (aka, 1080p). This is all thanks to a video codec called H.264 (aka, “Advanced Video Coding”, or AVC for short).",
        "isTruncated": true
    },
    "published": "2013-01-26T09:44:09Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/h265-has-been-approved/",
    "relativePermalink": "/posts/2013/h265-has-been-approved/",
    "aliases": ["/2013/01/26/h265-has-been-approved/"],
    "images": ["https://cdn.ryanparman.com/wp-content/uploads/2013/01/h_265_hevc.jpg"],
    "videos": [],
    "categories": ["Tech Industry"],
    "tags": ["h.265", "h.264", "hdtv", "4k", "blu-ray", "ultra hd blu-ray"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 762,
        "readingTime": "4 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130126-h265-has-been-approved.md",
        "logicalName": "20130126-h265-has-been-approved.md",
        "translationBaseName": "20130126-h265-has-been-approved",
        "baseFileName": "20130126-h265-has-been-approved",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#h264-and-hdtv\"\u003eH.264 and HDTV\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#ces-2013-and-4k-ultra-hdtv\"\u003eCES 2013 and “4K” Ultra HDTV\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#higher-quality-smaller-size\"\u003eHigher quality, smaller size\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#whats-missing\"\u003eWhat’s missing?\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#not-that-nerdy-no-really\"\u003eNot that nerdy… no, really\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eFor my fellow video nerds, the ITU announced today that its members had agreed upon the format for the successor to H.264 video — \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding\"\u003eH.265\u003c/a\u003e, also known as “High-Efficiency Video Coding”.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/wp-content/uploads/2013/01/h_265_hevc.jpg\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"h264-and-hdtv\"\u003eH.264 and HDTV\u003c/h2\u003e\n\u003cp\u003eToday, most TVs support \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/1080p\"\u003e1080p\u003c/a\u003e, although most content (TV shows, most video games) are only \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/720p\"\u003e720p\u003c/a\u003e. \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/Blu-ray\"\u003eBlu-ray\u003c/a\u003e movies and a handful of video games are “Full HD” (aka, 1080p). This is all thanks to a video codec called \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC\"\u003eH.264\u003c/a\u003e (aka, “Advanced Video Coding”, or AVC for short).\u003c/p\u003e\n\u003cp\u003eH.264 is what makes Blu-ray exist, and what allows you to watch \u003ca href=\"https://web.archive.org/web/20130126094409/http://netflix.com\"\u003eNetflix\u003c/a\u003e and other video on your TV, computer and mobile devices. H.264 did for video what \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/MP3\"\u003eMP3\u003c/a\u003e did for music.\u003c/p\u003e\n\u003ch2 id=\"ces-2013-and-4k-ultra-hdtv\"\u003eCES 2013 and “4K” Ultra HDTV\u003c/h2\u003e\n\u003cp\u003eAt the \u003ca href=\"https://web.archive.org/web/20130126094409/http://www.huffingtonpost.com/2013/01/10/best-tvs-ces-2013_n_2440389.html\"\u003eCES 2013\u003c/a\u003e trade show this month, companies like Sony, Toshiba, Panasonic and others were showing-off prototypes of their new 70+ inch TVs that support a new resolution called \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/4K_UHDTV\"\u003e4K\u003c/a\u003e — otherwise known as the \u003cem\u003esmall\u003c/em\u003e version of \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/Ultra_high_definition_television\"\u003eUltra HDTV\u003c/a\u003e). (Kinda like how 720p is the small version of \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/HDTV\"\u003eHDTV\u003c/a\u003e.)\u003c/p\u003e\n\u003cp\u003eThe approval of H.265 makes 4K television content possible. H.265 (or possibly the future H.266, depending on how long Blu-ray sticks around) will be the basis of whatever format replaces Blu-ray discs. \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/DVD\"\u003eDVD\u003c/a\u003e had a good 12-year run as the disc format \u003cem\u003edu jour\u003c/em\u003e (1998–2010). Blu-ray debuted in 2006, so if we give it the same 12-year run as DVD had (circa 2018), Blu-ray has about 5 years left before \u003ca href=\"https://web.archive.org/web/20130126094409/http://www.digitaltrends.com/computing/sonys-blu-ray-replacement-to-store-1tb-on-a-single-disc/\"\u003eits successor\u003c/a\u003e overtakes it in popularity.\u003c/p\u003e\n\u003cp\u003e(As much as I would love to see Blu-ray be the final disc format, falling by the wayside in favor of all-digital streaming and downloads, I don’t think it’s going to happen just yet. The content industry needs something to sell and the average consumer needs something to buy. God forbid the general public is forced to figure out the \u003cem\u003eepic clusterf**k\u003c/em\u003e known as \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/UltraViolet_(system)\"\u003eUltraViolet DRM\u003c/a\u003e. But I digress…)\u003c/p\u003e\n\u003ch2 id=\"higher-quality-smaller-size\"\u003eHigher quality, smaller size\u003c/h2\u003e\n\u003cp\u003eFor the forward-thinking folks who have \u003ca href=\"https://web.archive.org/web/20130126094409/http://cl.ly/Jgs4\"\u003ealready moved to all-digital\u003c/a\u003e, H.265 takes up half the drive space for the same quality file compared to H.264. All of my movies encoded with H.264 that take up 8–10 GB each, would only take 4–5 GB each. Alternatively, I can keep them at 8–10 GB each, and get resolutions of 3840x2160 (which would require a 4K TV to appreciate).\u003c/p\u003e\n\u003cp\u003eThen again, if your TV is bigger than about 40–46 inches, 1080p starts to lose clarity as the pixels become more noticeable. A 55–60 inch 4K TV would be equivalent to your iPhones, iPads, and other devices with a \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/Retina_Display\"\u003eRetina Display\u003c/a\u003e — pixels so small that you can’t see them unless you get really close. Of course, an 80-inch “8K” Ultra HDTV with matching H.265-encoded movies would be \u003cem\u003efreaking epic!\u003c/em\u003e Goodbye \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/IMAX\"\u003eIMAX\u003c/a\u003e, hello my living room!)\u003c/p\u003e\n\u003cp\u003eThis also means that watching video on-the-go on your smartphone or iPad will be faster, the picture will be clearer, and video will eat-up less of your monthly data plan.\u003c/p\u003e\n\u003ch2 id=\"whats-missing\"\u003eWhat’s missing?\u003c/h2\u003e\n\u003cp\u003eThere are still some important pieces missing from this equation — notably \u003cem\u003ehardware decoders\u003c/em\u003e and \u003cem\u003evideo content\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eDecoding the video’s format into something that you can watch is a very intensive process. Doing the decoding in \u003cem\u003esoftware\u003c/em\u003e requires much more processing power than decoding in \u003cem\u003ehardware\u003c/em\u003e. Hardware decoding is what allows your iPhone, iPad or other device to play movies smoothly.\u003c/p\u003e\n\u003cp\u003eContrast that with Android devices that support \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/Adobe_Flash\"\u003eFlash\u003c/a\u003e. Animation and \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/FLV\"\u003eFLV\u003c/a\u003e playback tends to be stuttered, jarring, and chews through your battery because all of the decoding happens in software. Over the next 12–18 months, expect to start seeing H.265 decoders being shipped in new devices — especially mobile devices.\u003c/p\u003e\n\u003cp\u003eThe other major piece of this equation is having H.265-encoded content. What’s the point of having all of this fancy H.265 hardware if there’s nothing to watch?\u003c/p\u003e\n\u003cp\u003eThe first content will come from the hacker communities as Blu-ray movies encoded at 1080p with H.265 will start showing up on torrent sites. (These are what I call the \u003ca href=\"https://web.archive.org/web/20130126094409/https://en.wikipedia.org/wiki/Alpha_consumer\"\u003esuper-alphas\u003c/a\u003e.) Over the next 3–5 years, the rest of the world will catch up as H.265 makes its way into the streaming content market (e.g., Netflix, Hulu, Amazon Instant Video, iTunes, Verizon, Comcast). Finally, H.265 will hit the mainstream in whatever disc format replaces Blu-ray — just a couple of years before H.265’s successor (presumably H.266) is approved, and the whole process starts over.\u003c/p\u003e\n\u003ch2 id=\"not-that-nerdy-no-really\"\u003eNot that nerdy… no, really\u003c/h2\u003e\n\u003cp\u003eI said all of that to say this: H.265 may sound \u003ca href=\"https://www.google.com/search?q=define+esoteric\"\u003eesoteric\u003c/a\u003e, but it unlocks a very bright future for video content (movies, TV shows, video games, web video, etc.) moving forward.\u003c/p\u003e\n",
        "plain":"For my fellow video nerds, the ITU announced today that its members had agreed upon the format for the successor to H.264 video — H.265, also known as “High-Efficiency Video Coding”.\n  H.264 and HDTV Today, most TVs support 1080p, although most content (TV shows, most video games) are only 720p. Blu-ray movies and a handful of video games are “Full HD” (aka, 1080p). This is all thanks to a video codec called H.264 (aka, “Advanced Video Coding”, or AVC for short).\nH.264 is what makes Blu-ray exist, and what allows you to watch Netflix and other video on your TV, computer and mobile devices. H.264 did for video what MP3 did for music.\nCES 2013 and “4K” Ultra HDTV At the CES 2013 trade show this month, companies like Sony, Toshiba, Panasonic and others were showing-off prototypes of their new 70+ inch TVs that support a new resolution called 4K — otherwise known as the small version of Ultra HDTV). (Kinda like how 720p is the small version of HDTV.)\nThe approval of H.265 makes 4K television content possible. H.265 (or possibly the future H.266, depending on how long Blu-ray sticks around) will be the basis of whatever format replaces Blu-ray discs. DVD had a good 12-year run as the disc format du jour (1998–2010). Blu-ray debuted in 2006, so if we give it the same 12-year run as DVD had (circa 2018), Blu-ray has about 5 years left before its successor overtakes it in popularity.\n(As much as I would love to see Blu-ray be the final disc format, falling by the wayside in favor of all-digital streaming and downloads, I don’t think it’s going to happen just yet. The content industry needs something to sell and the average consumer needs something to buy. God forbid the general public is forced to figure out the epic clusterf**k known as UltraViolet DRM. But I digress…)\nHigher quality, smaller size For the forward-thinking folks who have already moved to all-digital, H.265 takes up half the drive space for the same quality file compared to H.264. All of my movies encoded with H.264 that take up 8–10 GB each, would only take 4–5 GB each. Alternatively, I can keep them at 8–10 GB each, and get resolutions of 3840x2160 (which would require a 4K TV to appreciate).\nThen again, if your TV is bigger than about 40–46 inches, 1080p starts to lose clarity as the pixels become more noticeable. A 55–60 inch 4K TV would be equivalent to your iPhones, iPads, and other devices with a Retina Display — pixels so small that you can’t see them unless you get really close. Of course, an 80-inch “8K” Ultra HDTV with matching H.265-encoded movies would be freaking epic! Goodbye IMAX, hello my living room!)\nThis also means that watching video on-the-go on your smartphone or iPad will be faster, the picture will be clearer, and video will eat-up less of your monthly data plan.\nWhat’s missing? There are still some important pieces missing from this equation — notably hardware decoders and video content.\nDecoding the video’s format into something that you can watch is a very intensive process. Doing the decoding in software requires much more processing power than decoding in hardware. Hardware decoding is what allows your iPhone, iPad or other device to play movies smoothly.\nContrast that with Android devices that support Flash. Animation and FLV playback tends to be stuttered, jarring, and chews through your battery because all of the decoding happens in software. Over the next 12–18 months, expect to start seeing H.265 decoders being shipped in new devices — especially mobile devices.\nThe other major piece of this equation is having H.265-encoded content. What’s the point of having all of this fancy H.265 hardware if there’s nothing to watch?\nThe first content will come from the hacker communities as Blu-ray movies encoded at 1080p with H.265 will start showing up on torrent sites. (These are what I call the super-alphas.) Over the next 3–5 years, the rest of the world will catch up as H.265 makes its way into the streaming content market (e.g., Netflix, Hulu, Amazon Instant Video, iTunes, Verizon, Comcast). Finally, H.265 will hit the mainstream in whatever disc format replaces Blu-ray — just a couple of years before H.265’s successor (presumably H.266) is approved, and the whole process starts over.\nNot that nerdy… no, really I said all of that to say this: H.265 may sound esoteric, but it unlocks a very bright future for video content (movies, TV shows, video games, web video, etc.) moving forward.\n",
        "source":"\nFor my fellow video nerds, the ITU announced today that its members had agreed upon the format for the successor to H.264 video — [H.265]({{% wayback \"https://en.wikipedia.org/wiki/High_Efficiency_Video_Coding\" %}}), also known as “High-Efficiency Video Coding”.\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2013/01/h_265_hevc.jpg\" alt=\"\"\u003e}}\n\n## H.264 and HDTV\n\nToday, most TVs support [1080p]({{% wayback \"https://en.wikipedia.org/wiki/1080p\" %}}), although most content (TV shows, most video games) are only [720p]({{% wayback \"https://en.wikipedia.org/wiki/720p\" %}}). [Blu-ray]({{% wayback \"https://en.wikipedia.org/wiki/Blu-ray\" %}}) movies and a handful of video games are “Full HD” (aka, 1080p). This is all thanks to a video codec called [H.264]({{% wayback \"https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC\" %}}) (aka, “Advanced Video Coding”, or AVC for short).\n\nH.264 is what makes Blu-ray exist, and what allows you to watch [Netflix]({{% wayback \"http://netflix.com\" %}}) and other video on your TV, computer and mobile devices. H.264 did for video what [MP3]({{% wayback \"https://en.wikipedia.org/wiki/MP3\" %}}) did for music.\n\n## CES 2013 and “4K” Ultra HDTV\n\nAt the [CES 2013]({{% wayback \"http://www.huffingtonpost.com/2013/01/10/best-tvs-ces-2013_n_2440389.html\" %}}) trade show this month, companies like Sony, Toshiba, Panasonic and others were showing-off prototypes of their new 70+ inch TVs that support a new resolution called [4K]({{% wayback \"https://en.wikipedia.org/wiki/4K_UHDTV\" %}}) — otherwise known as the *small* version of [Ultra HDTV]({{% wayback \"https://en.wikipedia.org/wiki/Ultra_high_definition_television\" %}})). (Kinda like how 720p is the small version of [HDTV]({{% wayback \"https://en.wikipedia.org/wiki/HDTV\" %}}).)\n\nThe approval of H.265 makes 4K television content possible. H.265 (or possibly the future H.266, depending on how long Blu-ray sticks around) will be the basis of whatever format replaces Blu-ray discs. [DVD]({{% wayback \"https://en.wikipedia.org/wiki/DVD\" %}}) had a good 12-year run as the disc format *du jour* (1998–2010). Blu-ray debuted in 2006, so if we give it the same 12-year run as DVD had (circa 2018), Blu-ray has about 5 years left before [its successor]({{% wayback \"http://www.digitaltrends.com/computing/sonys-blu-ray-replacement-to-store-1tb-on-a-single-disc/\" %}}) overtakes it in popularity.\n\n(As much as I would love to see Blu-ray be the final disc format, falling by the wayside in favor of all-digital streaming and downloads, I don’t think it’s going to happen just yet. The content industry needs something to sell and the average consumer needs something to buy. God forbid the general public is forced to figure out the *epic clusterf\\*\\*k* known as [UltraViolet DRM]({{% wayback \"https://en.wikipedia.org/wiki/UltraViolet_\" %}}(system)). But I digress…)\n\n## Higher quality, smaller size\n\nFor the forward-thinking folks who have [already moved to all-digital]({{% wayback \"http://cl.ly/Jgs4\" %}}), H.265 takes up half the drive space for the same quality file compared to H.264. All of my movies encoded with H.264 that take up 8–10 GB each, would only take 4–5 GB each. Alternatively, I can keep them at 8–10 GB each, and get resolutions of 3840x2160 (which would require a 4K TV to appreciate).\n\nThen again, if your TV is bigger than about 40–46 inches, 1080p starts to lose clarity as the pixels become more noticeable. A 55–60 inch 4K TV would be equivalent to your iPhones, iPads, and other devices with a [Retina Display]({{% wayback \"https://en.wikipedia.org/wiki/Retina_Display\" %}}) — pixels so small that you can’t see them unless you get really close. Of course, an 80-inch “8K” Ultra HDTV with matching H.265-encoded movies would be *freaking epic!* Goodbye [IMAX]({{% wayback \"https://en.wikipedia.org/wiki/IMAX\" %}}), hello my living room!)\n\nThis also means that watching video on-the-go on your smartphone or iPad will be faster, the picture will be clearer, and video will eat-up less of your monthly data plan.\n\n## What’s missing?\n\nThere are still some important pieces missing from this equation — notably *hardware decoders* and *video content*.\n\nDecoding the video’s format into something that you can watch is a very intensive process. Doing the decoding in *software* requires much more processing power than decoding in *hardware*. Hardware decoding is what allows your iPhone, iPad or other device to play movies smoothly.\n\nContrast that with Android devices that support [Flash]({{% wayback \"https://en.wikipedia.org/wiki/Adobe_Flash\" %}}). Animation and [FLV]({{% wayback \"https://en.wikipedia.org/wiki/FLV\" %}}) playback tends to be stuttered, jarring, and chews through your battery because all of the decoding happens in software. Over the next 12–18 months, expect to start seeing H.265 decoders being shipped in new devices — especially mobile devices.\n\nThe other major piece of this equation is having H.265-encoded content. What’s the point of having all of this fancy H.265 hardware if there’s nothing to watch?\n\nThe first content will come from the hacker communities as Blu-ray movies encoded at 1080p with H.265 will start showing up on torrent sites. (These are what I call the [super-alphas]({{% wayback \"https://en.wikipedia.org/wiki/Alpha_consumer\" %}}).) Over the next 3–5 years, the rest of the world will catch up as H.265 makes its way into the streaming content market (e.g., Netflix, Hulu, Amazon Instant Video, iTunes, Verizon, Comcast). Finally, H.265 will hit the mainstream in whatever disc format replaces Blu-ray — just a couple of years before H.265’s successor (presumably H.266) is approved, and the whole process starts over.\n\n## Not that nerdy… no, really\n\nI said all of that to say this: H.265 may sound [esoteric](https://www.google.com/search?q=define+esoteric), but it unlocks a very bright future for video content (movies, TV shows, video games, web video, etc.) moving forward.\n"},
    "links": {
        "prev": {"title": "Aaron Swartz", "permalink": "https://ryanparman.com/posts/2013/aaron-swartz/"},
        "next": {"title": "Converting Blu-ray and DVD movies to MP4, using Mac OS X, for playback on iPad, Apple TV, Playstation 3, Xbox 360, Roku and other players", "permalink": "https://ryanparman.com/posts/2013/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/"},
        "ignore": "me"
    }
}

            
        ]
    }
}
