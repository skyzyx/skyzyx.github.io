{
    "data": {
        
        
        "count": 2,
        "items": [
            
            {
    "kind": "page",
    "title": "A Refresh of the SimplePie Logo",
    "description": "",
    "summary": {
        "content": "Today, I’m introducing a refresh of the SimplePie logo and the most visible part of its brand. I’m calling this new branding style SimplePie Neue. This was originally posted to the SimplePie NG blog. The Icon I designed the original SimplePie logo back in 2005. At the time, Web 2.0 and Ajax were brand-new things to most web developers. Mac OS X “Tiger” 10.4 was the latest OS running on my 17” PowerBook G4, and while the hard glossy feel hadn’t yet taken over the Internet, shadows and gradients definitely had.",
        "isTruncated": true
    },
    "published": "2017-12-17T23:36:16Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2017/a-refresh-of-the-simplepie-logo/",
    "relativePermalink": "/posts/2017/a-refresh-of-the-simplepie-logo/",
    "aliases": ["/2017/12/17/a-refresh-of-the-simplepie-logo"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2017/simplepie-classic.png", "https://cdn.ryanparman.com/hugo/posts/2017/simplepie-neue.png", "https://cdn.ryanparman.com/hugo/posts/2017/simplepie-neue-wordmark.png", "https://cdn.ryanparman.com/hugo/posts/2017/simplepie-classic-wordmark.png"],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": ["simplepie", "simplepie-ng", "design", "logo", "powerbook-g4", "wordmark", "magpie rss", "wordpress"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 718,
        "readingTime": "4 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2017/20171217-a-refresh-of-the-simplepie-logo.md",
        "logicalName": "20171217-a-refresh-of-the-simplepie-logo.md",
        "translationBaseName": "20171217-a-refresh-of-the-simplepie-logo",
        "baseFileName": "20171217-a-refresh-of-the-simplepie-logo",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2017/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#the-icon\"\u003eThe Icon\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#the-word\"\u003eThe Word\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#coming-soon\"\u003eComing Soon…\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nToday, I’m introducing a refresh of the SimplePie logo and the most visible part of its brand. I’m calling this new branding style \u003cem\u003eSimplePie Neue\u003c/em\u003e.\n\u003c/p\u003e\n\n\n\u003caside class=\"age aside container flex\"\u003e\u003cp\u003eThis was originally posted to the \u003ca href=\"https://medium.com/simplepie-ng/a-refresh-of-the-simplepie-logo-eeb8bf46fd91\"\u003eSimplePie NG blog\u003c/a\u003e.\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003ch2 id=\"the-icon\"\u003eThe Icon\u003c/h2\u003e\n\u003cp\u003eI designed the original SimplePie logo back in 2005. At the time, Web 2.0 and Ajax were brand-new things to most web developers. Mac OS X “Tiger” 10.4 was the latest OS running on my 17” PowerBook G4, and while the \u003ca href=\"https://duckduckgo.com/?q=web 2.0 logo\"\u003ehard glossy feel\u003c/a\u003e hadn’t yet taken over the Internet, shadows and gradients definitely had.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-classic.png\" layout=\"responsive\" width=\"400\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003eThe SimplePie logo (2005–2017)\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eStill to this day, I enjoy looking at this logo. I remember spending hours and hours on the colors of the gradients to get just the right look.\u003c/p\u003e\n\u003cp\u003eBut times change, and so do tastes. I’d lost the original logo source years ago, and all I had left was this one PNG file. So to go with \u003ca href=\"https://web.archive.org/web/20171217233616/https://github.com/simplepie/simplepie-ng\"\u003ekickstarting the development of the next-generation of SimplePie\u003c/a\u003e, I decided it was time for a brand refresh (and I wanted to make sure I worked with vector art this time around!).\u003c/p\u003e\n\u003cp\u003eTo pay homage and and honor to the well-liked and familiar SimplePie logo, I wanted to keep the primary identifying elements. But I also wanted to simplify and clean it up.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-neue.png\" layout=\"responsive\" width=\"400\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003eThe SimplePie logo (2017–)\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eJust like the Apple logo in 1998, I realized that it wasn’t the unordered rainbow stripes, or the gloss of the System 7.5 variation of the logo—it was the shape itself that people identified with. Similarly, I’ve kept the major themes of the logo, while simplifying it and enabling it to scale better from \u003cem\u003etiny\u003c/em\u003e to \u003cem\u003elarge\u003c/em\u003e resolutions.\u003c/p\u003e\n\u003cp\u003ePart of me still looks at the depth and gradients of the original logo and misses them. But in wanting to change the personality of the SimplePie brand, I think that the change is a positive one.\u003c/p\u003e\n\u003ch2 id=\"the-word\"\u003eThe Word\u003c/h2\u003e\n\u003cp\u003eSimplePie is an amalgamation of the phrase “Simple API for Magpie RSS”. Magpie RSS was the RSS parser \u003cem\u003edu jour\u003c/em\u003e for PHP developers in 2004, and the earliest versions of SimplePie simply wrapped it.\u003c/p\u003e\n\u003cp\u003eBut SimplePie has come to be (strangely and unexpectedly) a well-known bit of software over the years (I don’t believe that \u003cem\u003emillions of users\u003c/em\u003e is an exaggeration). Like with the icon, I wanted to pay homage to the original icon and wordmark, but as I mentioned, I want to change the personality of SimplePie moving forward — particularly with SimplePie NG.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-classic-wordmark.png\" layout=\"responsive\" width=\"180\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003eThe SimplePie wordmark (2005–2017)\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe original personality was fun, a little smart-aleky, and would bend over backwards to work with even the least-skilled PHP users. The font was \u003ca href=\"https://web.archive.org/web/20171217233616/https://www.dafont.com/yanone-kaffeesatz.font\"\u003eYanone Kaffeesatz, Bold\u003c/a\u003e, and the letter spacing was pulled \u003cem\u003eway\u003c/em\u003e-in.\u003c/p\u003e\n\u003cp\u003eThe new SimplePie is not designed for \u003cem\u003eye olde WordPress user\u003c/em\u003e. It is designed as high-quality, professional-grade software for PHP Software Engineers. I intend for its peers to be \u003ca href=\"https://web.archive.org/web/20171217233616/http://guzzlephp.org\"\u003eGuzzle\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20171217233616/http://symfony.com\"\u003eSymfony\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20171217233616/https://aws.amazon.com/sdk-for-php/\"\u003eAWS SDK for PHP\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20171217233616/https://seldaek.github.io/monolog/\"\u003eMonolog\u003c/a\u003e, and other professional-grade software packages. And with all of this intended professionalism, there isn’t as much room for goofing off. SimplePie NG is more \u003cem\u003esmart\u003c/em\u003e and less \u003cem\u003e-aleky\u003c/em\u003e. And it will still help you out, but you need to understand your fundamentals. And no, it’s probably not going to work with your crappy $3/mo shared hosting plan.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-neue-wordmark.png\" layout=\"responsive\" width=\"324\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003eThe SimplePie wordmark (2017–)\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe first thing you’ll probably notice is the typeface change to \u003ca href=\"https://web.archive.org/web/20171217233616/https://developer.apple.com/fonts/\"\u003eSF Pro Display, Medium\u003c/a\u003e—the newest (2017) version of Apple’s San Francisco typeface that it uses throughout its products and on its website. The letter spacing is still pulled-in, but much less so than before.\u003c/p\u003e\n\u003cp\u003eI also added the “ɴԍ” using the following glyphs: \u003ca href=\"https://web.archive.org/web/20171217233616/http://www.fileformat.info/info/unicode/char/0274/index.htm\"\u003eLATIN LETTER SMALL CAPITAL N\u003c/a\u003e, and \u003ca href=\"https://web.archive.org/web/20171217233616/http://www.fileformat.info/info/unicode/char/50d/index.htm\"\u003eCYRILLIC SMALL LETTER KOMI SJE\u003c/a\u003e. I made them about 45% smaller than the rest of the text, centered them horizontally, and left the same amount of space around the word “SimplePie”.\u003c/p\u003e\n\u003cp\u003eSwitching to San Francisco Pro gives the logo a cleaner, more professional look while still maintaining the overall spirit of the original logo. It’s like looking at one of those \u003cem\u003emakeover\u003c/em\u003e shows on TV.\u003c/p\u003e\n\u003ch2 id=\"coming-soon\"\u003eComing Soon…\u003c/h2\u003e\n\u003cp\u003eI’m planning to do a complete reboot of the website when SimplePie NG ships its 1.0 release. While you will begin seeing the \u003cem\u003eNeue\u003c/em\u003e branding here and \u003ca href=\"https://web.archive.org/web/20171217233616/https://github.com/simplepie/simplepie-ng\"\u003eon GitHub\u003c/a\u003e, look for a freshly-redesigned website with the new feel when 1.0 gets tagged and released to Composer.\u003c/p\u003e\n",
        "plain":"Today, I’m introducing a refresh of the SimplePie logo and the most visible part of its brand. I’m calling this new branding style SimplePie Neue. This was originally posted to the SimplePie NG blog.\n The Icon I designed the original SimplePie logo back in 2005. At the time, Web 2.0 and Ajax were brand-new things to most web developers. Mac OS X “Tiger” 10.4 was the latest OS running on my 17” PowerBook G4, and while the hard glossy feel hadn’t yet taken over the Internet, shadows and gradients definitely had.\n The SimplePie logo (2005–2017)\n Still to this day, I enjoy looking at this logo. I remember spending hours and hours on the colors of the gradients to get just the right look.\nBut times change, and so do tastes. I’d lost the original logo source years ago, and all I had left was this one PNG file. So to go with kickstarting the development of the next-generation of SimplePie, I decided it was time for a brand refresh (and I wanted to make sure I worked with vector art this time around!).\nTo pay homage and and honor to the well-liked and familiar SimplePie logo, I wanted to keep the primary identifying elements. But I also wanted to simplify and clean it up.\n The SimplePie logo (2017–)\n Just like the Apple logo in 1998, I realized that it wasn’t the unordered rainbow stripes, or the gloss of the System 7.5 variation of the logo—it was the shape itself that people identified with. Similarly, I’ve kept the major themes of the logo, while simplifying it and enabling it to scale better from tiny to large resolutions.\nPart of me still looks at the depth and gradients of the original logo and misses them. But in wanting to change the personality of the SimplePie brand, I think that the change is a positive one.\nThe Word SimplePie is an amalgamation of the phrase “Simple API for Magpie RSS”. Magpie RSS was the RSS parser du jour for PHP developers in 2004, and the earliest versions of SimplePie simply wrapped it.\nBut SimplePie has come to be (strangely and unexpectedly) a well-known bit of software over the years (I don’t believe that millions of users is an exaggeration). Like with the icon, I wanted to pay homage to the original icon and wordmark, but as I mentioned, I want to change the personality of SimplePie moving forward — particularly with SimplePie NG.\n The SimplePie wordmark (2005–2017)\n The original personality was fun, a little smart-aleky, and would bend over backwards to work with even the least-skilled PHP users. The font was Yanone Kaffeesatz, Bold, and the letter spacing was pulled way-in.\nThe new SimplePie is not designed for ye olde WordPress user. It is designed as high-quality, professional-grade software for PHP Software Engineers. I intend for its peers to be Guzzle, Symfony, AWS SDK for PHP, Monolog, and other professional-grade software packages. And with all of this intended professionalism, there isn’t as much room for goofing off. SimplePie NG is more smart and less -aleky. And it will still help you out, but you need to understand your fundamentals. And no, it’s probably not going to work with your crappy $3/mo shared hosting plan.\n The SimplePie wordmark (2017–)\n The first thing you’ll probably notice is the typeface change to SF Pro Display, Medium—the newest (2017) version of Apple’s San Francisco typeface that it uses throughout its products and on its website. The letter spacing is still pulled-in, but much less so than before.\nI also added the “ɴԍ” using the following glyphs: LATIN LETTER SMALL CAPITAL N, and CYRILLIC SMALL LETTER KOMI SJE. I made them about 45% smaller than the rest of the text, centered them horizontally, and left the same amount of space around the word “SimplePie”.\nSwitching to San Francisco Pro gives the logo a cleaner, more professional look while still maintaining the overall spirit of the original logo. It’s like looking at one of those makeover shows on TV.\nComing Soon… I’m planning to do a complete reboot of the website when SimplePie NG ships its 1.0 release. While you will begin seeing the Neue branding here and on GitHub, look for a freshly-redesigned website with the new feel when 1.0 gets tagged and released to Composer.\n",
        "source":"\n{{\u003cdescription\u003e}}\nToday, I’m introducing a refresh of the SimplePie logo and the most visible part of its brand. I’m calling this new branding style \u003cem\u003eSimplePie Neue\u003c/em\u003e.\n{{\u003c/description\u003e}}\n\n{{% aside %}}\nThis was originally posted to the \u003ca href=\"https://medium.com/simplepie-ng/a-refresh-of-the-simplepie-logo-eeb8bf46fd91\"\u003eSimplePie NG blog\u003c/a\u003e.\n{{% /aside %}}\n\n## The Icon\n\nI designed the original SimplePie logo back in 2005. At the time, Web 2.0 and Ajax were brand-new things to most web developers. Mac OS X “Tiger” 10.4 was the latest OS running on my 17” PowerBook G4, and while the [hard glossy feel]({{\u003c search \"web 2.0 logo\" \u003e}}) hadn’t yet taken over the Internet, shadows and gradients definitely had.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-classic.png\" alt=\"The SimplePie logo (2005–2017)\" figure=\"The SimplePie logo (2005–2017)\" width=\"400\"\u003e}}\n\nStill to this day, I enjoy looking at this logo. I remember spending hours and hours on the colors of the gradients to get just the right look.\n\nBut times change, and so do tastes. I’d lost the original logo source years ago, and all I had left was this one PNG file. So to go with [kickstarting the development of the next-generation of SimplePie]({{\u003c wayback \"https://github.com/simplepie/simplepie-ng\" \u003e}}), I decided it was time for a brand refresh (and I wanted to make sure I worked with vector art this time around!).\n\nTo pay homage and and honor to the well-liked and familiar SimplePie logo, I wanted to keep the primary identifying elements. But I also wanted to simplify and clean it up.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-neue.png\" alt=\"The SimplePie logo (2017–)\" figure=\"The SimplePie logo (2017–)\" width=\"400\"\u003e}}\n\nJust like the Apple logo in 1998, I realized that it wasn’t the unordered rainbow stripes, or the gloss of the System 7.5 variation of the logo—it was the shape itself that people identified with. Similarly, I’ve kept the major themes of the logo, while simplifying it and enabling it to scale better from _tiny_ to _large_ resolutions.\n\nPart of me still looks at the depth and gradients of the original logo and misses them. But in wanting to change the personality of the SimplePie brand, I think that the change is a positive one.\n\n## The Word\n\nSimplePie is an amalgamation of the phrase “Simple API for Magpie RSS”. Magpie RSS was the RSS parser _du jour_ for PHP developers in 2004, and the earliest versions of SimplePie simply wrapped it.\n\nBut SimplePie has come to be (strangely and unexpectedly) a well-known bit of software over the years (I don’t believe that _millions of users_ is an exaggeration). Like with the icon, I wanted to pay homage to the original icon and wordmark, but as I mentioned, I want to change the personality of SimplePie moving forward — particularly with SimplePie NG.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-classic-wordmark.png\" alt=\"The SimplePie wordmark (2005–2017)\" figure=\"The SimplePie wordmark (2005–2017)\" width=\"180\"\u003e}}\n\nThe original personality was fun, a little smart-aleky, and would bend over backwards to work with even the least-skilled PHP users. The font was [Yanone Kaffeesatz, Bold]({{\u003c wayback \"https://www.dafont.com/yanone-kaffeesatz.font\" \u003e}}), and the letter spacing was pulled _way_-in.\n\nThe new SimplePie is not designed for _ye olde WordPress user_. It is designed as high-quality, professional-grade software for PHP Software Engineers. I intend for its peers to be [Guzzle]({{\u003c wayback \"http://guzzlephp.org\" \u003e}}), [Symfony]({{\u003c wayback \"http://symfony.com\" \u003e}}), [AWS SDK for PHP]({{\u003c wayback \"https://aws.amazon.com/sdk-for-php/\" \u003e}}), [Monolog]({{\u003c wayback \"https://seldaek.github.io/monolog/\" \u003e}}), and other professional-grade software packages. And with all of this intended professionalism, there isn’t as much room for goofing off. SimplePie NG is more _smart_ and less _-aleky_. And it will still help you out, but you need to understand your fundamentals. And no, it’s probably not going to work with your crappy $3/mo shared hosting plan.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-neue-wordmark.png\" alt=\"The SimplePie wordmark (2017–)\" figure=\"The SimplePie wordmark (2017–)\" width=\"324\"\u003e}}\n\nThe first thing you’ll probably notice is the typeface change to [SF Pro Display, Medium]({{\u003c wayback \"https://developer.apple.com/fonts/\" \u003e}})—the newest (2017) version of Apple’s San Francisco typeface that it uses throughout its products and on its website. The letter spacing is still pulled-in, but much less so than before.\n\nI also added the “ɴԍ” using the following glyphs: [LATIN LETTER SMALL CAPITAL N]({{\u003c wayback \"http://www.fileformat.info/info/unicode/char/0274/index.htm\" \u003e}}), and [CYRILLIC SMALL LETTER KOMI SJE]({{\u003c wayback \"http://www.fileformat.info/info/unicode/char/50d/index.htm\" \u003e}}). I made them about 45% smaller than the rest of the text, centered them horizontally, and left the same amount of space around the word “SimplePie”.\n\nSwitching to San Francisco Pro gives the logo a cleaner, more professional look while still maintaining the overall spirit of the original logo. It’s like looking at one of those _makeover_ shows on TV.\n\n## Coming Soon…\n\nI’m planning to do a complete reboot of the website when SimplePie NG ships its 1.0 release. While you will begin seeing the _Neue_ branding here and [on GitHub]({{\u003c wayback \"https://github.com/simplepie/simplepie-ng\" \u003e}}), look for a freshly-redesigned website with the new feel when 1.0 gets tagged and released to Composer.\n"},
    "links": {
        "prev": {"title": "SimplePie is back in development!", "permalink": "https://ryanparman.com/posts/2017/simplepie-is-back-in-development/"},
        "next": {"title": "PHP, DOMDocument, XPath 1.0, Case-Insensitivity, and Performance", "permalink": "https://ryanparman.com/posts/2018/php-domdocument-xpath-1-0-case-insensitivity-and-performance/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Breaking my bad password habits with 1Password, Authy, OAuth and OpenID",
    "description": "",
    "summary": {
        "content": "I learned at a relatively young age what makes a good password versus a bad password, and I’ve tried to always use these qualities in the passwords that I choose. The Problem Unfortunately, even with the best intentions, you inevitably end up re-using one or a few passwords across every single website you log into. Some people do things as dumb as using the name of their significant other. Or their pet. Or a birthdate. Or something else equally guessable by one of the many supercomputers that exist (whereby “supercomputer”, I mean pretty much any computer invented in the past 5–7 years).",
        "isTruncated": true
    },
    "published": "2013-08-10T09:03:48Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/breaking-my-bad-password-habits-with-1password-authy-oauth-openid/",
    "relativePermalink": "/posts/2013/breaking-my-bad-password-habits-with-1password-authy-oauth-openid/",
    "aliases": ["/2013/08/10/breaking-my-bad-password-habits-with-1password-authy-oauth-openid/"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2013/1password@2x.png", "https://cdn.ryanparman.com/hugo/posts/2013/password-hacking@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2013/oauth@2x.png", "https://cdn.ryanparman.com/hugo/posts/2013/authy.jpg", "https://cdn.ryanparman.com/hugo/posts/2013/shepherd-book@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2013/excited@2x.jpg"],
    "videos": [],
    "categories": ["Privacy and Security"],
    "tags": ["1password", "passwords", "authy", "oauth", "openid", "hacking", "sony", "playstation", "multifactor authentication", "app.net", "apple", "aws", "dreamhost", "dropbox", "evernote", "facebook", "godaddy", "google", "microsoft", "hotmail", "xbox", "paypal", "stripe", "wordpress", "gravatar"],
    "series": ["Editors Choice", "Passwords"],
    "keywords": [],
    "meta": {
        "wordCount": 1278,
        "readingTime": "6 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130810-breaking-my-bad-password-habits-with-1password-authy-oauth-openid.md",
        "logicalName": "20130810-breaking-my-bad-password-habits-with-1password-authy-oauth-openid.md",
        "translationBaseName": "20130810-breaking-my-bad-password-habits-with-1password-authy-oauth-openid",
        "baseFileName": "20130810-breaking-my-bad-password-habits-with-1password-authy-oauth-openid",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#the-problem\"\u003eThe Problem\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#enter-1password\"\u003eEnter 1Password\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#openid-and-oauth\"\u003eOpenID and OAuth\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#sonys-playstation-network-got-hacked\"\u003eSony’s Playstation Network got hacked\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#authy-and-2-factor-authentication\"\u003eAuthy and 2-Factor Authentication\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#changing-every-password\"\u003eChanging every password\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#end\"\u003eEnd\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#update\"\u003eUpdate\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nI learned at a relatively young age what makes a good password versus a bad password, and I’ve tried to always use these qualities in the passwords that I choose.\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/password-hacking@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/password-hacking@2x.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"the-problem\"\u003eThe Problem\u003c/h2\u003e\n\u003cp\u003eUnfortunately, even with the best intentions, you inevitably end up re-using one or a few passwords across every single website you log into. Some people do things as dumb as using the name of their significant other. Or their pet. Or a birthdate. Or something else equally guessable by one of the many supercomputers that exist (whereby “supercomputer”, I mean pretty much any computer invented in the past 5–7 years).\u003c/p\u003e\n\u003cp\u003eMy approach was this: Whenever a website would auto-generate a random password for me, instead of changing it to something I could remember, I simply memorized it. They were usually a blend of 8 alphanumeric and/or symbol characters. Nothing too wild, but after a while, I established some muscle memory around typing them and began to rely on them. This is a better approach than most people use, but it’s still a terrible practice. Over time, I began appending special characters here, or prepending them there. Sometimes I would stick a dollar sign or two somewhere in the middle to mix things up.\u003c/p\u003e\n\u003ch2 id=\"enter-1password\"\u003eEnter 1Password\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/1password@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/1password@2x.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThen in 2008, I discovered a piece of software called \u003ca href=\"https://web.archive.org/web/20130810090348/https://agilebits.com/onepassword\"\u003e1Password\u003c/a\u003e. Initially I balked at the price. \u0026ldquo;You want me to \u003cem\u003epay\u003c/em\u003e for software?!\u0026rdquo; Clearly I was still in a Windows-user’s state of mind when it came to things like that. But I sucked it up, bought a license, and started using it regularly.\u003c/p\u003e\n\u003cp\u003eIt is the single best investment I’ve ever made. Software-wise, anyway.\u003c/p\u003e\n\u003ch2 id=\"openid-and-oauth\"\u003eOpenID and OAuth\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/oauth@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/oauth@2x.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAround the same time as when I discovered 1Password, I also learned about something called \u003ca href=\"https://web.archive.org/web/20130810090348/http://openid.net\"\u003eOpenID\u003c/a\u003e. The approach that OpenID takes is known as \u003cem\u003eFederated Identity\u003c/em\u003e. It’s essentially a system where two people don’t know or trust each other, but they both trust a third person, and that third person vouches for each of the first two. Eric and Jeff don’t know each other, but they both know me. I vouch for Jeff with Eric saying that he’s a cool dude, and vice-versa. Make sense?\u003c/p\u003e\n\u003cp\u003eIt allowed me to trust a company of my choosing to vouch for me, whenever I came to log into sites which supported OpenID. If something happened and I didn’t trust that middle company any more, I could simply change the company/service which vouched for me. In that way, I only had to remember the username and password for that one company that was vouching for me, instead of having to create all-new accounts for every service I signed-up for.\u003c/p\u003e\n\u003cp\u003eBut there were some quirks that made OpenID a bit harder to understand for normal folks, so the great minds of the Internet got together and bore a different system known as \u003ca href=\"https://web.archive.org/web/20130810090348/http://oauth.net\"\u003eOAuth\u003c/a\u003e. You know all of those sites you visit that have a big blue button that says “Login with Facebook”? That’s OAuth in action.\u003c/p\u003e\n\u003cp\u003eOAuth works a bit differently behind the scenes. You say, “I want to sign up for your site”. The website says, \u0026ldquo;Either give me your information so I can register you, or you can \u003cem\u003eauthorize\u003c/em\u003e me to get your information from someone else who already has it.\u0026rdquo; And you respond with, “Sure. Facebook has it.” You then click the blue button, tell Facebook that you authorize the new site to pull your information, and away you go. Between the two approaches, OAuth is used about a zillion times more often than OpenID is.\u003c/p\u003e\n\u003cp\u003eI would recommend using OpenID or OAuth for handling your login information if at all possible because it reduces the number of passwords you need to keep track of.\u003c/p\u003e\n\u003ch2 id=\"sonys-playstation-network-got-hacked\"\u003eSony’s Playstation Network got hacked\u003c/h2\u003e\n\u003cp\u003eRemember when this happened? Where Sony was storing passwords in \u003cem\u003em********king plain text?!\u003c/em\u003e (To paraphrase Shepherd Book from \u003cem\u003eFirefly/Serenity\u003c/em\u003e, there is a special place in Hell for people who rape, murder, talk during movies, and store passwords in plain text.)\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/shepherd-book@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/shepherd-book@2x.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIn short, one of my hard-to-guess-but-used-in-lots-of-places passwords was one of the ones that was obtained by hackers. As such, I had the fine work ahead of me to change the password for every single site that used the password that got hacked.\u003c/p\u003e\n\u003cp\u003e1Password to the rescue! It took me about 90 minutes, but I was able to lookup all of the sites where this password was being used, and change the password for all of them. This event ended up making me re-think how I managed my passwords.\u003c/p\u003e\n\u003ch2 id=\"authy-and-2-factor-authentication\"\u003eAuthy and 2-Factor Authentication\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/authy.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/authy.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eOver the past couple of years, I’ve started to see more and more websites begin leveraging something called 2-Factor Authentication (or, Multi-Factor Authentication). This is where besides having the username and password (i.e., the first “factor”), you also need a code from a key fob or something else that you have with you at all times (i.e., the second “factor”). This way, even if somebody figured out your username and password, they still wouldn’t be able to get into your account unless they also had either a key fob with a code, or more commonly, your cell phone.\u003c/p\u003e\n\u003cp\u003eBesides having a key fob for logging into my company’s VPN remotely, I’d never heard of 2-Factor Authentication until Amazon Web Services announced it as a new feature of their \u003cem\u003eIdentity and Access Management (IAM)\u003c/em\u003e service. The Google added support for it. Then Facebook added support. Then a few more services added support. Most of them leveraged an app that ran on modern smartphones called \u003cem\u003eGoogle Authenticator\u003c/em\u003e which would generate a code that you could type in after your username and password.\u003c/p\u003e\n\u003cp\u003eWhen \u003ca href=\"https://web.archive.org/web/20130810090348/https://alpha.app.net\"\u003eADN\u003c/a\u003e added support for it was when I learned about \u003ca href=\"https://web.archive.org/web/20130810090348/https://authy.com\"\u003eAuthy\u003c/a\u003e. Besides looking and working WAY better than Google Authenticator, it supported lots of different accounts. The switch was a no-brainer.\u003c/p\u003e\n\u003cp\u003eSites that I’m currently aware of that support 2-Factor Authentication are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eADN (aka, App.net)\u003c/li\u003e\n\u003cli\u003eApple (account management, only)\u003c/li\u003e\n\u003cli\u003eAmazon Web Services (AWS)\u003c/li\u003e\n\u003cli\u003eDreamhost\u003c/li\u003e\n\u003cli\u003eDropbox\u003c/li\u003e\n\u003cli\u003eEvernote (Premium accounts)\u003c/li\u003e\n\u003cli\u003eFacebook\u003c/li\u003e\n\u003cli\u003eGoDaddy\u003c/li\u003e\n\u003cli\u003eGoogle\u003c/li\u003e\n\u003cli\u003eMicrosoft (including Hotmail \u0026amp; Xbox)\u003c/li\u003e\n\u003cli\u003ePaypal\u003c/li\u003e\n\u003cli\u003eStripe.com\u003c/li\u003e\n\u003cli\u003eWordPress.com (including Gravatar)\u003c/li\u003e\n\u003cli\u003eand more!\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can even install the Authy plugin in your self-hosted WordPress installation to enable extra security for your blog. I would absolutely recommend enabling 2-Factor Authentication (using Authy, of course) for every single service you use that supports it.\u003c/p\u003e\n\u003ch2 id=\"changing-every-password\"\u003eChanging every password\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/excited@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/excited@2x.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e2 days ago, I decided to bite the bullet and put in the work to change \u003cem\u003eevery single password\u003c/em\u003e I had stored in 1Password (around 250). Using their built-in password generator, I created a brand-new, completely randomized password, using a mix of upper/lower-case letters, numbers and symbols. These new passwords are all 24–30 characters long, except for services that required shorter ones, or only allowed alphanumeric characters.\u003c/p\u003e\n\u003cp\u003eI have absolutely no idea what any of my passwords are. But I’m relying on 1Password to manage them for me, and to sync them to the copies of 1Password I have installed on my iPhone and iPads.\u003c/p\u003e\n\u003cp\u003eCouple long, randomly-generated passwords, with 2-Factor Authentication, and I’m never worried about getting hacked. If Sony gets their servers hacked again and that password gets stolen, no worries. I’ll just create a new randomly-generated password for it and keep right on going.\u003c/p\u003e\n\u003ch2 id=\"end\"\u003eEnd\u003c/h2\u003e\n\u003cp\u003eYes this was several hours of work, but I believe was well-worth it. If you can swing it, I would confidently — even \u003cem\u003eexuberantly\u003c/em\u003e — recommend 1Password to anyone just getting started with making their online life more secure. Definitely take a look at Authy as well, and start leveraging OpenID and OAuth logins on every site that supports them. You’ll be better off for it.\u003c/p\u003e\n\u003ch2 id=\"update\"\u003eUpdate\u003c/h2\u003e\n\u003cp\u003eSee my follow-up post: \u003ca href=\"/2013/08/10/things-i-learned-about-how-websites-manage-passwords/\"\u003e“Things I learned about how websites manage passwords”\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"I learned at a relatively young age what makes a good password versus a bad password, and I’ve tried to always use these qualities in the passwords that I choose.   The Problem Unfortunately, even with the best intentions, you inevitably end up re-using one or a few passwords across every single website you log into. Some people do things as dumb as using the name of their significant other. Or their pet. Or a birthdate. Or something else equally guessable by one of the many supercomputers that exist (whereby “supercomputer”, I mean pretty much any computer invented in the past 5–7 years).\nMy approach was this: Whenever a website would auto-generate a random password for me, instead of changing it to something I could remember, I simply memorized it. They were usually a blend of 8 alphanumeric and/or symbol characters. Nothing too wild, but after a while, I established some muscle memory around typing them and began to rely on them. This is a better approach than most people use, but it’s still a terrible practice. Over time, I began appending special characters here, or prepending them there. Sometimes I would stick a dollar sign or two somewhere in the middle to mix things up.\nEnter 1Password   Then in 2008, I discovered a piece of software called 1Password. Initially I balked at the price. \u0026ldquo;You want me to pay for software?!\u0026rdquo; Clearly I was still in a Windows-user’s state of mind when it came to things like that. But I sucked it up, bought a license, and started using it regularly.\nIt is the single best investment I’ve ever made. Software-wise, anyway.\nOpenID and OAuth   Around the same time as when I discovered 1Password, I also learned about something called OpenID. The approach that OpenID takes is known as Federated Identity. It’s essentially a system where two people don’t know or trust each other, but they both trust a third person, and that third person vouches for each of the first two. Eric and Jeff don’t know each other, but they both know me. I vouch for Jeff with Eric saying that he’s a cool dude, and vice-versa. Make sense?\nIt allowed me to trust a company of my choosing to vouch for me, whenever I came to log into sites which supported OpenID. If something happened and I didn’t trust that middle company any more, I could simply change the company/service which vouched for me. In that way, I only had to remember the username and password for that one company that was vouching for me, instead of having to create all-new accounts for every service I signed-up for.\nBut there were some quirks that made OpenID a bit harder to understand for normal folks, so the great minds of the Internet got together and bore a different system known as OAuth. You know all of those sites you visit that have a big blue button that says “Login with Facebook”? That’s OAuth in action.\nOAuth works a bit differently behind the scenes. You say, “I want to sign up for your site”. The website says, \u0026ldquo;Either give me your information so I can register you, or you can authorize me to get your information from someone else who already has it.\u0026rdquo; And you respond with, “Sure. Facebook has it.” You then click the blue button, tell Facebook that you authorize the new site to pull your information, and away you go. Between the two approaches, OAuth is used about a zillion times more often than OpenID is.\nI would recommend using OpenID or OAuth for handling your login information if at all possible because it reduces the number of passwords you need to keep track of.\nSony’s Playstation Network got hacked Remember when this happened? Where Sony was storing passwords in m********king plain text?! (To paraphrase Shepherd Book from Firefly/Serenity, there is a special place in Hell for people who rape, murder, talk during movies, and store passwords in plain text.)\n  In short, one of my hard-to-guess-but-used-in-lots-of-places passwords was one of the ones that was obtained by hackers. As such, I had the fine work ahead of me to change the password for every single site that used the password that got hacked.\n1Password to the rescue! It took me about 90 minutes, but I was able to lookup all of the sites where this password was being used, and change the password for all of them. This event ended up making me re-think how I managed my passwords.\nAuthy and 2-Factor Authentication   Over the past couple of years, I’ve started to see more and more websites begin leveraging something called 2-Factor Authentication (or, Multi-Factor Authentication). This is where besides having the username and password (i.e., the first “factor”), you also need a code from a key fob or something else that you have with you at all times (i.e., the second “factor”). This way, even if somebody figured out your username and password, they still wouldn’t be able to get into your account unless they also had either a key fob with a code, or more commonly, your cell phone.\nBesides having a key fob for logging into my company’s VPN remotely, I’d never heard of 2-Factor Authentication until Amazon Web Services announced it as a new feature of their Identity and Access Management (IAM) service. The Google added support for it. Then Facebook added support. Then a few more services added support. Most of them leveraged an app that ran on modern smartphones called Google Authenticator which would generate a code that you could type in after your username and password.\nWhen ADN added support for it was when I learned about Authy. Besides looking and working WAY better than Google Authenticator, it supported lots of different accounts. The switch was a no-brainer.\nSites that I’m currently aware of that support 2-Factor Authentication are:\n ADN (aka, App.net) Apple (account management, only) Amazon Web Services (AWS) Dreamhost Dropbox Evernote (Premium accounts) Facebook GoDaddy Google Microsoft (including Hotmail \u0026amp; Xbox) Paypal Stripe.com WordPress.com (including Gravatar) and more!  You can even install the Authy plugin in your self-hosted WordPress installation to enable extra security for your blog. I would absolutely recommend enabling 2-Factor Authentication (using Authy, of course) for every single service you use that supports it.\nChanging every password   2 days ago, I decided to bite the bullet and put in the work to change every single password I had stored in 1Password (around 250). Using their built-in password generator, I created a brand-new, completely randomized password, using a mix of upper/lower-case letters, numbers and symbols. These new passwords are all 24–30 characters long, except for services that required shorter ones, or only allowed alphanumeric characters.\nI have absolutely no idea what any of my passwords are. But I’m relying on 1Password to manage them for me, and to sync them to the copies of 1Password I have installed on my iPhone and iPads.\nCouple long, randomly-generated passwords, with 2-Factor Authentication, and I’m never worried about getting hacked. If Sony gets their servers hacked again and that password gets stolen, no worries. I’ll just create a new randomly-generated password for it and keep right on going.\nEnd Yes this was several hours of work, but I believe was well-worth it. If you can swing it, I would confidently — even exuberantly — recommend 1Password to anyone just getting started with making their online life more secure. Definitely take a look at Authy as well, and start leveraging OpenID and OAuth logins on every site that supports them. You’ll be better off for it.\nUpdate See my follow-up post: “Things I learned about how websites manage passwords”.\n",
        "source":"\n{{\u003c description \u003e}}\nI learned at a relatively young age what makes a good password versus a bad password, and I’ve tried to always use these qualities in the passwords that I choose.\n{{\u003c /description \u003e}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/password-hacking@2x.jpg\"\u003e}}\n\n## The Problem\n\nUnfortunately, even with the best intentions, you inevitably end up re-using one or a few passwords across every single website you log into. Some people do things as dumb as using the name of their significant other. Or their pet. Or a birthdate. Or something else equally guessable by one of the many supercomputers that exist (whereby “supercomputer”, I mean pretty much any computer invented in the past 5–7 years).\n\nMy approach was this: Whenever a website would auto-generate a random password for me, instead of changing it to something I could remember, I simply memorized it. They were usually a blend of 8 alphanumeric and/or symbol characters. Nothing too wild, but after a while, I established some muscle memory around typing them and began to rely on them. This is a better approach than most people use, but it’s still a terrible practice. Over time, I began appending special characters here, or prepending them there. Sometimes I would stick a dollar sign or two somewhere in the middle to mix things up.\n\n## Enter 1Password\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/1password@2x.png\"\u003e}}\n\nThen in 2008, I discovered a piece of software called [1Password]({{% wayback \"https://agilebits.com/onepassword\" %}}). Initially I balked at the price. \"You want me to *pay* for software?!\" Clearly I was still in a Windows-user’s state of mind when it came to things like that. But I sucked it up, bought a license, and started using it regularly.\n\nIt is the single best investment I’ve ever made. Software-wise, anyway.\n\n## OpenID and OAuth\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/oauth@2x.png\"\u003e}}\n\nAround the same time as when I discovered 1Password, I also learned about something called [OpenID]({{% wayback \"http://openid.net\" %}}). The approach that OpenID takes is known as *Federated Identity*. It’s essentially a system where two people don’t know or trust each other, but they both trust a third person, and that third person vouches for each of the first two. Eric and Jeff don’t know each other, but they both know me. I vouch for Jeff with Eric saying that he’s a cool dude, and vice-versa. Make sense?\n\nIt allowed me to trust a company of my choosing to vouch for me, whenever I came to log into sites which supported OpenID. If something happened and I didn’t trust that middle company any more, I could simply change the company/service which vouched for me. In that way, I only had to remember the username and password for that one company that was vouching for me, instead of having to create all-new accounts for every service I signed-up for.\n\nBut there were some quirks that made OpenID a bit harder to understand for normal folks, so the great minds of the Internet got together and bore a different system known as [OAuth]({{% wayback \"http://oauth.net\" %}}). You know all of those sites you visit that have a big blue button that says “Login with Facebook”? That’s OAuth in action.\n\nOAuth works a bit differently behind the scenes. You say, “I want to sign up for your site”. The website says, \"Either give me your information so I can register you, or you can *authorize* me to get your information from someone else who already has it.\" And you respond with, “Sure. Facebook has it.” You then click the blue button, tell Facebook that you authorize the new site to pull your information, and away you go. Between the two approaches, OAuth is used about a zillion times more often than OpenID is.\n\nI would recommend using OpenID or OAuth for handling your login information if at all possible because it reduces the number of passwords you need to keep track of.\n\n## Sony’s Playstation Network got hacked\n\nRemember when this happened? Where Sony was storing passwords in *m\\*\\*\\*\\*\\*\\*\\*\\*king plain text?!* (To paraphrase Shepherd Book from *Firefly/Serenity*, there is a special place in Hell for people who rape, murder, talk during movies, and store passwords in plain text.)\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/shepherd-book@2x.jpg\"\u003e}}\n\nIn short, one of my hard-to-guess-but-used-in-lots-of-places passwords was one of the ones that was obtained by hackers. As such, I had the fine work ahead of me to change the password for every single site that used the password that got hacked.\n\n1Password to the rescue! It took me about 90 minutes, but I was able to lookup all of the sites where this password was being used, and change the password for all of them. This event ended up making me re-think how I managed my passwords.\n\n## Authy and 2-Factor Authentication\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/authy.jpg\"\u003e}}\n\nOver the past couple of years, I’ve started to see more and more websites begin leveraging something called 2-Factor Authentication (or, Multi-Factor Authentication). This is where besides having the username and password (i.e., the first “factor”), you also need a code from a key fob or something else that you have with you at all times (i.e., the second “factor”). This way, even if somebody figured out your username and password, they still wouldn’t be able to get into your account unless they also had either a key fob with a code, or more commonly, your cell phone.\n\nBesides having a key fob for logging into my company’s VPN remotely, I’d never heard of 2-Factor Authentication until Amazon Web Services announced it as a new feature of their *Identity and Access Management (IAM)* service. The Google added support for it. Then Facebook added support. Then a few more services added support. Most of them leveraged an app that ran on modern smartphones called *Google Authenticator* which would generate a code that you could type in after your username and password.\n\nWhen [ADN]({{% wayback \"https://alpha.app.net\" %}}) added support for it was when I learned about [Authy]({{% wayback \"https://authy.com\" %}}). Besides looking and working WAY better than Google Authenticator, it supported lots of different accounts. The switch was a no-brainer.\n\nSites that I’m currently aware of that support 2-Factor Authentication are:\n\n* ADN (aka, App.net)\n* Apple (account management, only)\n* Amazon Web Services (AWS)\n* Dreamhost\n* Dropbox\n* Evernote (Premium accounts)\n* Facebook\n* GoDaddy\n* Google\n* Microsoft (including Hotmail \u0026 Xbox)\n* Paypal\n* Stripe.com\n* WordPress.com (including Gravatar)\n* and more!\n\nYou can even install the Authy plugin in your self-hosted WordPress installation to enable extra security for your blog. I would absolutely recommend enabling 2-Factor Authentication (using Authy, of course) for every single service you use that supports it.\n\n## Changing every password\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/excited@2x.jpg\"\u003e}}\n\n2 days ago, I decided to bite the bullet and put in the work to change *every single password* I had stored in 1Password (around 250). Using their built-in password generator, I created a brand-new, completely randomized password, using a mix of upper/lower-case letters, numbers and symbols. These new passwords are all 24–30 characters long, except for services that required shorter ones, or only allowed alphanumeric characters.\n\nI have absolutely no idea what any of my passwords are. But I’m relying on 1Password to manage them for me, and to sync them to the copies of 1Password I have installed on my iPhone and iPads.\n\nCouple long, randomly-generated passwords, with 2-Factor Authentication, and I’m never worried about getting hacked. If Sony gets their servers hacked again and that password gets stolen, no worries. I’ll just create a new randomly-generated password for it and keep right on going.\n\n## End\n\nYes this was several hours of work, but I believe was well-worth it. If you can swing it, I would confidently — even *exuberantly* — recommend 1Password to anyone just getting started with making their online life more secure. Definitely take a look at Authy as well, and start leveraging OpenID and OAuth logins on every site that supports them. You’ll be better off for it.\n\n## Update\n\nSee my follow-up post: [“Things I learned about how websites manage passwords”](/2013/08/10/things-i-learned-about-how-websites-manage-passwords/).\n"},
    "links": {
        "prev": {"title": "Running", "permalink": "https://ryanparman.com/posts/2013/running/"},
        "next": {"title": "Things I learned about how websites manage passwords", "permalink": "https://ryanparman.com/posts/2013/things-i-learned-about-how-websites-manage-passwords/"},
        "ignore": "me"
    }
}

            
        ]
    }
}
