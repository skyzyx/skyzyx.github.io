{
    "data": {
        
        
        "count": 2,
        "items": [
            
            {
    "kind": "page",
    "title": "How to create local TLS certificates for development on macOS",
    "description": "",
    "summary": {
        "content": "By creating a Certificate Authority (a.k.a., a “CA”) and trusting it locally, any certificate that we create using this CA will also be trusted locally. This can simplify the development of HTTPS websites on your local machine. This content is a fork of, and is largely based on, “Generating Self-Signed SSL Certificates for Use with Bluemix Custom Domains”, by Tony Erwin, dated 2014-09-15. The examples in this tutorial are from macOS Sierra (10.12). Create a local Certificate Authority Start by opening Keychain Access.",
        "isTruncated": true
    },
    "published": "2019-08-05T19:52:30Z",
    "updated": "2019-08-05T13:51:41-07:00",
    "permalink": "https://ryanparman.com/posts/2019/how-to-create-local-tls-certificates-for-development-on-macos/",
    "relativePermalink": "/posts/2019/how-to-create-local-tls-certificates-for-development-on-macos/",
    "aliases": ["/2019/08/05/how-to-create-local-tls-certificates-for-development-on-macos"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2019/prompt@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/confirming@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-basic-constraints@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-done@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-duration@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-issuer@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage-extension@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-keychain@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-no-san@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-ou@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-rsa@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-san@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-start@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-both@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-save@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-save@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-export@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-folder@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-save@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-always-trust@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-done@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-get-info@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-not-trusted@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-selection@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-start@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-system-defaults@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trust-done@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trusted@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-cert-menu@2x.png"],
    "videos": [],
    "categories": ["Tutorials"],
    "tags": ["certificate", "certificate authority", "tls", "ssl", "encryption", "development", "local", "macos", "keychain", "pki", "self-signed", "trust", "tutorial"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 1411,
        "readingTime": "7 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2019/20190805-how-to-create-local-tls-certificates-for-development-on-macos.md",
        "logicalName": "20190805-how-to-create-local-tls-certificates-for-development-on-macos.md",
        "translationBaseName": "20190805-how-to-create-local-tls-certificates-for-development-on-macos",
        "baseFileName": "20190805-how-to-create-local-tls-certificates-for-development-on-macos",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2019/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#create-a-local-certificate-authority\"\u003eCreate a local Certificate Authority\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#open-the-certificate-assistant\"\u003eOpen the Certificate Assistant\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#enter-the-values\"\u003eEnter the Values\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#created\"\u003eCreated!\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#trust-the-new-ca\"\u003eTrust the New CA\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#create-a-local-certificate-from-your-new-certificate-authority\"\u003eCreate a local Certificate from your new Certificate Authority\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#open-the-certificate-assistant-1\"\u003eOpen the Certificate Assistant\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#create-your-certificate\"\u003eCreate your Certificate\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#configuring-validity\"\u003eConfiguring Validity\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#configuring-the-organizational-unit\"\u003eConfiguring the Organizational Unit\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#choose-an-issuer\"\u003eChoose an Issuer\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#key-pair-information\"\u003eKey Pair Information\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#key-usage-extension\"\u003eKey Usage Extension\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#extended-key-usage-extension\"\u003eExtended Key Usage Extension\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#basic-constraints-extension\"\u003eBasic Constraints Extension\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#subject-alternate-name-extension\"\u003eSubject Alternate Name Extension\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#specify-a-keychain-location-for-the-certificate\"\u003eSpecify a Keychain Location for the Certificate\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#all-done\"\u003eAll Done!\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#exporting-your-keypair-files\"\u003eExporting your Keypair Files\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#export-your-root-ca-certificate\"\u003eExport your Root CA Certificate\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#export-your-certificate\"\u003eExport your Certificate\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#export-your-private-key\"\u003eExport your Private Key\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#converting-files-into-pem-format\"\u003eConverting Files into PEM Format\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#convert-the-private-key-from-p12--pem\"\u003eConvert the Private Key from P12 → PEM\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#convert-the-certificate-from-cer--pem\"\u003eConvert the Certificate from CER → PEM\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#convert-the-root-ca-from-cer--pem\"\u003eConvert the root CA from CER → PEM\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#confirming-files\"\u003eConfirming Files\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#putting-these-certificates-to-use\"\u003ePutting these Certificates to Use\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#installing-http-server\"\u003eInstalling \u003ccode\u003ehttp-server\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#pretending-to-be-another-website-locally\"\u003ePretending to be another website, locally\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nBy creating a Certificate Authority (a.k.a., a “CA”) and trusting it locally, any certificate that we create using this CA will also be trusted locally. This can simplify the development of \u003cem\u003eHTTPS\u003c/em\u003e websites on your local machine.\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/prompt@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/prompt@2x.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003caside class=\"age aside container flex\"\u003e\u003cp\u003eThis content is \u003cem\u003ea fork\u003c/em\u003e of, and is largely based on, \u003ca href=\"https://www.tonyerwin.com/2014/09/generating-self-signed-ssl-certificates.html\"\u003e“Generating Self-Signed SSL Certificates for Use with Bluemix Custom Domains”\u003c/a\u003e, by Tony Erwin, dated 2014-09-15.\u003c/p\u003e\n\u003cp\u003eThe examples in this tutorial are from macOS Sierra (10.12).\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003ch2 id=\"create-a-local-certificate-authority\"\u003eCreate a local Certificate Authority\u003c/h2\u003e\n\u003cp\u003eStart by opening \u003cem\u003eKeychain Access\u003c/em\u003e. You can either search for it inside Spotlight, or you can traverse the file system for \u003cem\u003eComputer\u003c/em\u003e → \u003cem\u003eApplications\u003c/em\u003e → \u003cem\u003eUtilities\u003c/em\u003e → \u003cem\u003eKeychain Access\u003c/em\u003e.\u003c/p\u003e\n\u003ch3 id=\"open-the-certificate-assistant\"\u003eOpen the Certificate Assistant\u003c/h3\u003e\n\u003cp\u003eGo to the \u003cem\u003eKeychain Access\u003c/em\u003e menu, and choose \u003cem\u003eCertificate Assistant\u003c/em\u003e → \u003cem\u003eCreate a Certificate Authority…\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-selection@2x.webp\" alt=\"Create a Certificate Authority…\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-selection@2x.png\" alt=\"Create a Certificate Authority…\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou should see the new Certificate Assistant.\u003c/p\u003e\n\u003ch3 id=\"enter-the-values\"\u003eEnter the Values\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-start@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003eGive it a name.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIdentity Type\u003c/strong\u003e should be \u003cem\u003eSelf Signed Root CA\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Certificate\u003c/strong\u003e should be \u003cem\u003eSSL Server\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLet me override defaults\u003c/strong\u003e should be \u003cem\u003eunchecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMake this CA the default\u003c/strong\u003e is optional.\u003c/li\u003e\n\u003cli\u003eAdd your email address.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eCreate\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"created\"\u003eCreated!\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-done@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAll done! Feel free to close this window.\u003c/p\u003e\n\u003ch3 id=\"trust-the-new-ca\"\u003eTrust the New CA\u003c/h3\u003e\n\u003cp\u003eNow, you should be looking at your Keychain. Select \u003cem\u003eMy Certificates\u003c/em\u003e from the sidebar to filter down the list to what we care about.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-not-trusted@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou\u0026rsquo;ll notice that, by default, our new CA is not trusted. Right-click (or control-click, or two-finger click) the new CA, and choose \u003cem\u003eGet Info\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-get-info@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eMake sure that the \u003cem\u003eTrust\u003c/em\u003e section is visible. Click the small triangle if it isn\u0026rsquo;t.\u003c/p\u003e\n\u003cp\u003eYou should see that the default settings are configured for \u003cem\u003eSystem Defaults\u003c/em\u003e, and that “This root certificate is not trusted”.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-system-defaults@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNext to \u003cem\u003eWhen using this certificate:\u003c/em\u003e, open the pull-down menu and choose \u003cem\u003eAlways Trust\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-always-trust@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAll of the options should now flip to \u003cem\u003eAlways Trust\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trusted@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eBut we\u0026rsquo;re not quite done! When we close the window, we\u0026rsquo;ll be asked for our system password. You need to provide your password correctly before the settings will take effect.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trust-done@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"create-a-local-certificate-from-your-new-certificate-authority\"\u003eCreate a local Certificate from your new Certificate Authority\u003c/h2\u003e\n\u003ch3 id=\"open-the-certificate-assistant-1\"\u003eOpen the Certificate Assistant\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-cert-menu@2x.webp\" alt=\"Open the Certificate Assistant\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-cert-menu@2x.png\" alt=\"Open the Certificate Assistant\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"create-your-certificate\"\u003eCreate your Certificate\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-start@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eName\u003c/strong\u003e should be the hostname you want to create the certificate for (e.g., \u003ccode\u003elocalhost\u003c/code\u003e, \u003ccode\u003e*.google.com\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIdentity Type\u003c/strong\u003e should be \u003cem\u003eLeaf\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCertificate Type\u003c/strong\u003e should be \u003cem\u003eSSL Server\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLet me override defaults\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"configuring-validity\"\u003eConfiguring Validity\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-duration@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe default \u003cem\u003eValidity Period\u003c/em\u003e is 365 days. You could also set it to 2 years (730 days), 3 years (1095 days), or any amount you want. (This is a local-only certificate, after all.)\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"configuring-the-organizational-unit\"\u003eConfiguring the Organizational Unit\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-ou@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eEmail Address\u003c/strong\u003e should be your email address. Again, this is a local-only certificate, so this is generally unimportant.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eName (Common Name)\u003c/strong\u003e should be the hostname you want to create the certificate for (e.g., \u003ccode\u003elocalhost\u003c/code\u003e, \u003ccode\u003e*.google.com\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOrganization\u003c/strong\u003e should be your company or organization.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOrganizational Unit\u003c/strong\u003e is a smaller group inside of your company or organization.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCity\u003c/strong\u003e, \u003cstrong\u003eState\u003c/strong\u003e, \u003cstrong\u003eCountry\u003c/strong\u003e should all be self-explanitory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"choose-an-issuer\"\u003eChoose an Issuer\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-issuer@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis should be the certificate authority that you created earlier.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"key-pair-information\"\u003eKey Pair Information\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-rsa@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eLeave this as-is. When you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"key-usage-extension\"\u003eKey Usage Extension\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eInclude Key Usage Extension\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThis extension is critical\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSignature\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eEverything else should be \u003cem\u003eunchecked\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"extended-key-usage-extension\"\u003eExtended Key Usage Extension\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage-extension@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eInclude Extended Key Usage Extension\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThis extension is critical\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSSL Server Authentication\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eEverything else should be \u003cem\u003eunchecked\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"basic-constraints-extension\"\u003eBasic Constraints Extension\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-basic-constraints@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eLeave this as-is. When you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"subject-alternate-name-extension\"\u003eSubject Alternate Name Extension\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-no-san@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis \u003cem\u003eshould\u003c/em\u003e be disabled because we don’t need a SAN. If you encounter an error with this selection, you can enable it and set the \u003cstrong\u003edNSName\u003c/strong\u003e value to the same thing as your \u003cem\u003eCommon Name\u003c/em\u003e was (e.g., \u003ccode\u003elocalhost\u003c/code\u003e, \u003ccode\u003e*.google.com\u003c/code\u003e).\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-san@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"specify-a-keychain-location-for-the-certificate\"\u003eSpecify a Keychain Location for the Certificate\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-keychain@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis should be your \u003cem\u003elogin\u003c/em\u003e keychain, which gets unlocked whenever you login.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"all-done\"\u003eAll Done!\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-done@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou should notice that since we trusted our custom CA, and we configured that CA as the \u003cem\u003eIssuer\u003c/em\u003e for this certificate, that this certificate is already trusted by default.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eDone\u003c/em\u003e button.\u003c/p\u003e\n\u003ch2 id=\"exporting-your-keypair-files\"\u003eExporting your Keypair Files\u003c/h2\u003e\n\u003ch3 id=\"export-your-root-ca-certificate\"\u003eExport your Root CA Certificate\u003c/h3\u003e\n\u003cp\u003eSelect your root CA.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eRight-click (or control-click, or two-finger click) the new CA, and choose \u003cem\u003eExport…\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-export@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou\u0026rsquo;ll see a \u003cem\u003eSave As…\u003c/em\u003e dialog box, asking where you want to save your exported file. Type \u003cem\u003eCommand-Shift-G\u003c/em\u003e (⌘⇧G) to bring up a sub-dialog where you can enter the path that you want to traverse to.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-folder@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou can put the files anywhere you\u0026rsquo;d like, but in this example, I\u0026rsquo;m going to use \u003ccode\u003e~/.ssh/localhost/\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSince this path doesn’t exist by default, you can enter \u003ccode\u003e~/.ssh/\u003c/code\u003e, press \u003cem\u003eReturn\u003c/em\u003e, then choose the \u003cem\u003eNew Folder\u003c/em\u003e button along the bottom-left, and name it \u003cem\u003elocalhost\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-save@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAgain, you can give the file any name which makes sense to you. I\u0026rsquo;m going to use \u003ccode\u003eca-cert\u003c/code\u003e in this example. For the \u003cstrong\u003eFile Format\u003c/strong\u003e, choose \u003cem\u003eCertificate (.cer)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eSave\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"export-your-certificate\"\u003eExport your Certificate\u003c/h3\u003e\n\u003cp\u003eSelect your certificate.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eRight-click (or control-click, or two-finger click) the new certificate, and choose \u003cem\u003eExport…\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;ll see a \u003cem\u003eSave As…\u003c/em\u003e dialog box, asking where you want to save your exported file.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-save@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAgain, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain, e.g., \u003ccode\u003elocalhost\u003c/code\u003e in this example. For the \u003cstrong\u003eFile Format\u003c/strong\u003e, choose \u003cem\u003eCertificate (.cer)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eSave\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"export-your-private-key\"\u003eExport your Private Key\u003c/h3\u003e\n\u003cp\u003eSelect the private key for your certificate.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eRight-click (or control-click, or two-finger click) the new private key, and choose \u003cem\u003eExport…\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;ll see a \u003cem\u003eSave As…\u003c/em\u003e dialog box, asking where you want to save your exported file.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-save@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAgain, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain + \u003ccode\u003e.key\u003c/code\u003e, e.g., \u003ccode\u003elocalhost.key\u003c/code\u003e in this example. For the \u003cstrong\u003eFile Format\u003c/strong\u003e, choose \u003cem\u003ePersonal Information Exchange (.p12)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eSave\u003c/em\u003e button. You will probably see a dialog which complains about the file extension.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-both@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eChoose \u003cem\u003eUse both\u003c/em\u003e.\u003c/p\u003e\n\u003ch2 id=\"converting-files-into-pem-format\"\u003eConverting Files into PEM Format\u003c/h2\u003e\n\u003cp\u003eOpen \u003cem\u003eTerminal\u003c/em\u003e, and navigate to the directory where we saved our exported files.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecd ~/.ssh/localhost/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe\u0026rsquo;re going to use the \u003ccode\u003eopenssl\u003c/code\u003e command to convert our exported files into the widely-supported PEM format.\u003c/p\u003e\n\u003ch3 id=\"convert-the-private-key-from-p12--pem\"\u003eConvert the Private Key from P12 → PEM\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eopenssl pkcs12 -in localhost.key.p12 -nocerts -nodes | openssl rsa \u0026gt; localhost.key.pem\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"convert-the-certificate-from-cer--pem\"\u003eConvert the Certificate from CER → PEM\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eopenssl x509 -inform der -in localhost.cer -out localhost.cer.pem\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"convert-the-root-ca-from-cer--pem\"\u003eConvert the root CA from CER → PEM\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eopenssl x509 -inform der -in ca-cert.cer -out ca-cert.cer.pem\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"confirming-files\"\u003eConfirming Files\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/confirming@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"putting-these-certificates-to-use\"\u003ePutting these Certificates to Use\u003c/h2\u003e\n\u003cp\u003eYou now have a root CA, a certificate, and a private key that can be used on your local machine for faux-HTTPS connections.\u003c/p\u003e\n\u003cp\u003eAs an example for how these can be used, we\u0026rsquo;ll install the \u003ca href=\"https://www.npmjs.com/package/http-server\"\u003e\u003ccode\u003ehttp-server\u003c/code\u003e package from npm\u003c/a\u003e. (You\u0026rsquo;ll need \u003ca href=\"https://nodejs.org\"\u003eNode.js\u003c/a\u003e installed; See \u003ca href=\"https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md\"\u003eInstall \u003ccode\u003enpm\u003c/code\u003e packages globally without sudo on macOS and Linux\u003c/a\u003e for how to do this without \u003ccode\u003esudo\u003c/code\u003e.)\u003c/p\u003e\n\u003ch3 id=\"installing-http-server\"\u003eInstalling \u003ccode\u003ehttp-server\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enpm install -g http-server\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter the package is installed, you can run a local HTTPS server using the contents of the current directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehttp-server --ssl \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --cert ~/.ssh/localhost/localhost.cer.pem \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --key ~/.ssh/localhost/localhost.key.pem \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    -p \u003cspan style=\"color:#ae81ff\"\u003e8443\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow you can open \u003ca href=\"https://localhost:8443\"\u003ehttps://localhost:8443\u003c/a\u003e in your web browser.\u003c/p\u003e\n\u003ch2 id=\"pretending-to-be-another-website-locally\"\u003ePretending to be another website, locally\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s say that you want to pretend to be \u003ccode\u003efake.google.com\u003c/code\u003e, locally.\u003c/p\u003e\n\u003cp\u003ePerhaps you\u0026rsquo;re testing something with CORS, or cookies, or something else where the domain name matters.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eAfter creating your root CA, create a new certificate where the common name is \u003ccode\u003e*.google.com\u003c/code\u003e. (Again, this will only work on your local machine.) Follow the same instructions you followed for \u003ccode\u003elocalhost\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRun \u003ccode\u003ehttp-server\u003c/code\u003e using your new fake \u003ccode\u003e*.google.com\u003c/code\u003e certificates. But instead, run it on port \u003ccode\u003e443\u003c/code\u003e. Since the port that we want to bind to is smaller than 1000, we\u0026rsquo;ll need to use \u003ccode\u003esudo\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo http-server --ssl \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --cert ~/.ssh/localhost/star.google.cer.pem \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --key ~/.ssh/localhost/star.google.key.pem \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    -p \u003cspan style=\"color:#ae81ff\"\u003e443\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn your \u003ccode\u003e/etc/hosts\u003c/code\u003e file, add a line that says \u003ccode\u003e127.0.0.1 fake.google.com\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn your web browser, visit \u003ca href=\"https://fake.google.com\"\u003ehttps://fake.google.com\u003c/a\u003e and you\u0026rsquo;ll see that it loads successfully. However, if you click on the lock in the address bar and view the certificate, you\u0026rsquo;ll see that the certificate was issued by your own custom root CA.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n",
        "plain":"By creating a Certificate Authority (a.k.a., a “CA”) and trusting it locally, any certificate that we create using this CA will also be trusted locally. This can simplify the development of HTTPS websites on your local machine.   This content is a fork of, and is largely based on, “Generating Self-Signed SSL Certificates for Use with Bluemix Custom Domains”, by Tony Erwin, dated 2014-09-15.\nThe examples in this tutorial are from macOS Sierra (10.12).\n Create a local Certificate Authority Start by opening Keychain Access. You can either search for it inside Spotlight, or you can traverse the file system for Computer → Applications → Utilities → Keychain Access.\nOpen the Certificate Assistant Go to the Keychain Access menu, and choose Certificate Assistant → Create a Certificate Authority….\n  You should see the new Certificate Assistant.\nEnter the Values    Give it a name. Identity Type should be Self Signed Root CA. User Certificate should be SSL Server. Let me override defaults should be unchecked. Make this CA the default is optional. Add your email address.  When you\u0026rsquo;re done, choose the Create button.\nCreated!   All done! Feel free to close this window.\nTrust the New CA Now, you should be looking at your Keychain. Select My Certificates from the sidebar to filter down the list to what we care about.\n  You\u0026rsquo;ll notice that, by default, our new CA is not trusted. Right-click (or control-click, or two-finger click) the new CA, and choose Get Info.\n  Make sure that the Trust section is visible. Click the small triangle if it isn\u0026rsquo;t.\nYou should see that the default settings are configured for System Defaults, and that “This root certificate is not trusted”.\n  Next to When using this certificate:, open the pull-down menu and choose Always Trust.\n  All of the options should now flip to Always Trust.\n  But we\u0026rsquo;re not quite done! When we close the window, we\u0026rsquo;ll be asked for our system password. You need to provide your password correctly before the settings will take effect.\n  Create a local Certificate from your new Certificate Authority Open the Certificate Assistant   Create your Certificate    Name should be the hostname you want to create the certificate for (e.g., localhost, *.google.com). Identity Type should be Leaf. Certificate Type should be SSL Server. Let me override defaults should be checked.  When you\u0026rsquo;re done, choose the Continue button.\nConfiguring Validity   The default Validity Period is 365 days. You could also set it to 2 years (730 days), 3 years (1095 days), or any amount you want. (This is a local-only certificate, after all.)\nWhen you\u0026rsquo;re done, choose the Continue button.\nConfiguring the Organizational Unit    Email Address should be your email address. Again, this is a local-only certificate, so this is generally unimportant. Name (Common Name) should be the hostname you want to create the certificate for (e.g., localhost, *.google.com). Organization should be your company or organization. Organizational Unit is a smaller group inside of your company or organization. City, State, Country should all be self-explanitory.  When you\u0026rsquo;re done, choose the Continue button.\nChoose an Issuer   This should be the certificate authority that you created earlier.\nWhen you\u0026rsquo;re done, choose the Continue button.\nKey Pair Information   Leave this as-is. When you\u0026rsquo;re done, choose the Continue button.\nKey Usage Extension    Include Key Usage Extension should be checked. This extension is critical should be checked. Signature should be checked. Everything else should be unchecked.  When you\u0026rsquo;re done, choose the Continue button.\nExtended Key Usage Extension    Include Extended Key Usage Extension should be checked. This extension is critical should be checked. SSL Server Authentication should be checked. Everything else should be unchecked.  When you\u0026rsquo;re done, choose the Continue button.\nBasic Constraints Extension   Leave this as-is. When you\u0026rsquo;re done, choose the Continue button.\nSubject Alternate Name Extension   This should be disabled because we don’t need a SAN. If you encounter an error with this selection, you can enable it and set the dNSName value to the same thing as your Common Name was (e.g., localhost, *.google.com).\n  When you\u0026rsquo;re done, choose the Continue button.\nSpecify a Keychain Location for the Certificate   This should be your login keychain, which gets unlocked whenever you login.\nWhen you\u0026rsquo;re done, choose the Continue button.\nAll Done!   You should notice that since we trusted our custom CA, and we configured that CA as the Issuer for this certificate, that this certificate is already trusted by default.\nWhen you\u0026rsquo;re done, choose the Done button.\nExporting your Keypair Files Export your Root CA Certificate Select your root CA.\n  Right-click (or control-click, or two-finger click) the new CA, and choose Export….\n  You\u0026rsquo;ll see a Save As… dialog box, asking where you want to save your exported file. Type Command-Shift-G (⌘⇧G) to bring up a sub-dialog where you can enter the path that you want to traverse to.\n  You can put the files anywhere you\u0026rsquo;d like, but in this example, I\u0026rsquo;m going to use ~/.ssh/localhost/.\nSince this path doesn’t exist by default, you can enter ~/.ssh/, press Return, then choose the New Folder button along the bottom-left, and name it localhost.\n  Again, you can give the file any name which makes sense to you. I\u0026rsquo;m going to use ca-cert in this example. For the File Format, choose Certificate (.cer).\nWhen you\u0026rsquo;re done, choose the Save button.\nExport your Certificate Select your certificate.\n  Right-click (or control-click, or two-finger click) the new certificate, and choose Export….\nYou\u0026rsquo;ll see a Save As… dialog box, asking where you want to save your exported file.\n  Again, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain, e.g., localhost in this example. For the File Format, choose Certificate (.cer).\nWhen you\u0026rsquo;re done, choose the Save button.\nExport your Private Key Select the private key for your certificate.\n  Right-click (or control-click, or two-finger click) the new private key, and choose Export….\nYou\u0026rsquo;ll see a Save As… dialog box, asking where you want to save your exported file.\n  Again, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain + .key, e.g., localhost.key in this example. For the File Format, choose Personal Information Exchange (.p12).\nWhen you\u0026rsquo;re done, choose the Save button. You will probably see a dialog which complains about the file extension.\n  Choose Use both.\nConverting Files into PEM Format Open Terminal, and navigate to the directory where we saved our exported files.\ncd ~/.ssh/localhost/ We\u0026rsquo;re going to use the openssl command to convert our exported files into the widely-supported PEM format.\nConvert the Private Key from P12 → PEM openssl pkcs12 -in localhost.key.p12 -nocerts -nodes | openssl rsa \u0026gt; localhost.key.pem Convert the Certificate from CER → PEM openssl x509 -inform der -in localhost.cer -out localhost.cer.pem Convert the root CA from CER → PEM openssl x509 -inform der -in ca-cert.cer -out ca-cert.cer.pem Confirming Files   Putting these Certificates to Use You now have a root CA, a certificate, and a private key that can be used on your local machine for faux-HTTPS connections.\nAs an example for how these can be used, we\u0026rsquo;ll install the http-server package from npm. (You\u0026rsquo;ll need Node.js installed; See Install npm packages globally without sudo on macOS and Linux for how to do this without sudo.)\nInstalling http-server npm install -g http-server After the package is installed, you can run a local HTTPS server using the contents of the current directory.\nhttp-server --ssl \\  --cert ~/.ssh/localhost/localhost.cer.pem \\  --key ~/.ssh/localhost/localhost.key.pem \\  -p 8443 Now you can open https://localhost:8443 in your web browser.\nPretending to be another website, locally Let\u0026rsquo;s say that you want to pretend to be fake.google.com, locally.\nPerhaps you\u0026rsquo;re testing something with CORS, or cookies, or something else where the domain name matters.\n  After creating your root CA, create a new certificate where the common name is *.google.com. (Again, this will only work on your local machine.) Follow the same instructions you followed for localhost.\n  Run http-server using your new fake *.google.com certificates. But instead, run it on port 443. Since the port that we want to bind to is smaller than 1000, we\u0026rsquo;ll need to use sudo.\nsudo http-server --ssl \\  --cert ~/.ssh/localhost/star.google.cer.pem \\  --key ~/.ssh/localhost/star.google.key.pem \\  -p 443   In your /etc/hosts file, add a line that says 127.0.0.1 fake.google.com.\n  In your web browser, visit https://fake.google.com and you\u0026rsquo;ll see that it loads successfully. However, if you click on the lock in the address bar and view the certificate, you\u0026rsquo;ll see that the certificate was issued by your own custom root CA.\n  ",
        "source":"\n{{\u003cdescription\u003e}}\nBy creating a Certificate Authority (a.k.a., a “CA”) and trusting it locally, any certificate that we create using this CA will also be trusted locally. This can simplify the development of \u003cem\u003eHTTPS\u003c/em\u003e websites on your local machine.\n{{\u003c/description\u003e}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/prompt@2x.png\"\u003e}}\n\n{{% aside %}}\nThis content is _a fork_ of, and is largely based on, [“Generating Self-Signed SSL Certificates for Use with Bluemix Custom Domains”](https://www.tonyerwin.com/2014/09/generating-self-signed-ssl-certificates.html), by Tony Erwin, dated 2014-09-15.\n\nThe examples in this tutorial are from macOS Sierra (10.12).\n{{% /aside %}}\n\n## Create a local Certificate Authority\n\nStart by opening _Keychain Access_. You can either search for it inside Spotlight, or you can traverse the file system for _Computer_ → _Applications_ → _Utilities_ → _Keychain Access_.\n\n### Open the Certificate Assistant\n\nGo to the _Keychain Access_ menu, and choose _Certificate Assistant_ → _Create a Certificate Authority…_.\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-selection@2x.png\" alt=\"Create a Certificate Authority…\"\u003e}}\n\nYou should see the new Certificate Assistant.\n\n### Enter the Values\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-start@2x.png\" alt=\"Create your new Certificate Authority…\"\u003e}}\n\n1. Give it a name.\n1. **Identity Type** should be _Self Signed Root CA_.\n1. **User Certificate** should be _SSL Server_.\n1. **Let me override defaults** should be _unchecked_.\n1. **Make this CA the default** is optional.\n1. Add your email address.\n\nWhen you're done, choose the _Create_ button.\n\n### Created!\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-done@2x.png\" alt=\"Certificate Authority has been created.\"\u003e}}\n\nAll done! Feel free to close this window.\n\n### Trust the New CA\n\nNow, you should be looking at your Keychain. Select _My Certificates_ from the sidebar to filter down the list to what we care about.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-not-trusted@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\nYou'll notice that, by default, our new CA is not trusted. Right-click (or control-click, or two-finger click) the new CA, and choose _Get Info_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-get-info@2x.png\" alt=\"Context menu, Get Info…\"\u003e}}\n\nMake sure that the _Trust_ section is visible. Click the small triangle if it isn't.\n\nYou should see that the default settings are configured for _System Defaults_, and that “This root certificate is not trusted”.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-system-defaults@2x.png\" alt=\"Trust options for Certificate Authority\"\u003e}}\n\nNext to _When using this certificate:_, open the pull-down menu and choose _Always Trust_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-always-trust@2x.png\" alt=\"Context menu, Always Trust\"\u003e}}\n\nAll of the options should now flip to _Always Trust_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trusted@2x.png\" alt=\"Trust options for Certificate Authority\"\u003e}}\n\nBut we're not quite done! When we close the window, we'll be asked for our system password. You need to provide your password correctly before the settings will take effect.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trust-done@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\n## Create a local Certificate from your new Certificate Authority\n\n### Open the Certificate Assistant\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-cert-menu@2x.png\" alt=\"Open the Certificate Assistant\"\u003e}}\n\n### Create your Certificate\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-start@2x.png\" alt=\"Create your Certificate\"\u003e}}\n\n1. **Name** should be the hostname you want to create the certificate for (e.g., `localhost`, `*.google.com`).\n1. **Identity Type** should be _Leaf_.\n1. **Certificate Type** should be _SSL Server_.\n1. **Let me override defaults** should be _checked_.\n\nWhen you're done, choose the _Continue_ button.\n\n### Configuring Validity\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-duration@2x.png\" alt=\"Configuring Validity\"\u003e}}\n\nThe default _Validity Period_ is 365 days. You could also set it to 2 years (730 days), 3 years (1095 days), or any amount you want. (This is a local-only certificate, after all.)\n\nWhen you're done, choose the _Continue_ button.\n\n### Configuring the Organizational Unit\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-ou@2x.png\" alt=\"Please specify some personal information below to be used in the certificate.\"\u003e}}\n\n1. **Email Address** should be your email address. Again, this is a local-only certificate, so this is generally unimportant.\n1. **Name (Common Name)** should be the hostname you want to create the certificate for (e.g., `localhost`, `*.google.com`).\n1. **Organization** should be your company or organization.\n1. **Organizational Unit** is a smaller group inside of your company or organization.\n1. **City**, **State**, **Country** should all be self-explanitory.\n\nWhen you're done, choose the _Continue_ button.\n\n### Choose an Issuer\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-issuer@2x.png\" alt=\"Choose an Issuer\"\u003e}}\n\nThis should be the certificate authority that you created earlier.\n\nWhen you're done, choose the _Continue_ button.\n\n### Key Pair Information\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-rsa@2x.png\" alt=\"Key Pair Information\"\u003e}}\n\nLeave this as-is. When you're done, choose the _Continue_ button.\n\n### Key Usage Extension\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage@2x.png\" alt=\"Key Usage Extension\"\u003e}}\n\n1. **Include Key Usage Extension** should be _checked_.\n1. **This extension is critical** should be _checked_.\n1. **Signature** should be _checked_.\n1. Everything else should be _unchecked_.\n\nWhen you're done, choose the _Continue_ button.\n\n### Extended Key Usage Extension\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage-extension@2x.png\" alt=\"Extended Key Usage Extension\"\u003e}}\n\n1. **Include Extended Key Usage Extension** should be _checked_.\n1. **This extension is critical** should be _checked_.\n1. **SSL Server Authentication** should be _checked_.\n1. Everything else should be _unchecked_.\n\nWhen you're done, choose the _Continue_ button.\n\n### Basic Constraints Extension\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-basic-constraints@2x.png\" alt=\"Basic Constraints Extension\"\u003e}}\n\nLeave this as-is. When you're done, choose the _Continue_ button.\n\n### Subject Alternate Name Extension\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-no-san@2x.png\" alt=\"Subject Alternate Name Extension\"\u003e}}\n\nThis _should_ be disabled because we don’t need a SAN. If you encounter an error with this selection, you can enable it and set the **dNSName** value to the same thing as your _Common Name_ was (e.g., `localhost`, `*.google.com`).\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-san@2x.png\" alt=\"Subject Alternate Name Extension, dNSName field\"\u003e}}\n\nWhen you're done, choose the _Continue_ button.\n\n### Specify a Keychain Location for the Certificate\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-keychain@2x.png\" alt=\"Specify a Keychain Location for the Certificate\"\u003e}}\n\nThis should be your _login_ keychain, which gets unlocked whenever you login.\n\nWhen you're done, choose the _Continue_ button.\n\n### All Done!\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-done@2x.png\" alt=\"Your certificate has been successfully created.\"\u003e}}\n\nYou should notice that since we trusted our custom CA, and we configured that CA as the _Issuer_ for this certificate, that this certificate is already trusted by default.\n\nWhen you're done, choose the _Done_ button.\n\n## Exporting your Keypair Files\n\n### Export your Root CA Certificate\n\nSelect your root CA.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\nRight-click (or control-click, or two-finger click) the new CA, and choose _Export…_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-export@2x.png\" alt=\"Context menu, Export CA…\"\u003e}}\n\nYou'll see a _Save As…_ dialog box, asking where you want to save your exported file. Type _Command-Shift-G_ (⌘⇧G) to bring up a sub-dialog where you can enter the path that you want to traverse to.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-folder@2x.png\" alt=\"Dialog, Save As…\"\u003e}}\n\nYou can put the files anywhere you'd like, but in this example, I'm going to use `~/.ssh/localhost/`.\n\nSince this path doesn’t exist by default, you can enter `~/.ssh/`, press _Return_, then choose the _New Folder_ button along the bottom-left, and name it _localhost_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-save@2x.png\" alt=\"Dialog, Save As…\"\u003e}}\n\nAgain, you can give the file any name which makes sense to you. I'm going to use `ca-cert` in this example. For the **File Format**, choose _Certificate (.cer)_.\n\nWhen you're done, choose the _Save_ button.\n\n### Export your Certificate\n\nSelect your certificate.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\nRight-click (or control-click, or two-finger click) the new certificate, and choose _Export…_.\n\nYou'll see a _Save As…_ dialog box, asking where you want to save your exported file.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-save@2x.png\" alt=\"Dialog, Save As…\"\u003e}}\n\nAgain, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain, e.g., `localhost` in this example. For the **File Format**, choose _Certificate (.cer)_.\n\nWhen you're done, choose the _Save_ button.\n\n### Export your Private Key\n\nSelect the private key for your certificate.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\nRight-click (or control-click, or two-finger click) the new private key, and choose _Export…_.\n\nYou'll see a _Save As…_ dialog box, asking where you want to save your exported file.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-save@2x.png\" alt=\"Dialog, Save As…\"\u003e}}\n\nAgain, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain + `.key`, e.g., `localhost.key` in this example. For the **File Format**, choose _Personal Information Exchange (.p12)_.\n\nWhen you're done, choose the _Save_ button. You will probably see a dialog which complains about the file extension.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-both@2x.png\" alt=\"Dialog, Use Both\"\u003e}}\n\nChoose _Use both_.\n\n## Converting Files into PEM Format\n\nOpen _Terminal_, and navigate to the directory where we saved our exported files.\n\n```bash\ncd ~/.ssh/localhost/\n```\n\nWe're going to use the `openssl` command to convert our exported files into the widely-supported PEM format.\n\n### Convert the Private Key from P12 → PEM\n\n```bash\nopenssl pkcs12 -in localhost.key.p12 -nocerts -nodes | openssl rsa \u003e localhost.key.pem\n```\n\n### Convert the Certificate from CER → PEM\n\n```bash\nopenssl x509 -inform der -in localhost.cer -out localhost.cer.pem\n```\n\n### Convert the root CA from CER → PEM\n\n```bash\nopenssl x509 -inform der -in ca-cert.cer -out ca-cert.cer.pem\n```\n\n### Confirming Files\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/confirming@2x.png\" alt=\"Finder window\"\u003e}}\n\n## Putting these Certificates to Use\n\nYou now have a root CA, a certificate, and a private key that can be used on your local machine for faux-HTTPS connections.\n\nAs an example for how these can be used, we'll install the [`http-server` package from npm](https://www.npmjs.com/package/http-server). (You'll need [Node.js](https://nodejs.org) installed; See [Install `npm` packages globally without sudo on macOS and Linux](https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md) for how to do this without `sudo`.)\n\n### Installing `http-server`\n\n```bash\nnpm install -g http-server\n```\n\nAfter the package is installed, you can run a local HTTPS server using the contents of the current directory.\n\n```bash\nhttp-server --ssl \\\n    --cert ~/.ssh/localhost/localhost.cer.pem \\\n    --key ~/.ssh/localhost/localhost.key.pem \\\n    -p 8443\n```\n\nNow you can open \u003chttps://localhost:8443\u003e in your web browser.\n\n## Pretending to be another website, locally\n\nLet's say that you want to pretend to be `fake.google.com`, locally.\n\nPerhaps you're testing something with CORS, or cookies, or something else where the domain name matters.\n\n1. After creating your root CA, create a new certificate where the common name is `*.google.com`. (Again, this will only work on your local machine.) Follow the same instructions you followed for `localhost`.\n\n1. Run `http-server` using your new fake `*.google.com` certificates. But instead, run it on port `443`. Since the port that we want to bind to is smaller than 1000, we'll need to use `sudo`.\n\n   ```bash\n   sudo http-server --ssl \\\n       --cert ~/.ssh/localhost/star.google.cer.pem \\\n       --key ~/.ssh/localhost/star.google.key.pem \\\n       -p 443\n   ```\n\n\n1. In your `/etc/hosts` file, add a line that says `127.0.0.1 fake.google.com`.\n\n1. In your web browser, visit \u003chttps://fake.google.com\u003e and you'll see that it loads successfully. However, if you click on the lock in the address bar and view the certificate, you'll see that the certificate was issued by your own custom root CA.\n"},
    "links": {
        "prev": {"title": "Using GNU command line tools in macOS instead of FreeBSD tools", "permalink": "https://ryanparman.com/posts/2019/using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools/"},
        "next": {"title": "Playlist: Best of Foo Fighters", "permalink": "https://ryanparman.com/posts/2019/playlist-best-of-foo-fighters/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Understanding Trust in Your Infrastructure",
    "description": "Trust should be earned, not given blindly.",
    "summary": {
        "content": "Only a tiny fraction of the code your application runs was written by you or your team. How do you know you can trust the code that was written by other people? Where would you even start? This piece is part of a larger series on Engineering for Site Reliability, specifically balancing stability against the edge of technology. What do I mean by \u0026ldquo;trust\u0026rdquo;? Movies and TV shows have given us a version of trust which essentially boils down to “Do you trust me?",
        "isTruncated": true
    },
    "published": "2018-12-27T07:30:30Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2018/understanding-trust-in-your-infrastructure/",
    "relativePermalink": "/posts/2018/understanding-trust-in-your-infrastructure/",
    "aliases": ["/2018/12/27/understanding-trust-in-your-infrastructure"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2018/trust-dial@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2018/broken-collarbone@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2018/teen-titans@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2018/wrong-way@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2018/etc-passwd@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2018/batman-slap-docker-dev@2x.jpg", "https://cdn.ryanparman.com/hugo/headers/understanding-trust/severed-wrists@2x.jpg"],
    "videos": [],
    "categories": ["Engineering for Site Reliability"],
    "tags": ["trust", "docker", "alpine linux", "centos", "ubuntu", "rhel", "php", "python", "nodejs", "golang", "nginx", "composer", "pip", "npm", "java", "cve", "security", "site reliability engineering"],
    "series": ["Engineering for Site Reliability"],
    "keywords": [],
    "meta": {
        "wordCount": 1608,
        "readingTime": "8 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2018/20181227-understanding-trust-in-your-infrastructure.md",
        "logicalName": "20181227-understanding-trust-in-your-infrastructure.md",
        "translationBaseName": "20181227-understanding-trust-in-your-infrastructure",
        "baseFileName": "20181227-understanding-trust-in-your-infrastructure",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2018/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#what-do-i-mean-by-trust\"\u003eWhat do I mean by \u0026ldquo;trust\u0026rdquo;?\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#what-is-my-application\"\u003eWhat is my application?\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#reusable-layers-and-understanding-trust\"\u003eReusable layers, and understanding trust\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#an-unpublished-package-broke-the-internet\"\u003eAn unpublished package broke the internet\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#crashing-the-entire-stack\"\u003eCrashing the entire stack\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#devprod-parity\"\u003eDev/Prod parity\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#guidelines-for-trust\"\u003eGuidelines for trust\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nOnly a tiny fraction of the code your application runs was written by you or your team. How do you know you can trust the code that was written by other people? Where would you even start?\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2018/trust-dial@2x.webp\" alt=\"Trust dial\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2018/trust-dial@2x.jpg\" alt=\"Trust dial\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003caside class=\"age aside container flex\"\u003e\u003cp\u003eThis piece is part of a larger series on \u003ca href=\"/series/engineering-for-site-reliability/\"\u003eEngineering for Site Reliability\u003c/a\u003e, specifically \u003cem\u003ebalancing stability against the edge of technology\u003c/em\u003e.\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003ch2 id=\"what-do-i-mean-by-trust\"\u003eWhat do I mean by \u0026ldquo;trust\u0026rdquo;?\u003c/h2\u003e\n\u003cp\u003eMovies and TV shows have given us a version of trust which essentially boils down to “Do you trust me?” as they hold out their hand to another person. In the movies things generally work out in the end, even if they run into a little more trouble along the way. This is the kind of trust that teenagers, newly in-love, have with their new person.\u003c/p\u003e\n\u003cp\u003eThis is also the kind of trust that most engineers have in their software dependencies. \u003cstrong\u003eThis is not what trust is\u003c/strong\u003e, and is a \u003cstrong\u003ehigh-risk\u003c/strong\u003e way to build applications.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2018/teen-titans@2x.webp\" alt=\"Teen Titans\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2018/teen-titans@2x.jpg\" alt=\"Teen Titans\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIf you\u0026rsquo;ve ever been spurned by an ex-lover, or have grown-up around shady people, you\u0026rsquo;ll likely have a different definition of trust. A marriage counselor may say something like \u0026ldquo;trust, but verify\u0026rdquo;. A person who has grown-up in a bad neighborhood or around shady people may have the perspective that \u003cem\u003etrust is earned, not given\u003c/em\u003e. \u003cstrong\u003eA certain amount of paranoia is a good thing\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eHowever, as with everything, you can also have too much paranoia. These are the teams who ship an application, and if it\u0026rsquo;s not broken, they don\u0026rsquo;t touch it. Their curse is that they fall so far behind the security and maintenance curves, that their applications become ticking time bombs — defeating the very purpose they think their paranoia addresses.\u003c/p\u003e\n\u003cp\u003eThe point that I\u0026rsquo;d like you to take away from this is that \u003cem\u003etrust is earned, not given\u003c/em\u003e. When you come from this perspective, you make better technical decisions.\u003c/p\u003e\n\u003ch2 id=\"what-is-my-application\"\u003eWhat is my application?\u003c/h2\u003e\n\u003cp\u003eDepending on the type of engineer you are (front-end, backend, ops), you may look at the applications you work on through different lenses.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eSome see the client-side, browser code they\u0026rsquo;re writing.\u003c/li\u003e\n\u003cli\u003eSome see the Golang, Node.js, Python, or PHP code they\u0026rsquo;re writing.\u003c/li\u003e\n\u003cli\u003eSome see the package dependencies, and their package dependencies, and so on…\u003c/li\u003e\n\u003cli\u003eSome see code like the Docker runtime, OpenSSL, cURL, or the Linux kernel.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn truth, \u003cem\u003eall of these answers are correct\u003c/em\u003e. The best engineers know how important it is to look at the entire stack — from the application, to the runtime, to the hypervisor, to the kernel.\u003c/p\u003e\n\u003ch2 id=\"reusable-layers-and-understanding-trust\"\u003eReusable layers, and understanding trust\u003c/h2\u003e\n\u003cp\u003eIt\u0026rsquo;s a common (and extremely sensible) pattern to re-use and build atop existing technology layers. By leveraging this powerful foundation, we can build bigger, better, and more powerful appications and services! But we also need to understand how core concepts like \u003cem\u003etrust\u003c/em\u003e work between all of these layers.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2018/wrong-way@2x.webp\" alt=\"Wrong way sign\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2018/wrong-way@2x.jpg\" alt=\"Wrong way sign\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eLet me give a few examples of anti-patterns that are also very commonplace in many organizations (mostly due to ignorance, as opposed to malice):\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e I\u0026rsquo;m speaking from a context of applications which run on popular cloud infrastructure services like AWS, GCP, or Azure, and have sane processes in place like actively-supported system images (e.g., AMIs).\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eFetching application dependencies \u003cem\u003elive\u003c/em\u003e from upstream sources (e.g., the internet is ephemeral; is your app?).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRunning package manager updates when spinning-up a new machine (e.g., modifying the underlying system image at boot-time; \u003ccode\u003eyum -y update\u003c/code\u003e).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRunning package manager updates when deploying to Production (e.g., picking up potentially untested software without a testing stage in-between).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAdding new package manager repositories from random places on the internet (e.g., taking candy from strangers).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRelying exclusively on a single \u003cem\u003eavailability zone\u003c/em\u003e or \u003cem\u003eregion\u003c/em\u003e from their cloud infrastructure provider.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e“These aren’t anti-patterns,” you say. “They’re just how development is done.”\u003c/p\u003e\n\u003cp\u003eThank you for your thoughts, hypothetical reader. But consider the following:\u003c/p\u003e\n\u003ch3 id=\"an-unpublished-package-broke-the-internet\"\u003eAn unpublished package broke the internet\u003c/h3\u003e\n\u003cp\u003eIn case you forgot, in early 2016, \u003cem\u003eone package\u003c/em\u003e \u003ca href=\"https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm\"\u003ebroke the entire Node.js ecosystem\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2018/broken-collarbone@2x.webp\" alt=\"Broken collarbone\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2018/broken-collarbone@2x.jpg\" alt=\"Broken collarbone\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eDavid Haney writes in his piece “\u003ca href=\"https://www.davidhaney.io/npm-left-pad-have-we-forgotten-how-to-program/\"\u003eNPM \u0026amp; left-pad: Have We Forgotten How To Program?\u003c/a\u003e”:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eOkay developers, time to have a serious talk. As you are probably already aware, this week React, Babel, and a bunch of other high-profile packages on NPM broke. The reason they broke is rather astounding:\u003c/p\u003e\n\u003cp\u003eA simple NPM package called \u003cem\u003eleft-pad\u003c/em\u003e that was a dependency of their code.\u003c/p\u003e\n\u003cp\u003e\u003cem\u003eleft-pad\u003c/em\u003e, at the time of writing this, has 11 stars on GitHub. The entire package is 11 simple lines that implement a basic left-pad string function. […]\u003c/p\u003e\n\u003cp\u003eWhat concerns me here is that \u003cem\u003eso many packages and projects\u003c/em\u003e took on a \u003cstrong\u003edependency\u003c/strong\u003e for a simple left padding string function, rather than their developers taking 2 minutes to write such a basic function themselves.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eEach and every application team which was hit by this issue, and allowed it to impact a Production-facing deployment, \u003cstrong\u003efailed to understand trust\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eIn this case, they should have implemented a \u003cem\u003epackage caching system\u003c/em\u003e, which can fetch a dependency on the first request, then cache that version for all subsequent requests. That way, if there is an issue with an upstream source, you will not be impacted.\u003c/p\u003e\n\u003ch3 id=\"crashing-the-entire-stack\"\u003eCrashing the entire stack\u003c/h3\u003e\n\u003cp\u003eI was working at Amazon Web Services back in 2010 when \u003ca href=\"https://aws.amazon.com/elasticbeanstalk/\"\u003eAWS Elastic Beanstalk\u003c/a\u003e was still in development. The team was working to build an easy-to-use solution around the idea of \u0026ldquo;application containers\u0026rdquo; (back before Docker was spun-out from \u003ca href=\"https://www.crunchbase.com/organization/dotcloud\"\u003edotCloud\u003c/a\u003e, an early PaaS provider). At the time I was helping them add PHP + Apache support to Elastic Beanstalk in time for launch, as I was the \u003cem\u003ede-facto\u003c/em\u003e “PHP guy” in AWS.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2018/etc-passwd@2x.webp\" alt=\"/etc/passwd\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2018/etc-passwd@2x.jpg\" alt=\"/etc/passwd\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eDevelopment was running on a pre-release version of what would become \u003ca href=\"https://aws.amazon.com/amazon-linux-ami/\"\u003eAmazon Linux\u003c/a\u003e. The original configuration was designed to run \u003ccode\u003eyum -y update\u003c/code\u003e on boot, which essentially means \u003cem\u003epick up the latest versions of all installed packages\u003c/em\u003e. While the team was thinking about system security (and avoiding outdated packages), everything broke on the day that the Amazon Linux team published a new version of Apache with backwards-incompatible changes. The development team \u003cstrong\u003efailed to understand trust\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eFortunately, it was a little before the public launch, and so only a few internal beta customers and developers were impacted. But watching that incident was the day that I learned that you don\u0026rsquo;t \u003cem\u003earbitrarily\u003c/em\u003e install all system updates. You should do that in your development environment instead, work out the issues, then roll something out to Production that has been tested and works as expected.\u003c/p\u003e\n\u003ch3 id=\"devprod-parity\"\u003eDev/Prod parity\u003c/h3\u003e\n\u003cp\u003eIf you\u0026rsquo;ve never heard of the \u003ca href=\"https://www.12factor.net\"\u003e12-factor app methodology\u003c/a\u003e, you are absolutely missing out. One of the chapters is entitled “\u003ca href=\"https://www.12factor.net/dev-prod-parity\"\u003eDev/prod parity\u003c/a\u003e”, which essentially boils down to \u003cem\u003ekeeping development, staging, and production as similar as possible\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eOne thing that I\u0026rsquo;ve seen bite a team is that they were deploying an application by pushing the source code from Git to the production instances, then resolving their packages \u003cem\u003edirectly on the instance\u003c/em\u003e. (To be fair, this was back in the days when \u003ca href=\"https://capistranorb.com\"\u003eCapistrano\u003c/a\u003e was hot, and we\u0026rsquo;ve come a long way since then.)\u003c/p\u003e\n\u003cp\u003eBut even in the world of Docker and \u003cem\u003econtinuous integration\u003c/em\u003e, I still see similar things happen. A team will build a Docker image for their dev app in their CI pipeline, push it to their Docker repository, then deploy it to dev. Then they build the image again when deploying to staging. Then again when they deploy to Prod. \u003cstrong\u003eThis is the same problem!\u003c/strong\u003e The dependencies are not being tested appropriately in the earlier environments before progressing to the production environment.\u003c/p\u003e\n\u003cp\u003eWith Docker, some teams have figured out how to make the exact same mistakes even faster! Those teams have \u003cstrong\u003efailed to understand trust\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eInstead, you should build the production-ready Docker image \u003cem\u003eonce\u003c/em\u003e, then promote that same image up to each environment as the requisite confidence is built.\u003c/p\u003e\n\u003cp\u003e“But how do I include my development dependencies inside my Docker container?”\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2018/batman-slap-docker-dev@2x.webp\" alt=\"Batman slaps Robin\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2018/batman-slap-docker-dev@2x.jpg\" alt=\"Batman slaps Robin\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eDocker images that are built should be the exact same bytes, regardless of the environment. Your dev build should write out logs in the same way as your Production app would (although perhaps to a local location). You should be able to define things like environment variables that are read by the Docker daemon at container launch. Or by defining a local volume to mount containing configuration information. But the insides of the Docker image should always be completely identical between environments.\u003c/p\u003e\n\u003ch2 id=\"guidelines-for-trust\"\u003eGuidelines for trust\u003c/h2\u003e\n\u003cp\u003eWhen you\u0026rsquo;re provisioning software onto a machine that will run in Production, you don\u0026rsquo;t want to be running software from \u003cem\u003eanywhere\u003c/em\u003e. You need to know that you can \u003cem\u003etrust\u003c/em\u003e the source of the software before you ship it into Production.\u003c/p\u003e\n\u003cp\u003eIn my case, I tend to work on teams which run servers with a blend of RedHat Enterprise Linux (RHEL), CentOS, and Amazon Linux. Containers are commonly Ubuntu, Debian, or Alpine. I work with applications written in nearly every major programming language. These are my criteria for determining whether or not to trust a package or Docker image.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003ePackages are maintained by CentOS, RedHat, Amazon, Ubuntu, Debian, Alpine, etc., directly.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePackages are maintained by the vendor of the software directly (e.g., Docker, Amazon, PHP, Node Foundation, Angular, Kubernetes).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePackages are maintained by a reputable third-party source (as few of these as possible; e.g., \u003ca href=\"https://github.com/nodesource/distributions\"\u003eNodeSource\u003c/a\u003e).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003ePackages are maintained by us. That is, we compile them from source ourselves (into \u003ccode\u003e.rpm\u003c/code\u003e, \u003ccode\u003e.deb\u003c/code\u003e, or \u003ccode\u003e.apk\u003c/code\u003e packages), or we write the software packages ourselves (e.g., \u003ccode\u003ecomposer\u003c/code\u003e, \u003ccode\u003epip\u003c/code\u003e, \u003ccode\u003enpm\u003c/code\u003e, \u003ccode\u003edep\u003c/code\u003e).\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYour criteria may look different, and that\u0026rsquo;s OK. Some engineering teams are better at this, while others are still maturing.\u003c/p\u003e\n\u003cp\u003eIf you don\u0026rsquo;t have criteria, and generally just install software from anywhere, I have two pieces of advice.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eStop it.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOur criteria has been very good to us. Feel free to borrow ours.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n",
        "plain":"Only a tiny fraction of the code your application runs was written by you or your team. How do you know you can trust the code that was written by other people? Where would you even start?   This piece is part of a larger series on Engineering for Site Reliability, specifically balancing stability against the edge of technology.\n What do I mean by \u0026ldquo;trust\u0026rdquo;? Movies and TV shows have given us a version of trust which essentially boils down to “Do you trust me?” as they hold out their hand to another person. In the movies things generally work out in the end, even if they run into a little more trouble along the way. This is the kind of trust that teenagers, newly in-love, have with their new person.\nThis is also the kind of trust that most engineers have in their software dependencies. This is not what trust is, and is a high-risk way to build applications.\n  If you\u0026rsquo;ve ever been spurned by an ex-lover, or have grown-up around shady people, you\u0026rsquo;ll likely have a different definition of trust. A marriage counselor may say something like \u0026ldquo;trust, but verify\u0026rdquo;. A person who has grown-up in a bad neighborhood or around shady people may have the perspective that trust is earned, not given. A certain amount of paranoia is a good thing.\nHowever, as with everything, you can also have too much paranoia. These are the teams who ship an application, and if it\u0026rsquo;s not broken, they don\u0026rsquo;t touch it. Their curse is that they fall so far behind the security and maintenance curves, that their applications become ticking time bombs — defeating the very purpose they think their paranoia addresses.\nThe point that I\u0026rsquo;d like you to take away from this is that trust is earned, not given. When you come from this perspective, you make better technical decisions.\nWhat is my application? Depending on the type of engineer you are (front-end, backend, ops), you may look at the applications you work on through different lenses.\n Some see the client-side, browser code they\u0026rsquo;re writing. Some see the Golang, Node.js, Python, or PHP code they\u0026rsquo;re writing. Some see the package dependencies, and their package dependencies, and so on… Some see code like the Docker runtime, OpenSSL, cURL, or the Linux kernel.  In truth, all of these answers are correct. The best engineers know how important it is to look at the entire stack — from the application, to the runtime, to the hypervisor, to the kernel.\nReusable layers, and understanding trust It\u0026rsquo;s a common (and extremely sensible) pattern to re-use and build atop existing technology layers. By leveraging this powerful foundation, we can build bigger, better, and more powerful appications and services! But we also need to understand how core concepts like trust work between all of these layers.\n  Let me give a few examples of anti-patterns that are also very commonplace in many organizations (mostly due to ignorance, as opposed to malice):\n NOTE: I\u0026rsquo;m speaking from a context of applications which run on popular cloud infrastructure services like AWS, GCP, or Azure, and have sane processes in place like actively-supported system images (e.g., AMIs).\n   Fetching application dependencies live from upstream sources (e.g., the internet is ephemeral; is your app?).\n  Running package manager updates when spinning-up a new machine (e.g., modifying the underlying system image at boot-time; yum -y update).\n  Running package manager updates when deploying to Production (e.g., picking up potentially untested software without a testing stage in-between).\n  Adding new package manager repositories from random places on the internet (e.g., taking candy from strangers).\n  Relying exclusively on a single availability zone or region from their cloud infrastructure provider.\n  “These aren’t anti-patterns,” you say. “They’re just how development is done.”\nThank you for your thoughts, hypothetical reader. But consider the following:\nAn unpublished package broke the internet In case you forgot, in early 2016, one package broke the entire Node.js ecosystem.\n  David Haney writes in his piece “NPM \u0026amp; left-pad: Have We Forgotten How To Program?”:\n Okay developers, time to have a serious talk. As you are probably already aware, this week React, Babel, and a bunch of other high-profile packages on NPM broke. The reason they broke is rather astounding:\nA simple NPM package called left-pad that was a dependency of their code.\nleft-pad, at the time of writing this, has 11 stars on GitHub. The entire package is 11 simple lines that implement a basic left-pad string function. […]\nWhat concerns me here is that so many packages and projects took on a dependency for a simple left padding string function, rather than their developers taking 2 minutes to write such a basic function themselves.\n Each and every application team which was hit by this issue, and allowed it to impact a Production-facing deployment, failed to understand trust.\nIn this case, they should have implemented a package caching system, which can fetch a dependency on the first request, then cache that version for all subsequent requests. That way, if there is an issue with an upstream source, you will not be impacted.\nCrashing the entire stack I was working at Amazon Web Services back in 2010 when AWS Elastic Beanstalk was still in development. The team was working to build an easy-to-use solution around the idea of \u0026ldquo;application containers\u0026rdquo; (back before Docker was spun-out from dotCloud, an early PaaS provider). At the time I was helping them add PHP + Apache support to Elastic Beanstalk in time for launch, as I was the de-facto “PHP guy” in AWS.\n  Development was running on a pre-release version of what would become Amazon Linux. The original configuration was designed to run yum -y update on boot, which essentially means pick up the latest versions of all installed packages. While the team was thinking about system security (and avoiding outdated packages), everything broke on the day that the Amazon Linux team published a new version of Apache with backwards-incompatible changes. The development team failed to understand trust.\nFortunately, it was a little before the public launch, and so only a few internal beta customers and developers were impacted. But watching that incident was the day that I learned that you don\u0026rsquo;t arbitrarily install all system updates. You should do that in your development environment instead, work out the issues, then roll something out to Production that has been tested and works as expected.\nDev/Prod parity If you\u0026rsquo;ve never heard of the 12-factor app methodology, you are absolutely missing out. One of the chapters is entitled “Dev/prod parity”, which essentially boils down to keeping development, staging, and production as similar as possible.\nOne thing that I\u0026rsquo;ve seen bite a team is that they were deploying an application by pushing the source code from Git to the production instances, then resolving their packages directly on the instance. (To be fair, this was back in the days when Capistrano was hot, and we\u0026rsquo;ve come a long way since then.)\nBut even in the world of Docker and continuous integration, I still see similar things happen. A team will build a Docker image for their dev app in their CI pipeline, push it to their Docker repository, then deploy it to dev. Then they build the image again when deploying to staging. Then again when they deploy to Prod. This is the same problem! The dependencies are not being tested appropriately in the earlier environments before progressing to the production environment.\nWith Docker, some teams have figured out how to make the exact same mistakes even faster! Those teams have failed to understand trust.\nInstead, you should build the production-ready Docker image once, then promote that same image up to each environment as the requisite confidence is built.\n“But how do I include my development dependencies inside my Docker container?”\n  Docker images that are built should be the exact same bytes, regardless of the environment. Your dev build should write out logs in the same way as your Production app would (although perhaps to a local location). You should be able to define things like environment variables that are read by the Docker daemon at container launch. Or by defining a local volume to mount containing configuration information. But the insides of the Docker image should always be completely identical between environments.\nGuidelines for trust When you\u0026rsquo;re provisioning software onto a machine that will run in Production, you don\u0026rsquo;t want to be running software from anywhere. You need to know that you can trust the source of the software before you ship it into Production.\nIn my case, I tend to work on teams which run servers with a blend of RedHat Enterprise Linux (RHEL), CentOS, and Amazon Linux. Containers are commonly Ubuntu, Debian, or Alpine. I work with applications written in nearly every major programming language. These are my criteria for determining whether or not to trust a package or Docker image.\n  Packages are maintained by CentOS, RedHat, Amazon, Ubuntu, Debian, Alpine, etc., directly.\n  Packages are maintained by the vendor of the software directly (e.g., Docker, Amazon, PHP, Node Foundation, Angular, Kubernetes).\n  Packages are maintained by a reputable third-party source (as few of these as possible; e.g., NodeSource).\n  Packages are maintained by us. That is, we compile them from source ourselves (into .rpm, .deb, or .apk packages), or we write the software packages ourselves (e.g., composer, pip, npm, dep).\n  Your criteria may look different, and that\u0026rsquo;s OK. Some engineering teams are better at this, while others are still maturing.\nIf you don\u0026rsquo;t have criteria, and generally just install software from anywhere, I have two pieces of advice.\n  Stop it.\n  Our criteria has been very good to us. Feel free to borrow ours.\n  ",
        "source":"\n{{\u003cdescription\u003e}}\nOnly a tiny fraction of the code your application runs was written by you or your team. How do you know you can trust the code that was written by other people? Where would you even start?\n{{\u003c/description\u003e}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2018/trust-dial@2x.jpg\" alt=\"Trust dial\"\u003e}}\n\n{{% aside %}}\nThis piece is part of a larger series on [Engineering for Site Reliability](/series/engineering-for-site-reliability/), specifically _balancing stability against the edge of technology_.\n{{% /aside %}}\n\n## What do I mean by \"trust\"?\n\nMovies and TV shows have given us a version of trust which essentially boils down to “Do you trust me?” as they hold out their hand to another person. In the movies things generally work out in the end, even if they run into a little more trouble along the way. This is the kind of trust that teenagers, newly in-love, have with their new person.\n\nThis is also the kind of trust that most engineers have in their software dependencies. **This is not what trust is**, and is a **high-risk** way to build applications.\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2018/teen-titans@2x.jpg\" alt=\"Teen Titans\" \u003e}}\n\nIf you've ever been spurned by an ex-lover, or have grown-up around shady people, you'll likely have a different definition of trust. A marriage counselor may say something like \"trust, but verify\". A person who has grown-up in a bad neighborhood or around shady people may have the perspective that _trust is earned, not given_. **A certain amount of paranoia is a good thing**.\n\nHowever, as with everything, you can also have too much paranoia. These are the teams who ship an application, and if it's not broken, they don't touch it. Their curse is that they fall so far behind the security and maintenance curves, that their applications become ticking time bombs — defeating the very purpose they think their paranoia addresses.\n\nThe point that I'd like you to take away from this is that _trust is earned, not given_. When you come from this perspective, you make better technical decisions.\n\n## What is my application?\n\nDepending on the type of engineer you are (front-end, backend, ops), you may look at the applications you work on through different lenses.\n\n* Some see the client-side, browser code they're writing.\n* Some see the Golang, Node.js, Python, or PHP code they're writing. \n* Some see the package dependencies, and their package dependencies, and so on…\n* Some see code like the Docker runtime, OpenSSL, cURL, or the Linux kernel.\n\nIn truth, _all of these answers are correct_. The best engineers know how important it is to look at the entire stack — from the application, to the runtime, to the hypervisor, to the kernel.\n\n## Reusable layers, and understanding trust\n\nIt's a common (and extremely sensible) pattern to re-use and build atop existing technology layers. By leveraging this powerful foundation, we can build bigger, better, and more powerful appications and services! But we also need to understand how core concepts like _trust_ work between all of these layers.\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2018/wrong-way@2x.jpg\" alt=\"Wrong way sign\"\u003e}}\n\nLet me give a few examples of anti-patterns that are also very commonplace in many organizations (mostly due to ignorance, as opposed to malice):\n\n\u003e **NOTE:** I'm speaking from a context of applications which run on popular cloud infrastructure services like AWS, GCP, or Azure, and have sane processes in place like actively-supported system images (e.g., AMIs).\n\n* Fetching application dependencies _live_ from upstream sources (e.g., the internet is ephemeral; is your app?).\n\n* Running package manager updates when spinning-up a new machine (e.g., modifying the underlying system image at boot-time; `yum -y update`).\n\n* Running package manager updates when deploying to Production (e.g., picking up potentially untested software without a testing stage in-between).\n\n* Adding new package manager repositories from random places on the internet (e.g., taking candy from strangers).\n\n* Relying exclusively on a single _availability zone_ or _region_ from their cloud infrastructure provider.\n\n“These aren’t anti-patterns,” you say. “They’re just how development is done.”\n\nThank you for your thoughts, hypothetical reader. But consider the following:\n\n### An unpublished package broke the internet\n\nIn case you forgot, in early 2016, _one package_ [broke the entire Node.js ecosystem]({{% wayback \"https://blog.npmjs.org/post/141577284765/kik-left-pad-and-npm\" %}}).\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2018/broken-collarbone@2x.jpg\" alt=\"Broken collarbone\"\u003e}}\n\nDavid Haney writes in his piece “[NPM \u0026 left-pad: Have We Forgotten How To Program?]({{% wayback \"https://www.davidhaney.io/npm-left-pad-have-we-forgotten-how-to-program/\" %}})”:\n\n\u003e Okay developers, time to have a serious talk. As you are probably already aware, this week React, Babel, and a bunch of other high-profile packages on NPM broke. The reason they broke is rather astounding:\n\u003e\n\u003e A simple NPM package called _left-pad_ that was a dependency of their code.\n\u003e\n\u003e _left-pad_, at the time of writing this, has 11 stars on GitHub. The entire package is 11 simple lines that implement a basic left-pad string function. […]\n\u003e\n\u003e What concerns me here is that _so many packages and projects_ took on a **dependency** for a simple left padding string function, rather than their developers taking 2 minutes to write such a basic function themselves.\n\nEach and every application team which was hit by this issue, and allowed it to impact a Production-facing deployment, **failed to understand trust**.\n\nIn this case, they should have implemented a _package caching system_, which can fetch a dependency on the first request, then cache that version for all subsequent requests. That way, if there is an issue with an upstream source, you will not be impacted.\n\n### Crashing the entire stack\n\nI was working at Amazon Web Services back in 2010 when [AWS Elastic Beanstalk]({{% wayback \"https://aws.amazon.com/elasticbeanstalk/\" %}}) was still in development. The team was working to build an easy-to-use solution around the idea of \"application containers\" (back before Docker was spun-out from [dotCloud]({{% wayback \"https://www.crunchbase.com/organization/dotcloud\" %}}), an early PaaS provider). At the time I was helping them add PHP + Apache support to Elastic Beanstalk in time for launch, as I was the _de-facto_ “PHP guy” in AWS.\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2018/etc-passwd@2x.jpg\" alt=\"/etc/passwd\"\u003e}}\n\nDevelopment was running on a pre-release version of what would become [Amazon Linux]({{% wayback \"https://aws.amazon.com/amazon-linux-ami/\" %}}). The original configuration was designed to run `yum -y update` on boot, which essentially means _pick up the latest versions of all installed packages_. While the team was thinking about system security (and avoiding outdated packages), everything broke on the day that the Amazon Linux team published a new version of Apache with backwards-incompatible changes. The development team **failed to understand trust**.\n\nFortunately, it was a little before the public launch, and so only a few internal beta customers and developers were impacted. But watching that incident was the day that I learned that you don't _arbitrarily_ install all system updates. You should do that in your development environment instead, work out the issues, then roll something out to Production that has been tested and works as expected.\n\n### Dev/Prod parity\n\nIf you've never heard of the [12-factor app methodology]({{% wayback \"https://www.12factor.net\" %}}), you are absolutely missing out. One of the chapters is entitled “[Dev/prod parity]({{% wayback \"https://www.12factor.net/dev-prod-parity\" %}})”, which essentially boils down to _keeping development, staging, and production as similar as possible_.\n\nOne thing that I've seen bite a team is that they were deploying an application by pushing the source code from Git to the production instances, then resolving their packages _directly on the instance_. (To be fair, this was back in the days when [Capistrano]({{% wayback \"https://capistranorb.com\" %}}) was hot, and we've come a long way since then.)\n\nBut even in the world of Docker and _continuous integration_, I still see similar things happen. A team will build a Docker image for their dev app in their CI pipeline, push it to their Docker repository, then deploy it to dev. Then they build the image again when deploying to staging. Then again when they deploy to Prod. **This is the same problem!** The dependencies are not being tested appropriately in the earlier environments before progressing to the production environment.\n\nWith Docker, some teams have figured out how to make the exact same mistakes even faster! Those teams have **failed to understand trust**.\n\nInstead, you should build the production-ready Docker image _once_, then promote that same image up to each environment as the requisite confidence is built.\n\n“But how do I include my development dependencies inside my Docker container?”\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2018/batman-slap-docker-dev@2x.jpg\" alt=\"Batman slaps Robin\"\u003e}}\n\nDocker images that are built should be the exact same bytes, regardless of the environment. Your dev build should write out logs in the same way as your Production app would (although perhaps to a local location). You should be able to define things like environment variables that are read by the Docker daemon at container launch. Or by defining a local volume to mount containing configuration information. But the insides of the Docker image should always be completely identical between environments.\n\n## Guidelines for trust\n\nWhen you're provisioning software onto a machine that will run in Production, you don't want to be running software from _anywhere_. You need to know that you can _trust_ the source of the software before you ship it into Production.\n\nIn my case, I tend to work on teams which run servers with a blend of RedHat Enterprise Linux (RHEL), CentOS, and Amazon Linux. Containers are commonly Ubuntu, Debian, or Alpine. I work with applications written in nearly every major programming language. These are my criteria for determining whether or not to trust a package or Docker image.\n\n1. Packages are maintained by CentOS, RedHat, Amazon, Ubuntu, Debian, Alpine, etc., directly.\n\n1. Packages are maintained by the vendor of the software directly (e.g., Docker, Amazon, PHP, Node Foundation, Angular, Kubernetes).\n\n1. Packages are maintained by a reputable third-party source (as few of these as possible; e.g., [NodeSource](https://github.com/nodesource/distributions)).\n\n1. Packages are maintained by us. That is, we compile them from source ourselves (into `.rpm`, `.deb`, or `.apk` packages), or we write the software packages ourselves (e.g., `composer`, `pip`, `npm`, `dep`).\n\nYour criteria may look different, and that's OK. Some engineering teams are better at this, while others are still maturing.\n\nIf you don't have criteria, and generally just install software from anywhere, I have two pieces of advice.\n\n1. Stop it.\n\n1. Our criteria has been very good to us. Feel free to borrow ours.\n"},
    "links": {
        "prev": {"title": "The Hiring Process, Part I", "permalink": "https://ryanparman.com/posts/2018/the-hiring-process-part-i-what-i-look-for-in-a-cv-resume-remastered/"},
        "next": {"title": "Playlist: Best of P.O.D.", "permalink": "https://ryanparman.com/posts/2019/playlist-best-of-pod/"},
        "ignore": "me"
    }
}

            
        ]
    }
}
