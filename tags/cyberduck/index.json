{
    "data": {
        
        
        "taxonomy": "tag",
        "term": "cyberduck",
        
        "count": 1,
        "items": [
            
            {
    "kind": "page",
    "title": "Uploading web files to a new Amazon EC2 instance",
    "description": "",
    "summary": {
        "content": "This is one of a few quick tutorials I’ve had sitting around on my hard drive for a while. I’m posting it now for the sake of anyone who may find these instructions useful. It’s important to note that these are the instructions you’d use for a standalone EC2 instance. If your app is low-traffic enough to only need a single server, a better option would be to leverage a single-instance Elastic Beanstalk environment which gives you more, better and simpler deployment options.",
        "isTruncated": true
    },
    "published": "2013-08-11T04:19:50Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/uploading-web-files-to-a-new-amazon-ec2-instance/",
    "relativePermalink": "/posts/2013/uploading-web-files-to-a-new-amazon-ec2-instance/",
    "aliases": ["/2013/08/10/uploading-web-files-to-a-new-amazon-ec2-instance/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": ["aws", "ec2", "ssh", "yum", "transmit", "cyberduck", "elastic beanstalk"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 466,
        "readingTime": "3 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130811-uploading-web-files-to-a-new-amazon-ec2-instance.md",
        "logicalName": "20130811-uploading-web-files-to-a-new-amazon-ec2-instance.md",
        "translationBaseName": "20130811-uploading-web-files-to-a-new-amazon-ec2-instance",
        "baseFileName": "20130811-uploading-web-files-to-a-new-amazon-ec2-instance",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#launching-an-instance\"\u003eLaunching an instance\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#logging-in-and-fixing-access-permissions\"\u003eLogging in and fixing access permissions\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#installing-any-required-software\"\u003eInstalling any required software\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#uploading-your-web-files\"\u003eUploading your web files\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eThis is one of a few quick tutorials I’ve had sitting around on my hard drive for a while. I’m posting it now for the sake of anyone who may find these instructions useful.\u003c/p\u003e\n\u003cp\u003eIt’s important to note that these are the instructions you’d use for a standalone EC2 instance. If your app is low-traffic enough to only need a single server, a better option would be to leverage a \u003ca href=\"https://web.archive.org/web/20130811041950/http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deployment.newapp.html\"\u003esingle-instance Elastic Beanstalk environment\u003c/a\u003e which gives you more, better and simpler deployment options.\u003c/p\u003e\n\u003ch2 id=\"launching-an-instance\"\u003eLaunching an instance\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eYou’ll need to launch a new EC2 instance. The simplest way is from the \u003ca href=\"http://console.aws.amazon.com/ec2\"\u003eAWS Management Console\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAs part of this process, you’ll create a new \u003cem\u003ekeypair\u003c/em\u003e. The key pair will have a \u003cstrong\u003ename\u003c/strong\u003e and a \u003cstrong\u003ekeypair file\u003c/strong\u003e (\u003ccode\u003e.pem\u003c/code\u003e). The \u003ccode\u003e.pem\u003c/code\u003e file is a replacement for a password. You’ll need this file to log into your EC2 instance.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce the instance has launched, you’ll want to select it in the EC2 console, and find the \u003cstrong\u003epublic hostname\u003c/strong\u003e in the details section of the screen.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"logging-in-and-fixing-access-permissions\"\u003eLogging in and fixing access permissions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eArmed with \u003cstrong\u003eTerminal/\u003ca href=\"https://web.archive.org/web/20130811041950/http://www.chiark.greenend.org.uk/~sgtatham/putty/\"\u003ePuTTY\u003c/a\u003e\u003c/strong\u003e, your \u003cstrong\u003ekeypair file\u003c/strong\u003e (\u003ccode\u003e.pem\u003c/code\u003e), and the \u003cstrong\u003epublic hostname\u003c/strong\u003e of the instance, you’re ready to log into your instance.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you’re using \u003cstrong\u003eTerminal\u003c/strong\u003e, log into your instance using the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003essh -i \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003epath-to-keypair-pem\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e ec2-user@\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003epublic-hostname\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you’re using a GUI tool for connecting (e.g., PuTTY), here are the important bits:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHostname: \u003ccode\u003e{public-hostname}\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUser: \u003ccode\u003eec2-user\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eKey: \u003ccode\u003e{path-to-keypair-pem}\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce you’re logged into the EC2 instance as the \u003ccode\u003eec2-user\u003c/code\u003e user, you’ll need to switch to the \u003ccode\u003eroot\u003c/code\u003e user.\\\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo -i\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMove into the default Apache \u003ccode\u003eDocumentRoot\u003c/code\u003e directory.\\\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecd /var/www/html\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChange the owner of this directory to the \u003ccode\u003eec2-user\u003c/code\u003e user. This will enable you to use a GUI-based tool to upload your web files.\\\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003echown ec2-user .\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"installing-any-required-software\"\u003eInstalling any required software\u003c/h2\u003e\n\u003cp\u003eA new EC2 instance is essentially a blank slate. Very little is installed on the instance by default (which keeps it lean and fast), but there are many, many packages available for install via \u003ccode\u003eyum\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eyum list available\u003c/code\u003e will show you all of the packages that are available to install.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eyum list installed\u003c/code\u003e will show you all of the packages that are already installed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eyum help\u003c/code\u003e will show you which commands are available to use.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you wanted to install PHP and Apache on your server, you would type (assuming you’re already the \u003cem\u003esuperuser\u003c/em\u003e (i.e., \u003ccode\u003esudo -i\u003c/code\u003e)):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eyum install php apache\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"uploading-your-web-files\"\u003eUploading your web files\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eUsing the SFTP client of your choice (I prefer \u003ca href=\"https://web.archive.org/web/20130811041950/http://panic.com/transmit/\"\u003eTransmit\u003c/a\u003e or \u003ca href=\"https://web.archive.org/web/20130811041950/http://cyberduck.ch\"\u003eCyberduck\u003c/a\u003e, depending on what I’m doing), connect to your EC2 instance over SFTP using the following credentials:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHostname: \u003ccode\u003e{public-hostname}\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUser: \u003ccode\u003eec2-user\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eKey: \u003ccode\u003e{path-to-keypair-pem}\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMove to the \u003ccode\u003e/var/www/html\u003c/code\u003e directory.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDrag your web files into this directory to upload them. \u003ccode\u003eindex.html\u003c/code\u003e will be loaded as the homepage when you load the \u003cstrong\u003epublic hostname\u003c/strong\u003e in your web browser.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n",
        "plain":"This is one of a few quick tutorials I’ve had sitting around on my hard drive for a while. I’m posting it now for the sake of anyone who may find these instructions useful.\nIt’s important to note that these are the instructions you’d use for a standalone EC2 instance. If your app is low-traffic enough to only need a single server, a better option would be to leverage a single-instance Elastic Beanstalk environment which gives you more, better and simpler deployment options.\nLaunching an instance   You’ll need to launch a new EC2 instance. The simplest way is from the AWS Management Console.\n  As part of this process, you’ll create a new keypair. The key pair will have a name and a keypair file (.pem). The .pem file is a replacement for a password. You’ll need this file to log into your EC2 instance.\n  Once the instance has launched, you’ll want to select it in the EC2 console, and find the public hostname in the details section of the screen.\n  Logging in and fixing access permissions   Armed with Terminal/PuTTY, your keypair file (.pem), and the public hostname of the instance, you’re ready to log into your instance.\n  If you’re using Terminal, log into your instance using the following command:\nssh -i {path-to-keypair-pem} ec2-user@{public-hostname}   If you’re using a GUI tool for connecting (e.g., PuTTY), here are the important bits:\n Hostname: {public-hostname} User: ec2-user Key: {path-to-keypair-pem}    Once you’re logged into the EC2 instance as the ec2-user user, you’ll need to switch to the root user.\\\nsudo -i   Move into the default Apache DocumentRoot directory.\\\ncd /var/www/html   Change the owner of this directory to the ec2-user user. This will enable you to use a GUI-based tool to upload your web files.\\\nchown ec2-user .   Installing any required software A new EC2 instance is essentially a blank slate. Very little is installed on the instance by default (which keeps it lean and fast), but there are many, many packages available for install via yum.\n yum list available will show you all of the packages that are available to install. yum list installed will show you all of the packages that are already installed. yum help will show you which commands are available to use.  If you wanted to install PHP and Apache on your server, you would type (assuming you’re already the superuser (i.e., sudo -i)):\nyum install php apache Uploading your web files   Using the SFTP client of your choice (I prefer Transmit or Cyberduck, depending on what I’m doing), connect to your EC2 instance over SFTP using the following credentials:\n Hostname: {public-hostname} User: ec2-user Key: {path-to-keypair-pem}    Move to the /var/www/html directory.\n  Drag your web files into this directory to upload them. index.html will be loaded as the homepage when you load the public hostname in your web browser.\n  ",
        "source":"\nThis is one of a few quick tutorials I’ve had sitting around on my hard drive for a while. I’m posting it now for the sake of anyone who may find these instructions useful.\n\nIt’s important to note that these are the instructions you’d use for a standalone EC2 instance. If your app is low-traffic enough to only need a single server, a better option would be to leverage a [single-instance Elastic Beanstalk environment]({{% wayback \"http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deployment.newapp.html\" %}}) which gives you more, better and simpler deployment options.\n\n\n## Launching an instance\n\n1. You’ll need to launch a new EC2 instance. The simplest way is from the [AWS Management Console](http://console.aws.amazon.com/ec2).\n\n2. As part of this process, you’ll create a new *keypair*. The key pair will have a **name** and a **keypair file** (`.pem`). The `.pem` file is a replacement for a password. You’ll need this file to log into your EC2 instance.\n\n3. Once the instance has launched, you’ll want to select it in the EC2 console, and find the **public hostname** in the details section of the screen.\n\n\n## Logging in and fixing access permissions\n\n1. Armed with **Terminal/[PuTTY]({{% wayback \"http://www.chiark.greenend.org.uk/~sgtatham/putty/\" %}})**, your **keypair file** (`.pem`), and the **public hostname** of the instance, you’re ready to log into your instance.\n\n2. If you’re using **Terminal**, log into your instance using the following command:\n\n    ```bash\n    ssh -i {path-to-keypair-pem} ec2-user@{public-hostname}\n    ```\n\n3. If you’re using a GUI tool for connecting (e.g., PuTTY), here are the important bits:\n\n    * Hostname: `{public-hostname}`\n    * User: `ec2-user`\n    * Key: `{path-to-keypair-pem}`\n\n4. Once you’re logged into the EC2 instance as the `ec2-user` user, you’ll need to switch to the `root` user.\\\n\n    ```bash\n    sudo -i\n    ```\n\n5. Move into the default Apache `DocumentRoot` directory.\\\n\n    ```bash\n    cd /var/www/html\n    ```\n\n6. Change the owner of this directory to the `ec2-user` user. This will enable you to use a GUI-based tool to upload your web files.\\\n\n    ```bash\n    chown ec2-user .\n    ```\n\n## Installing any required software\n\nA new EC2 instance is essentially a blank slate. Very little is installed on the instance by default (which keeps it lean and fast), but there are many, many packages available for install via `yum`.\n\n* `yum list available` will show you all of the packages that are available to install.\n* `yum list installed` will show you all of the packages that are already installed.\n* `yum help` will show you which commands are available to use.\n\nIf you wanted to install PHP and Apache on your server, you would type (assuming you’re already the *superuser* (i.e., `sudo -i`)):\n\n```bash\nyum install php apache\n```\n\n## Uploading your web files\n\n1. Using the SFTP client of your choice (I prefer [Transmit]({{% wayback \"http://panic.com/transmit/\" %}}) or [Cyberduck]({{% wayback \"http://cyberduck.ch\" %}}), depending on what I’m doing), connect to your EC2 instance over SFTP using the following credentials:\n\n    * Hostname: `{public-hostname}`\n    * User: `ec2-user`\n    * Key: `{path-to-keypair-pem}`\n\n2. Move to the `/var/www/html` directory.\n\n3. Drag your web files into this directory to upload them. `index.html` will be loaded as the homepage when you load the **public hostname** in your web browser.\n"},
    "links": {
        "prev": {"title": "Things I learned about how websites manage passwords", "permalink": "https://ryanparman.com/posts/2013/things-i-learned-about-how-websites-manage-passwords/"},
        "next": {"title": "Stephen Elop to become the next Microsoft CEO? I’d buy it.", "permalink": "https://ryanparman.com/posts/2013/stephen-elop-to-become-the-next-microsoft-ceo-id-buy-it/"},
        "ignore": "me"
    }
}

            
        ]
    }
}
