{
    "data": {
        
        
        "count": 4,
        "items": [
            
            {
    "kind": "page",
    "title": "Running aws-vault in macOS with local Docker containers",
    "description": "",
    "summary": {
        "content": "Overview aws-vault is a tool for storing your AWS credentials in your system keychain instead of as a plain text file on-disk. Credentials and other secrets (including your various system passwords) are stored inside your system keychain. They are encrypted, and cannot easily be stolen by a rogue script or application. By keeping your AWS credentials in your system keychain, they are available to you when you are logged in, unavailable when you are logged out, and provide an important layer of security that the standard plain text storage method does not.",
        "isTruncated": true
    },
    "published": "2019-04-19T01:32:30Z",
    "updated": "2019-12-26T16:46:47-08:00",
    "permalink": "https://ryanparman.com/posts/2019/running-aws-vault-with-local-docker-containers/",
    "relativePermalink": "/posts/2019/running-aws-vault-with-local-docker-containers/",
    "aliases": ["/2019/04/19/running-aws-vault-with-local-docker-containers"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2019/secure-auth@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2019/keychain@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2019/generate-tokens@2x.png", "https://cdn.ryanparman.com/hugo/posts/2018/docker-logo.jpg"],
    "videos": [],
    "categories": ["Software"],
    "tags": ["99designs", "aws", "aws-cli", "aws-vault", "bash", "docker", "ec2", "elastic-beanstalk", "golang", "keychain", "mac", "macos", "parameter-store", "secrets", "session-tokens", "site-reliability-engineering", "sre"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 896,
        "readingTime": "5 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2019/20190419-running-aws-vault-with-local-docker-containers.md",
        "logicalName": "20190419-running-aws-vault-with-local-docker-containers.md",
        "translationBaseName": "20190419-running-aws-vault-with-local-docker-containers",
        "baseFileName": "20190419-running-aws-vault-with-local-docker-containers",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2019/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#overview\"\u003eOverview\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#leveraging-the-keychain\"\u003eLeveraging the Keychain\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#aws-config-file\"\u003eAWS Config File\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#viewing-credentials\"\u003eViewing Credentials\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#token-types\"\u003eToken Types\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#passing-to-local-docker\"\u003ePassing to (local) Docker\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/secure-auth@2x.webp\" alt=\"Using aws-vault\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/secure-auth@2x.jpg\" alt=\"Using aws-vault\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/99designs/aws-vault\"\u003eaws-vault\u003c/a\u003e\u003c/strong\u003e is a tool for storing your AWS credentials in your system keychain instead of as a plain text file on-disk.\u003c/p\u003e\n\u003cp\u003eCredentials and other secrets (including your various system passwords) are stored inside your system keychain. They are encrypted, and cannot easily be stolen by a rogue script or application. By keeping your AWS credentials in your system keychain, they are available to you when you are logged in, unavailable when you are logged out, and provide an important layer of security that the standard plain text storage method does not.\u003c/p\u003e\n\u003cp\u003eIt is designed to work cooperatively with the \u003ca href=\"https://aws.amazon.com/cli/\"\u003eAWS Unified CLI Tools\u003c/a\u003e. It also provides utilities for other AWS best practices such as being able to generate session tokens, or logging into the AWS Console with your IAM credentials using a simple command.\u003c/p\u003e\n\u003cp\u003eYou can learn more about the thinking behind it from the \u003ca href=\"https://99designs.com.au/tech-blog/blog/2015/10/26/aws-vault/\"\u003eoriginal 99 designs blog post\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"leveraging-the-keychain\"\u003eLeveraging the Keychain\u003c/h2\u003e\n\u003cp\u003eBy default, every Mac user has a \u003cem\u003esystem\u003c/em\u003e and a \u003cem\u003elogin\u003c/em\u003e keychain that stores the bulk of your secure information (e.g., certificate authorities which enable SSL/TLS connections, website passwords or credit cards saved in your browser).\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/keychain@2x.webp\" alt=\"Leveraging the Keychain\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/keychain@2x.jpg\" alt=\"Leveraging the Keychain\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eOn macOS, credentials are stored in a non-\u003cem\u003elogin\u003c/em\u003e keychain in \u003cem\u003eKeychain Access.app\u003c/em\u003e. Instead, they are stored in a new \u003cem\u003eaws-vault\u003c/em\u003e keychain. In order to manage these credentials with the \u003cem\u003eKeychain Access.app\u003c/em\u003e app, you\u0026rsquo;ll need to import it.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003eFile → Import Items…\u003c/em\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChoose \u003ccode\u003eaws-vault.keychain-db\u003c/code\u003e from the default directory.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRight click → \u003cem\u003eChange Settings for Keychain “aws-vault”…\u003c/em\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChange the value for \u003cem\u003eLock after {NUMBER} minutes of inactivity\u003c/em\u003e to something like 1440 minutes (1 day). Feel free to tune for security/convenience according to your tastes.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"aws-config-file\"\u003eAWS Config File\u003c/h2\u003e\n\u003cp\u003eAfter adding credentials to \u003ccode\u003eaws-vault\u003c/code\u003e (e.g., \u003ccode\u003eaws-vault add default\u003c/code\u003e), you can instruct the \u003ca href=\"https://aws.amazon.com/cli/\"\u003eaws-cli\u003c/a\u003e to use \u003ccode\u003eaws-vault\u003c/code\u003e instead of \u003ccode\u003e~/.aws/credentials\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHere is an \u003ccode\u003e~/.aws/config\u003c/code\u003e entry for the \u003cem\u003edefault\u003c/em\u003e profile:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-ini\" data-lang=\"ini\"\u003e\u003cspan style=\"color:#66d9ef\"\u003e[default]\u003c/span\u003e\n\u003cspan style=\"color:#a6e22e\"\u003eregion\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eus-east-1\u003c/span\u003e\n\u003cspan style=\"color:#a6e22e\"\u003ecredential_process\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eaws-vault exec -j default\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter all credentials are stored in \u003ccode\u003eaws-vault\u003c/code\u003e, and all \u003ccode\u003e~/.aws/config\u003c/code\u003e entries have been updated with the \u003ccode\u003ecredential_process\u003c/code\u003e line, \u003ccode\u003e~/.aws/credentials\u003c/code\u003e should be \u003cstrong\u003eempty\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"viewing-credentials\"\u003eViewing Credentials\u003c/h2\u003e\n\u003caside class=\"age aside container flex\"\u003e\n  \u003cp\u003emacOS ships with the FreeBSD flavor of command line tools instead of the GNU flavor which ships with most Linuxes. This post references the GNU flavor. Please see “\u003ca href=\"/posts/2019/using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools/\"\u003eUsing GNU command line tools in macOS instead of FreeBSD tools\u003c/a\u003e” for more information.\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003cp\u003eIf you want to view the credentials for a profile, or if you want to expose them as environment variables, you can run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws-vault exec default -- env | grep --no-color ^AWS | sort\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you want to \u003cem\u003euse\u003c/em\u003e them, the \u003ca href=\"https://aws.amazon.com/cli/\"\u003eaws-cli\u003c/a\u003e will \u003ca href=\"https://docs.aws.amazon.com/cli/latest/topic/config-vars.html#id1\"\u003epick up environment variables before it looks for a credentials definition\u003c/a\u003e. So, if you want to use \u003ca href=\"https://github.com/99designs/aws-vault\"\u003eaws-vault\u003c/a\u003e with \u003ca href=\"https://aws.amazon.com/cli/\"\u003eaws-cli\u003c/a\u003e without specifying the \u003ccode\u003ecredential_process\u003c/code\u003e setting in your \u003ccode\u003e~/.aws/config\u003c/code\u003e entry, you can do something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws-vault exec default -- aws s3 ls\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"token-types\"\u003eToken Types\u003c/h2\u003e\n\u003cp\u003eThe AWS CLI (and any other tools built on AWS SDKs) will leverage the \u003ccode\u003eAWS_SESSION_TOKEN\u003c/code\u003e and \u003ccode\u003eAWS_SECURITY_TOKEN\u003c/code\u003e values before leveraging the \u003ccode\u003eAWS_ACCESS_KEY_ID\u003c/code\u003e and \u003ccode\u003eAWS_SECRET_ACCESS_KEY\u003c/code\u003e values.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAWS_SESSION_TOKEN\u003c/code\u003e and \u003ccode\u003eAWS_SECURITY_TOKEN\u003c/code\u003e tokens are more secure because they are ephemeral, and expire after a short (measured in hours) TTL. For this reason, these should generally be used instead of the \u003ccode\u003eAWS_ACCESS_KEY_ID\u003c/code\u003e and \u003ccode\u003eAWS_SECRET_ACCESS_KEY\u003c/code\u003e values.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/generate-tokens@2x.webp\" alt=\"Generating Secure Tokens\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/generate-tokens@2x.png\" alt=\"Generating Secure Tokens\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eBut there is an exception\u003c/strong\u003e — there are certain types of IAM-related tasks which cannot be performed using \u003ccode\u003eAWS_SESSION_TOKEN\u003c/code\u003e and \u003ccode\u003eAWS_SECURITY_TOKEN\u003c/code\u003e tokens, because they are IAM tokens themselves. In these cases, you want to fall back to the long-lived \u003ccode\u003eAWS_ACCESS_KEY_ID\u003c/code\u003e and \u003ccode\u003eAWS_SECRET_ACCESS_KEY\u003c/code\u003e values. You can do this by passing the \u003ccode\u003e--no-session\u003c/code\u003e option to the \u003ccode\u003eaws-vault\u003c/code\u003e command.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws-vault exec default --no-session -- env | grep --no-color ^AWS | sort\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere, you can see that the \u003ccode\u003eAWS_SESSION_TOKEN\u003c/code\u003e and \u003ccode\u003eAWS_SECURITY_TOKEN\u003c/code\u003e tokens are not generated, so the AWS CLI (and any other tools built on AWS SDKs) will leverage the \u003ccode\u003eAWS_ACCESS_KEY_ID\u003c/code\u003e and \u003ccode\u003eAWS_SECRET_ACCESS_KEY\u003c/code\u003e values instead.\u003c/p\u003e\n\u003ch2 id=\"passing-to-local-docker\"\u003ePassing to (local) Docker\u003c/h2\u003e\n\u003cp\u003eIt is becoming more popular to provide Docker containers for running software, especially when that software has a number of (potentially-complex) dependencies. By wrapping everything up into a nice little Docker image, it makes it much simpler to build and distribute software that is meant to run locally.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2018/docker-logo.webp\" alt=\"Docker Logo\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2018/docker-logo.jpg\" alt=\"Docker Logo\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWith the traditional \u003ccode\u003e~/.aws\u003c/code\u003e directory, you can mount it as read-only inside a Docker container if you want that Docker container to be able to communicate with AWS on your behalf.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker run -ti -v $HOME/.aws:/root/.aws:ro \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003eimage_name\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e sh\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEasy, right? Wrap it in a \u003ccode\u003eMakefile\u003c/code\u003e or a Bash \u003ccode\u003ealias\u003c/code\u003e, and call it a day.\u003c/p\u003e\n\u003cp\u003eBut using \u003ccode\u003eaws-vault\u003c/code\u003e makes this a little more complicated. \u003ccode\u003eaws-vault\u003c/code\u003e runs on your local machine (not inside your Docker container), and your \u003ccode\u003e~/.aws/credentials\u003c/code\u003e file is empty. How do we pass your credentials into a Docker container?\u003c/p\u003e\n\u003cp\u003eBy exporting the environment variables and passing them to \u003ccode\u003edocker run\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker run -ti \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --env-file \u0026lt;\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eaws-vault exec default -- env | grep --no-color ^AWS_\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003eimage_name\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e sh\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003caside class=\"age aside container flex\"\u003e\n\u003cp\u003eTested in \u003cb\u003eBash 3.2.57\u003c/b\u003e (latest GPLv2 release; ships by default in macOS) + \u003cb\u003eBash 5.0.3\u003c/b\u003e (GPLv3; installed via Homebrew).\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003cp\u003eWow! What does this do?\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eExports the credentials to the environment.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFilters the environment variables by those that begin with \u003ccode\u003eAWS\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRun Docker, passing the \u003ccode\u003eAWS_*\u003c/code\u003e environment variables into Docker.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThis particular command will start an interactive \u003ccode\u003esh\u003c/code\u003e shell session. You can run other commands using \u003ca href=\"https://docs.docker.com/engine/reference/commandline/run/\"\u003e\u003ccode\u003edocker run\u003c/code\u003e\u003c/a\u003e as appropriate.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/99designs/aws-vault\"\u003eaws-vault\u003c/a\u003e is a great tool for managing your credentials, helping you work with AWS-related tooling, and makes it easy to follow best-practices. If you\u0026rsquo;re interested in learning more, check out the \u003ccode\u003eREADME\u003c/code\u003e.\u003c/p\u003e\n",
        "plain":"  Overview aws-vault is a tool for storing your AWS credentials in your system keychain instead of as a plain text file on-disk.\nCredentials and other secrets (including your various system passwords) are stored inside your system keychain. They are encrypted, and cannot easily be stolen by a rogue script or application. By keeping your AWS credentials in your system keychain, they are available to you when you are logged in, unavailable when you are logged out, and provide an important layer of security that the standard plain text storage method does not.\nIt is designed to work cooperatively with the AWS Unified CLI Tools. It also provides utilities for other AWS best practices such as being able to generate session tokens, or logging into the AWS Console with your IAM credentials using a simple command.\nYou can learn more about the thinking behind it from the original 99 designs blog post.\nLeveraging the Keychain By default, every Mac user has a system and a login keychain that stores the bulk of your secure information (e.g., certificate authorities which enable SSL/TLS connections, website passwords or credit cards saved in your browser).\n  On macOS, credentials are stored in a non-login keychain in Keychain Access.app. Instead, they are stored in a new aws-vault keychain. In order to manage these credentials with the Keychain Access.app app, you\u0026rsquo;ll need to import it.\n  File → Import Items…\n  Choose aws-vault.keychain-db from the default directory.\n  Right click → Change Settings for Keychain “aws-vault”…\n  Change the value for Lock after {NUMBER} minutes of inactivity to something like 1440 minutes (1 day). Feel free to tune for security/convenience according to your tastes.\n  AWS Config File After adding credentials to aws-vault (e.g., aws-vault add default), you can instruct the aws-cli to use aws-vault instead of ~/.aws/credentials.\nHere is an ~/.aws/config entry for the default profile:\n[default] region=us-east-1 credential_process=aws-vault exec -j default After all credentials are stored in aws-vault, and all ~/.aws/config entries have been updated with the credential_process line, ~/.aws/credentials should be empty.\nViewing Credentials macOS ships with the FreeBSD flavor of command line tools instead of the GNU flavor which ships with most Linuxes. This post references the GNU flavor. Please see “Using GNU command line tools in macOS instead of FreeBSD tools” for more information.\n If you want to view the credentials for a profile, or if you want to expose them as environment variables, you can run:\naws-vault exec default -- env | grep --no-color ^AWS | sort If you want to use them, the aws-cli will pick up environment variables before it looks for a credentials definition. So, if you want to use aws-vault with aws-cli without specifying the credential_process setting in your ~/.aws/config entry, you can do something like this:\naws-vault exec default -- aws s3 ls Token Types The AWS CLI (and any other tools built on AWS SDKs) will leverage the AWS_SESSION_TOKEN and AWS_SECURITY_TOKEN values before leveraging the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY values.\nAWS_SESSION_TOKEN and AWS_SECURITY_TOKEN tokens are more secure because they are ephemeral, and expire after a short (measured in hours) TTL. For this reason, these should generally be used instead of the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY values.\n  But there is an exception — there are certain types of IAM-related tasks which cannot be performed using AWS_SESSION_TOKEN and AWS_SECURITY_TOKEN tokens, because they are IAM tokens themselves. In these cases, you want to fall back to the long-lived AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY values. You can do this by passing the --no-session option to the aws-vault command.\naws-vault exec default --no-session -- env | grep --no-color ^AWS | sort Here, you can see that the AWS_SESSION_TOKEN and AWS_SECURITY_TOKEN tokens are not generated, so the AWS CLI (and any other tools built on AWS SDKs) will leverage the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY values instead.\nPassing to (local) Docker It is becoming more popular to provide Docker containers for running software, especially when that software has a number of (potentially-complex) dependencies. By wrapping everything up into a nice little Docker image, it makes it much simpler to build and distribute software that is meant to run locally.\n  With the traditional ~/.aws directory, you can mount it as read-only inside a Docker container if you want that Docker container to be able to communicate with AWS on your behalf.\ndocker run -ti -v $HOME/.aws:/root/.aws:ro {image_name} sh Easy, right? Wrap it in a Makefile or a Bash alias, and call it a day.\nBut using aws-vault makes this a little more complicated. aws-vault runs on your local machine (not inside your Docker container), and your ~/.aws/credentials file is empty. How do we pass your credentials into a Docker container?\nBy exporting the environment variables and passing them to docker run.\ndocker run -ti \\  --env-file \u0026lt;(aws-vault exec default -- env | grep --no-color ^AWS_) \\  {image_name} sh  Tested in Bash 3.2.57 (latest GPLv2 release; ships by default in macOS) + Bash 5.0.3 (GPLv3; installed via Homebrew).\n Wow! What does this do?\n  Exports the credentials to the environment.\n  Filters the environment variables by those that begin with AWS.\n  Run Docker, passing the AWS_* environment variables into Docker.\n  This particular command will start an interactive sh shell session. You can run other commands using docker run as appropriate.\n  Conclusion aws-vault is a great tool for managing your credentials, helping you work with AWS-related tooling, and makes it easy to follow best-practices. If you\u0026rsquo;re interested in learning more, check out the README.\n",
        "source":"\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/secure-auth@2x.jpg\" alt=\"Using aws-vault\" width=\"2000\" height=\"873\" \u003e}}\n\n## Overview\n\n**[aws-vault]** is a tool for storing your AWS credentials in your system keychain instead of as a plain text file on-disk.\n\nCredentials and other secrets (including your various system passwords) are stored inside your system keychain. They are encrypted, and cannot easily be stolen by a rogue script or application. By keeping your AWS credentials in your system keychain, they are available to you when you are logged in, unavailable when you are logged out, and provide an important layer of security that the standard plain text storage method does not.\n\nIt is designed to work cooperatively with the [AWS Unified CLI Tools][aws-cli]. It also provides utilities for other AWS best practices such as being able to generate session tokens, or logging into the AWS Console with your IAM credentials using a simple command.\n\nYou can learn more about the thinking behind it from the [original 99 designs blog post]({{\u003c wayback \"https://99designs.com.au/tech-blog/blog/2015/10/26/aws-vault/\" \u003e}}).\n\n## Leveraging the Keychain\n\nBy default, every Mac user has a _system_ and a _login_ keychain that stores the bulk of your secure information (e.g., certificate authorities which enable SSL/TLS connections, website passwords or credit cards saved in your browser).\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/keychain@2x.jpg\" alt=\"Leveraging the Keychain\" width=\"1920\" height=\"1080\" \u003e}}\n\nOn macOS, credentials are stored in a non-_login_ keychain in _Keychain Access.app_. Instead, they are stored in a new _aws-vault_ keychain. In order to manage these credentials with the _Keychain Access.app_ app, you'll need to import it.\n\n1. _File → Import Items…_\n\n1. Choose `aws-vault.keychain-db` from the default directory.\n\n1. Right click → _Change Settings for Keychain “aws-vault”…_\n\n1. Change the value for _Lock after {NUMBER} minutes of inactivity_ to something like 1440 minutes (1 day). Feel free to tune for security/convenience according to your tastes.\n\n## AWS Config File\n\nAfter adding credentials to `aws-vault` (e.g., `aws-vault add default`), you can instruct the [aws-cli] to use `aws-vault` instead of `~/.aws/credentials`.\n\nHere is an `~/.aws/config` entry for the _default_ profile:\n\n```ini\n[default]\nregion=us-east-1\ncredential_process=aws-vault exec -j default\n```\n\nAfter all credentials are stored in `aws-vault`, and all `~/.aws/config` entries have been updated with the `credential_process` line, `~/.aws/credentials` should be **empty**.\n\n## Viewing Credentials\n\n{{\u003cmac-gnu\u003e}}\n\nIf you want to view the credentials for a profile, or if you want to expose them as environment variables, you can run:\n\n```bash\naws-vault exec default -- env | grep --no-color ^AWS | sort\n```\n\nIf you want to _use_ them, the [aws-cli] will [pick up environment variables before it looks for a credentials definition](https://docs.aws.amazon.com/cli/latest/topic/config-vars.html#id1). So, if you want to use [aws-vault] with [aws-cli] without specifying the `credential_process` setting in your `~/.aws/config` entry, you can do something like this:\n\n```bash\naws-vault exec default -- aws s3 ls\n```\n\n## Token Types\n\nThe AWS CLI (and any other tools built on AWS SDKs) will leverage the `AWS_SESSION_TOKEN` and `AWS_SECURITY_TOKEN` values before leveraging the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` values.\n\n`AWS_SESSION_TOKEN` and `AWS_SECURITY_TOKEN` tokens are more secure because they are ephemeral, and expire after a short (measured in hours) TTL. For this reason, these should generally be used instead of the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` values.\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/generate-tokens@2x.png\" alt=\"Generating Secure Tokens\" width=\"2000\" height=\"874\" \u003e}}\n\n**But there is an exception** — there are certain types of IAM-related tasks which cannot be performed using `AWS_SESSION_TOKEN` and `AWS_SECURITY_TOKEN` tokens, because they are IAM tokens themselves. In these cases, you want to fall back to the long-lived `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` values. You can do this by passing the `--no-session` option to the `aws-vault` command.\n\n```bash\naws-vault exec default --no-session -- env | grep --no-color ^AWS | sort\n```\n\nHere, you can see that the `AWS_SESSION_TOKEN` and `AWS_SECURITY_TOKEN` tokens are not generated, so the AWS CLI (and any other tools built on AWS SDKs) will leverage the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` values instead.\n\n## Passing to (local) Docker\n\nIt is becoming more popular to provide Docker containers for running software, especially when that software has a number of (potentially-complex) dependencies. By wrapping everything up into a nice little Docker image, it makes it much simpler to build and distribute software that is meant to run locally.\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2018/docker-logo.jpg\" alt=\"Docker Logo\" width=\"2400\" height=\"1048\" \u003e}}\n\nWith the traditional `~/.aws` directory, you can mount it as read-only inside a Docker container if you want that Docker container to be able to communicate with AWS on your behalf.\n\n```bash\ndocker run -ti -v $HOME/.aws:/root/.aws:ro {image_name} sh\n```\n\nEasy, right? Wrap it in a `Makefile` or a Bash `alias`, and call it a day.\n\nBut using `aws-vault` makes this a little more complicated. `aws-vault` runs on your local machine (not inside your Docker container), and your `~/.aws/credentials` file is empty. How do we pass your credentials into a Docker container?\n\nBy exporting the environment variables and passing them to `docker run`.\n\n```bash\ndocker run -ti \\\n    --env-file \u003c(aws-vault exec default -- env | grep --no-color ^AWS_) \\\n    {image_name} sh\n```\n\n{{\u003caside\u003e}}\n\u003cp\u003eTested in \u003cb\u003eBash 3.2.57\u003c/b\u003e (latest GPLv2 release; ships by default in macOS) + \u003cb\u003eBash 5.0.3\u003c/b\u003e (GPLv3; installed via Homebrew).\u003c/p\u003e\n{{\u003c/aside\u003e}}\n\nWow! What does this do?\n\n1. Exports the credentials to the environment.\n\n1. Filters the environment variables by those that begin with `AWS`.\n\n1. Run Docker, passing the `AWS_*` environment variables into Docker.\n\n1. This particular command will start an interactive `sh` shell session. You can run other commands using [`docker run`](https://docs.docker.com/engine/reference/commandline/run/) as appropriate.\n\n## Conclusion\n\n[aws-vault] is a great tool for managing your credentials, helping you work with AWS-related tooling, and makes it easy to follow best-practices. If you're interested in learning more, check out the `README`.\n\n  [aws-cli]: https://aws.amazon.com/cli/\n  [aws-vault]: https://github.com/99designs/aws-vault\n"},
    "links": {
        "prev": {"title": "Converting iMessage Stickers, Animoji, and Memoji to Slackmoji (Slack Emoji)", "permalink": "https://ryanparman.com/posts/2019/converting-imessage-stickers-animoji-and-memoji-to-slackmoji-slack-emoji/"},
        "next": {"title": "Using GNU command line tools in macOS instead of FreeBSD tools", "permalink": "https://ryanparman.com/posts/2019/using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Easily SSH into Amazon EC2 instances using the Name tag",
    "description": "",
    "summary": {
        "content": "It’s been a while since I’ve written about code, so I thought I’d post this little AWS-related tip for OS X and Linux users. If you have the Unified AWS CLI Tools configured, you can add these functions to your Bash profile (typically either ~/.bash_profile or ~/.profile) to enable you to SSH into an instance by “Name” tag, or simply lookup the IP address or DNS hostname. hostname_from_instance \u0026lt;instance-name\u0026gt; ip_from_instance \u0026lt;instance-name\u0026gt; ssh-aws \u0026lt;instance-name\u0026gt; Bash code function hostname_from_instance() { echo $(aws ec2 describe-instances --filters \u0026#34;{\\\u0026#34;Name\\\u0026#34;:\\\u0026#34;tag:Name\\\u0026#34;, \\\u0026#34;Values\\\u0026#34;:[\\\u0026#34;$1\\\u0026#34;]}\u0026#34; --query=\u0026#39;Reservations[0].",
        "isTruncated": true
    },
    "published": "2014-01-29T10:42:14Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2014/easily-ssh-into-amazon-ec2-instances-using-the-name-tag/",
    "relativePermalink": "/posts/2014/easily-ssh-into-amazon-ec2-instances-using-the-name-tag/",
    "aliases": ["/2014/01/29/easily-ssh-into-amazon-ec2-instances-using-the-name-tag/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": ["aws", "ec2", "ssh", "aws-cli", "jmespath"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 268,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2014/20140129-easily-ssh-into-amazon-ec2-instances-using-the-name-tag.md",
        "logicalName": "20140129-easily-ssh-into-amazon-ec2-instances-using-the-name-tag.md",
        "translationBaseName": "20140129-easily-ssh-into-amazon-ec2-instances-using-the-name-tag",
        "baseFileName": "20140129-easily-ssh-into-amazon-ec2-instances-using-the-name-tag",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2014/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#bash-code\"\u003eBash code\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#notes\"\u003eNotes\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eIt’s been a while since I’ve written about code, so I thought I’d post this little AWS-related tip for OS X and Linux users.\u003c/p\u003e\n\u003cp\u003eIf you have the \u003ca href=\"https://web.archive.org/web/20140129104214/https://github.com/aws/aws-cli/\"\u003eUnified AWS CLI Tools\u003c/a\u003e configured, you can add these functions to your Bash profile (typically either \u003ccode\u003e~/.bash_profile\u003c/code\u003e or \u003ccode\u003e~/.profile\u003c/code\u003e) to enable you to SSH into an instance by “Name” tag, or simply lookup the IP address or DNS hostname.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehostname_from_instance \u0026lt;instance-name\u0026gt;\n\nip_from_instance \u0026lt;instance-name\u0026gt;\n\nssh-aws \u0026lt;instance-name\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"bash-code\"\u003eBash code\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e hostname_from_instance\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    echo \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003eaws ec2 describe-instances --filters \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{\\\u0026#34;Name\\\u0026#34;:\\\u0026#34;tag:Name\\\u0026#34;, \\\u0026#34;Values\\\u0026#34;:[\\\u0026#34;\u003c/span\u003e$1\u003cspan style=\"color:#e6db74\"\u003e\\\u0026#34;]}\u0026#34;\u003c/span\u003e --query\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Reservations[0].Instances[0].PublicDnsName\u0026#39;\u003c/span\u003e | tr -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\n\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e ip_from_instance\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    echo \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003eaws ec2 describe-instances --filters \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{\\\u0026#34;Name\\\u0026#34;:\\\u0026#34;tag:Name\\\u0026#34;, \\\u0026#34;Values\\\u0026#34;:[\\\u0026#34;\u003c/span\u003e$1\u003cspan style=\"color:#e6db74\"\u003e\\\u0026#34;]}\u0026#34;\u003c/span\u003e --query\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Reservations[0].Instances[0].PublicIpAddress\u0026#39;\u003c/span\u003e | tr -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\n\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e ssh-aws\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    ssh -i ~/.ssh/your-keypair.pem ec2-user@\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003eip_from_instance \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$1\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eThis assumes that every instance you have has a unique “Name” tag, and will return the IP address or public DNS hostname of that instance (for use with SSH access). If multiple instances share the same “Name” tag, it will simply use the first “Name” match.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you’re running instances inside a (private) VPC, you should expect to lookup the public Elastic IP address for the instance.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you’re running instances inside a (public, classic) EC2, you should expect to lookup the public DNS hostname (unless you’ve configured an Elastic IP — in which case, go nuts).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the case where you’re running instances in the private subnet of a VPC, and SSH access to those instances is only possible from a bastion host in the public subnet, this is not the solution for you.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFeel free to tweak/adjust as necessary.\u003c/p\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://web.archive.org/web/20140129104214/https://github.com/aws/aws-cli/\"\u003eUnified AWS CLI Tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://web.archive.org/web/20140129104214/https://github.com/boto/jmespath\"\u003eJMESpath\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://web.archive.org/web/20140129104214/http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-DescribeInstances.html\"\u003eEC2 API Reference: DescribeInstances\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
        "plain":"It’s been a while since I’ve written about code, so I thought I’d post this little AWS-related tip for OS X and Linux users.\nIf you have the Unified AWS CLI Tools configured, you can add these functions to your Bash profile (typically either ~/.bash_profile or ~/.profile) to enable you to SSH into an instance by “Name” tag, or simply lookup the IP address or DNS hostname.\nhostname_from_instance \u0026lt;instance-name\u0026gt; ip_from_instance \u0026lt;instance-name\u0026gt; ssh-aws \u0026lt;instance-name\u0026gt; Bash code function hostname_from_instance() { echo $(aws ec2 describe-instances --filters \u0026#34;{\\\u0026#34;Name\\\u0026#34;:\\\u0026#34;tag:Name\\\u0026#34;, \\\u0026#34;Values\\\u0026#34;:[\\\u0026#34;$1\\\u0026#34;]}\u0026#34; --query=\u0026#39;Reservations[0].Instances[0].PublicDnsName\u0026#39; | tr -d \u0026#39;\u0026#34;\u0026#39;) } function ip_from_instance() { echo $(aws ec2 describe-instances --filters \u0026#34;{\\\u0026#34;Name\\\u0026#34;:\\\u0026#34;tag:Name\\\u0026#34;, \\\u0026#34;Values\\\u0026#34;:[\\\u0026#34;$1\\\u0026#34;]}\u0026#34; --query=\u0026#39;Reservations[0].Instances[0].PublicIpAddress\u0026#39; | tr -d \u0026#39;\u0026#34;\u0026#39;) } function ssh-aws() { ssh -i ~/.ssh/your-keypair.pem ec2-user@$(ip_from_instance \u0026#34;$1\u0026#34;) } Notes   This assumes that every instance you have has a unique “Name” tag, and will return the IP address or public DNS hostname of that instance (for use with SSH access). If multiple instances share the same “Name” tag, it will simply use the first “Name” match.\n  If you’re running instances inside a (private) VPC, you should expect to lookup the public Elastic IP address for the instance.\n  If you’re running instances inside a (public, classic) EC2, you should expect to lookup the public DNS hostname (unless you’ve configured an Elastic IP — in which case, go nuts).\n  In the case where you’re running instances in the private subnet of a VPC, and SSH access to those instances is only possible from a bastion host in the public subnet, this is not the solution for you.\n  Feel free to tweak/adjust as necessary.\nReferences  Unified AWS CLI Tools JMESpath EC2 API Reference: DescribeInstances  ",
        "source":"\nIt’s been a while since I’ve written about code, so I thought I’d post this little AWS-related tip for OS X and Linux users.\n\nIf you have the [Unified AWS CLI Tools]({{% wayback \"https://github.com/aws/aws-cli/\" %}}) configured, you can add these functions to your Bash profile (typically either `~/.bash_profile` or `~/.profile`) to enable you to SSH into an instance by “Name” tag, or simply lookup the IP address or DNS hostname.\n\n```bash\nhostname_from_instance \u003cinstance-name\u003e\n\nip_from_instance \u003cinstance-name\u003e\n\nssh-aws \u003cinstance-name\u003e\n```\n\n## Bash code\n\n```bash\nfunction hostname_from_instance() {\n    echo $(aws ec2 describe-instances --filters \"{\\\"Name\\\":\\\"tag:Name\\\", \\\"Values\\\":[\\\"$1\\\"]}\" --query='Reservations[0].Instances[0].PublicDnsName' | tr -d '\"')\n}\n\nfunction ip_from_instance() {\n    echo $(aws ec2 describe-instances --filters \"{\\\"Name\\\":\\\"tag:Name\\\", \\\"Values\\\":[\\\"$1\\\"]}\" --query='Reservations[0].Instances[0].PublicIpAddress' | tr -d '\"')\n}\n\nfunction ssh-aws() {\n    ssh -i ~/.ssh/your-keypair.pem ec2-user@$(ip_from_instance \"$1\")\n}\n```\n\n## Notes\n\n* This assumes that every instance you have has a unique “Name” tag, and will return the IP address or public DNS hostname of that instance (for use with SSH access). If multiple instances share the same “Name” tag, it will simply use the first “Name” match.\n\n* If you’re running instances inside a (private) VPC, you should expect to lookup the public Elastic IP address for the instance.\n\n* If you’re running instances inside a (public, classic) EC2, you should expect to lookup the public DNS hostname (unless you’ve configured an Elastic IP — in which case, go nuts).\n\n* In the case where you’re running instances in the private subnet of a VPC, and SSH access to those instances is only possible from a bastion host in the public subnet, this is not the solution for you.\n\nFeel free to tweak/adjust as necessary.\n\n## References\n\n* [Unified AWS CLI Tools]({{% wayback \"https://github.com/aws/aws-cli/\" %}})\n* [JMESpath]({{% wayback \"https://github.com/boto/jmespath\" %}})\n* [EC2 API Reference: DescribeInstances]({{% wayback \"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-DescribeInstances.html\" %}})\n"},
    "links": {
        "prev": {"title": "Games of the Year, 2013", "permalink": "https://ryanparman.com/posts/2014/games-of-the-year-2013/"},
        "next": {"title": "If your website supports passwords, please stop sucking at it", "permalink": "https://ryanparman.com/posts/2014/if-your-website-supports-passwords-please-stop-sucking-at-it/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Uploading web files to a new Amazon EC2 instance",
    "description": "",
    "summary": {
        "content": "This is one of a few quick tutorials I’ve had sitting around on my hard drive for a while. I’m posting it now for the sake of anyone who may find these instructions useful. It’s important to note that these are the instructions you’d use for a standalone EC2 instance. If your app is low-traffic enough to only need a single server, a better option would be to leverage a single-instance Elastic Beanstalk environment which gives you more, better and simpler deployment options.",
        "isTruncated": true
    },
    "published": "2013-08-11T04:19:50Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/uploading-web-files-to-a-new-amazon-ec2-instance/",
    "relativePermalink": "/posts/2013/uploading-web-files-to-a-new-amazon-ec2-instance/",
    "aliases": ["/2013/08/10/uploading-web-files-to-a-new-amazon-ec2-instance/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": ["aws", "ec2", "ssh", "yum", "transmit", "cyberduck", "elastic beanstalk"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 466,
        "readingTime": "3 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130811-uploading-web-files-to-a-new-amazon-ec2-instance.md",
        "logicalName": "20130811-uploading-web-files-to-a-new-amazon-ec2-instance.md",
        "translationBaseName": "20130811-uploading-web-files-to-a-new-amazon-ec2-instance",
        "baseFileName": "20130811-uploading-web-files-to-a-new-amazon-ec2-instance",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#launching-an-instance\"\u003eLaunching an instance\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#logging-in-and-fixing-access-permissions\"\u003eLogging in and fixing access permissions\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#installing-any-required-software\"\u003eInstalling any required software\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#uploading-your-web-files\"\u003eUploading your web files\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eThis is one of a few quick tutorials I’ve had sitting around on my hard drive for a while. I’m posting it now for the sake of anyone who may find these instructions useful.\u003c/p\u003e\n\u003cp\u003eIt’s important to note that these are the instructions you’d use for a standalone EC2 instance. If your app is low-traffic enough to only need a single server, a better option would be to leverage a \u003ca href=\"https://web.archive.org/web/20130811041950/http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deployment.newapp.html\"\u003esingle-instance Elastic Beanstalk environment\u003c/a\u003e which gives you more, better and simpler deployment options.\u003c/p\u003e\n\u003ch2 id=\"launching-an-instance\"\u003eLaunching an instance\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eYou’ll need to launch a new EC2 instance. The simplest way is from the \u003ca href=\"http://console.aws.amazon.com/ec2\"\u003eAWS Management Console\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAs part of this process, you’ll create a new \u003cem\u003ekeypair\u003c/em\u003e. The key pair will have a \u003cstrong\u003ename\u003c/strong\u003e and a \u003cstrong\u003ekeypair file\u003c/strong\u003e (\u003ccode\u003e.pem\u003c/code\u003e). The \u003ccode\u003e.pem\u003c/code\u003e file is a replacement for a password. You’ll need this file to log into your EC2 instance.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce the instance has launched, you’ll want to select it in the EC2 console, and find the \u003cstrong\u003epublic hostname\u003c/strong\u003e in the details section of the screen.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"logging-in-and-fixing-access-permissions\"\u003eLogging in and fixing access permissions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eArmed with \u003cstrong\u003eTerminal/\u003ca href=\"https://web.archive.org/web/20130811041950/http://www.chiark.greenend.org.uk/~sgtatham/putty/\"\u003ePuTTY\u003c/a\u003e\u003c/strong\u003e, your \u003cstrong\u003ekeypair file\u003c/strong\u003e (\u003ccode\u003e.pem\u003c/code\u003e), and the \u003cstrong\u003epublic hostname\u003c/strong\u003e of the instance, you’re ready to log into your instance.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you’re using \u003cstrong\u003eTerminal\u003c/strong\u003e, log into your instance using the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003essh -i \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003epath-to-keypair-pem\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e ec2-user@\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003epublic-hostname\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you’re using a GUI tool for connecting (e.g., PuTTY), here are the important bits:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHostname: \u003ccode\u003e{public-hostname}\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUser: \u003ccode\u003eec2-user\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eKey: \u003ccode\u003e{path-to-keypair-pem}\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce you’re logged into the EC2 instance as the \u003ccode\u003eec2-user\u003c/code\u003e user, you’ll need to switch to the \u003ccode\u003eroot\u003c/code\u003e user.\\\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo -i\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMove into the default Apache \u003ccode\u003eDocumentRoot\u003c/code\u003e directory.\\\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecd /var/www/html\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChange the owner of this directory to the \u003ccode\u003eec2-user\u003c/code\u003e user. This will enable you to use a GUI-based tool to upload your web files.\\\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003echown ec2-user .\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"installing-any-required-software\"\u003eInstalling any required software\u003c/h2\u003e\n\u003cp\u003eA new EC2 instance is essentially a blank slate. Very little is installed on the instance by default (which keeps it lean and fast), but there are many, many packages available for install via \u003ccode\u003eyum\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eyum list available\u003c/code\u003e will show you all of the packages that are available to install.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eyum list installed\u003c/code\u003e will show you all of the packages that are already installed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eyum help\u003c/code\u003e will show you which commands are available to use.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you wanted to install PHP and Apache on your server, you would type (assuming you’re already the \u003cem\u003esuperuser\u003c/em\u003e (i.e., \u003ccode\u003esudo -i\u003c/code\u003e)):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eyum install php apache\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"uploading-your-web-files\"\u003eUploading your web files\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eUsing the SFTP client of your choice (I prefer \u003ca href=\"https://web.archive.org/web/20130811041950/http://panic.com/transmit/\"\u003eTransmit\u003c/a\u003e or \u003ca href=\"https://web.archive.org/web/20130811041950/http://cyberduck.ch\"\u003eCyberduck\u003c/a\u003e, depending on what I’m doing), connect to your EC2 instance over SFTP using the following credentials:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHostname: \u003ccode\u003e{public-hostname}\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUser: \u003ccode\u003eec2-user\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eKey: \u003ccode\u003e{path-to-keypair-pem}\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMove to the \u003ccode\u003e/var/www/html\u003c/code\u003e directory.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDrag your web files into this directory to upload them. \u003ccode\u003eindex.html\u003c/code\u003e will be loaded as the homepage when you load the \u003cstrong\u003epublic hostname\u003c/strong\u003e in your web browser.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n",
        "plain":"This is one of a few quick tutorials I’ve had sitting around on my hard drive for a while. I’m posting it now for the sake of anyone who may find these instructions useful.\nIt’s important to note that these are the instructions you’d use for a standalone EC2 instance. If your app is low-traffic enough to only need a single server, a better option would be to leverage a single-instance Elastic Beanstalk environment which gives you more, better and simpler deployment options.\nLaunching an instance   You’ll need to launch a new EC2 instance. The simplest way is from the AWS Management Console.\n  As part of this process, you’ll create a new keypair. The key pair will have a name and a keypair file (.pem). The .pem file is a replacement for a password. You’ll need this file to log into your EC2 instance.\n  Once the instance has launched, you’ll want to select it in the EC2 console, and find the public hostname in the details section of the screen.\n  Logging in and fixing access permissions   Armed with Terminal/PuTTY, your keypair file (.pem), and the public hostname of the instance, you’re ready to log into your instance.\n  If you’re using Terminal, log into your instance using the following command:\nssh -i {path-to-keypair-pem} ec2-user@{public-hostname}   If you’re using a GUI tool for connecting (e.g., PuTTY), here are the important bits:\n Hostname: {public-hostname} User: ec2-user Key: {path-to-keypair-pem}    Once you’re logged into the EC2 instance as the ec2-user user, you’ll need to switch to the root user.\\\nsudo -i   Move into the default Apache DocumentRoot directory.\\\ncd /var/www/html   Change the owner of this directory to the ec2-user user. This will enable you to use a GUI-based tool to upload your web files.\\\nchown ec2-user .   Installing any required software A new EC2 instance is essentially a blank slate. Very little is installed on the instance by default (which keeps it lean and fast), but there are many, many packages available for install via yum.\n yum list available will show you all of the packages that are available to install. yum list installed will show you all of the packages that are already installed. yum help will show you which commands are available to use.  If you wanted to install PHP and Apache on your server, you would type (assuming you’re already the superuser (i.e., sudo -i)):\nyum install php apache Uploading your web files   Using the SFTP client of your choice (I prefer Transmit or Cyberduck, depending on what I’m doing), connect to your EC2 instance over SFTP using the following credentials:\n Hostname: {public-hostname} User: ec2-user Key: {path-to-keypair-pem}    Move to the /var/www/html directory.\n  Drag your web files into this directory to upload them. index.html will be loaded as the homepage when you load the public hostname in your web browser.\n  ",
        "source":"\nThis is one of a few quick tutorials I’ve had sitting around on my hard drive for a while. I’m posting it now for the sake of anyone who may find these instructions useful.\n\nIt’s important to note that these are the instructions you’d use for a standalone EC2 instance. If your app is low-traffic enough to only need a single server, a better option would be to leverage a [single-instance Elastic Beanstalk environment]({{% wayback \"http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deployment.newapp.html\" %}}) which gives you more, better and simpler deployment options.\n\n\n## Launching an instance\n\n1. You’ll need to launch a new EC2 instance. The simplest way is from the [AWS Management Console](http://console.aws.amazon.com/ec2).\n\n2. As part of this process, you’ll create a new *keypair*. The key pair will have a **name** and a **keypair file** (`.pem`). The `.pem` file is a replacement for a password. You’ll need this file to log into your EC2 instance.\n\n3. Once the instance has launched, you’ll want to select it in the EC2 console, and find the **public hostname** in the details section of the screen.\n\n\n## Logging in and fixing access permissions\n\n1. Armed with **Terminal/[PuTTY]({{% wayback \"http://www.chiark.greenend.org.uk/~sgtatham/putty/\" %}})**, your **keypair file** (`.pem`), and the **public hostname** of the instance, you’re ready to log into your instance.\n\n2. If you’re using **Terminal**, log into your instance using the following command:\n\n    ```bash\n    ssh -i {path-to-keypair-pem} ec2-user@{public-hostname}\n    ```\n\n3. If you’re using a GUI tool for connecting (e.g., PuTTY), here are the important bits:\n\n    * Hostname: `{public-hostname}`\n    * User: `ec2-user`\n    * Key: `{path-to-keypair-pem}`\n\n4. Once you’re logged into the EC2 instance as the `ec2-user` user, you’ll need to switch to the `root` user.\\\n\n    ```bash\n    sudo -i\n    ```\n\n5. Move into the default Apache `DocumentRoot` directory.\\\n\n    ```bash\n    cd /var/www/html\n    ```\n\n6. Change the owner of this directory to the `ec2-user` user. This will enable you to use a GUI-based tool to upload your web files.\\\n\n    ```bash\n    chown ec2-user .\n    ```\n\n## Installing any required software\n\nA new EC2 instance is essentially a blank slate. Very little is installed on the instance by default (which keeps it lean and fast), but there are many, many packages available for install via `yum`.\n\n* `yum list available` will show you all of the packages that are available to install.\n* `yum list installed` will show you all of the packages that are already installed.\n* `yum help` will show you which commands are available to use.\n\nIf you wanted to install PHP and Apache on your server, you would type (assuming you’re already the *superuser* (i.e., `sudo -i`)):\n\n```bash\nyum install php apache\n```\n\n## Uploading your web files\n\n1. Using the SFTP client of your choice (I prefer [Transmit]({{% wayback \"http://panic.com/transmit/\" %}}) or [Cyberduck]({{% wayback \"http://cyberduck.ch\" %}}), depending on what I’m doing), connect to your EC2 instance over SFTP using the following credentials:\n\n    * Hostname: `{public-hostname}`\n    * User: `ec2-user`\n    * Key: `{path-to-keypair-pem}`\n\n2. Move to the `/var/www/html` directory.\n\n3. Drag your web files into this directory to upload them. `index.html` will be loaded as the homepage when you load the **public hostname** in your web browser.\n"},
    "links": {
        "prev": {"title": "Things I learned about how websites manage passwords", "permalink": "https://ryanparman.com/posts/2013/things-i-learned-about-how-websites-manage-passwords/"},
        "next": {"title": "Stephen Elop to become the next Microsoft CEO? I’d buy it.", "permalink": "https://ryanparman.com/posts/2013/stephen-elop-to-become-the-next-microsoft-ceo-id-buy-it/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Breaking my bad password habits with 1Password, Authy, OAuth and OpenID",
    "description": "",
    "summary": {
        "content": "I learned at a relatively young age what makes a good password versus a bad password, and I’ve tried to always use these qualities in the passwords that I choose. The Problem Unfortunately, even with the best intentions, you inevitably end up re-using one or a few passwords across every single website you log into. Some people do things as dumb as using the name of their significant other. Or their pet. Or a birthdate. Or something else equally guessable by one of the many supercomputers that exist (whereby “supercomputer”, I mean pretty much any computer invented in the past 5–7 years).",
        "isTruncated": true
    },
    "published": "2013-08-10T09:03:48Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/breaking-my-bad-password-habits-with-1password-authy-oauth-openid/",
    "relativePermalink": "/posts/2013/breaking-my-bad-password-habits-with-1password-authy-oauth-openid/",
    "aliases": ["/2013/08/10/breaking-my-bad-password-habits-with-1password-authy-oauth-openid/"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2013/1password@2x.png", "https://cdn.ryanparman.com/hugo/posts/2013/password-hacking@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2013/oauth@2x.png", "https://cdn.ryanparman.com/hugo/posts/2013/authy.jpg", "https://cdn.ryanparman.com/hugo/posts/2013/shepherd-book@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2013/excited@2x.jpg"],
    "videos": [],
    "categories": ["Privacy and Security"],
    "tags": ["1password", "passwords", "authy", "oauth", "openid", "hacking", "sony", "playstation", "multifactor authentication", "app.net", "apple", "aws", "dreamhost", "dropbox", "evernote", "facebook", "godaddy", "google", "microsoft", "hotmail", "xbox", "paypal", "stripe", "wordpress", "gravatar"],
    "series": ["Editors Choice", "Passwords"],
    "keywords": [],
    "meta": {
        "wordCount": 1278,
        "readingTime": "6 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130810-breaking-my-bad-password-habits-with-1password-authy-oauth-openid.md",
        "logicalName": "20130810-breaking-my-bad-password-habits-with-1password-authy-oauth-openid.md",
        "translationBaseName": "20130810-breaking-my-bad-password-habits-with-1password-authy-oauth-openid",
        "baseFileName": "20130810-breaking-my-bad-password-habits-with-1password-authy-oauth-openid",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#the-problem\"\u003eThe Problem\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#enter-1password\"\u003eEnter 1Password\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#openid-and-oauth\"\u003eOpenID and OAuth\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#sonys-playstation-network-got-hacked\"\u003eSony’s Playstation Network got hacked\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#authy-and-2-factor-authentication\"\u003eAuthy and 2-Factor Authentication\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#changing-every-password\"\u003eChanging every password\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#end\"\u003eEnd\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#update\"\u003eUpdate\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nI learned at a relatively young age what makes a good password versus a bad password, and I’ve tried to always use these qualities in the passwords that I choose.\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/password-hacking@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/password-hacking@2x.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"the-problem\"\u003eThe Problem\u003c/h2\u003e\n\u003cp\u003eUnfortunately, even with the best intentions, you inevitably end up re-using one or a few passwords across every single website you log into. Some people do things as dumb as using the name of their significant other. Or their pet. Or a birthdate. Or something else equally guessable by one of the many supercomputers that exist (whereby “supercomputer”, I mean pretty much any computer invented in the past 5–7 years).\u003c/p\u003e\n\u003cp\u003eMy approach was this: Whenever a website would auto-generate a random password for me, instead of changing it to something I could remember, I simply memorized it. They were usually a blend of 8 alphanumeric and/or symbol characters. Nothing too wild, but after a while, I established some muscle memory around typing them and began to rely on them. This is a better approach than most people use, but it’s still a terrible practice. Over time, I began appending special characters here, or prepending them there. Sometimes I would stick a dollar sign or two somewhere in the middle to mix things up.\u003c/p\u003e\n\u003ch2 id=\"enter-1password\"\u003eEnter 1Password\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/1password@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/1password@2x.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThen in 2008, I discovered a piece of software called \u003ca href=\"https://web.archive.org/web/20130810090348/https://agilebits.com/onepassword\"\u003e1Password\u003c/a\u003e. Initially I balked at the price. \u0026ldquo;You want me to \u003cem\u003epay\u003c/em\u003e for software?!\u0026rdquo; Clearly I was still in a Windows-user’s state of mind when it came to things like that. But I sucked it up, bought a license, and started using it regularly.\u003c/p\u003e\n\u003cp\u003eIt is the single best investment I’ve ever made. Software-wise, anyway.\u003c/p\u003e\n\u003ch2 id=\"openid-and-oauth\"\u003eOpenID and OAuth\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/oauth@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/oauth@2x.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAround the same time as when I discovered 1Password, I also learned about something called \u003ca href=\"https://web.archive.org/web/20130810090348/http://openid.net\"\u003eOpenID\u003c/a\u003e. The approach that OpenID takes is known as \u003cem\u003eFederated Identity\u003c/em\u003e. It’s essentially a system where two people don’t know or trust each other, but they both trust a third person, and that third person vouches for each of the first two. Eric and Jeff don’t know each other, but they both know me. I vouch for Jeff with Eric saying that he’s a cool dude, and vice-versa. Make sense?\u003c/p\u003e\n\u003cp\u003eIt allowed me to trust a company of my choosing to vouch for me, whenever I came to log into sites which supported OpenID. If something happened and I didn’t trust that middle company any more, I could simply change the company/service which vouched for me. In that way, I only had to remember the username and password for that one company that was vouching for me, instead of having to create all-new accounts for every service I signed-up for.\u003c/p\u003e\n\u003cp\u003eBut there were some quirks that made OpenID a bit harder to understand for normal folks, so the great minds of the Internet got together and bore a different system known as \u003ca href=\"https://web.archive.org/web/20130810090348/http://oauth.net\"\u003eOAuth\u003c/a\u003e. You know all of those sites you visit that have a big blue button that says “Login with Facebook”? That’s OAuth in action.\u003c/p\u003e\n\u003cp\u003eOAuth works a bit differently behind the scenes. You say, “I want to sign up for your site”. The website says, \u0026ldquo;Either give me your information so I can register you, or you can \u003cem\u003eauthorize\u003c/em\u003e me to get your information from someone else who already has it.\u0026rdquo; And you respond with, “Sure. Facebook has it.” You then click the blue button, tell Facebook that you authorize the new site to pull your information, and away you go. Between the two approaches, OAuth is used about a zillion times more often than OpenID is.\u003c/p\u003e\n\u003cp\u003eI would recommend using OpenID or OAuth for handling your login information if at all possible because it reduces the number of passwords you need to keep track of.\u003c/p\u003e\n\u003ch2 id=\"sonys-playstation-network-got-hacked\"\u003eSony’s Playstation Network got hacked\u003c/h2\u003e\n\u003cp\u003eRemember when this happened? Where Sony was storing passwords in \u003cem\u003em********king plain text?!\u003c/em\u003e (To paraphrase Shepherd Book from \u003cem\u003eFirefly/Serenity\u003c/em\u003e, there is a special place in Hell for people who rape, murder, talk during movies, and store passwords in plain text.)\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/shepherd-book@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/shepherd-book@2x.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIn short, one of my hard-to-guess-but-used-in-lots-of-places passwords was one of the ones that was obtained by hackers. As such, I had the fine work ahead of me to change the password for every single site that used the password that got hacked.\u003c/p\u003e\n\u003cp\u003e1Password to the rescue! It took me about 90 minutes, but I was able to lookup all of the sites where this password was being used, and change the password for all of them. This event ended up making me re-think how I managed my passwords.\u003c/p\u003e\n\u003ch2 id=\"authy-and-2-factor-authentication\"\u003eAuthy and 2-Factor Authentication\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/authy.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/authy.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eOver the past couple of years, I’ve started to see more and more websites begin leveraging something called 2-Factor Authentication (or, Multi-Factor Authentication). This is where besides having the username and password (i.e., the first “factor”), you also need a code from a key fob or something else that you have with you at all times (i.e., the second “factor”). This way, even if somebody figured out your username and password, they still wouldn’t be able to get into your account unless they also had either a key fob with a code, or more commonly, your cell phone.\u003c/p\u003e\n\u003cp\u003eBesides having a key fob for logging into my company’s VPN remotely, I’d never heard of 2-Factor Authentication until Amazon Web Services announced it as a new feature of their \u003cem\u003eIdentity and Access Management (IAM)\u003c/em\u003e service. The Google added support for it. Then Facebook added support. Then a few more services added support. Most of them leveraged an app that ran on modern smartphones called \u003cem\u003eGoogle Authenticator\u003c/em\u003e which would generate a code that you could type in after your username and password.\u003c/p\u003e\n\u003cp\u003eWhen \u003ca href=\"https://web.archive.org/web/20130810090348/https://alpha.app.net\"\u003eADN\u003c/a\u003e added support for it was when I learned about \u003ca href=\"https://web.archive.org/web/20130810090348/https://authy.com\"\u003eAuthy\u003c/a\u003e. Besides looking and working WAY better than Google Authenticator, it supported lots of different accounts. The switch was a no-brainer.\u003c/p\u003e\n\u003cp\u003eSites that I’m currently aware of that support 2-Factor Authentication are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eADN (aka, App.net)\u003c/li\u003e\n\u003cli\u003eApple (account management, only)\u003c/li\u003e\n\u003cli\u003eAmazon Web Services (AWS)\u003c/li\u003e\n\u003cli\u003eDreamhost\u003c/li\u003e\n\u003cli\u003eDropbox\u003c/li\u003e\n\u003cli\u003eEvernote (Premium accounts)\u003c/li\u003e\n\u003cli\u003eFacebook\u003c/li\u003e\n\u003cli\u003eGoDaddy\u003c/li\u003e\n\u003cli\u003eGoogle\u003c/li\u003e\n\u003cli\u003eMicrosoft (including Hotmail \u0026amp; Xbox)\u003c/li\u003e\n\u003cli\u003ePaypal\u003c/li\u003e\n\u003cli\u003eStripe.com\u003c/li\u003e\n\u003cli\u003eWordPress.com (including Gravatar)\u003c/li\u003e\n\u003cli\u003eand more!\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can even install the Authy plugin in your self-hosted WordPress installation to enable extra security for your blog. I would absolutely recommend enabling 2-Factor Authentication (using Authy, of course) for every single service you use that supports it.\u003c/p\u003e\n\u003ch2 id=\"changing-every-password\"\u003eChanging every password\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/excited@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/excited@2x.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e2 days ago, I decided to bite the bullet and put in the work to change \u003cem\u003eevery single password\u003c/em\u003e I had stored in 1Password (around 250). Using their built-in password generator, I created a brand-new, completely randomized password, using a mix of upper/lower-case letters, numbers and symbols. These new passwords are all 24–30 characters long, except for services that required shorter ones, or only allowed alphanumeric characters.\u003c/p\u003e\n\u003cp\u003eI have absolutely no idea what any of my passwords are. But I’m relying on 1Password to manage them for me, and to sync them to the copies of 1Password I have installed on my iPhone and iPads.\u003c/p\u003e\n\u003cp\u003eCouple long, randomly-generated passwords, with 2-Factor Authentication, and I’m never worried about getting hacked. If Sony gets their servers hacked again and that password gets stolen, no worries. I’ll just create a new randomly-generated password for it and keep right on going.\u003c/p\u003e\n\u003ch2 id=\"end\"\u003eEnd\u003c/h2\u003e\n\u003cp\u003eYes this was several hours of work, but I believe was well-worth it. If you can swing it, I would confidently — even \u003cem\u003eexuberantly\u003c/em\u003e — recommend 1Password to anyone just getting started with making their online life more secure. Definitely take a look at Authy as well, and start leveraging OpenID and OAuth logins on every site that supports them. You’ll be better off for it.\u003c/p\u003e\n\u003ch2 id=\"update\"\u003eUpdate\u003c/h2\u003e\n\u003cp\u003eSee my follow-up post: \u003ca href=\"/2013/08/10/things-i-learned-about-how-websites-manage-passwords/\"\u003e“Things I learned about how websites manage passwords”\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"I learned at a relatively young age what makes a good password versus a bad password, and I’ve tried to always use these qualities in the passwords that I choose.   The Problem Unfortunately, even with the best intentions, you inevitably end up re-using one or a few passwords across every single website you log into. Some people do things as dumb as using the name of their significant other. Or their pet. Or a birthdate. Or something else equally guessable by one of the many supercomputers that exist (whereby “supercomputer”, I mean pretty much any computer invented in the past 5–7 years).\nMy approach was this: Whenever a website would auto-generate a random password for me, instead of changing it to something I could remember, I simply memorized it. They were usually a blend of 8 alphanumeric and/or symbol characters. Nothing too wild, but after a while, I established some muscle memory around typing them and began to rely on them. This is a better approach than most people use, but it’s still a terrible practice. Over time, I began appending special characters here, or prepending them there. Sometimes I would stick a dollar sign or two somewhere in the middle to mix things up.\nEnter 1Password   Then in 2008, I discovered a piece of software called 1Password. Initially I balked at the price. \u0026ldquo;You want me to pay for software?!\u0026rdquo; Clearly I was still in a Windows-user’s state of mind when it came to things like that. But I sucked it up, bought a license, and started using it regularly.\nIt is the single best investment I’ve ever made. Software-wise, anyway.\nOpenID and OAuth   Around the same time as when I discovered 1Password, I also learned about something called OpenID. The approach that OpenID takes is known as Federated Identity. It’s essentially a system where two people don’t know or trust each other, but they both trust a third person, and that third person vouches for each of the first two. Eric and Jeff don’t know each other, but they both know me. I vouch for Jeff with Eric saying that he’s a cool dude, and vice-versa. Make sense?\nIt allowed me to trust a company of my choosing to vouch for me, whenever I came to log into sites which supported OpenID. If something happened and I didn’t trust that middle company any more, I could simply change the company/service which vouched for me. In that way, I only had to remember the username and password for that one company that was vouching for me, instead of having to create all-new accounts for every service I signed-up for.\nBut there were some quirks that made OpenID a bit harder to understand for normal folks, so the great minds of the Internet got together and bore a different system known as OAuth. You know all of those sites you visit that have a big blue button that says “Login with Facebook”? That’s OAuth in action.\nOAuth works a bit differently behind the scenes. You say, “I want to sign up for your site”. The website says, \u0026ldquo;Either give me your information so I can register you, or you can authorize me to get your information from someone else who already has it.\u0026rdquo; And you respond with, “Sure. Facebook has it.” You then click the blue button, tell Facebook that you authorize the new site to pull your information, and away you go. Between the two approaches, OAuth is used about a zillion times more often than OpenID is.\nI would recommend using OpenID or OAuth for handling your login information if at all possible because it reduces the number of passwords you need to keep track of.\nSony’s Playstation Network got hacked Remember when this happened? Where Sony was storing passwords in m********king plain text?! (To paraphrase Shepherd Book from Firefly/Serenity, there is a special place in Hell for people who rape, murder, talk during movies, and store passwords in plain text.)\n  In short, one of my hard-to-guess-but-used-in-lots-of-places passwords was one of the ones that was obtained by hackers. As such, I had the fine work ahead of me to change the password for every single site that used the password that got hacked.\n1Password to the rescue! It took me about 90 minutes, but I was able to lookup all of the sites where this password was being used, and change the password for all of them. This event ended up making me re-think how I managed my passwords.\nAuthy and 2-Factor Authentication   Over the past couple of years, I’ve started to see more and more websites begin leveraging something called 2-Factor Authentication (or, Multi-Factor Authentication). This is where besides having the username and password (i.e., the first “factor”), you also need a code from a key fob or something else that you have with you at all times (i.e., the second “factor”). This way, even if somebody figured out your username and password, they still wouldn’t be able to get into your account unless they also had either a key fob with a code, or more commonly, your cell phone.\nBesides having a key fob for logging into my company’s VPN remotely, I’d never heard of 2-Factor Authentication until Amazon Web Services announced it as a new feature of their Identity and Access Management (IAM) service. The Google added support for it. Then Facebook added support. Then a few more services added support. Most of them leveraged an app that ran on modern smartphones called Google Authenticator which would generate a code that you could type in after your username and password.\nWhen ADN added support for it was when I learned about Authy. Besides looking and working WAY better than Google Authenticator, it supported lots of different accounts. The switch was a no-brainer.\nSites that I’m currently aware of that support 2-Factor Authentication are:\n ADN (aka, App.net) Apple (account management, only) Amazon Web Services (AWS) Dreamhost Dropbox Evernote (Premium accounts) Facebook GoDaddy Google Microsoft (including Hotmail \u0026amp; Xbox) Paypal Stripe.com WordPress.com (including Gravatar) and more!  You can even install the Authy plugin in your self-hosted WordPress installation to enable extra security for your blog. I would absolutely recommend enabling 2-Factor Authentication (using Authy, of course) for every single service you use that supports it.\nChanging every password   2 days ago, I decided to bite the bullet and put in the work to change every single password I had stored in 1Password (around 250). Using their built-in password generator, I created a brand-new, completely randomized password, using a mix of upper/lower-case letters, numbers and symbols. These new passwords are all 24–30 characters long, except for services that required shorter ones, or only allowed alphanumeric characters.\nI have absolutely no idea what any of my passwords are. But I’m relying on 1Password to manage them for me, and to sync them to the copies of 1Password I have installed on my iPhone and iPads.\nCouple long, randomly-generated passwords, with 2-Factor Authentication, and I’m never worried about getting hacked. If Sony gets their servers hacked again and that password gets stolen, no worries. I’ll just create a new randomly-generated password for it and keep right on going.\nEnd Yes this was several hours of work, but I believe was well-worth it. If you can swing it, I would confidently — even exuberantly — recommend 1Password to anyone just getting started with making their online life more secure. Definitely take a look at Authy as well, and start leveraging OpenID and OAuth logins on every site that supports them. You’ll be better off for it.\nUpdate See my follow-up post: “Things I learned about how websites manage passwords”.\n",
        "source":"\n{{\u003c description \u003e}}\nI learned at a relatively young age what makes a good password versus a bad password, and I’ve tried to always use these qualities in the passwords that I choose.\n{{\u003c /description \u003e}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/password-hacking@2x.jpg\"\u003e}}\n\n## The Problem\n\nUnfortunately, even with the best intentions, you inevitably end up re-using one or a few passwords across every single website you log into. Some people do things as dumb as using the name of their significant other. Or their pet. Or a birthdate. Or something else equally guessable by one of the many supercomputers that exist (whereby “supercomputer”, I mean pretty much any computer invented in the past 5–7 years).\n\nMy approach was this: Whenever a website would auto-generate a random password for me, instead of changing it to something I could remember, I simply memorized it. They were usually a blend of 8 alphanumeric and/or symbol characters. Nothing too wild, but after a while, I established some muscle memory around typing them and began to rely on them. This is a better approach than most people use, but it’s still a terrible practice. Over time, I began appending special characters here, or prepending them there. Sometimes I would stick a dollar sign or two somewhere in the middle to mix things up.\n\n## Enter 1Password\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/1password@2x.png\"\u003e}}\n\nThen in 2008, I discovered a piece of software called [1Password]({{% wayback \"https://agilebits.com/onepassword\" %}}). Initially I balked at the price. \"You want me to *pay* for software?!\" Clearly I was still in a Windows-user’s state of mind when it came to things like that. But I sucked it up, bought a license, and started using it regularly.\n\nIt is the single best investment I’ve ever made. Software-wise, anyway.\n\n## OpenID and OAuth\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/oauth@2x.png\"\u003e}}\n\nAround the same time as when I discovered 1Password, I also learned about something called [OpenID]({{% wayback \"http://openid.net\" %}}). The approach that OpenID takes is known as *Federated Identity*. It’s essentially a system where two people don’t know or trust each other, but they both trust a third person, and that third person vouches for each of the first two. Eric and Jeff don’t know each other, but they both know me. I vouch for Jeff with Eric saying that he’s a cool dude, and vice-versa. Make sense?\n\nIt allowed me to trust a company of my choosing to vouch for me, whenever I came to log into sites which supported OpenID. If something happened and I didn’t trust that middle company any more, I could simply change the company/service which vouched for me. In that way, I only had to remember the username and password for that one company that was vouching for me, instead of having to create all-new accounts for every service I signed-up for.\n\nBut there were some quirks that made OpenID a bit harder to understand for normal folks, so the great minds of the Internet got together and bore a different system known as [OAuth]({{% wayback \"http://oauth.net\" %}}). You know all of those sites you visit that have a big blue button that says “Login with Facebook”? That’s OAuth in action.\n\nOAuth works a bit differently behind the scenes. You say, “I want to sign up for your site”. The website says, \"Either give me your information so I can register you, or you can *authorize* me to get your information from someone else who already has it.\" And you respond with, “Sure. Facebook has it.” You then click the blue button, tell Facebook that you authorize the new site to pull your information, and away you go. Between the two approaches, OAuth is used about a zillion times more often than OpenID is.\n\nI would recommend using OpenID or OAuth for handling your login information if at all possible because it reduces the number of passwords you need to keep track of.\n\n## Sony’s Playstation Network got hacked\n\nRemember when this happened? Where Sony was storing passwords in *m\\*\\*\\*\\*\\*\\*\\*\\*king plain text?!* (To paraphrase Shepherd Book from *Firefly/Serenity*, there is a special place in Hell for people who rape, murder, talk during movies, and store passwords in plain text.)\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/shepherd-book@2x.jpg\"\u003e}}\n\nIn short, one of my hard-to-guess-but-used-in-lots-of-places passwords was one of the ones that was obtained by hackers. As such, I had the fine work ahead of me to change the password for every single site that used the password that got hacked.\n\n1Password to the rescue! It took me about 90 minutes, but I was able to lookup all of the sites where this password was being used, and change the password for all of them. This event ended up making me re-think how I managed my passwords.\n\n## Authy and 2-Factor Authentication\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/authy.jpg\"\u003e}}\n\nOver the past couple of years, I’ve started to see more and more websites begin leveraging something called 2-Factor Authentication (or, Multi-Factor Authentication). This is where besides having the username and password (i.e., the first “factor”), you also need a code from a key fob or something else that you have with you at all times (i.e., the second “factor”). This way, even if somebody figured out your username and password, they still wouldn’t be able to get into your account unless they also had either a key fob with a code, or more commonly, your cell phone.\n\nBesides having a key fob for logging into my company’s VPN remotely, I’d never heard of 2-Factor Authentication until Amazon Web Services announced it as a new feature of their *Identity and Access Management (IAM)* service. The Google added support for it. Then Facebook added support. Then a few more services added support. Most of them leveraged an app that ran on modern smartphones called *Google Authenticator* which would generate a code that you could type in after your username and password.\n\nWhen [ADN]({{% wayback \"https://alpha.app.net\" %}}) added support for it was when I learned about [Authy]({{% wayback \"https://authy.com\" %}}). Besides looking and working WAY better than Google Authenticator, it supported lots of different accounts. The switch was a no-brainer.\n\nSites that I’m currently aware of that support 2-Factor Authentication are:\n\n* ADN (aka, App.net)\n* Apple (account management, only)\n* Amazon Web Services (AWS)\n* Dreamhost\n* Dropbox\n* Evernote (Premium accounts)\n* Facebook\n* GoDaddy\n* Google\n* Microsoft (including Hotmail \u0026 Xbox)\n* Paypal\n* Stripe.com\n* WordPress.com (including Gravatar)\n* and more!\n\nYou can even install the Authy plugin in your self-hosted WordPress installation to enable extra security for your blog. I would absolutely recommend enabling 2-Factor Authentication (using Authy, of course) for every single service you use that supports it.\n\n## Changing every password\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/excited@2x.jpg\"\u003e}}\n\n2 days ago, I decided to bite the bullet and put in the work to change *every single password* I had stored in 1Password (around 250). Using their built-in password generator, I created a brand-new, completely randomized password, using a mix of upper/lower-case letters, numbers and symbols. These new passwords are all 24–30 characters long, except for services that required shorter ones, or only allowed alphanumeric characters.\n\nI have absolutely no idea what any of my passwords are. But I’m relying on 1Password to manage them for me, and to sync them to the copies of 1Password I have installed on my iPhone and iPads.\n\nCouple long, randomly-generated passwords, with 2-Factor Authentication, and I’m never worried about getting hacked. If Sony gets their servers hacked again and that password gets stolen, no worries. I’ll just create a new randomly-generated password for it and keep right on going.\n\n## End\n\nYes this was several hours of work, but I believe was well-worth it. If you can swing it, I would confidently — even *exuberantly* — recommend 1Password to anyone just getting started with making their online life more secure. Definitely take a look at Authy as well, and start leveraging OpenID and OAuth logins on every site that supports them. You’ll be better off for it.\n\n## Update\n\nSee my follow-up post: [“Things I learned about how websites manage passwords”](/2013/08/10/things-i-learned-about-how-websites-manage-passwords/).\n"},
    "links": {
        "prev": {"title": "Running", "permalink": "https://ryanparman.com/posts/2013/running/"},
        "next": {"title": "Things I learned about how websites manage passwords", "permalink": "https://ryanparman.com/posts/2013/things-i-learned-about-how-websites-manage-passwords/"},
        "ignore": "me"
    }
}

            
        ]
    }
}
