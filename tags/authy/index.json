{
    "data": {
        
        
        "count": 3,
        "items": [
            
            {
    "kind": "page",
    "title": "If your website supports passwords, please stop sucking at it",
    "description": "",
    "summary": {
        "content": "I take password security very seriously. I’ve already written about how people can improve their password habits to keep themselves safe. This piece, however, is for those of you who build websites which provide password-related functionality. This is a list of password crimes that some websites commit. I’ve described these crimes, then point out some criminals (a.k.a., websites) which commit these crimes. (This list is not guaranteed to continue to be up-to-date. This post represents a snapshot in time, and is accurate as of early June 2014 when the first draft of this post was written.",
        "isTruncated": true
    },
    "published": "2014-06-23T10:03:21Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2014/if-your-website-supports-passwords-please-stop-sucking-at-it/",
    "relativePermalink": "/posts/2014/if-your-website-supports-passwords-please-stop-sucking-at-it/",
    "aliases": ["/2014/06/23/if-your-website-supports-passwords-please-stop-sucking-at-it/"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2014/password-brain@2x.png", "https://cdn.ryanparman.com/hugo/posts/2014/crime-scene@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2014/oauth@2x.png"],
    "videos": [],
    "categories": ["Privacy and Security"],
    "tags": ["passwords", "crime", "usability", "authy", "linkedin", "clarity", "kickstarter", "confusion", "facebook", "oauth", "security theater", "paypal"],
    "series": ["Editors Choice", "Passwords"],
    "keywords": [],
    "meta": {
        "wordCount": 1090,
        "readingTime": "6 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2014/20140623-if-your-website-supports-passwords-please-stop-sucking-at-it.md",
        "logicalName": "20140623-if-your-website-supports-passwords-please-stop-sucking-at-it.md",
        "translationBaseName": "20140623-if-your-website-supports-passwords-please-stop-sucking-at-it",
        "baseFileName": "20140623-if-your-website-supports-passwords-please-stop-sucking-at-it",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2014/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#basic-usability\"\u003eBasic usability\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#provide-clarity-at-all-times\"\u003eProvide clarity at all times\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#avoid-confusion\"\u003eAvoid confusion\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#provide-a-useful-forgot-password-page\"\u003eProvide a useful “forgot password” page\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#be-liberal-in-what-you-accept\"\u003eBe liberal in what you accept\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#support-oauth-consistently-or-not-at-all\"\u003eSupport OAuth consistently, or not at all\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#real-security-not-security-theater\"\u003eReal security, not “Security Theater”\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#dont-break-the-web\"\u003eDon’t break the web\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nI take password security very seriously. I’ve already written about \u003ca href=\"/tags/passwords/\"\u003ehow people can improve their password habits to keep themselves safe\u003c/a\u003e. This piece, however, is for those of you who build websites which provide password-related functionality.\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2014/crime-scene@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2014/crime-scene@2x.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis is a list of \u003cem\u003epassword crimes\u003c/em\u003e that some websites commit. I’ve described these crimes, then point out some criminals (a.k.a., websites) which commit these crimes.\u003c/p\u003e\n\u003cp\u003e(This list is not guaranteed to continue to be up-to-date. This post represents a snapshot in time, and is accurate as of early June 2014 when the first draft of this post was written.)\u003c/p\u003e\n\u003ch2 id=\"basic-usability\"\u003eBasic usability\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eI should always be able to change my password from within my user preferences. If I have to log out and pretend like I’ve forgotten my password in order to change it, your system is broken. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://authy.com\"\u003eAuthy\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://tunnelbear.com\"\u003eTunnelBear\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf \u003cem\u003eanything\u003c/em\u003e with your site or service requires a password, always allow me to change it from the web — even if changing my password is the only thing I can do. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://automatic.com\"\u003eAutomatic\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://zite.com\"\u003eZite\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://steampowered.com\"\u003eSteam\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMake it super-easy to find where to change my password. Do not bury the link to make it more difficult. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://linkedin.com\"\u003eLinkedIn\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf my password change was successful, please tell me \u003cem\u003every clearly\u003c/em\u003e. If not, please tell me \u003cem\u003every clearly\u003c/em\u003e. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://last.fm\"\u003eLast.fm\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://disqus.com\"\u003eDisqus\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://bible.com\"\u003eBible.com\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"provide-clarity-at-all-times\"\u003eProvide clarity at all times\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIf you require my current password in order to change my password, then ask for it up-front. Don’t hide it, then surprise me. Don’t ask for it after I’ve put in my new password. Be direct and forthcoming about it. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://kickstarter.com\"\u003eKickstarter\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://getcloudapp.com\"\u003eCloudApp\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://spotify.com\"\u003eSpotify\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBe explicitly clear about what the password requirements are. Not just the low-end — make sure you document the high-end requirements too. I often run into cases where my passwords are \u003cem\u003etoo secure\u003c/em\u003e for the system. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://www.morganstanley.com\"\u003eMorgan Stanley\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/https://life360.com\"\u003eLife 360\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://hrblock.com\"\u003eH\u0026amp;R Block\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://www.zendesk.com\"\u003eZendesk\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://beatport.com\"\u003eBeatport\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/https://secure.checkout.visa.com\"\u003eSecure Checkout by Visa\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you wait until \u003cem\u003eafter\u003c/em\u003e I try to change my password to tell me how long it’s allowed to be, you’re a huge jerk. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://hrblock.com\"\u003eH\u0026amp;R Block\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://myfitnesspal.com\"\u003eMyFitnessPal\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://sf.net\"\u003eSourceForge\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/https://secure.checkout.visa.com\"\u003eSecure Checkout by Visa\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf my password is too long, don’t complain that it’s \u003cem\u003etoo short\u003c/em\u003e and not tell me the maximum allowable length. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://beatsmusic.com\"\u003eBeats Music\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you list your password requirements on your website for people to use, make sure that the ones you list are actually correct. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://www.morganstanley.com\"\u003eMorgan Stanley\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/https://secure.checkout.visa.com\"\u003eSecure Checkout by Visa\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"avoid-confusion\"\u003eAvoid confusion\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2014/password-brain@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2014/password-brain@2x.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIf I’ve managed to inadvertently create two accounts, make it easy for me to merge them. If you suck, and require me to delete one of them, then \u003cem\u003eactually delete the account\u003c/em\u003e. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://adobe.com\"\u003eAdobe\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://readability.com\"\u003eReadability\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://facebook.com\"\u003eFacebook\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNever allow two accounts to have the same email address, then allow users to login with their email address. There is a 100% chance that this will ruin someone’s day. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://readability.com\"\u003eReadability\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://aws.amazon.com\"\u003eAmazon Web Services\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"provide-a-useful-forgot-password-page\"\u003eProvide a useful “forgot password” page\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eOn the “forgot password” page, always allow me to enter my email address. I may not always know some random username, but I will always know my email address. If I try to look-up my password and you ask for a username (i.e., lookup by email address is not supported), then make me go to \u003cem\u003eanother\u003c/em\u003e lookup for my username, your system is broken. Support both if possible, otherwise err on the side of email address. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://pottermore.com\"\u003ePottermore\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf your password change/reset form(s) accepts my new password, then the login page should too. If my password doesn’t pass validation for logging in, then it shouldn’t pass when I change it via account preferences or the “forgot password” page. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://www.morganstanley.com\"\u003eMorgan Stanley\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"be-liberal-in-what-you-accept\"\u003eBe liberal in what you accept\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eNever tell me that an email address with the “+” character is invalid. Yes it is. You’re dumb, you’re ugly, and your mother never loved you.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou shouldn’t be storing my real password, ever. You should only be storing a \u003cem\u003ecryptographic hash\u003c/em\u003e of my password for comparison. (Never use MD5 and never use SHA–1. You should be using SHA–256 at minimum, which is 64 hexadecimal digits long.) Because of this, the following principles should always be true.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAccept any password I give you, and be happy about it. Even if it’s 128 consecutive \u003ccode\u003eNULL\u003c/code\u003e bytes, or a long string of multi-byte characters, accept it gladly. Chances are, I’m smarter than your system, so allow me to be. (Anyone who limits supported characters.)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you accept only certain “special characters” (a.k.a., “characters” — none are “special”), be explicitly clear which ones they are. If I try to use “£” in my password, but it isn’t allowed, tell me: “Your password contains the ‘£’ character, which is not allowed.” (Usability bonus)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you have a length limit on passwords, the string limit should be no smaller than 64 bytes. Yes, 64 bytes. The next bank (or other service) to tell me that my password may only be 5–12 alphanumeric characters is going to immediately lose my business. (\u003ca href=\"https://web.archive.org/web/20140623100321/https://life360.com\"\u003eLife 360\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"support-oauth-consistently-or-not-at-all\"\u003eSupport OAuth consistently, or not at all\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2014/oauth@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2014/oauth@2x.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIf you allow me to sign-up/log-in to the desktop version of the website with \u003ca href=\"https://web.archive.org/web/20140623100321/http://facebook.com\"\u003eFacebook\u003c/a\u003e (or any other OAuth provider), then you must \u003cem\u003ealways\u003c/em\u003e have that login option available everywhere else (e.g., mobile web, native mobile app, being an OAuth provider, asking for my password to change my password). I don’t have a password otherwise.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIf I create an account with \u003ca href=\"https://web.archive.org/web/20140623100321/http://facebook.com\"\u003eFacebook\u003c/a\u003e, then go to the mobile app and can’t login without a first-party password, I’m screwed. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://tripit.com\"\u003eTripIt\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf I then try to add (change) my password, but I have to know my current (imaginary) password before “changing” it to add one, I’m also screwed. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://engadget.com\"\u003eEngadget\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://beatport.com\"\u003eBeatport\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"real-security-not-security-theater\"\u003eReal security, not “Security Theater”\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eInstead of asking me random/stupid “security questions”, give me the option of using two-factor authentication. It’s more secure and easier to use. (Pretty much every bank and financial institution on the planet.)\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eIf your second factor is SMS, fine. Not great, but fine. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://twitter.com\"\u003eTwitter\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20140623100321/http://etsy.com\"\u003eEtsy\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eEven better is to support \u003ca href=\"https://web.archive.org/web/20140623100321/http://authy.com\"\u003eAuthy\u003c/a\u003e, Google Authenticator, or an RSA key fob token as the second-factor authentication mechanism.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"dont-break-the-web\"\u003eDon’t break the web\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eNever prevent me from copy-pasting my password. I use a password manager so that I don’t \u003cem\u003ehave\u003c/em\u003e to remember it, you pretentious prick. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://paypal.com\"\u003ePaypal\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUnderstand that an increasing number of people are using password managers. This is a very good thing. This also means (a) the username and password fields should always maintain the same HTML field name, (b) if you change the URL, the old URL should redirect to the new one — \u003cem\u003eespecially\u003c/em\u003e if you’ve changed the login domain. Otherwise, you end up breaking your customers’ experiences. (\u003ca href=\"https://web.archive.org/web/20140623100321/http://aws.amazon.com\"\u003eAmazon Web Services\u003c/a\u003e)\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n",
        "plain":"I take password security very seriously. I’ve already written about how people can improve their password habits to keep themselves safe. This piece, however, is for those of you who build websites which provide password-related functionality.   This is a list of password crimes that some websites commit. I’ve described these crimes, then point out some criminals (a.k.a., websites) which commit these crimes.\n(This list is not guaranteed to continue to be up-to-date. This post represents a snapshot in time, and is accurate as of early June 2014 when the first draft of this post was written.)\nBasic usability   I should always be able to change my password from within my user preferences. If I have to log out and pretend like I’ve forgotten my password in order to change it, your system is broken. (Authy, TunnelBear)\n  If anything with your site or service requires a password, always allow me to change it from the web — even if changing my password is the only thing I can do. (Automatic, Zite, Steam)\n  Make it super-easy to find where to change my password. Do not bury the link to make it more difficult. (LinkedIn)\n  If my password change was successful, please tell me very clearly. If not, please tell me very clearly. (Last.fm, Disqus, Bible.com)\n  Provide clarity at all times   If you require my current password in order to change my password, then ask for it up-front. Don’t hide it, then surprise me. Don’t ask for it after I’ve put in my new password. Be direct and forthcoming about it. (Kickstarter, CloudApp, Spotify)\n  Be explicitly clear about what the password requirements are. Not just the low-end — make sure you document the high-end requirements too. I often run into cases where my passwords are too secure for the system. (Morgan Stanley, Life 360, H\u0026amp;R Block, Zendesk, Beatport, Secure Checkout by Visa)\n  If you wait until after I try to change my password to tell me how long it’s allowed to be, you’re a huge jerk. (H\u0026amp;R Block, MyFitnessPal, SourceForge, Secure Checkout by Visa)\n  If my password is too long, don’t complain that it’s too short and not tell me the maximum allowable length. (Beats Music)\n  If you list your password requirements on your website for people to use, make sure that the ones you list are actually correct. (Morgan Stanley, Secure Checkout by Visa)\n  Avoid confusion     If I’ve managed to inadvertently create two accounts, make it easy for me to merge them. If you suck, and require me to delete one of them, then actually delete the account. (Adobe, Readability, Facebook)\n  Never allow two accounts to have the same email address, then allow users to login with their email address. There is a 100% chance that this will ruin someone’s day. (Readability, Amazon Web Services)\n  Provide a useful “forgot password” page   On the “forgot password” page, always allow me to enter my email address. I may not always know some random username, but I will always know my email address. If I try to look-up my password and you ask for a username (i.e., lookup by email address is not supported), then make me go to another lookup for my username, your system is broken. Support both if possible, otherwise err on the side of email address. (Pottermore)\n  If your password change/reset form(s) accepts my new password, then the login page should too. If my password doesn’t pass validation for logging in, then it shouldn’t pass when I change it via account preferences or the “forgot password” page. (Morgan Stanley)\n  Be liberal in what you accept   Never tell me that an email address with the “+” character is invalid. Yes it is. You’re dumb, you’re ugly, and your mother never loved you.\n  You shouldn’t be storing my real password, ever. You should only be storing a cryptographic hash of my password for comparison. (Never use MD5 and never use SHA–1. You should be using SHA–256 at minimum, which is 64 hexadecimal digits long.) Because of this, the following principles should always be true.\n  Accept any password I give you, and be happy about it. Even if it’s 128 consecutive NULL bytes, or a long string of multi-byte characters, accept it gladly. Chances are, I’m smarter than your system, so allow me to be. (Anyone who limits supported characters.)\n  If you accept only certain “special characters” (a.k.a., “characters” — none are “special”), be explicitly clear which ones they are. If I try to use “£” in my password, but it isn’t allowed, tell me: “Your password contains the ‘£’ character, which is not allowed.” (Usability bonus)\n  If you have a length limit on passwords, the string limit should be no smaller than 64 bytes. Yes, 64 bytes. The next bank (or other service) to tell me that my password may only be 5–12 alphanumeric characters is going to immediately lose my business. (Life 360)\n    Support OAuth consistently, or not at all     If you allow me to sign-up/log-in to the desktop version of the website with Facebook (or any other OAuth provider), then you must always have that login option available everywhere else (e.g., mobile web, native mobile app, being an OAuth provider, asking for my password to change my password). I don’t have a password otherwise.\n  If I create an account with Facebook, then go to the mobile app and can’t login without a first-party password, I’m screwed. (TripIt)\n  If I then try to add (change) my password, but I have to know my current (imaginary) password before “changing” it to add one, I’m also screwed. (Engadget, Beatport)\n    Real security, not “Security Theater”   Instead of asking me random/stupid “security questions”, give me the option of using two-factor authentication. It’s more secure and easier to use. (Pretty much every bank and financial institution on the planet.)\n  If your second factor is SMS, fine. Not great, but fine. (Twitter, Etsy)\n  Even better is to support Authy, Google Authenticator, or an RSA key fob token as the second-factor authentication mechanism.\n    Don’t break the web   Never prevent me from copy-pasting my password. I use a password manager so that I don’t have to remember it, you pretentious prick. (Paypal)\n  Understand that an increasing number of people are using password managers. This is a very good thing. This also means (a) the username and password fields should always maintain the same HTML field name, (b) if you change the URL, the old URL should redirect to the new one — especially if you’ve changed the login domain. Otherwise, you end up breaking your customers’ experiences. (Amazon Web Services)\n  ",
        "source":"\n{{\u003c description \u003e}}\nI take password security very seriously. I’ve already written about \u003ca href=\"/tags/passwords/\"\u003ehow people can improve their password habits to keep themselves safe\u003c/a\u003e. This piece, however, is for those of you who build websites which provide password-related functionality.\n{{\u003c /description \u003e}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2014/crime-scene@2x.jpg\"\u003e}}\n\nThis is a list of *password crimes* that some websites commit. I’ve described these crimes, then point out some criminals (a.k.a., websites) which commit these crimes.\n\n(This list is not guaranteed to continue to be up-to-date. This post represents a snapshot in time, and is accurate as of early June 2014 when the first draft of this post was written.)\n\n## Basic usability\n\n* I should always be able to change my password from within my user preferences. If I have to log out and pretend like I’ve forgotten my password in order to change it, your system is broken. ([Authy]({{% wayback \"http://authy.com\" %}}), [TunnelBear]({{% wayback \"http://tunnelbear.com\" %}}))\n\n* If *anything* with your site or service requires a password, always allow me to change it from the web — even if changing my password is the only thing I can do. ([Automatic]({{% wayback \"http://automatic.com\" %}}), [Zite]({{% wayback \"http://zite.com\" %}}), [Steam]({{% wayback \"http://steampowered.com\" %}}))\n\n* Make it super-easy to find where to change my password. Do not bury the link to make it more difficult. ([LinkedIn]({{% wayback \"http://linkedin.com\" %}}))\n\n* If my password change was successful, please tell me *very clearly*. If not, please tell me *very clearly*. ([Last.fm]({{% wayback \"http://last.fm\" %}}), [Disqus]({{% wayback \"http://disqus.com\" %}}), [Bible.com]({{% wayback \"http://bible.com\" %}}))\n\n## Provide clarity at all times\n\n* If you require my current password in order to change my password, then ask for it up-front. Don’t hide it, then surprise me. Don’t ask for it after I’ve put in my new password. Be direct and forthcoming about it. ([Kickstarter]({{% wayback \"http://kickstarter.com\" %}}), [CloudApp]({{% wayback \"http://getcloudapp.com\" %}}), [Spotify]({{% wayback \"http://spotify.com\" %}}))\n\n* Be explicitly clear about what the password requirements are. Not just the low-end — make sure you document the high-end requirements too. I often run into cases where my passwords are *too secure* for the system. ([Morgan Stanley]({{% wayback \"http://www.morganstanley.com\" %}}), [Life 360]({{% wayback \"https://life360.com\" %}}), [H\u0026R Block]({{% wayback \"http://hrblock.com\" %}}), [Zendesk]({{% wayback \"http://www.zendesk.com\" %}}), [Beatport]({{% wayback \"http://beatport.com\" %}}), [Secure Checkout by Visa]({{% wayback \"https://secure.checkout.visa.com\" %}}))\n\n* If you wait until *after* I try to change my password to tell me how long it’s allowed to be, you’re a huge jerk. ([H\u0026R Block]({{% wayback \"http://hrblock.com\" %}}), [MyFitnessPal]({{% wayback \"http://myfitnesspal.com\" %}}), [SourceForge]({{% wayback \"http://sf.net\" %}}), [Secure Checkout by Visa]({{% wayback \"https://secure.checkout.visa.com\" %}}))\n\n* If my password is too long, don’t complain that it’s *too short* and not tell me the maximum allowable length. ([Beats Music]({{% wayback \"http://beatsmusic.com\" %}}))\n\n* If you list your password requirements on your website for people to use, make sure that the ones you list are actually correct. ([Morgan Stanley]({{% wayback \"http://www.morganstanley.com\" %}}), [Secure Checkout by Visa]({{% wayback \"https://secure.checkout.visa.com\" %}}))\n\n## Avoid confusion\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2014/password-brain@2x.png\"\u003e}}\n\n* If I’ve managed to inadvertently create two accounts, make it easy for me to merge them. If you suck, and require me to delete one of them, then *actually delete the account*. ([Adobe]({{% wayback \"http://adobe.com\" %}}), [Readability]({{% wayback \"http://readability.com\" %}}), [Facebook]({{% wayback \"http://facebook.com\" %}}))\n\n* Never allow two accounts to have the same email address, then allow users to login with their email address. There is a 100% chance that this will ruin someone’s day. ([Readability]({{% wayback \"http://readability.com\" %}}), [Amazon Web Services]({{% wayback \"http://aws.amazon.com\" %}}))\n\n## Provide a useful “forgot password” page\n\n* On the “forgot password” page, always allow me to enter my email address. I may not always know some random username, but I will always know my email address. If I try to look-up my password and you ask for a username (i.e., lookup by email address is not supported), then make me go to *another* lookup for my username, your system is broken. Support both if possible, otherwise err on the side of email address. ([Pottermore]({{% wayback \"http://pottermore.com\" %}}))\n\n* If your password change/reset form(s) accepts my new password, then the login page should too. If my password doesn’t pass validation for logging in, then it shouldn’t pass when I change it via account preferences or the “forgot password” page. ([Morgan Stanley]({{% wayback \"http://www.morganstanley.com\" %}}))\n\n## Be liberal in what you accept\n\n* Never tell me that an email address with the “+” character is invalid. Yes it is. You’re dumb, you’re ugly, and your mother never loved you.\n\n* You shouldn’t be storing my real password, ever. You should only be storing a *cryptographic hash* of my password for comparison. (Never use MD5 and never use SHA–1. You should be using SHA–256 at minimum, which is 64 hexadecimal digits long.) Because of this, the following principles should always be true.\n\n    * Accept any password I give you, and be happy about it. Even if it’s 128 consecutive `NULL` bytes, or a long string of multi-byte characters, accept it gladly. Chances are, I’m smarter than your system, so allow me to be. (Anyone who limits supported characters.)\n\n    * If you accept only certain “special characters” (a.k.a., “characters” — none are “special”), be explicitly clear which ones they are. If I try to use “£” in my password, but it isn’t allowed, tell me: “Your password contains the ‘£’ character, which is not allowed.” (Usability bonus)\n\n    * If you have a length limit on passwords, the string limit should be no smaller than 64 bytes. Yes, 64 bytes. The next bank (or other service) to tell me that my password may only be 5–12 alphanumeric characters is going to immediately lose my business. ([Life 360]({{% wayback \"https://life360.com\" %}}))\n\n## Support OAuth consistently, or not at all\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2014/oauth@2x.png\"\u003e}}\n\n* If you allow me to sign-up/log-in to the desktop version of the website with [Facebook]({{% wayback \"http://facebook.com\" %}}) (or any other OAuth provider), then you must *always* have that login option available everywhere else (e.g., mobile web, native mobile app, being an OAuth provider, asking for my password to change my password). I don’t have a password otherwise.\n\n    * If I create an account with [Facebook]({{% wayback \"http://facebook.com\" %}}), then go to the mobile app and can’t login without a first-party password, I’m screwed. ([TripIt]({{% wayback \"http://tripit.com\" %}}))\n\n    * If I then try to add (change) my password, but I have to know my current (imaginary) password before “changing” it to add one, I’m also screwed. ([Engadget]({{% wayback \"http://engadget.com\" %}}), [Beatport]({{% wayback \"http://beatport.com\" %}}))\n\n## Real security, not “Security Theater”\n\n* Instead of asking me random/stupid “security questions”, give me the option of using two-factor authentication. It’s more secure and easier to use. (Pretty much every bank and financial institution on the planet.)\n\n    * If your second factor is SMS, fine. Not great, but fine. ([Twitter]({{% wayback \"http://twitter.com\" %}}), [Etsy]({{% wayback \"http://etsy.com\" %}}))\n\n    * Even better is to support [Authy]({{% wayback \"http://authy.com\" %}}), Google Authenticator, or an RSA key fob token as the second-factor authentication mechanism.\n\n## Don’t break the web\n\n* Never prevent me from copy-pasting my password. I use a password manager so that I don’t *have* to remember it, you pretentious prick. ([Paypal]({{% wayback \"http://paypal.com\" %}}))\n\n* Understand that an increasing number of people are using password managers. This is a very good thing. This also means (a) the username and password fields should always maintain the same HTML field name, (b) if you change the URL, the old URL should redirect to the new one — *especially* if you’ve changed the login domain. Otherwise, you end up breaking your customers’ experiences. ([Amazon Web Services]({{% wayback \"http://aws.amazon.com\" %}}))\n"},
    "links": {
        "prev": {"title": "Easily SSH into Amazon EC2 instances using the Name tag", "permalink": "https://ryanparman.com/posts/2014/easily-ssh-into-amazon-ec2-instances-using-the-name-tag/"},
        "next": {"title": "Dear Lockitron", "permalink": "https://ryanparman.com/posts/2014/dear-lockitron/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Things I learned about how websites manage passwords",
    "description": "",
    "summary": {
        "content": "I recently wrote about the work I did to change every single password I had into ones that were unique for every site, and far more difficult to brute-force due to their long and randomized nature. As part of this exercise, I was essentially trying to change 250 passwords on 250 websites as quickly as possible. When you do this, you end up seeing trends and patterns across unrelated sites that you might not have noticed otherwise. Observations Here are some of the patterns I observed about how websites manage passwords:",
        "isTruncated": true
    },
    "published": "2013-08-10T09:30:18Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/things-i-learned-about-how-websites-manage-passwords/",
    "relativePermalink": "/posts/2013/things-i-learned-about-how-websites-manage-passwords/",
    "aliases": ["/2013/08/10/things-i-learned-about-how-websites-manage-passwords/"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2014/password-day@2x.jpg"],
    "videos": [],
    "categories": ["Privacy and Security"],
    "tags": ["passwords", "authy", "openid", "multifactor authentication", "enterprise"],
    "series": ["Editors Choice", "Passwords"],
    "keywords": [],
    "meta": {
        "wordCount": 668,
        "readingTime": "4 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130810-things-i-learned-about-how-websites-manage-passwords.md",
        "logicalName": "20130810-things-i-learned-about-how-websites-manage-passwords.md",
        "translationBaseName": "20130810-things-i-learned-about-how-websites-manage-passwords",
        "baseFileName": "20130810-things-i-learned-about-how-websites-manage-passwords",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#observations\"\u003eObservations\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\n\u003ca href=\"/2013/08/10/breaking-my-bad-password-habits-with-1password-authy-oauth-openid/\"\u003eI recently wrote about the work I did\u003c/a\u003e to change every single password I had into ones that were unique for every site, and far more difficult to brute-force due to their long and randomized nature.\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2014/password-day@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2014/password-day@2x.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAs part of this exercise, I was essentially trying to change 250 passwords on 250 websites as quickly as possible. When you do this, you end up seeing trends and patterns across unrelated sites that you might not have noticed otherwise.\u003c/p\u003e\n\u003ch2 id=\"observations\"\u003eObservations\u003c/h2\u003e\n\u003cp\u003eHere are some of the patterns I observed about how websites manage passwords:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eThe Login/Sign-in link is typically in the upper-right part of the global navigation bar.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eVery few sites support OpenID logins anymore. :(\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eVery few sites support OAuth logins, but many will pre-fill registration forms using OAuth. We still end up with multiple accounts and multiple passwords across the board. (Missing the point, much?)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eI can count on 3–4 hands the number of sites I use that offer Multi-Factor Authentication options for increased security.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDifferent companies use the words “account”, “preferences” and “settings” differently. Sometimes they use more than one of these words in their UI, and they don’t always mean the same thing for everybody. Sometimes I would log into a site and click through “preferences” and “settings” until I found where I could change my password.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSome websites didn’t offer a way to change my password \u003cem\u003eat all\u003c/em\u003e (e.g., Authy, Lockitron). In those cases, I had to pretend that I forgot my password so that I could logout and go through the “forgot password” flow to change it.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMost were pretty good about telling me about success/failure of changing my password. Some didn’t say anything, so I tried again to see if it worked.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe more enterprise-focused a company was, the worse its password requirements and/or tools were (e.g., Microsoft, VMware). There were a few customer-facing sites that had bad handling as well (e.g., Redbox).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eA surprising number of sites either offered \u003cem\u003eno information\u003c/em\u003e about the password requirements, \u003cem\u003esome information\u003c/em\u003e, or occasionally \u003cem\u003ewrong information\u003c/em\u003e. It wasn’t until I tried to paste a 24-character password with special characters that some sites freaked-out. Some told me that my password was invalid, but changed it successfully, leaving me in a weird state. Some took the password and told me everything was successful, then wouldn’t let me log in again.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSites tend to make one very specific assumption: \u003cem\u003eYou know what your new password is going to be.\u003c/em\u003e I didn’t. Paypal even goes so far as to use JavaScript to disallow copy-pasting so that you’re forced to know your password, even if you don’t want to. I had to open up the Web Inspector tools to manually override this \u003cem\u003ehateful\u003c/em\u003e behavior.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAs part of the aforementioned assumption, about 70% of sites require the old password while applying the new password. 30% of sites simply allow you to apply the new password since you’re already logged-in anyway. However, there are some sites which \u003cem\u003ehide\u003c/em\u003e the “old password” field until you’ve started typing a new password. Since you don’t know what the newly-generated password is, you then need to temporarily paste it somewhere, dig up the old password, paste that, then re-copy the new password from wherever you stashed it.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSome sites separate the username field and the password field by putting them on separate pages. Instead of talking about how that can actually \u003cem\u003ehurt\u003c/em\u003e security, I’ll just say that the only sites I saw that did this were banking/financial websites (except for \u003ca href=\"https://web.archive.org/web/20130810093018/http://simple.com\"\u003eSimple.com\u003c/a\u003e, of course), and Verizon Wireless. Go figure.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eWe, as a web-building culture, have absolutely no idea what we’re doing when it comes to handling passwords. Many of us don’t understand the first thing about the balance between convenience and security. Heck, some sites are both inconvenient \u003cem\u003eand\u003c/em\u003e insecure.\u003c/p\u003e\n\u003cp\u003eIMO, this should be the very next thing that Software Engineers and UX Practitioners work together on to solve: When you’re stuck with the “Password Anti-pattern”, how can we ensure a secure experience that isn’t cumbersome to human beings?\u003c/p\u003e\n",
        "plain":"I recently wrote about the work I did to change every single password I had into ones that were unique for every site, and far more difficult to brute-force due to their long and randomized nature.   As part of this exercise, I was essentially trying to change 250 passwords on 250 websites as quickly as possible. When you do this, you end up seeing trends and patterns across unrelated sites that you might not have noticed otherwise.\nObservations Here are some of the patterns I observed about how websites manage passwords:\n  The Login/Sign-in link is typically in the upper-right part of the global navigation bar.\n  Very few sites support OpenID logins anymore. :(\n  Very few sites support OAuth logins, but many will pre-fill registration forms using OAuth. We still end up with multiple accounts and multiple passwords across the board. (Missing the point, much?)\n  I can count on 3–4 hands the number of sites I use that offer Multi-Factor Authentication options for increased security.\n  Different companies use the words “account”, “preferences” and “settings” differently. Sometimes they use more than one of these words in their UI, and they don’t always mean the same thing for everybody. Sometimes I would log into a site and click through “preferences” and “settings” until I found where I could change my password.\n  Some websites didn’t offer a way to change my password at all (e.g., Authy, Lockitron). In those cases, I had to pretend that I forgot my password so that I could logout and go through the “forgot password” flow to change it.\n  Most were pretty good about telling me about success/failure of changing my password. Some didn’t say anything, so I tried again to see if it worked.\n  The more enterprise-focused a company was, the worse its password requirements and/or tools were (e.g., Microsoft, VMware). There were a few customer-facing sites that had bad handling as well (e.g., Redbox).\n  A surprising number of sites either offered no information about the password requirements, some information, or occasionally wrong information. It wasn’t until I tried to paste a 24-character password with special characters that some sites freaked-out. Some told me that my password was invalid, but changed it successfully, leaving me in a weird state. Some took the password and told me everything was successful, then wouldn’t let me log in again.\n  Sites tend to make one very specific assumption: You know what your new password is going to be. I didn’t. Paypal even goes so far as to use JavaScript to disallow copy-pasting so that you’re forced to know your password, even if you don’t want to. I had to open up the Web Inspector tools to manually override this hateful behavior.\n  As part of the aforementioned assumption, about 70% of sites require the old password while applying the new password. 30% of sites simply allow you to apply the new password since you’re already logged-in anyway. However, there are some sites which hide the “old password” field until you’ve started typing a new password. Since you don’t know what the newly-generated password is, you then need to temporarily paste it somewhere, dig up the old password, paste that, then re-copy the new password from wherever you stashed it.\n  Some sites separate the username field and the password field by putting them on separate pages. Instead of talking about how that can actually hurt security, I’ll just say that the only sites I saw that did this were banking/financial websites (except for Simple.com, of course), and Verizon Wireless. Go figure.\n  Conclusion We, as a web-building culture, have absolutely no idea what we’re doing when it comes to handling passwords. Many of us don’t understand the first thing about the balance between convenience and security. Heck, some sites are both inconvenient and insecure.\nIMO, this should be the very next thing that Software Engineers and UX Practitioners work together on to solve: When you’re stuck with the “Password Anti-pattern”, how can we ensure a secure experience that isn’t cumbersome to human beings?\n",
        "source":"\n{{\u003c description \u003e}}\n\u003ca href=\"/2013/08/10/breaking-my-bad-password-habits-with-1password-authy-oauth-openid/\"\u003eI recently wrote about the work I did\u003c/a\u003e to change every single password I had into ones that were unique for every site, and far more difficult to brute-force due to their long and randomized nature.\n{{\u003c /description \u003e}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2014/password-day@2x.jpg\"\u003e}}\n\nAs part of this exercise, I was essentially trying to change 250 passwords on 250 websites as quickly as possible. When you do this, you end up seeing trends and patterns across unrelated sites that you might not have noticed otherwise.\n\n## Observations\n\nHere are some of the patterns I observed about how websites manage passwords:\n\n1. The Login/Sign-in link is typically in the upper-right part of the global navigation bar.\n\n2. Very few sites support OpenID logins anymore. :(\n\n3. Very few sites support OAuth logins, but many will pre-fill registration forms using OAuth. We still end up with multiple accounts and multiple passwords across the board. (Missing the point, much?)\n\n4. I can count on 3–4 hands the number of sites I use that offer Multi-Factor Authentication options for increased security.\n\n5. Different companies use the words “account”, “preferences” and “settings” differently. Sometimes they use more than one of these words in their UI, and they don’t always mean the same thing for everybody. Sometimes I would log into a site and click through “preferences” and “settings” until I found where I could change my password.\n\n6. Some websites didn’t offer a way to change my password *at all* (e.g., Authy, Lockitron). In those cases, I had to pretend that I forgot my password so that I could logout and go through the “forgot password” flow to change it.\n\n7. Most were pretty good about telling me about success/failure of changing my password. Some didn’t say anything, so I tried again to see if it worked.\n\n8. The more enterprise-focused a company was, the worse its password requirements and/or tools were (e.g., Microsoft, VMware). There were a few customer-facing sites that had bad handling as well (e.g., Redbox).\n\n9. A surprising number of sites either offered *no information* about the password requirements, *some information*, or occasionally *wrong information*. It wasn’t until I tried to paste a 24-character password with special characters that some sites freaked-out. Some told me that my password was invalid, but changed it successfully, leaving me in a weird state. Some took the password and told me everything was successful, then wouldn’t let me log in again.\n\n10. Sites tend to make one very specific assumption: *You know what your new password is going to be.* I didn’t. Paypal even goes so far as to use JavaScript to disallow copy-pasting so that you’re forced to know your password, even if you don’t want to. I had to open up the Web Inspector tools to manually override this *hateful* behavior.\n\n11. As part of the aforementioned assumption, about 70% of sites require the old password while applying the new password. 30% of sites simply allow you to apply the new password since you’re already logged-in anyway. However, there are some sites which *hide* the “old password” field until you’ve started typing a new password. Since you don’t know what the newly-generated password is, you then need to temporarily paste it somewhere, dig up the old password, paste that, then re-copy the new password from wherever you stashed it.\n\n12. Some sites separate the username field and the password field by putting them on separate pages. Instead of talking about how that can actually *hurt* security, I’ll just say that the only sites I saw that did this were banking/financial websites (except for [Simple.com]({{% wayback \"http://simple.com\" %}}), of course), and Verizon Wireless. Go figure.\n\n## Conclusion\n\nWe, as a web-building culture, have absolutely no idea what we’re doing when it comes to handling passwords. Many of us don’t understand the first thing about the balance between convenience and security. Heck, some sites are both inconvenient *and* insecure.\n\nIMO, this should be the very next thing that Software Engineers and UX Practitioners work together on to solve: When you’re stuck with the “Password Anti-pattern”, how can we ensure a secure experience that isn’t cumbersome to human beings?\n"},
    "links": {
        "prev": {"title": "Breaking my bad password habits with 1Password, Authy, OAuth and OpenID", "permalink": "https://ryanparman.com/posts/2013/breaking-my-bad-password-habits-with-1password-authy-oauth-openid/"},
        "next": {"title": "Uploading web files to a new Amazon EC2 instance", "permalink": "https://ryanparman.com/posts/2013/uploading-web-files-to-a-new-amazon-ec2-instance/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Breaking my bad password habits with 1Password, Authy, OAuth and OpenID",
    "description": "",
    "summary": {
        "content": "I learned at a relatively young age what makes a good password versus a bad password, and I’ve tried to always use these qualities in the passwords that I choose. The Problem Unfortunately, even with the best intentions, you inevitably end up re-using one or a few passwords across every single website you log into. Some people do things as dumb as using the name of their significant other. Or their pet. Or a birthdate. Or something else equally guessable by one of the many supercomputers that exist (whereby “supercomputer”, I mean pretty much any computer invented in the past 5–7 years).",
        "isTruncated": true
    },
    "published": "2013-08-10T09:03:48Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/breaking-my-bad-password-habits-with-1password-authy-oauth-openid/",
    "relativePermalink": "/posts/2013/breaking-my-bad-password-habits-with-1password-authy-oauth-openid/",
    "aliases": ["/2013/08/10/breaking-my-bad-password-habits-with-1password-authy-oauth-openid/"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2013/1password@2x.png", "https://cdn.ryanparman.com/hugo/posts/2013/password-hacking@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2013/oauth@2x.png", "https://cdn.ryanparman.com/hugo/posts/2013/authy.jpg", "https://cdn.ryanparman.com/hugo/posts/2013/shepherd-book@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2013/excited@2x.jpg"],
    "videos": [],
    "categories": ["Privacy and Security"],
    "tags": ["1password", "passwords", "authy", "oauth", "openid", "hacking", "sony", "playstation", "multifactor authentication", "app.net", "apple", "aws", "dreamhost", "dropbox", "evernote", "facebook", "godaddy", "google", "microsoft", "hotmail", "xbox", "paypal", "stripe", "wordpress", "gravatar"],
    "series": ["Editors Choice", "Passwords"],
    "keywords": [],
    "meta": {
        "wordCount": 1278,
        "readingTime": "6 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130810-breaking-my-bad-password-habits-with-1password-authy-oauth-openid.md",
        "logicalName": "20130810-breaking-my-bad-password-habits-with-1password-authy-oauth-openid.md",
        "translationBaseName": "20130810-breaking-my-bad-password-habits-with-1password-authy-oauth-openid",
        "baseFileName": "20130810-breaking-my-bad-password-habits-with-1password-authy-oauth-openid",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#the-problem\"\u003eThe Problem\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#enter-1password\"\u003eEnter 1Password\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#openid-and-oauth\"\u003eOpenID and OAuth\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#sonys-playstation-network-got-hacked\"\u003eSony’s Playstation Network got hacked\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#authy-and-2-factor-authentication\"\u003eAuthy and 2-Factor Authentication\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#changing-every-password\"\u003eChanging every password\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#end\"\u003eEnd\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#update\"\u003eUpdate\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nI learned at a relatively young age what makes a good password versus a bad password, and I’ve tried to always use these qualities in the passwords that I choose.\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/password-hacking@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/password-hacking@2x.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"the-problem\"\u003eThe Problem\u003c/h2\u003e\n\u003cp\u003eUnfortunately, even with the best intentions, you inevitably end up re-using one or a few passwords across every single website you log into. Some people do things as dumb as using the name of their significant other. Or their pet. Or a birthdate. Or something else equally guessable by one of the many supercomputers that exist (whereby “supercomputer”, I mean pretty much any computer invented in the past 5–7 years).\u003c/p\u003e\n\u003cp\u003eMy approach was this: Whenever a website would auto-generate a random password for me, instead of changing it to something I could remember, I simply memorized it. They were usually a blend of 8 alphanumeric and/or symbol characters. Nothing too wild, but after a while, I established some muscle memory around typing them and began to rely on them. This is a better approach than most people use, but it’s still a terrible practice. Over time, I began appending special characters here, or prepending them there. Sometimes I would stick a dollar sign or two somewhere in the middle to mix things up.\u003c/p\u003e\n\u003ch2 id=\"enter-1password\"\u003eEnter 1Password\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/1password@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/1password@2x.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThen in 2008, I discovered a piece of software called \u003ca href=\"https://web.archive.org/web/20130810090348/https://agilebits.com/onepassword\"\u003e1Password\u003c/a\u003e. Initially I balked at the price. \u0026ldquo;You want me to \u003cem\u003epay\u003c/em\u003e for software?!\u0026rdquo; Clearly I was still in a Windows-user’s state of mind when it came to things like that. But I sucked it up, bought a license, and started using it regularly.\u003c/p\u003e\n\u003cp\u003eIt is the single best investment I’ve ever made. Software-wise, anyway.\u003c/p\u003e\n\u003ch2 id=\"openid-and-oauth\"\u003eOpenID and OAuth\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/oauth@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/oauth@2x.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAround the same time as when I discovered 1Password, I also learned about something called \u003ca href=\"https://web.archive.org/web/20130810090348/http://openid.net\"\u003eOpenID\u003c/a\u003e. The approach that OpenID takes is known as \u003cem\u003eFederated Identity\u003c/em\u003e. It’s essentially a system where two people don’t know or trust each other, but they both trust a third person, and that third person vouches for each of the first two. Eric and Jeff don’t know each other, but they both know me. I vouch for Jeff with Eric saying that he’s a cool dude, and vice-versa. Make sense?\u003c/p\u003e\n\u003cp\u003eIt allowed me to trust a company of my choosing to vouch for me, whenever I came to log into sites which supported OpenID. If something happened and I didn’t trust that middle company any more, I could simply change the company/service which vouched for me. In that way, I only had to remember the username and password for that one company that was vouching for me, instead of having to create all-new accounts for every service I signed-up for.\u003c/p\u003e\n\u003cp\u003eBut there were some quirks that made OpenID a bit harder to understand for normal folks, so the great minds of the Internet got together and bore a different system known as \u003ca href=\"https://web.archive.org/web/20130810090348/http://oauth.net\"\u003eOAuth\u003c/a\u003e. You know all of those sites you visit that have a big blue button that says “Login with Facebook”? That’s OAuth in action.\u003c/p\u003e\n\u003cp\u003eOAuth works a bit differently behind the scenes. You say, “I want to sign up for your site”. The website says, \u0026ldquo;Either give me your information so I can register you, or you can \u003cem\u003eauthorize\u003c/em\u003e me to get your information from someone else who already has it.\u0026rdquo; And you respond with, “Sure. Facebook has it.” You then click the blue button, tell Facebook that you authorize the new site to pull your information, and away you go. Between the two approaches, OAuth is used about a zillion times more often than OpenID is.\u003c/p\u003e\n\u003cp\u003eI would recommend using OpenID or OAuth for handling your login information if at all possible because it reduces the number of passwords you need to keep track of.\u003c/p\u003e\n\u003ch2 id=\"sonys-playstation-network-got-hacked\"\u003eSony’s Playstation Network got hacked\u003c/h2\u003e\n\u003cp\u003eRemember when this happened? Where Sony was storing passwords in \u003cem\u003em********king plain text?!\u003c/em\u003e (To paraphrase Shepherd Book from \u003cem\u003eFirefly/Serenity\u003c/em\u003e, there is a special place in Hell for people who rape, murder, talk during movies, and store passwords in plain text.)\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/shepherd-book@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/shepherd-book@2x.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIn short, one of my hard-to-guess-but-used-in-lots-of-places passwords was one of the ones that was obtained by hackers. As such, I had the fine work ahead of me to change the password for every single site that used the password that got hacked.\u003c/p\u003e\n\u003cp\u003e1Password to the rescue! It took me about 90 minutes, but I was able to lookup all of the sites where this password was being used, and change the password for all of them. This event ended up making me re-think how I managed my passwords.\u003c/p\u003e\n\u003ch2 id=\"authy-and-2-factor-authentication\"\u003eAuthy and 2-Factor Authentication\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/authy.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/authy.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eOver the past couple of years, I’ve started to see more and more websites begin leveraging something called 2-Factor Authentication (or, Multi-Factor Authentication). This is where besides having the username and password (i.e., the first “factor”), you also need a code from a key fob or something else that you have with you at all times (i.e., the second “factor”). This way, even if somebody figured out your username and password, they still wouldn’t be able to get into your account unless they also had either a key fob with a code, or more commonly, your cell phone.\u003c/p\u003e\n\u003cp\u003eBesides having a key fob for logging into my company’s VPN remotely, I’d never heard of 2-Factor Authentication until Amazon Web Services announced it as a new feature of their \u003cem\u003eIdentity and Access Management (IAM)\u003c/em\u003e service. The Google added support for it. Then Facebook added support. Then a few more services added support. Most of them leveraged an app that ran on modern smartphones called \u003cem\u003eGoogle Authenticator\u003c/em\u003e which would generate a code that you could type in after your username and password.\u003c/p\u003e\n\u003cp\u003eWhen \u003ca href=\"https://web.archive.org/web/20130810090348/https://alpha.app.net\"\u003eADN\u003c/a\u003e added support for it was when I learned about \u003ca href=\"https://web.archive.org/web/20130810090348/https://authy.com\"\u003eAuthy\u003c/a\u003e. Besides looking and working WAY better than Google Authenticator, it supported lots of different accounts. The switch was a no-brainer.\u003c/p\u003e\n\u003cp\u003eSites that I’m currently aware of that support 2-Factor Authentication are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eADN (aka, App.net)\u003c/li\u003e\n\u003cli\u003eApple (account management, only)\u003c/li\u003e\n\u003cli\u003eAmazon Web Services (AWS)\u003c/li\u003e\n\u003cli\u003eDreamhost\u003c/li\u003e\n\u003cli\u003eDropbox\u003c/li\u003e\n\u003cli\u003eEvernote (Premium accounts)\u003c/li\u003e\n\u003cli\u003eFacebook\u003c/li\u003e\n\u003cli\u003eGoDaddy\u003c/li\u003e\n\u003cli\u003eGoogle\u003c/li\u003e\n\u003cli\u003eMicrosoft (including Hotmail \u0026amp; Xbox)\u003c/li\u003e\n\u003cli\u003ePaypal\u003c/li\u003e\n\u003cli\u003eStripe.com\u003c/li\u003e\n\u003cli\u003eWordPress.com (including Gravatar)\u003c/li\u003e\n\u003cli\u003eand more!\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can even install the Authy plugin in your self-hosted WordPress installation to enable extra security for your blog. I would absolutely recommend enabling 2-Factor Authentication (using Authy, of course) for every single service you use that supports it.\u003c/p\u003e\n\u003ch2 id=\"changing-every-password\"\u003eChanging every password\u003c/h2\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2013/excited@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2013/excited@2x.jpg\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e2 days ago, I decided to bite the bullet and put in the work to change \u003cem\u003eevery single password\u003c/em\u003e I had stored in 1Password (around 250). Using their built-in password generator, I created a brand-new, completely randomized password, using a mix of upper/lower-case letters, numbers and symbols. These new passwords are all 24–30 characters long, except for services that required shorter ones, or only allowed alphanumeric characters.\u003c/p\u003e\n\u003cp\u003eI have absolutely no idea what any of my passwords are. But I’m relying on 1Password to manage them for me, and to sync them to the copies of 1Password I have installed on my iPhone and iPads.\u003c/p\u003e\n\u003cp\u003eCouple long, randomly-generated passwords, with 2-Factor Authentication, and I’m never worried about getting hacked. If Sony gets their servers hacked again and that password gets stolen, no worries. I’ll just create a new randomly-generated password for it and keep right on going.\u003c/p\u003e\n\u003ch2 id=\"end\"\u003eEnd\u003c/h2\u003e\n\u003cp\u003eYes this was several hours of work, but I believe was well-worth it. If you can swing it, I would confidently — even \u003cem\u003eexuberantly\u003c/em\u003e — recommend 1Password to anyone just getting started with making their online life more secure. Definitely take a look at Authy as well, and start leveraging OpenID and OAuth logins on every site that supports them. You’ll be better off for it.\u003c/p\u003e\n\u003ch2 id=\"update\"\u003eUpdate\u003c/h2\u003e\n\u003cp\u003eSee my follow-up post: \u003ca href=\"/2013/08/10/things-i-learned-about-how-websites-manage-passwords/\"\u003e“Things I learned about how websites manage passwords”\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"I learned at a relatively young age what makes a good password versus a bad password, and I’ve tried to always use these qualities in the passwords that I choose.   The Problem Unfortunately, even with the best intentions, you inevitably end up re-using one or a few passwords across every single website you log into. Some people do things as dumb as using the name of their significant other. Or their pet. Or a birthdate. Or something else equally guessable by one of the many supercomputers that exist (whereby “supercomputer”, I mean pretty much any computer invented in the past 5–7 years).\nMy approach was this: Whenever a website would auto-generate a random password for me, instead of changing it to something I could remember, I simply memorized it. They were usually a blend of 8 alphanumeric and/or symbol characters. Nothing too wild, but after a while, I established some muscle memory around typing them and began to rely on them. This is a better approach than most people use, but it’s still a terrible practice. Over time, I began appending special characters here, or prepending them there. Sometimes I would stick a dollar sign or two somewhere in the middle to mix things up.\nEnter 1Password   Then in 2008, I discovered a piece of software called 1Password. Initially I balked at the price. \u0026ldquo;You want me to pay for software?!\u0026rdquo; Clearly I was still in a Windows-user’s state of mind when it came to things like that. But I sucked it up, bought a license, and started using it regularly.\nIt is the single best investment I’ve ever made. Software-wise, anyway.\nOpenID and OAuth   Around the same time as when I discovered 1Password, I also learned about something called OpenID. The approach that OpenID takes is known as Federated Identity. It’s essentially a system where two people don’t know or trust each other, but they both trust a third person, and that third person vouches for each of the first two. Eric and Jeff don’t know each other, but they both know me. I vouch for Jeff with Eric saying that he’s a cool dude, and vice-versa. Make sense?\nIt allowed me to trust a company of my choosing to vouch for me, whenever I came to log into sites which supported OpenID. If something happened and I didn’t trust that middle company any more, I could simply change the company/service which vouched for me. In that way, I only had to remember the username and password for that one company that was vouching for me, instead of having to create all-new accounts for every service I signed-up for.\nBut there were some quirks that made OpenID a bit harder to understand for normal folks, so the great minds of the Internet got together and bore a different system known as OAuth. You know all of those sites you visit that have a big blue button that says “Login with Facebook”? That’s OAuth in action.\nOAuth works a bit differently behind the scenes. You say, “I want to sign up for your site”. The website says, \u0026ldquo;Either give me your information so I can register you, or you can authorize me to get your information from someone else who already has it.\u0026rdquo; And you respond with, “Sure. Facebook has it.” You then click the blue button, tell Facebook that you authorize the new site to pull your information, and away you go. Between the two approaches, OAuth is used about a zillion times more often than OpenID is.\nI would recommend using OpenID or OAuth for handling your login information if at all possible because it reduces the number of passwords you need to keep track of.\nSony’s Playstation Network got hacked Remember when this happened? Where Sony was storing passwords in m********king plain text?! (To paraphrase Shepherd Book from Firefly/Serenity, there is a special place in Hell for people who rape, murder, talk during movies, and store passwords in plain text.)\n  In short, one of my hard-to-guess-but-used-in-lots-of-places passwords was one of the ones that was obtained by hackers. As such, I had the fine work ahead of me to change the password for every single site that used the password that got hacked.\n1Password to the rescue! It took me about 90 minutes, but I was able to lookup all of the sites where this password was being used, and change the password for all of them. This event ended up making me re-think how I managed my passwords.\nAuthy and 2-Factor Authentication   Over the past couple of years, I’ve started to see more and more websites begin leveraging something called 2-Factor Authentication (or, Multi-Factor Authentication). This is where besides having the username and password (i.e., the first “factor”), you also need a code from a key fob or something else that you have with you at all times (i.e., the second “factor”). This way, even if somebody figured out your username and password, they still wouldn’t be able to get into your account unless they also had either a key fob with a code, or more commonly, your cell phone.\nBesides having a key fob for logging into my company’s VPN remotely, I’d never heard of 2-Factor Authentication until Amazon Web Services announced it as a new feature of their Identity and Access Management (IAM) service. The Google added support for it. Then Facebook added support. Then a few more services added support. Most of them leveraged an app that ran on modern smartphones called Google Authenticator which would generate a code that you could type in after your username and password.\nWhen ADN added support for it was when I learned about Authy. Besides looking and working WAY better than Google Authenticator, it supported lots of different accounts. The switch was a no-brainer.\nSites that I’m currently aware of that support 2-Factor Authentication are:\n ADN (aka, App.net) Apple (account management, only) Amazon Web Services (AWS) Dreamhost Dropbox Evernote (Premium accounts) Facebook GoDaddy Google Microsoft (including Hotmail \u0026amp; Xbox) Paypal Stripe.com WordPress.com (including Gravatar) and more!  You can even install the Authy plugin in your self-hosted WordPress installation to enable extra security for your blog. I would absolutely recommend enabling 2-Factor Authentication (using Authy, of course) for every single service you use that supports it.\nChanging every password   2 days ago, I decided to bite the bullet and put in the work to change every single password I had stored in 1Password (around 250). Using their built-in password generator, I created a brand-new, completely randomized password, using a mix of upper/lower-case letters, numbers and symbols. These new passwords are all 24–30 characters long, except for services that required shorter ones, or only allowed alphanumeric characters.\nI have absolutely no idea what any of my passwords are. But I’m relying on 1Password to manage them for me, and to sync them to the copies of 1Password I have installed on my iPhone and iPads.\nCouple long, randomly-generated passwords, with 2-Factor Authentication, and I’m never worried about getting hacked. If Sony gets their servers hacked again and that password gets stolen, no worries. I’ll just create a new randomly-generated password for it and keep right on going.\nEnd Yes this was several hours of work, but I believe was well-worth it. If you can swing it, I would confidently — even exuberantly — recommend 1Password to anyone just getting started with making their online life more secure. Definitely take a look at Authy as well, and start leveraging OpenID and OAuth logins on every site that supports them. You’ll be better off for it.\nUpdate See my follow-up post: “Things I learned about how websites manage passwords”.\n",
        "source":"\n{{\u003c description \u003e}}\nI learned at a relatively young age what makes a good password versus a bad password, and I’ve tried to always use these qualities in the passwords that I choose.\n{{\u003c /description \u003e}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/password-hacking@2x.jpg\"\u003e}}\n\n## The Problem\n\nUnfortunately, even with the best intentions, you inevitably end up re-using one or a few passwords across every single website you log into. Some people do things as dumb as using the name of their significant other. Or their pet. Or a birthdate. Or something else equally guessable by one of the many supercomputers that exist (whereby “supercomputer”, I mean pretty much any computer invented in the past 5–7 years).\n\nMy approach was this: Whenever a website would auto-generate a random password for me, instead of changing it to something I could remember, I simply memorized it. They were usually a blend of 8 alphanumeric and/or symbol characters. Nothing too wild, but after a while, I established some muscle memory around typing them and began to rely on them. This is a better approach than most people use, but it’s still a terrible practice. Over time, I began appending special characters here, or prepending them there. Sometimes I would stick a dollar sign or two somewhere in the middle to mix things up.\n\n## Enter 1Password\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/1password@2x.png\"\u003e}}\n\nThen in 2008, I discovered a piece of software called [1Password]({{% wayback \"https://agilebits.com/onepassword\" %}}). Initially I balked at the price. \"You want me to *pay* for software?!\" Clearly I was still in a Windows-user’s state of mind when it came to things like that. But I sucked it up, bought a license, and started using it regularly.\n\nIt is the single best investment I’ve ever made. Software-wise, anyway.\n\n## OpenID and OAuth\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/oauth@2x.png\"\u003e}}\n\nAround the same time as when I discovered 1Password, I also learned about something called [OpenID]({{% wayback \"http://openid.net\" %}}). The approach that OpenID takes is known as *Federated Identity*. It’s essentially a system where two people don’t know or trust each other, but they both trust a third person, and that third person vouches for each of the first two. Eric and Jeff don’t know each other, but they both know me. I vouch for Jeff with Eric saying that he’s a cool dude, and vice-versa. Make sense?\n\nIt allowed me to trust a company of my choosing to vouch for me, whenever I came to log into sites which supported OpenID. If something happened and I didn’t trust that middle company any more, I could simply change the company/service which vouched for me. In that way, I only had to remember the username and password for that one company that was vouching for me, instead of having to create all-new accounts for every service I signed-up for.\n\nBut there were some quirks that made OpenID a bit harder to understand for normal folks, so the great minds of the Internet got together and bore a different system known as [OAuth]({{% wayback \"http://oauth.net\" %}}). You know all of those sites you visit that have a big blue button that says “Login with Facebook”? That’s OAuth in action.\n\nOAuth works a bit differently behind the scenes. You say, “I want to sign up for your site”. The website says, \"Either give me your information so I can register you, or you can *authorize* me to get your information from someone else who already has it.\" And you respond with, “Sure. Facebook has it.” You then click the blue button, tell Facebook that you authorize the new site to pull your information, and away you go. Between the two approaches, OAuth is used about a zillion times more often than OpenID is.\n\nI would recommend using OpenID or OAuth for handling your login information if at all possible because it reduces the number of passwords you need to keep track of.\n\n## Sony’s Playstation Network got hacked\n\nRemember when this happened? Where Sony was storing passwords in *m\\*\\*\\*\\*\\*\\*\\*\\*king plain text?!* (To paraphrase Shepherd Book from *Firefly/Serenity*, there is a special place in Hell for people who rape, murder, talk during movies, and store passwords in plain text.)\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/shepherd-book@2x.jpg\"\u003e}}\n\nIn short, one of my hard-to-guess-but-used-in-lots-of-places passwords was one of the ones that was obtained by hackers. As such, I had the fine work ahead of me to change the password for every single site that used the password that got hacked.\n\n1Password to the rescue! It took me about 90 minutes, but I was able to lookup all of the sites where this password was being used, and change the password for all of them. This event ended up making me re-think how I managed my passwords.\n\n## Authy and 2-Factor Authentication\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/authy.jpg\"\u003e}}\n\nOver the past couple of years, I’ve started to see more and more websites begin leveraging something called 2-Factor Authentication (or, Multi-Factor Authentication). This is where besides having the username and password (i.e., the first “factor”), you also need a code from a key fob or something else that you have with you at all times (i.e., the second “factor”). This way, even if somebody figured out your username and password, they still wouldn’t be able to get into your account unless they also had either a key fob with a code, or more commonly, your cell phone.\n\nBesides having a key fob for logging into my company’s VPN remotely, I’d never heard of 2-Factor Authentication until Amazon Web Services announced it as a new feature of their *Identity and Access Management (IAM)* service. The Google added support for it. Then Facebook added support. Then a few more services added support. Most of them leveraged an app that ran on modern smartphones called *Google Authenticator* which would generate a code that you could type in after your username and password.\n\nWhen [ADN]({{% wayback \"https://alpha.app.net\" %}}) added support for it was when I learned about [Authy]({{% wayback \"https://authy.com\" %}}). Besides looking and working WAY better than Google Authenticator, it supported lots of different accounts. The switch was a no-brainer.\n\nSites that I’m currently aware of that support 2-Factor Authentication are:\n\n* ADN (aka, App.net)\n* Apple (account management, only)\n* Amazon Web Services (AWS)\n* Dreamhost\n* Dropbox\n* Evernote (Premium accounts)\n* Facebook\n* GoDaddy\n* Google\n* Microsoft (including Hotmail \u0026 Xbox)\n* Paypal\n* Stripe.com\n* WordPress.com (including Gravatar)\n* and more!\n\nYou can even install the Authy plugin in your self-hosted WordPress installation to enable extra security for your blog. I would absolutely recommend enabling 2-Factor Authentication (using Authy, of course) for every single service you use that supports it.\n\n## Changing every password\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2013/excited@2x.jpg\"\u003e}}\n\n2 days ago, I decided to bite the bullet and put in the work to change *every single password* I had stored in 1Password (around 250). Using their built-in password generator, I created a brand-new, completely randomized password, using a mix of upper/lower-case letters, numbers and symbols. These new passwords are all 24–30 characters long, except for services that required shorter ones, or only allowed alphanumeric characters.\n\nI have absolutely no idea what any of my passwords are. But I’m relying on 1Password to manage them for me, and to sync them to the copies of 1Password I have installed on my iPhone and iPads.\n\nCouple long, randomly-generated passwords, with 2-Factor Authentication, and I’m never worried about getting hacked. If Sony gets their servers hacked again and that password gets stolen, no worries. I’ll just create a new randomly-generated password for it and keep right on going.\n\n## End\n\nYes this was several hours of work, but I believe was well-worth it. If you can swing it, I would confidently — even *exuberantly* — recommend 1Password to anyone just getting started with making their online life more secure. Definitely take a look at Authy as well, and start leveraging OpenID and OAuth logins on every site that supports them. You’ll be better off for it.\n\n## Update\n\nSee my follow-up post: [“Things I learned about how websites manage passwords”](/2013/08/10/things-i-learned-about-how-websites-manage-passwords/).\n"},
    "links": {
        "prev": {"title": "Running", "permalink": "https://ryanparman.com/posts/2013/running/"},
        "next": {"title": "Things I learned about how websites manage passwords", "permalink": "https://ryanparman.com/posts/2013/things-i-learned-about-how-websites-manage-passwords/"},
        "ignore": "me"
    }
}

            
        ]
    }
}
