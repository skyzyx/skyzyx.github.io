{
    "data": {
        
        
        "count": 6,
        "items": [
            
            {
    "kind": "page",
    "title": "How to create local TLS certificates for development on macOS",
    "description": "",
    "summary": {
        "content": "By creating a Certificate Authority (a.k.a., a “CA”) and trusting it locally, any certificate that we create using this CA will also be trusted locally. This can simplify the development of HTTPS websites on your local machine. This content is a fork of, and is largely based on, “Generating Self-Signed SSL Certificates for Use with Bluemix Custom Domains”, by Tony Erwin, dated 2014-09-15. The examples in this tutorial are from macOS Sierra (10.12). Create a local Certificate Authority Start by opening Keychain Access.",
        "isTruncated": true
    },
    "published": "2019-08-05T19:52:30Z",
    "updated": "2019-08-05T13:51:41-07:00",
    "permalink": "https://ryanparman.com/posts/2019/how-to-create-local-tls-certificates-for-development-on-macos/",
    "relativePermalink": "/posts/2019/how-to-create-local-tls-certificates-for-development-on-macos/",
    "aliases": ["/2019/08/05/how-to-create-local-tls-certificates-for-development-on-macos"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2019/prompt@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/confirming@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-basic-constraints@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-done@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-duration@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-issuer@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage-extension@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-keychain@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-no-san@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-ou@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-rsa@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-san@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-start@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-both@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-save@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-save@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-export@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-folder@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-save@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-always-trust@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-done@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-get-info@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-not-trusted@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-selection@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-start@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-system-defaults@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trust-done@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trusted@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-cert-menu@2x.png"],
    "videos": [],
    "categories": ["Tutorials"],
    "tags": ["certificate", "certificate authority", "tls", "ssl", "encryption", "development", "local", "macos", "keychain", "pki", "self-signed", "trust", "tutorial"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 1411,
        "readingTime": "7 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2019/20190805-how-to-create-local-tls-certificates-for-development-on-macos.md",
        "logicalName": "20190805-how-to-create-local-tls-certificates-for-development-on-macos.md",
        "translationBaseName": "20190805-how-to-create-local-tls-certificates-for-development-on-macos",
        "baseFileName": "20190805-how-to-create-local-tls-certificates-for-development-on-macos",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2019/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#create-a-local-certificate-authority\"\u003eCreate a local Certificate Authority\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#open-the-certificate-assistant\"\u003eOpen the Certificate Assistant\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#enter-the-values\"\u003eEnter the Values\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#created\"\u003eCreated!\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#trust-the-new-ca\"\u003eTrust the New CA\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#create-a-local-certificate-from-your-new-certificate-authority\"\u003eCreate a local Certificate from your new Certificate Authority\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#open-the-certificate-assistant-1\"\u003eOpen the Certificate Assistant\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#create-your-certificate\"\u003eCreate your Certificate\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#configuring-validity\"\u003eConfiguring Validity\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#configuring-the-organizational-unit\"\u003eConfiguring the Organizational Unit\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#choose-an-issuer\"\u003eChoose an Issuer\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#key-pair-information\"\u003eKey Pair Information\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#key-usage-extension\"\u003eKey Usage Extension\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#extended-key-usage-extension\"\u003eExtended Key Usage Extension\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#basic-constraints-extension\"\u003eBasic Constraints Extension\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#subject-alternate-name-extension\"\u003eSubject Alternate Name Extension\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#specify-a-keychain-location-for-the-certificate\"\u003eSpecify a Keychain Location for the Certificate\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#all-done\"\u003eAll Done!\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#exporting-your-keypair-files\"\u003eExporting your Keypair Files\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#export-your-root-ca-certificate\"\u003eExport your Root CA Certificate\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#export-your-certificate\"\u003eExport your Certificate\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#export-your-private-key\"\u003eExport your Private Key\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#converting-files-into-pem-format\"\u003eConverting Files into PEM Format\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#convert-the-private-key-from-p12--pem\"\u003eConvert the Private Key from P12 → PEM\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#convert-the-certificate-from-cer--pem\"\u003eConvert the Certificate from CER → PEM\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#convert-the-root-ca-from-cer--pem\"\u003eConvert the root CA from CER → PEM\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#confirming-files\"\u003eConfirming Files\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#putting-these-certificates-to-use\"\u003ePutting these Certificates to Use\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#installing-http-server\"\u003eInstalling \u003ccode\u003ehttp-server\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#pretending-to-be-another-website-locally\"\u003ePretending to be another website, locally\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nBy creating a Certificate Authority (a.k.a., a “CA”) and trusting it locally, any certificate that we create using this CA will also be trusted locally. This can simplify the development of \u003cem\u003eHTTPS\u003c/em\u003e websites on your local machine.\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/prompt@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/prompt@2x.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003caside class=\"age aside container flex\"\u003e\u003cp\u003eThis content is \u003cem\u003ea fork\u003c/em\u003e of, and is largely based on, \u003ca href=\"https://www.tonyerwin.com/2014/09/generating-self-signed-ssl-certificates.html\"\u003e“Generating Self-Signed SSL Certificates for Use with Bluemix Custom Domains”\u003c/a\u003e, by Tony Erwin, dated 2014-09-15.\u003c/p\u003e\n\u003cp\u003eThe examples in this tutorial are from macOS Sierra (10.12).\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003ch2 id=\"create-a-local-certificate-authority\"\u003eCreate a local Certificate Authority\u003c/h2\u003e\n\u003cp\u003eStart by opening \u003cem\u003eKeychain Access\u003c/em\u003e. You can either search for it inside Spotlight, or you can traverse the file system for \u003cem\u003eComputer\u003c/em\u003e → \u003cem\u003eApplications\u003c/em\u003e → \u003cem\u003eUtilities\u003c/em\u003e → \u003cem\u003eKeychain Access\u003c/em\u003e.\u003c/p\u003e\n\u003ch3 id=\"open-the-certificate-assistant\"\u003eOpen the Certificate Assistant\u003c/h3\u003e\n\u003cp\u003eGo to the \u003cem\u003eKeychain Access\u003c/em\u003e menu, and choose \u003cem\u003eCertificate Assistant\u003c/em\u003e → \u003cem\u003eCreate a Certificate Authority…\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-selection@2x.webp\" alt=\"Create a Certificate Authority…\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-selection@2x.png\" alt=\"Create a Certificate Authority…\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou should see the new Certificate Assistant.\u003c/p\u003e\n\u003ch3 id=\"enter-the-values\"\u003eEnter the Values\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-start@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003eGive it a name.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIdentity Type\u003c/strong\u003e should be \u003cem\u003eSelf Signed Root CA\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Certificate\u003c/strong\u003e should be \u003cem\u003eSSL Server\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLet me override defaults\u003c/strong\u003e should be \u003cem\u003eunchecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMake this CA the default\u003c/strong\u003e is optional.\u003c/li\u003e\n\u003cli\u003eAdd your email address.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eCreate\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"created\"\u003eCreated!\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-done@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAll done! Feel free to close this window.\u003c/p\u003e\n\u003ch3 id=\"trust-the-new-ca\"\u003eTrust the New CA\u003c/h3\u003e\n\u003cp\u003eNow, you should be looking at your Keychain. Select \u003cem\u003eMy Certificates\u003c/em\u003e from the sidebar to filter down the list to what we care about.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-not-trusted@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou\u0026rsquo;ll notice that, by default, our new CA is not trusted. Right-click (or control-click, or two-finger click) the new CA, and choose \u003cem\u003eGet Info\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-get-info@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eMake sure that the \u003cem\u003eTrust\u003c/em\u003e section is visible. Click the small triangle if it isn\u0026rsquo;t.\u003c/p\u003e\n\u003cp\u003eYou should see that the default settings are configured for \u003cem\u003eSystem Defaults\u003c/em\u003e, and that “This root certificate is not trusted”.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-system-defaults@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNext to \u003cem\u003eWhen using this certificate:\u003c/em\u003e, open the pull-down menu and choose \u003cem\u003eAlways Trust\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-always-trust@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAll of the options should now flip to \u003cem\u003eAlways Trust\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trusted@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eBut we\u0026rsquo;re not quite done! When we close the window, we\u0026rsquo;ll be asked for our system password. You need to provide your password correctly before the settings will take effect.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trust-done@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"create-a-local-certificate-from-your-new-certificate-authority\"\u003eCreate a local Certificate from your new Certificate Authority\u003c/h2\u003e\n\u003ch3 id=\"open-the-certificate-assistant-1\"\u003eOpen the Certificate Assistant\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-cert-menu@2x.webp\" alt=\"Open the Certificate Assistant\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-cert-menu@2x.png\" alt=\"Open the Certificate Assistant\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"create-your-certificate\"\u003eCreate your Certificate\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-start@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eName\u003c/strong\u003e should be the hostname you want to create the certificate for (e.g., \u003ccode\u003elocalhost\u003c/code\u003e, \u003ccode\u003e*.google.com\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIdentity Type\u003c/strong\u003e should be \u003cem\u003eLeaf\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCertificate Type\u003c/strong\u003e should be \u003cem\u003eSSL Server\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLet me override defaults\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"configuring-validity\"\u003eConfiguring Validity\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-duration@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe default \u003cem\u003eValidity Period\u003c/em\u003e is 365 days. You could also set it to 2 years (730 days), 3 years (1095 days), or any amount you want. (This is a local-only certificate, after all.)\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"configuring-the-organizational-unit\"\u003eConfiguring the Organizational Unit\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-ou@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eEmail Address\u003c/strong\u003e should be your email address. Again, this is a local-only certificate, so this is generally unimportant.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eName (Common Name)\u003c/strong\u003e should be the hostname you want to create the certificate for (e.g., \u003ccode\u003elocalhost\u003c/code\u003e, \u003ccode\u003e*.google.com\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOrganization\u003c/strong\u003e should be your company or organization.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOrganizational Unit\u003c/strong\u003e is a smaller group inside of your company or organization.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCity\u003c/strong\u003e, \u003cstrong\u003eState\u003c/strong\u003e, \u003cstrong\u003eCountry\u003c/strong\u003e should all be self-explanitory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"choose-an-issuer\"\u003eChoose an Issuer\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-issuer@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis should be the certificate authority that you created earlier.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"key-pair-information\"\u003eKey Pair Information\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-rsa@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eLeave this as-is. When you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"key-usage-extension\"\u003eKey Usage Extension\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eInclude Key Usage Extension\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThis extension is critical\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSignature\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eEverything else should be \u003cem\u003eunchecked\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"extended-key-usage-extension\"\u003eExtended Key Usage Extension\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage-extension@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eInclude Extended Key Usage Extension\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThis extension is critical\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSSL Server Authentication\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eEverything else should be \u003cem\u003eunchecked\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"basic-constraints-extension\"\u003eBasic Constraints Extension\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-basic-constraints@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eLeave this as-is. When you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"subject-alternate-name-extension\"\u003eSubject Alternate Name Extension\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-no-san@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis \u003cem\u003eshould\u003c/em\u003e be disabled because we don’t need a SAN. If you encounter an error with this selection, you can enable it and set the \u003cstrong\u003edNSName\u003c/strong\u003e value to the same thing as your \u003cem\u003eCommon Name\u003c/em\u003e was (e.g., \u003ccode\u003elocalhost\u003c/code\u003e, \u003ccode\u003e*.google.com\u003c/code\u003e).\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-san@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"specify-a-keychain-location-for-the-certificate\"\u003eSpecify a Keychain Location for the Certificate\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-keychain@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis should be your \u003cem\u003elogin\u003c/em\u003e keychain, which gets unlocked whenever you login.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"all-done\"\u003eAll Done!\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-done@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou should notice that since we trusted our custom CA, and we configured that CA as the \u003cem\u003eIssuer\u003c/em\u003e for this certificate, that this certificate is already trusted by default.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eDone\u003c/em\u003e button.\u003c/p\u003e\n\u003ch2 id=\"exporting-your-keypair-files\"\u003eExporting your Keypair Files\u003c/h2\u003e\n\u003ch3 id=\"export-your-root-ca-certificate\"\u003eExport your Root CA Certificate\u003c/h3\u003e\n\u003cp\u003eSelect your root CA.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eRight-click (or control-click, or two-finger click) the new CA, and choose \u003cem\u003eExport…\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-export@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou\u0026rsquo;ll see a \u003cem\u003eSave As…\u003c/em\u003e dialog box, asking where you want to save your exported file. Type \u003cem\u003eCommand-Shift-G\u003c/em\u003e (⌘⇧G) to bring up a sub-dialog where you can enter the path that you want to traverse to.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-folder@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou can put the files anywhere you\u0026rsquo;d like, but in this example, I\u0026rsquo;m going to use \u003ccode\u003e~/.ssh/localhost/\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSince this path doesn’t exist by default, you can enter \u003ccode\u003e~/.ssh/\u003c/code\u003e, press \u003cem\u003eReturn\u003c/em\u003e, then choose the \u003cem\u003eNew Folder\u003c/em\u003e button along the bottom-left, and name it \u003cem\u003elocalhost\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-save@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAgain, you can give the file any name which makes sense to you. I\u0026rsquo;m going to use \u003ccode\u003eca-cert\u003c/code\u003e in this example. For the \u003cstrong\u003eFile Format\u003c/strong\u003e, choose \u003cem\u003eCertificate (.cer)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eSave\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"export-your-certificate\"\u003eExport your Certificate\u003c/h3\u003e\n\u003cp\u003eSelect your certificate.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eRight-click (or control-click, or two-finger click) the new certificate, and choose \u003cem\u003eExport…\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;ll see a \u003cem\u003eSave As…\u003c/em\u003e dialog box, asking where you want to save your exported file.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-save@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAgain, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain, e.g., \u003ccode\u003elocalhost\u003c/code\u003e in this example. For the \u003cstrong\u003eFile Format\u003c/strong\u003e, choose \u003cem\u003eCertificate (.cer)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eSave\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"export-your-private-key\"\u003eExport your Private Key\u003c/h3\u003e\n\u003cp\u003eSelect the private key for your certificate.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eRight-click (or control-click, or two-finger click) the new private key, and choose \u003cem\u003eExport…\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;ll see a \u003cem\u003eSave As…\u003c/em\u003e dialog box, asking where you want to save your exported file.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-save@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAgain, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain + \u003ccode\u003e.key\u003c/code\u003e, e.g., \u003ccode\u003elocalhost.key\u003c/code\u003e in this example. For the \u003cstrong\u003eFile Format\u003c/strong\u003e, choose \u003cem\u003ePersonal Information Exchange (.p12)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eSave\u003c/em\u003e button. You will probably see a dialog which complains about the file extension.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-both@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eChoose \u003cem\u003eUse both\u003c/em\u003e.\u003c/p\u003e\n\u003ch2 id=\"converting-files-into-pem-format\"\u003eConverting Files into PEM Format\u003c/h2\u003e\n\u003cp\u003eOpen \u003cem\u003eTerminal\u003c/em\u003e, and navigate to the directory where we saved our exported files.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecd ~/.ssh/localhost/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe\u0026rsquo;re going to use the \u003ccode\u003eopenssl\u003c/code\u003e command to convert our exported files into the widely-supported PEM format.\u003c/p\u003e\n\u003ch3 id=\"convert-the-private-key-from-p12--pem\"\u003eConvert the Private Key from P12 → PEM\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eopenssl pkcs12 -in localhost.key.p12 -nocerts -nodes | openssl rsa \u0026gt; localhost.key.pem\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"convert-the-certificate-from-cer--pem\"\u003eConvert the Certificate from CER → PEM\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eopenssl x509 -inform der -in localhost.cer -out localhost.cer.pem\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"convert-the-root-ca-from-cer--pem\"\u003eConvert the root CA from CER → PEM\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eopenssl x509 -inform der -in ca-cert.cer -out ca-cert.cer.pem\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"confirming-files\"\u003eConfirming Files\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/confirming@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"putting-these-certificates-to-use\"\u003ePutting these Certificates to Use\u003c/h2\u003e\n\u003cp\u003eYou now have a root CA, a certificate, and a private key that can be used on your local machine for faux-HTTPS connections.\u003c/p\u003e\n\u003cp\u003eAs an example for how these can be used, we\u0026rsquo;ll install the \u003ca href=\"https://www.npmjs.com/package/http-server\"\u003e\u003ccode\u003ehttp-server\u003c/code\u003e package from npm\u003c/a\u003e. (You\u0026rsquo;ll need \u003ca href=\"https://nodejs.org\"\u003eNode.js\u003c/a\u003e installed; See \u003ca href=\"https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md\"\u003eInstall \u003ccode\u003enpm\u003c/code\u003e packages globally without sudo on macOS and Linux\u003c/a\u003e for how to do this without \u003ccode\u003esudo\u003c/code\u003e.)\u003c/p\u003e\n\u003ch3 id=\"installing-http-server\"\u003eInstalling \u003ccode\u003ehttp-server\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enpm install -g http-server\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter the package is installed, you can run a local HTTPS server using the contents of the current directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehttp-server --ssl \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --cert ~/.ssh/localhost/localhost.cer.pem \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --key ~/.ssh/localhost/localhost.key.pem \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    -p \u003cspan style=\"color:#ae81ff\"\u003e8443\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow you can open \u003ca href=\"https://localhost:8443\"\u003ehttps://localhost:8443\u003c/a\u003e in your web browser.\u003c/p\u003e\n\u003ch2 id=\"pretending-to-be-another-website-locally\"\u003ePretending to be another website, locally\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s say that you want to pretend to be \u003ccode\u003efake.google.com\u003c/code\u003e, locally.\u003c/p\u003e\n\u003cp\u003ePerhaps you\u0026rsquo;re testing something with CORS, or cookies, or something else where the domain name matters.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eAfter creating your root CA, create a new certificate where the common name is \u003ccode\u003e*.google.com\u003c/code\u003e. (Again, this will only work on your local machine.) Follow the same instructions you followed for \u003ccode\u003elocalhost\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRun \u003ccode\u003ehttp-server\u003c/code\u003e using your new fake \u003ccode\u003e*.google.com\u003c/code\u003e certificates. But instead, run it on port \u003ccode\u003e443\u003c/code\u003e. Since the port that we want to bind to is smaller than 1000, we\u0026rsquo;ll need to use \u003ccode\u003esudo\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo http-server --ssl \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --cert ~/.ssh/localhost/star.google.cer.pem \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --key ~/.ssh/localhost/star.google.key.pem \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    -p \u003cspan style=\"color:#ae81ff\"\u003e443\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn your \u003ccode\u003e/etc/hosts\u003c/code\u003e file, add a line that says \u003ccode\u003e127.0.0.1 fake.google.com\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn your web browser, visit \u003ca href=\"https://fake.google.com\"\u003ehttps://fake.google.com\u003c/a\u003e and you\u0026rsquo;ll see that it loads successfully. However, if you click on the lock in the address bar and view the certificate, you\u0026rsquo;ll see that the certificate was issued by your own custom root CA.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n",
        "plain":"By creating a Certificate Authority (a.k.a., a “CA”) and trusting it locally, any certificate that we create using this CA will also be trusted locally. This can simplify the development of HTTPS websites on your local machine.   This content is a fork of, and is largely based on, “Generating Self-Signed SSL Certificates for Use with Bluemix Custom Domains”, by Tony Erwin, dated 2014-09-15.\nThe examples in this tutorial are from macOS Sierra (10.12).\n Create a local Certificate Authority Start by opening Keychain Access. You can either search for it inside Spotlight, or you can traverse the file system for Computer → Applications → Utilities → Keychain Access.\nOpen the Certificate Assistant Go to the Keychain Access menu, and choose Certificate Assistant → Create a Certificate Authority….\n  You should see the new Certificate Assistant.\nEnter the Values    Give it a name. Identity Type should be Self Signed Root CA. User Certificate should be SSL Server. Let me override defaults should be unchecked. Make this CA the default is optional. Add your email address.  When you\u0026rsquo;re done, choose the Create button.\nCreated!   All done! Feel free to close this window.\nTrust the New CA Now, you should be looking at your Keychain. Select My Certificates from the sidebar to filter down the list to what we care about.\n  You\u0026rsquo;ll notice that, by default, our new CA is not trusted. Right-click (or control-click, or two-finger click) the new CA, and choose Get Info.\n  Make sure that the Trust section is visible. Click the small triangle if it isn\u0026rsquo;t.\nYou should see that the default settings are configured for System Defaults, and that “This root certificate is not trusted”.\n  Next to When using this certificate:, open the pull-down menu and choose Always Trust.\n  All of the options should now flip to Always Trust.\n  But we\u0026rsquo;re not quite done! When we close the window, we\u0026rsquo;ll be asked for our system password. You need to provide your password correctly before the settings will take effect.\n  Create a local Certificate from your new Certificate Authority Open the Certificate Assistant   Create your Certificate    Name should be the hostname you want to create the certificate for (e.g., localhost, *.google.com). Identity Type should be Leaf. Certificate Type should be SSL Server. Let me override defaults should be checked.  When you\u0026rsquo;re done, choose the Continue button.\nConfiguring Validity   The default Validity Period is 365 days. You could also set it to 2 years (730 days), 3 years (1095 days), or any amount you want. (This is a local-only certificate, after all.)\nWhen you\u0026rsquo;re done, choose the Continue button.\nConfiguring the Organizational Unit    Email Address should be your email address. Again, this is a local-only certificate, so this is generally unimportant. Name (Common Name) should be the hostname you want to create the certificate for (e.g., localhost, *.google.com). Organization should be your company or organization. Organizational Unit is a smaller group inside of your company or organization. City, State, Country should all be self-explanitory.  When you\u0026rsquo;re done, choose the Continue button.\nChoose an Issuer   This should be the certificate authority that you created earlier.\nWhen you\u0026rsquo;re done, choose the Continue button.\nKey Pair Information   Leave this as-is. When you\u0026rsquo;re done, choose the Continue button.\nKey Usage Extension    Include Key Usage Extension should be checked. This extension is critical should be checked. Signature should be checked. Everything else should be unchecked.  When you\u0026rsquo;re done, choose the Continue button.\nExtended Key Usage Extension    Include Extended Key Usage Extension should be checked. This extension is critical should be checked. SSL Server Authentication should be checked. Everything else should be unchecked.  When you\u0026rsquo;re done, choose the Continue button.\nBasic Constraints Extension   Leave this as-is. When you\u0026rsquo;re done, choose the Continue button.\nSubject Alternate Name Extension   This should be disabled because we don’t need a SAN. If you encounter an error with this selection, you can enable it and set the dNSName value to the same thing as your Common Name was (e.g., localhost, *.google.com).\n  When you\u0026rsquo;re done, choose the Continue button.\nSpecify a Keychain Location for the Certificate   This should be your login keychain, which gets unlocked whenever you login.\nWhen you\u0026rsquo;re done, choose the Continue button.\nAll Done!   You should notice that since we trusted our custom CA, and we configured that CA as the Issuer for this certificate, that this certificate is already trusted by default.\nWhen you\u0026rsquo;re done, choose the Done button.\nExporting your Keypair Files Export your Root CA Certificate Select your root CA.\n  Right-click (or control-click, or two-finger click) the new CA, and choose Export….\n  You\u0026rsquo;ll see a Save As… dialog box, asking where you want to save your exported file. Type Command-Shift-G (⌘⇧G) to bring up a sub-dialog where you can enter the path that you want to traverse to.\n  You can put the files anywhere you\u0026rsquo;d like, but in this example, I\u0026rsquo;m going to use ~/.ssh/localhost/.\nSince this path doesn’t exist by default, you can enter ~/.ssh/, press Return, then choose the New Folder button along the bottom-left, and name it localhost.\n  Again, you can give the file any name which makes sense to you. I\u0026rsquo;m going to use ca-cert in this example. For the File Format, choose Certificate (.cer).\nWhen you\u0026rsquo;re done, choose the Save button.\nExport your Certificate Select your certificate.\n  Right-click (or control-click, or two-finger click) the new certificate, and choose Export….\nYou\u0026rsquo;ll see a Save As… dialog box, asking where you want to save your exported file.\n  Again, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain, e.g., localhost in this example. For the File Format, choose Certificate (.cer).\nWhen you\u0026rsquo;re done, choose the Save button.\nExport your Private Key Select the private key for your certificate.\n  Right-click (or control-click, or two-finger click) the new private key, and choose Export….\nYou\u0026rsquo;ll see a Save As… dialog box, asking where you want to save your exported file.\n  Again, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain + .key, e.g., localhost.key in this example. For the File Format, choose Personal Information Exchange (.p12).\nWhen you\u0026rsquo;re done, choose the Save button. You will probably see a dialog which complains about the file extension.\n  Choose Use both.\nConverting Files into PEM Format Open Terminal, and navigate to the directory where we saved our exported files.\ncd ~/.ssh/localhost/ We\u0026rsquo;re going to use the openssl command to convert our exported files into the widely-supported PEM format.\nConvert the Private Key from P12 → PEM openssl pkcs12 -in localhost.key.p12 -nocerts -nodes | openssl rsa \u0026gt; localhost.key.pem Convert the Certificate from CER → PEM openssl x509 -inform der -in localhost.cer -out localhost.cer.pem Convert the root CA from CER → PEM openssl x509 -inform der -in ca-cert.cer -out ca-cert.cer.pem Confirming Files   Putting these Certificates to Use You now have a root CA, a certificate, and a private key that can be used on your local machine for faux-HTTPS connections.\nAs an example for how these can be used, we\u0026rsquo;ll install the http-server package from npm. (You\u0026rsquo;ll need Node.js installed; See Install npm packages globally without sudo on macOS and Linux for how to do this without sudo.)\nInstalling http-server npm install -g http-server After the package is installed, you can run a local HTTPS server using the contents of the current directory.\nhttp-server --ssl \\  --cert ~/.ssh/localhost/localhost.cer.pem \\  --key ~/.ssh/localhost/localhost.key.pem \\  -p 8443 Now you can open https://localhost:8443 in your web browser.\nPretending to be another website, locally Let\u0026rsquo;s say that you want to pretend to be fake.google.com, locally.\nPerhaps you\u0026rsquo;re testing something with CORS, or cookies, or something else where the domain name matters.\n  After creating your root CA, create a new certificate where the common name is *.google.com. (Again, this will only work on your local machine.) Follow the same instructions you followed for localhost.\n  Run http-server using your new fake *.google.com certificates. But instead, run it on port 443. Since the port that we want to bind to is smaller than 1000, we\u0026rsquo;ll need to use sudo.\nsudo http-server --ssl \\  --cert ~/.ssh/localhost/star.google.cer.pem \\  --key ~/.ssh/localhost/star.google.key.pem \\  -p 443   In your /etc/hosts file, add a line that says 127.0.0.1 fake.google.com.\n  In your web browser, visit https://fake.google.com and you\u0026rsquo;ll see that it loads successfully. However, if you click on the lock in the address bar and view the certificate, you\u0026rsquo;ll see that the certificate was issued by your own custom root CA.\n  ",
        "source":"\n{{\u003cdescription\u003e}}\nBy creating a Certificate Authority (a.k.a., a “CA”) and trusting it locally, any certificate that we create using this CA will also be trusted locally. This can simplify the development of \u003cem\u003eHTTPS\u003c/em\u003e websites on your local machine.\n{{\u003c/description\u003e}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/prompt@2x.png\"\u003e}}\n\n{{% aside %}}\nThis content is _a fork_ of, and is largely based on, [“Generating Self-Signed SSL Certificates for Use with Bluemix Custom Domains”](https://www.tonyerwin.com/2014/09/generating-self-signed-ssl-certificates.html), by Tony Erwin, dated 2014-09-15.\n\nThe examples in this tutorial are from macOS Sierra (10.12).\n{{% /aside %}}\n\n## Create a local Certificate Authority\n\nStart by opening _Keychain Access_. You can either search for it inside Spotlight, or you can traverse the file system for _Computer_ → _Applications_ → _Utilities_ → _Keychain Access_.\n\n### Open the Certificate Assistant\n\nGo to the _Keychain Access_ menu, and choose _Certificate Assistant_ → _Create a Certificate Authority…_.\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-selection@2x.png\" alt=\"Create a Certificate Authority…\"\u003e}}\n\nYou should see the new Certificate Assistant.\n\n### Enter the Values\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-start@2x.png\" alt=\"Create your new Certificate Authority…\"\u003e}}\n\n1. Give it a name.\n1. **Identity Type** should be _Self Signed Root CA_.\n1. **User Certificate** should be _SSL Server_.\n1. **Let me override defaults** should be _unchecked_.\n1. **Make this CA the default** is optional.\n1. Add your email address.\n\nWhen you're done, choose the _Create_ button.\n\n### Created!\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-done@2x.png\" alt=\"Certificate Authority has been created.\"\u003e}}\n\nAll done! Feel free to close this window.\n\n### Trust the New CA\n\nNow, you should be looking at your Keychain. Select _My Certificates_ from the sidebar to filter down the list to what we care about.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-not-trusted@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\nYou'll notice that, by default, our new CA is not trusted. Right-click (or control-click, or two-finger click) the new CA, and choose _Get Info_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-get-info@2x.png\" alt=\"Context menu, Get Info…\"\u003e}}\n\nMake sure that the _Trust_ section is visible. Click the small triangle if it isn't.\n\nYou should see that the default settings are configured for _System Defaults_, and that “This root certificate is not trusted”.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-system-defaults@2x.png\" alt=\"Trust options for Certificate Authority\"\u003e}}\n\nNext to _When using this certificate:_, open the pull-down menu and choose _Always Trust_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-always-trust@2x.png\" alt=\"Context menu, Always Trust\"\u003e}}\n\nAll of the options should now flip to _Always Trust_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trusted@2x.png\" alt=\"Trust options for Certificate Authority\"\u003e}}\n\nBut we're not quite done! When we close the window, we'll be asked for our system password. You need to provide your password correctly before the settings will take effect.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trust-done@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\n## Create a local Certificate from your new Certificate Authority\n\n### Open the Certificate Assistant\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-cert-menu@2x.png\" alt=\"Open the Certificate Assistant\"\u003e}}\n\n### Create your Certificate\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-start@2x.png\" alt=\"Create your Certificate\"\u003e}}\n\n1. **Name** should be the hostname you want to create the certificate for (e.g., `localhost`, `*.google.com`).\n1. **Identity Type** should be _Leaf_.\n1. **Certificate Type** should be _SSL Server_.\n1. **Let me override defaults** should be _checked_.\n\nWhen you're done, choose the _Continue_ button.\n\n### Configuring Validity\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-duration@2x.png\" alt=\"Configuring Validity\"\u003e}}\n\nThe default _Validity Period_ is 365 days. You could also set it to 2 years (730 days), 3 years (1095 days), or any amount you want. (This is a local-only certificate, after all.)\n\nWhen you're done, choose the _Continue_ button.\n\n### Configuring the Organizational Unit\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-ou@2x.png\" alt=\"Please specify some personal information below to be used in the certificate.\"\u003e}}\n\n1. **Email Address** should be your email address. Again, this is a local-only certificate, so this is generally unimportant.\n1. **Name (Common Name)** should be the hostname you want to create the certificate for (e.g., `localhost`, `*.google.com`).\n1. **Organization** should be your company or organization.\n1. **Organizational Unit** is a smaller group inside of your company or organization.\n1. **City**, **State**, **Country** should all be self-explanitory.\n\nWhen you're done, choose the _Continue_ button.\n\n### Choose an Issuer\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-issuer@2x.png\" alt=\"Choose an Issuer\"\u003e}}\n\nThis should be the certificate authority that you created earlier.\n\nWhen you're done, choose the _Continue_ button.\n\n### Key Pair Information\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-rsa@2x.png\" alt=\"Key Pair Information\"\u003e}}\n\nLeave this as-is. When you're done, choose the _Continue_ button.\n\n### Key Usage Extension\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage@2x.png\" alt=\"Key Usage Extension\"\u003e}}\n\n1. **Include Key Usage Extension** should be _checked_.\n1. **This extension is critical** should be _checked_.\n1. **Signature** should be _checked_.\n1. Everything else should be _unchecked_.\n\nWhen you're done, choose the _Continue_ button.\n\n### Extended Key Usage Extension\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage-extension@2x.png\" alt=\"Extended Key Usage Extension\"\u003e}}\n\n1. **Include Extended Key Usage Extension** should be _checked_.\n1. **This extension is critical** should be _checked_.\n1. **SSL Server Authentication** should be _checked_.\n1. Everything else should be _unchecked_.\n\nWhen you're done, choose the _Continue_ button.\n\n### Basic Constraints Extension\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-basic-constraints@2x.png\" alt=\"Basic Constraints Extension\"\u003e}}\n\nLeave this as-is. When you're done, choose the _Continue_ button.\n\n### Subject Alternate Name Extension\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-no-san@2x.png\" alt=\"Subject Alternate Name Extension\"\u003e}}\n\nThis _should_ be disabled because we don’t need a SAN. If you encounter an error with this selection, you can enable it and set the **dNSName** value to the same thing as your _Common Name_ was (e.g., `localhost`, `*.google.com`).\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-san@2x.png\" alt=\"Subject Alternate Name Extension, dNSName field\"\u003e}}\n\nWhen you're done, choose the _Continue_ button.\n\n### Specify a Keychain Location for the Certificate\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-keychain@2x.png\" alt=\"Specify a Keychain Location for the Certificate\"\u003e}}\n\nThis should be your _login_ keychain, which gets unlocked whenever you login.\n\nWhen you're done, choose the _Continue_ button.\n\n### All Done!\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-done@2x.png\" alt=\"Your certificate has been successfully created.\"\u003e}}\n\nYou should notice that since we trusted our custom CA, and we configured that CA as the _Issuer_ for this certificate, that this certificate is already trusted by default.\n\nWhen you're done, choose the _Done_ button.\n\n## Exporting your Keypair Files\n\n### Export your Root CA Certificate\n\nSelect your root CA.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\nRight-click (or control-click, or two-finger click) the new CA, and choose _Export…_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-export@2x.png\" alt=\"Context menu, Export CA…\"\u003e}}\n\nYou'll see a _Save As…_ dialog box, asking where you want to save your exported file. Type _Command-Shift-G_ (⌘⇧G) to bring up a sub-dialog where you can enter the path that you want to traverse to.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-folder@2x.png\" alt=\"Dialog, Save As…\"\u003e}}\n\nYou can put the files anywhere you'd like, but in this example, I'm going to use `~/.ssh/localhost/`.\n\nSince this path doesn’t exist by default, you can enter `~/.ssh/`, press _Return_, then choose the _New Folder_ button along the bottom-left, and name it _localhost_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-save@2x.png\" alt=\"Dialog, Save As…\"\u003e}}\n\nAgain, you can give the file any name which makes sense to you. I'm going to use `ca-cert` in this example. For the **File Format**, choose _Certificate (.cer)_.\n\nWhen you're done, choose the _Save_ button.\n\n### Export your Certificate\n\nSelect your certificate.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\nRight-click (or control-click, or two-finger click) the new certificate, and choose _Export…_.\n\nYou'll see a _Save As…_ dialog box, asking where you want to save your exported file.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-save@2x.png\" alt=\"Dialog, Save As…\"\u003e}}\n\nAgain, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain, e.g., `localhost` in this example. For the **File Format**, choose _Certificate (.cer)_.\n\nWhen you're done, choose the _Save_ button.\n\n### Export your Private Key\n\nSelect the private key for your certificate.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\nRight-click (or control-click, or two-finger click) the new private key, and choose _Export…_.\n\nYou'll see a _Save As…_ dialog box, asking where you want to save your exported file.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-save@2x.png\" alt=\"Dialog, Save As…\"\u003e}}\n\nAgain, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain + `.key`, e.g., `localhost.key` in this example. For the **File Format**, choose _Personal Information Exchange (.p12)_.\n\nWhen you're done, choose the _Save_ button. You will probably see a dialog which complains about the file extension.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-both@2x.png\" alt=\"Dialog, Use Both\"\u003e}}\n\nChoose _Use both_.\n\n## Converting Files into PEM Format\n\nOpen _Terminal_, and navigate to the directory where we saved our exported files.\n\n```bash\ncd ~/.ssh/localhost/\n```\n\nWe're going to use the `openssl` command to convert our exported files into the widely-supported PEM format.\n\n### Convert the Private Key from P12 → PEM\n\n```bash\nopenssl pkcs12 -in localhost.key.p12 -nocerts -nodes | openssl rsa \u003e localhost.key.pem\n```\n\n### Convert the Certificate from CER → PEM\n\n```bash\nopenssl x509 -inform der -in localhost.cer -out localhost.cer.pem\n```\n\n### Convert the root CA from CER → PEM\n\n```bash\nopenssl x509 -inform der -in ca-cert.cer -out ca-cert.cer.pem\n```\n\n### Confirming Files\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/confirming@2x.png\" alt=\"Finder window\"\u003e}}\n\n## Putting these Certificates to Use\n\nYou now have a root CA, a certificate, and a private key that can be used on your local machine for faux-HTTPS connections.\n\nAs an example for how these can be used, we'll install the [`http-server` package from npm](https://www.npmjs.com/package/http-server). (You'll need [Node.js](https://nodejs.org) installed; See [Install `npm` packages globally without sudo on macOS and Linux](https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md) for how to do this without `sudo`.)\n\n### Installing `http-server`\n\n```bash\nnpm install -g http-server\n```\n\nAfter the package is installed, you can run a local HTTPS server using the contents of the current directory.\n\n```bash\nhttp-server --ssl \\\n    --cert ~/.ssh/localhost/localhost.cer.pem \\\n    --key ~/.ssh/localhost/localhost.key.pem \\\n    -p 8443\n```\n\nNow you can open \u003chttps://localhost:8443\u003e in your web browser.\n\n## Pretending to be another website, locally\n\nLet's say that you want to pretend to be `fake.google.com`, locally.\n\nPerhaps you're testing something with CORS, or cookies, or something else where the domain name matters.\n\n1. After creating your root CA, create a new certificate where the common name is `*.google.com`. (Again, this will only work on your local machine.) Follow the same instructions you followed for `localhost`.\n\n1. Run `http-server` using your new fake `*.google.com` certificates. But instead, run it on port `443`. Since the port that we want to bind to is smaller than 1000, we'll need to use `sudo`.\n\n   ```bash\n   sudo http-server --ssl \\\n       --cert ~/.ssh/localhost/star.google.cer.pem \\\n       --key ~/.ssh/localhost/star.google.key.pem \\\n       -p 443\n   ```\n\n\n1. In your `/etc/hosts` file, add a line that says `127.0.0.1 fake.google.com`.\n\n1. In your web browser, visit \u003chttps://fake.google.com\u003e and you'll see that it loads successfully. However, if you click on the lock in the address bar and view the certificate, you'll see that the certificate was issued by your own custom root CA.\n"},
    "links": {
        "prev": {"title": "Using GNU command line tools in macOS instead of FreeBSD tools", "permalink": "https://ryanparman.com/posts/2019/using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools/"},
        "next": {"title": "Playlist: Best of Foo Fighters", "permalink": "https://ryanparman.com/posts/2019/playlist-best-of-foo-fighters/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Using GNU command line tools in macOS instead of FreeBSD tools",
    "description": "",
    "summary": {
        "content": "macOS is a Unix, and not built on Linux. This can bite you when trying to write scripts which support both platforms. I think most of us realize that macOS isn\u0026rsquo;t a Linux OS, but what that also means is that instead of shipping with the GNU flavor of command line tools, it ships with the FreeBSD flavor. As such, writing shell scripts which can work across both platforms can sometimes be challenging. Homebrew Homebrew can be used to install the GNU versions of tools onto your Mac, but they are all prefixed with \u0026ldquo;g\u0026rdquo; by default.",
        "isTruncated": true
    },
    "published": "2019-06-18T14:48:16Z",
    "updated": "2019-06-18T15:34:29-04:00",
    "permalink": "https://ryanparman.com/posts/2019/using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools/",
    "relativePermalink": "/posts/2019/using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools/",
    "aliases": ["/2019/06/18/using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2019/macos@2x.png"],
    "videos": [],
    "categories": ["Software"],
    "tags": ["gnu", "freebsd", "bsd", "linux", "macos"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 375,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2019/20190618-using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools.md",
        "logicalName": "20190618-using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools.md",
        "translationBaseName": "20190618-using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools",
        "baseFileName": "20190618-using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2019/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#homebrew\"\u003eHomebrew\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#choosing-gnu-for-consistency\"\u003eChoosing GNU for Consistency\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#provided-binaries\"\u003eProvided Binaries\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\n\u003cb\u003emacOS\u003c/b\u003e is a \u003cem\u003eUnix\u003c/em\u003e, and not built on \u003cem\u003eLinux\u003c/em\u003e. This can bite you when trying to write scripts which support both platforms.\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/macos@2x.webp\" alt=\"macOS\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/macos@2x.png\" alt=\"macOS\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eI think most of us realize that macOS isn\u0026rsquo;t a Linux OS, but what that also means is that instead of shipping with the GNU flavor of command line tools, it ships with the FreeBSD flavor. As such, writing shell scripts which can work across both platforms can sometimes be challenging.\u003c/p\u003e\n\u003ch2 id=\"homebrew\"\u003eHomebrew\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://brew.sh\"\u003eHomebrew\u003c/a\u003e can be used to install the GNU versions of tools onto your Mac, but they are all prefixed with \u0026ldquo;g\u0026rdquo; by default.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003eNOTE:\u003c/strong\u003e All commands have been installed with the prefix \u0026ldquo;g\u0026rdquo;. If you need to use these commands with their normal names, you can add a \u0026ldquo;gnubin\u0026rdquo; directory to your PATH from your bashrc.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"choosing-gnu-for-consistency\"\u003eChoosing GNU for Consistency\u003c/h2\u003e\n\u003cp\u003eYou can install most of the GNU flavored tools with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ebrew install coreutils ed findutils gawk gnu-sed gnu-tar grep make\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAssuming you have a fairly standard Terminal/shell environment, and assuming that you want to use the GNU versions instead of the BSD versions for everything you\u0026rsquo;ve installed with Homebrew, you can append the following to your \u003ccode\u003e~/.profile\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#75715e\"\u003e# Get list of gnubin directories\u003c/span\u003e\nexport GNUBINS\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003efind /usr/local/opt -type d -follow -name gnubin -print\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e;\n\n\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e bindir in \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eGNUBINS[@]\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e; \u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n  export PATH\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e$bindir:$PATH;\n\u003cspan style=\"color:#66d9ef\"\u003edone\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"provided-binaries\"\u003eProvided Binaries\u003c/h2\u003e\n\u003ctable class=\"f6 w-100 mw8 center\" cellspacing=\"0\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth class=\"fw6 bb tl pb3 pr3 bg-white\" valign=\"top\"\u003ePackage\u003c/th\u003e\n      \u003cth class=\"fw6 bb tl pb3 pr3 bg-white\" valign=\"top\"\u003eProvides\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003ecoreutils\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003e[\u003c/code\u003e, \u003ccode\u003eb2sum\u003c/code\u003e, \u003ccode\u003ebase32\u003c/code\u003e, \u003ccode\u003ebase64\u003c/code\u003e, \u003ccode\u003ebasename\u003c/code\u003e, \u003ccode\u003ebasenc\u003c/code\u003e, \u003ccode\u003ecat\u003c/code\u003e, \u003ccode\u003echcon\u003c/code\u003e, \u003ccode\u003echgrp\u003c/code\u003e, \u003ccode\u003echmod\u003c/code\u003e, \u003ccode\u003echown\u003c/code\u003e, \u003ccode\u003echroot\u003c/code\u003e, \u003ccode\u003ecksum\u003c/code\u003e, \u003ccode\u003ecomm\u003c/code\u003e, \u003ccode\u003ecp\u003c/code\u003e, \u003ccode\u003ecsplit\u003c/code\u003e, \u003ccode\u003ecut\u003c/code\u003e, \u003ccode\u003edate\u003c/code\u003e, \u003ccode\u003edd\u003c/code\u003e, \u003ccode\u003edf\u003c/code\u003e, \u003ccode\u003edir\u003c/code\u003e, \u003ccode\u003edircolors\u003c/code\u003e, \u003ccode\u003edirname\u003c/code\u003e, \u003ccode\u003edu\u003c/code\u003e, \u003ccode\u003eecho\u003c/code\u003e, \u003ccode\u003eenv\u003c/code\u003e, \u003ccode\u003eexpand\u003c/code\u003e, \u003ccode\u003eexpr\u003c/code\u003e, \u003ccode\u003efactor\u003c/code\u003e, \u003ccode\u003efalse\u003c/code\u003e, \u003ccode\u003efmt\u003c/code\u003e, \u003ccode\u003efold\u003c/code\u003e, \u003ccode\u003egroups\u003c/code\u003e, \u003ccode\u003ehead\u003c/code\u003e, \u003ccode\u003ehostid\u003c/code\u003e, \u003ccode\u003eid\u003c/code\u003e, \u003ccode\u003einstall\u003c/code\u003e, \u003ccode\u003ejoin\u003c/code\u003e, \u003ccode\u003ekill\u003c/code\u003e, \u003ccode\u003elink\u003c/code\u003e, \u003ccode\u003eln\u003c/code\u003e, \u003ccode\u003elogname\u003c/code\u003e, \u003ccode\u003els\u003c/code\u003e, \u003ccode\u003emd5sum\u003c/code\u003e, \u003ccode\u003emkdir\u003c/code\u003e, \u003ccode\u003emkfifo\u003c/code\u003e, \u003ccode\u003emknod\u003c/code\u003e, \u003ccode\u003emktemp\u003c/code\u003e, \u003ccode\u003emv\u003c/code\u003e, \u003ccode\u003enice\u003c/code\u003e, \u003ccode\u003enl\u003c/code\u003e, \u003ccode\u003enohup\u003c/code\u003e, \u003ccode\u003enproc\u003c/code\u003e, \u003ccode\u003enumfmt\u003c/code\u003e, \u003ccode\u003eod\u003c/code\u003e, \u003ccode\u003epaste\u003c/code\u003e, \u003ccode\u003epathchk\u003c/code\u003e, \u003ccode\u003epinky\u003c/code\u003e, \u003ccode\u003epr\u003c/code\u003e, \u003ccode\u003eprintenv\u003c/code\u003e, \u003ccode\u003eprintf\u003c/code\u003e, \u003ccode\u003eptx\u003c/code\u003e, \u003ccode\u003epwd\u003c/code\u003e, \u003ccode\u003ereadlink\u003c/code\u003e, \u003ccode\u003erealpath\u003c/code\u003e, \u003ccode\u003erm\u003c/code\u003e, \u003ccode\u003ermdir\u003c/code\u003e, \u003ccode\u003eruncon\u003c/code\u003e, \u003ccode\u003eseq\u003c/code\u003e, \u003ccode\u003esha1sum\u003c/code\u003e, \u003ccode\u003esha224sum\u003c/code\u003e, \u003ccode\u003esha256sum\u003c/code\u003e, \u003ccode\u003esha384sum\u003c/code\u003e, \u003ccode\u003esha512sum\u003c/code\u003e, \u003ccode\u003eshred\u003c/code\u003e, \u003ccode\u003eshuf\u003c/code\u003e, \u003ccode\u003esleep\u003c/code\u003e, \u003ccode\u003esort\u003c/code\u003e, \u003ccode\u003esplit\u003c/code\u003e, \u003ccode\u003estat\u003c/code\u003e, \u003ccode\u003estdbuf\u003c/code\u003e, \u003ccode\u003estty\u003c/code\u003e, \u003ccode\u003esum\u003c/code\u003e, \u003ccode\u003esync\u003c/code\u003e, \u003ccode\u003etac\u003c/code\u003e, \u003ccode\u003etail\u003c/code\u003e, \u003ccode\u003etee\u003c/code\u003e, \u003ccode\u003etest\u003c/code\u003e, \u003ccode\u003etimeout\u003c/code\u003e, \u003ccode\u003etouch\u003c/code\u003e, \u003ccode\u003etr\u003c/code\u003e, \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003etruncate\u003c/code\u003e, \u003ccode\u003etsort\u003c/code\u003e, \u003ccode\u003etty\u003c/code\u003e, \u003ccode\u003euname\u003c/code\u003e, \u003ccode\u003eunexpand\u003c/code\u003e, \u003ccode\u003euniq\u003c/code\u003e, \u003ccode\u003eunlink\u003c/code\u003e, \u003ccode\u003euptime\u003c/code\u003e, \u003ccode\u003eusers\u003c/code\u003e, \u003ccode\u003evdir\u003c/code\u003e, \u003ccode\u003ewc\u003c/code\u003e, \u003ccode\u003ewho\u003c/code\u003e, \u003ccode\u003ewhoami\u003c/code\u003e, \u003ccode\u003eyes\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003eed\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003eed\u003c/code\u003e, \u003ccode\u003ered\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003egawk\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003eawk\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003egrep\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003eegrep\u003c/code\u003e, \u003ccode\u003efgrep\u003c/code\u003e, \u003ccode\u003egrep\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003egnu-sed\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003esed\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003egnu-tar\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003etar\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003emake\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003emake\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003efindutils\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003efind\u003c/code\u003e, \u003ccode\u003elocate\u003c/code\u003e, \u003ccode\u003eupdatedb\u003c/code\u003e, \u003ccode\u003exargs\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eUsing the GNU flavor of command line tools (instead of the FreeBSD flavor) should simplify the task of writing shell scripts which can work across macOS and GNU/Linux.\u003c/p\u003e\n",
        "plain":"macOS is a Unix, and not built on Linux. This can bite you when trying to write scripts which support both platforms.   I think most of us realize that macOS isn\u0026rsquo;t a Linux OS, but what that also means is that instead of shipping with the GNU flavor of command line tools, it ships with the FreeBSD flavor. As such, writing shell scripts which can work across both platforms can sometimes be challenging.\nHomebrew Homebrew can be used to install the GNU versions of tools onto your Mac, but they are all prefixed with \u0026ldquo;g\u0026rdquo; by default.\n NOTE: All commands have been installed with the prefix \u0026ldquo;g\u0026rdquo;. If you need to use these commands with their normal names, you can add a \u0026ldquo;gnubin\u0026rdquo; directory to your PATH from your bashrc.\n Choosing GNU for Consistency You can install most of the GNU flavored tools with:\nbrew install coreutils ed findutils gawk gnu-sed gnu-tar grep make Assuming you have a fairly standard Terminal/shell environment, and assuming that you want to use the GNU versions instead of the BSD versions for everything you\u0026rsquo;ve installed with Homebrew, you can append the following to your ~/.profile file.\n# Get list of gnubin directories export GNUBINS=\u0026#34;$(find /usr/local/opt -type d -follow -name gnubin -print)\u0026#34;; for bindir in ${GNUBINS[@]}; do export PATH=$bindir:$PATH; done; Provided Binaries   Package Provides     coreutils  [, b2sum, base32, base64, basename, basenc, cat, chcon, chgrp, chmod, chown, chroot, cksum, comm, cp, csplit, cut, date, dd, df, dir, dircolors, dirname, du, echo, env, expand, expr, factor, false, fmt, fold, groups, head, hostid, id, install, join, kill, link, ln, logname, ls, md5sum, mkdir, mkfifo, mknod, mktemp, mv, nice, nl, nohup, nproc, numfmt, od, paste, pathchk, pinky, pr, printenv, printf, ptx, pwd, readlink, realpath, rm, rmdir, runcon, seq, sha1sum, sha224sum, sha256sum, sha384sum, sha512sum, shred, shuf, sleep, sort, split, stat, stdbuf, stty, sum, sync, tac, tail, tee, test, timeout, touch, tr, true, truncate, tsort, tty, uname, unexpand, uniq, unlink, uptime, users, vdir, wc, who, whoami, yes    ed  ed, red    gawk  awk    grep  egrep, fgrep, grep    gnu-sed  sed    gnu-tar  tar    make  make    findutils  find, locate, updatedb, xargs     Conclusion Using the GNU flavor of command line tools (instead of the FreeBSD flavor) should simplify the task of writing shell scripts which can work across macOS and GNU/Linux.\n",
        "source":"\n{{\u003cdescription\u003e}}\n\u003cb\u003emacOS\u003c/b\u003e is a \u003cem\u003eUnix\u003c/em\u003e, and not built on \u003cem\u003eLinux\u003c/em\u003e. This can bite you when trying to write scripts which support both platforms.\n{{\u003c/description\u003e}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/macos@2x.png\" alt=\"macOS\"\u003e}}\n\nI think most of us realize that macOS isn't a Linux OS, but what that also means is that instead of shipping with the GNU flavor of command line tools, it ships with the FreeBSD flavor. As such, writing shell scripts which can work across both platforms can sometimes be challenging.\n\n## Homebrew\n\n[Homebrew](https://brew.sh) can be used to install the GNU versions of tools onto your Mac, but they are all prefixed with \"g\" by default.\n\n\u003e **NOTE:** All commands have been installed with the prefix \"g\". If you need to use these commands with their normal names, you can add a \"gnubin\" directory to your PATH from your bashrc.\n\n## Choosing GNU for Consistency\n\nYou can install most of the GNU flavored tools with:\n\n```bash\nbrew install coreutils ed findutils gawk gnu-sed gnu-tar grep make\n```\n\nAssuming you have a fairly standard Terminal/shell environment, and assuming that you want to use the GNU versions instead of the BSD versions for everything you've installed with Homebrew, you can append the following to your `~/.profile` file.\n\n```bash\n# Get list of gnubin directories\nexport GNUBINS=\"$(find /usr/local/opt -type d -follow -name gnubin -print)\";\n\nfor bindir in ${GNUBINS[@]}; do\n  export PATH=$bindir:$PATH;\ndone;\n```\n\n## Provided Binaries\n\n\u003ctable class=\"f6 w-100 mw8 center\" cellspacing=\"0\"\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth class=\"fw6 bb tl pb3 pr3 bg-white\" valign=\"top\"\u003ePackage\u003c/th\u003e\n      \u003cth class=\"fw6 bb tl pb3 pr3 bg-white\" valign=\"top\"\u003eProvides\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003ecoreutils\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003e[\u003c/code\u003e, \u003ccode\u003eb2sum\u003c/code\u003e, \u003ccode\u003ebase32\u003c/code\u003e, \u003ccode\u003ebase64\u003c/code\u003e, \u003ccode\u003ebasename\u003c/code\u003e, \u003ccode\u003ebasenc\u003c/code\u003e, \u003ccode\u003ecat\u003c/code\u003e, \u003ccode\u003echcon\u003c/code\u003e, \u003ccode\u003echgrp\u003c/code\u003e, \u003ccode\u003echmod\u003c/code\u003e, \u003ccode\u003echown\u003c/code\u003e, \u003ccode\u003echroot\u003c/code\u003e, \u003ccode\u003ecksum\u003c/code\u003e, \u003ccode\u003ecomm\u003c/code\u003e, \u003ccode\u003ecp\u003c/code\u003e, \u003ccode\u003ecsplit\u003c/code\u003e, \u003ccode\u003ecut\u003c/code\u003e, \u003ccode\u003edate\u003c/code\u003e, \u003ccode\u003edd\u003c/code\u003e, \u003ccode\u003edf\u003c/code\u003e, \u003ccode\u003edir\u003c/code\u003e, \u003ccode\u003edircolors\u003c/code\u003e, \u003ccode\u003edirname\u003c/code\u003e, \u003ccode\u003edu\u003c/code\u003e, \u003ccode\u003eecho\u003c/code\u003e, \u003ccode\u003eenv\u003c/code\u003e, \u003ccode\u003eexpand\u003c/code\u003e, \u003ccode\u003eexpr\u003c/code\u003e, \u003ccode\u003efactor\u003c/code\u003e, \u003ccode\u003efalse\u003c/code\u003e, \u003ccode\u003efmt\u003c/code\u003e, \u003ccode\u003efold\u003c/code\u003e, \u003ccode\u003egroups\u003c/code\u003e, \u003ccode\u003ehead\u003c/code\u003e, \u003ccode\u003ehostid\u003c/code\u003e, \u003ccode\u003eid\u003c/code\u003e, \u003ccode\u003einstall\u003c/code\u003e, \u003ccode\u003ejoin\u003c/code\u003e, \u003ccode\u003ekill\u003c/code\u003e, \u003ccode\u003elink\u003c/code\u003e, \u003ccode\u003eln\u003c/code\u003e, \u003ccode\u003elogname\u003c/code\u003e, \u003ccode\u003els\u003c/code\u003e, \u003ccode\u003emd5sum\u003c/code\u003e, \u003ccode\u003emkdir\u003c/code\u003e, \u003ccode\u003emkfifo\u003c/code\u003e, \u003ccode\u003emknod\u003c/code\u003e, \u003ccode\u003emktemp\u003c/code\u003e, \u003ccode\u003emv\u003c/code\u003e, \u003ccode\u003enice\u003c/code\u003e, \u003ccode\u003enl\u003c/code\u003e, \u003ccode\u003enohup\u003c/code\u003e, \u003ccode\u003enproc\u003c/code\u003e, \u003ccode\u003enumfmt\u003c/code\u003e, \u003ccode\u003eod\u003c/code\u003e, \u003ccode\u003epaste\u003c/code\u003e, \u003ccode\u003epathchk\u003c/code\u003e, \u003ccode\u003epinky\u003c/code\u003e, \u003ccode\u003epr\u003c/code\u003e, \u003ccode\u003eprintenv\u003c/code\u003e, \u003ccode\u003eprintf\u003c/code\u003e, \u003ccode\u003eptx\u003c/code\u003e, \u003ccode\u003epwd\u003c/code\u003e, \u003ccode\u003ereadlink\u003c/code\u003e, \u003ccode\u003erealpath\u003c/code\u003e, \u003ccode\u003erm\u003c/code\u003e, \u003ccode\u003ermdir\u003c/code\u003e, \u003ccode\u003eruncon\u003c/code\u003e, \u003ccode\u003eseq\u003c/code\u003e, \u003ccode\u003esha1sum\u003c/code\u003e, \u003ccode\u003esha224sum\u003c/code\u003e, \u003ccode\u003esha256sum\u003c/code\u003e, \u003ccode\u003esha384sum\u003c/code\u003e, \u003ccode\u003esha512sum\u003c/code\u003e, \u003ccode\u003eshred\u003c/code\u003e, \u003ccode\u003eshuf\u003c/code\u003e, \u003ccode\u003esleep\u003c/code\u003e, \u003ccode\u003esort\u003c/code\u003e, \u003ccode\u003esplit\u003c/code\u003e, \u003ccode\u003estat\u003c/code\u003e, \u003ccode\u003estdbuf\u003c/code\u003e, \u003ccode\u003estty\u003c/code\u003e, \u003ccode\u003esum\u003c/code\u003e, \u003ccode\u003esync\u003c/code\u003e, \u003ccode\u003etac\u003c/code\u003e, \u003ccode\u003etail\u003c/code\u003e, \u003ccode\u003etee\u003c/code\u003e, \u003ccode\u003etest\u003c/code\u003e, \u003ccode\u003etimeout\u003c/code\u003e, \u003ccode\u003etouch\u003c/code\u003e, \u003ccode\u003etr\u003c/code\u003e, \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003etruncate\u003c/code\u003e, \u003ccode\u003etsort\u003c/code\u003e, \u003ccode\u003etty\u003c/code\u003e, \u003ccode\u003euname\u003c/code\u003e, \u003ccode\u003eunexpand\u003c/code\u003e, \u003ccode\u003euniq\u003c/code\u003e, \u003ccode\u003eunlink\u003c/code\u003e, \u003ccode\u003euptime\u003c/code\u003e, \u003ccode\u003eusers\u003c/code\u003e, \u003ccode\u003evdir\u003c/code\u003e, \u003ccode\u003ewc\u003c/code\u003e, \u003ccode\u003ewho\u003c/code\u003e, \u003ccode\u003ewhoami\u003c/code\u003e, \u003ccode\u003eyes\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003eed\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003eed\u003c/code\u003e, \u003ccode\u003ered\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003egawk\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003eawk\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003egrep\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003eegrep\u003c/code\u003e, \u003ccode\u003efgrep\u003c/code\u003e, \u003ccode\u003egrep\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003egnu-sed\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003esed\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003egnu-tar\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003etar\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003emake\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003emake\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003efindutils\u003c/code\u003e\n      \u003c/td\u003e\n      \u003ctd class=\"pv3 pr3 bb\" valign=\"top\"\u003e\n        \u003ccode\u003efind\u003c/code\u003e, \u003ccode\u003elocate\u003c/code\u003e, \u003ccode\u003eupdatedb\u003c/code\u003e, \u003ccode\u003exargs\u003c/code\u003e\n      \u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\n## Conclusion\n\nUsing the GNU flavor of command line tools (instead of the FreeBSD flavor) should simplify the task of writing shell scripts which can work across macOS and GNU/Linux.\n"},
    "links": {
        "prev": {"title": "Running aws-vault in macOS with local Docker containers", "permalink": "https://ryanparman.com/posts/2019/running-aws-vault-with-local-docker-containers/"},
        "next": {"title": "How to create local TLS certificates for development on macOS", "permalink": "https://ryanparman.com/posts/2019/how-to-create-local-tls-certificates-for-development-on-macos/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Running aws-vault in macOS with local Docker containers",
    "description": "",
    "summary": {
        "content": "Overview aws-vault is a tool for storing your AWS credentials in your system keychain instead of as a plain text file on-disk. Credentials and other secrets (including your various system passwords) are stored inside your system keychain. They are encrypted, and cannot easily be stolen by a rogue script or application. By keeping your AWS credentials in your system keychain, they are available to you when you are logged in, unavailable when you are logged out, and provide an important layer of security that the standard plain text storage method does not.",
        "isTruncated": true
    },
    "published": "2019-04-19T01:32:30Z",
    "updated": "2019-12-26T16:46:47-08:00",
    "permalink": "https://ryanparman.com/posts/2019/running-aws-vault-with-local-docker-containers/",
    "relativePermalink": "/posts/2019/running-aws-vault-with-local-docker-containers/",
    "aliases": ["/2019/04/19/running-aws-vault-with-local-docker-containers"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2019/secure-auth@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2019/keychain@2x.jpg", "https://cdn.ryanparman.com/hugo/posts/2019/generate-tokens@2x.png", "https://cdn.ryanparman.com/hugo/posts/2018/docker-logo.jpg"],
    "videos": [],
    "categories": ["Software"],
    "tags": ["99designs", "aws", "aws-cli", "aws-vault", "bash", "docker", "ec2", "elastic-beanstalk", "golang", "keychain", "mac", "macos", "parameter-store", "secrets", "session-tokens", "site-reliability-engineering", "sre"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 896,
        "readingTime": "5 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2019/20190419-running-aws-vault-with-local-docker-containers.md",
        "logicalName": "20190419-running-aws-vault-with-local-docker-containers.md",
        "translationBaseName": "20190419-running-aws-vault-with-local-docker-containers",
        "baseFileName": "20190419-running-aws-vault-with-local-docker-containers",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2019/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#overview\"\u003eOverview\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#leveraging-the-keychain\"\u003eLeveraging the Keychain\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#aws-config-file\"\u003eAWS Config File\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#viewing-credentials\"\u003eViewing Credentials\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#token-types\"\u003eToken Types\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#passing-to-local-docker\"\u003ePassing to (local) Docker\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/secure-auth@2x.webp\" alt=\"Using aws-vault\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/secure-auth@2x.jpg\" alt=\"Using aws-vault\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"overview\"\u003eOverview\u003c/h2\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"https://github.com/99designs/aws-vault\"\u003eaws-vault\u003c/a\u003e\u003c/strong\u003e is a tool for storing your AWS credentials in your system keychain instead of as a plain text file on-disk.\u003c/p\u003e\n\u003cp\u003eCredentials and other secrets (including your various system passwords) are stored inside your system keychain. They are encrypted, and cannot easily be stolen by a rogue script or application. By keeping your AWS credentials in your system keychain, they are available to you when you are logged in, unavailable when you are logged out, and provide an important layer of security that the standard plain text storage method does not.\u003c/p\u003e\n\u003cp\u003eIt is designed to work cooperatively with the \u003ca href=\"https://aws.amazon.com/cli/\"\u003eAWS Unified CLI Tools\u003c/a\u003e. It also provides utilities for other AWS best practices such as being able to generate session tokens, or logging into the AWS Console with your IAM credentials using a simple command.\u003c/p\u003e\n\u003cp\u003eYou can learn more about the thinking behind it from the \u003ca href=\"https://99designs.com.au/tech-blog/blog/2015/10/26/aws-vault/\"\u003eoriginal 99 designs blog post\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"leveraging-the-keychain\"\u003eLeveraging the Keychain\u003c/h2\u003e\n\u003cp\u003eBy default, every Mac user has a \u003cem\u003esystem\u003c/em\u003e and a \u003cem\u003elogin\u003c/em\u003e keychain that stores the bulk of your secure information (e.g., certificate authorities which enable SSL/TLS connections, website passwords or credit cards saved in your browser).\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/keychain@2x.webp\" alt=\"Leveraging the Keychain\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/keychain@2x.jpg\" alt=\"Leveraging the Keychain\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eOn macOS, credentials are stored in a non-\u003cem\u003elogin\u003c/em\u003e keychain in \u003cem\u003eKeychain Access.app\u003c/em\u003e. Instead, they are stored in a new \u003cem\u003eaws-vault\u003c/em\u003e keychain. In order to manage these credentials with the \u003cem\u003eKeychain Access.app\u003c/em\u003e app, you\u0026rsquo;ll need to import it.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cem\u003eFile → Import Items…\u003c/em\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChoose \u003ccode\u003eaws-vault.keychain-db\u003c/code\u003e from the default directory.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRight click → \u003cem\u003eChange Settings for Keychain “aws-vault”…\u003c/em\u003e\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChange the value for \u003cem\u003eLock after {NUMBER} minutes of inactivity\u003c/em\u003e to something like 1440 minutes (1 day). Feel free to tune for security/convenience according to your tastes.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"aws-config-file\"\u003eAWS Config File\u003c/h2\u003e\n\u003cp\u003eAfter adding credentials to \u003ccode\u003eaws-vault\u003c/code\u003e (e.g., \u003ccode\u003eaws-vault add default\u003c/code\u003e), you can instruct the \u003ca href=\"https://aws.amazon.com/cli/\"\u003eaws-cli\u003c/a\u003e to use \u003ccode\u003eaws-vault\u003c/code\u003e instead of \u003ccode\u003e~/.aws/credentials\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eHere is an \u003ccode\u003e~/.aws/config\u003c/code\u003e entry for the \u003cem\u003edefault\u003c/em\u003e profile:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-ini\" data-lang=\"ini\"\u003e\u003cspan style=\"color:#66d9ef\"\u003e[default]\u003c/span\u003e\n\u003cspan style=\"color:#a6e22e\"\u003eregion\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eus-east-1\u003c/span\u003e\n\u003cspan style=\"color:#a6e22e\"\u003ecredential_process\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003eaws-vault exec -j default\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter all credentials are stored in \u003ccode\u003eaws-vault\u003c/code\u003e, and all \u003ccode\u003e~/.aws/config\u003c/code\u003e entries have been updated with the \u003ccode\u003ecredential_process\u003c/code\u003e line, \u003ccode\u003e~/.aws/credentials\u003c/code\u003e should be \u003cstrong\u003eempty\u003c/strong\u003e.\u003c/p\u003e\n\u003ch2 id=\"viewing-credentials\"\u003eViewing Credentials\u003c/h2\u003e\n\u003caside class=\"age aside container flex\"\u003e\n  \u003cp\u003emacOS ships with the FreeBSD flavor of command line tools instead of the GNU flavor which ships with most Linuxes. This post references the GNU flavor. Please see “\u003ca href=\"/posts/2019/using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools/\"\u003eUsing GNU command line tools in macOS instead of FreeBSD tools\u003c/a\u003e” for more information.\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003cp\u003eIf you want to view the credentials for a profile, or if you want to expose them as environment variables, you can run:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws-vault exec default -- env | grep --no-color ^AWS | sort\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIf you want to \u003cem\u003euse\u003c/em\u003e them, the \u003ca href=\"https://aws.amazon.com/cli/\"\u003eaws-cli\u003c/a\u003e will \u003ca href=\"https://docs.aws.amazon.com/cli/latest/topic/config-vars.html#id1\"\u003epick up environment variables before it looks for a credentials definition\u003c/a\u003e. So, if you want to use \u003ca href=\"https://github.com/99designs/aws-vault\"\u003eaws-vault\u003c/a\u003e with \u003ca href=\"https://aws.amazon.com/cli/\"\u003eaws-cli\u003c/a\u003e without specifying the \u003ccode\u003ecredential_process\u003c/code\u003e setting in your \u003ccode\u003e~/.aws/config\u003c/code\u003e entry, you can do something like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws-vault exec default -- aws s3 ls\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"token-types\"\u003eToken Types\u003c/h2\u003e\n\u003cp\u003eThe AWS CLI (and any other tools built on AWS SDKs) will leverage the \u003ccode\u003eAWS_SESSION_TOKEN\u003c/code\u003e and \u003ccode\u003eAWS_SECURITY_TOKEN\u003c/code\u003e values before leveraging the \u003ccode\u003eAWS_ACCESS_KEY_ID\u003c/code\u003e and \u003ccode\u003eAWS_SECRET_ACCESS_KEY\u003c/code\u003e values.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eAWS_SESSION_TOKEN\u003c/code\u003e and \u003ccode\u003eAWS_SECURITY_TOKEN\u003c/code\u003e tokens are more secure because they are ephemeral, and expire after a short (measured in hours) TTL. For this reason, these should generally be used instead of the \u003ccode\u003eAWS_ACCESS_KEY_ID\u003c/code\u003e and \u003ccode\u003eAWS_SECRET_ACCESS_KEY\u003c/code\u003e values.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/generate-tokens@2x.webp\" alt=\"Generating Secure Tokens\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/generate-tokens@2x.png\" alt=\"Generating Secure Tokens\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eBut there is an exception\u003c/strong\u003e — there are certain types of IAM-related tasks which cannot be performed using \u003ccode\u003eAWS_SESSION_TOKEN\u003c/code\u003e and \u003ccode\u003eAWS_SECURITY_TOKEN\u003c/code\u003e tokens, because they are IAM tokens themselves. In these cases, you want to fall back to the long-lived \u003ccode\u003eAWS_ACCESS_KEY_ID\u003c/code\u003e and \u003ccode\u003eAWS_SECRET_ACCESS_KEY\u003c/code\u003e values. You can do this by passing the \u003ccode\u003e--no-session\u003c/code\u003e option to the \u003ccode\u003eaws-vault\u003c/code\u003e command.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eaws-vault exec default --no-session -- env | grep --no-color ^AWS | sort\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere, you can see that the \u003ccode\u003eAWS_SESSION_TOKEN\u003c/code\u003e and \u003ccode\u003eAWS_SECURITY_TOKEN\u003c/code\u003e tokens are not generated, so the AWS CLI (and any other tools built on AWS SDKs) will leverage the \u003ccode\u003eAWS_ACCESS_KEY_ID\u003c/code\u003e and \u003ccode\u003eAWS_SECRET_ACCESS_KEY\u003c/code\u003e values instead.\u003c/p\u003e\n\u003ch2 id=\"passing-to-local-docker\"\u003ePassing to (local) Docker\u003c/h2\u003e\n\u003cp\u003eIt is becoming more popular to provide Docker containers for running software, especially when that software has a number of (potentially-complex) dependencies. By wrapping everything up into a nice little Docker image, it makes it much simpler to build and distribute software that is meant to run locally.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2018/docker-logo.webp\" alt=\"Docker Logo\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2018/docker-logo.jpg\" alt=\"Docker Logo\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWith the traditional \u003ccode\u003e~/.aws\u003c/code\u003e directory, you can mount it as read-only inside a Docker container if you want that Docker container to be able to communicate with AWS on your behalf.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker run -ti -v $HOME/.aws:/root/.aws:ro \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003eimage_name\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e sh\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEasy, right? Wrap it in a \u003ccode\u003eMakefile\u003c/code\u003e or a Bash \u003ccode\u003ealias\u003c/code\u003e, and call it a day.\u003c/p\u003e\n\u003cp\u003eBut using \u003ccode\u003eaws-vault\u003c/code\u003e makes this a little more complicated. \u003ccode\u003eaws-vault\u003c/code\u003e runs on your local machine (not inside your Docker container), and your \u003ccode\u003e~/.aws/credentials\u003c/code\u003e file is empty. How do we pass your credentials into a Docker container?\u003c/p\u003e\n\u003cp\u003eBy exporting the environment variables and passing them to \u003ccode\u003edocker run\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003edocker run -ti \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --env-file \u0026lt;\u003cspan style=\"color:#f92672\"\u003e(\u003c/span\u003eaws-vault exec default -- env | grep --no-color ^AWS_\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003eimage_name\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e sh\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003caside class=\"age aside container flex\"\u003e\n\u003cp\u003eTested in \u003cb\u003eBash 3.2.57\u003c/b\u003e (latest GPLv2 release; ships by default in macOS) + \u003cb\u003eBash 5.0.3\u003c/b\u003e (GPLv3; installed via Homebrew).\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003cp\u003eWow! What does this do?\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eExports the credentials to the environment.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFilters the environment variables by those that begin with \u003ccode\u003eAWS\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRun Docker, passing the \u003ccode\u003eAWS_*\u003c/code\u003e environment variables into Docker.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThis particular command will start an interactive \u003ccode\u003esh\u003c/code\u003e shell session. You can run other commands using \u003ca href=\"https://docs.docker.com/engine/reference/commandline/run/\"\u003e\u003ccode\u003edocker run\u003c/code\u003e\u003c/a\u003e as appropriate.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/99designs/aws-vault\"\u003eaws-vault\u003c/a\u003e is a great tool for managing your credentials, helping you work with AWS-related tooling, and makes it easy to follow best-practices. If you\u0026rsquo;re interested in learning more, check out the \u003ccode\u003eREADME\u003c/code\u003e.\u003c/p\u003e\n",
        "plain":"  Overview aws-vault is a tool for storing your AWS credentials in your system keychain instead of as a plain text file on-disk.\nCredentials and other secrets (including your various system passwords) are stored inside your system keychain. They are encrypted, and cannot easily be stolen by a rogue script or application. By keeping your AWS credentials in your system keychain, they are available to you when you are logged in, unavailable when you are logged out, and provide an important layer of security that the standard plain text storage method does not.\nIt is designed to work cooperatively with the AWS Unified CLI Tools. It also provides utilities for other AWS best practices such as being able to generate session tokens, or logging into the AWS Console with your IAM credentials using a simple command.\nYou can learn more about the thinking behind it from the original 99 designs blog post.\nLeveraging the Keychain By default, every Mac user has a system and a login keychain that stores the bulk of your secure information (e.g., certificate authorities which enable SSL/TLS connections, website passwords or credit cards saved in your browser).\n  On macOS, credentials are stored in a non-login keychain in Keychain Access.app. Instead, they are stored in a new aws-vault keychain. In order to manage these credentials with the Keychain Access.app app, you\u0026rsquo;ll need to import it.\n  File → Import Items…\n  Choose aws-vault.keychain-db from the default directory.\n  Right click → Change Settings for Keychain “aws-vault”…\n  Change the value for Lock after {NUMBER} minutes of inactivity to something like 1440 minutes (1 day). Feel free to tune for security/convenience according to your tastes.\n  AWS Config File After adding credentials to aws-vault (e.g., aws-vault add default), you can instruct the aws-cli to use aws-vault instead of ~/.aws/credentials.\nHere is an ~/.aws/config entry for the default profile:\n[default] region=us-east-1 credential_process=aws-vault exec -j default After all credentials are stored in aws-vault, and all ~/.aws/config entries have been updated with the credential_process line, ~/.aws/credentials should be empty.\nViewing Credentials macOS ships with the FreeBSD flavor of command line tools instead of the GNU flavor which ships with most Linuxes. This post references the GNU flavor. Please see “Using GNU command line tools in macOS instead of FreeBSD tools” for more information.\n If you want to view the credentials for a profile, or if you want to expose them as environment variables, you can run:\naws-vault exec default -- env | grep --no-color ^AWS | sort If you want to use them, the aws-cli will pick up environment variables before it looks for a credentials definition. So, if you want to use aws-vault with aws-cli without specifying the credential_process setting in your ~/.aws/config entry, you can do something like this:\naws-vault exec default -- aws s3 ls Token Types The AWS CLI (and any other tools built on AWS SDKs) will leverage the AWS_SESSION_TOKEN and AWS_SECURITY_TOKEN values before leveraging the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY values.\nAWS_SESSION_TOKEN and AWS_SECURITY_TOKEN tokens are more secure because they are ephemeral, and expire after a short (measured in hours) TTL. For this reason, these should generally be used instead of the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY values.\n  But there is an exception — there are certain types of IAM-related tasks which cannot be performed using AWS_SESSION_TOKEN and AWS_SECURITY_TOKEN tokens, because they are IAM tokens themselves. In these cases, you want to fall back to the long-lived AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY values. You can do this by passing the --no-session option to the aws-vault command.\naws-vault exec default --no-session -- env | grep --no-color ^AWS | sort Here, you can see that the AWS_SESSION_TOKEN and AWS_SECURITY_TOKEN tokens are not generated, so the AWS CLI (and any other tools built on AWS SDKs) will leverage the AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY values instead.\nPassing to (local) Docker It is becoming more popular to provide Docker containers for running software, especially when that software has a number of (potentially-complex) dependencies. By wrapping everything up into a nice little Docker image, it makes it much simpler to build and distribute software that is meant to run locally.\n  With the traditional ~/.aws directory, you can mount it as read-only inside a Docker container if you want that Docker container to be able to communicate with AWS on your behalf.\ndocker run -ti -v $HOME/.aws:/root/.aws:ro {image_name} sh Easy, right? Wrap it in a Makefile or a Bash alias, and call it a day.\nBut using aws-vault makes this a little more complicated. aws-vault runs on your local machine (not inside your Docker container), and your ~/.aws/credentials file is empty. How do we pass your credentials into a Docker container?\nBy exporting the environment variables and passing them to docker run.\ndocker run -ti \\  --env-file \u0026lt;(aws-vault exec default -- env | grep --no-color ^AWS_) \\  {image_name} sh  Tested in Bash 3.2.57 (latest GPLv2 release; ships by default in macOS) + Bash 5.0.3 (GPLv3; installed via Homebrew).\n Wow! What does this do?\n  Exports the credentials to the environment.\n  Filters the environment variables by those that begin with AWS.\n  Run Docker, passing the AWS_* environment variables into Docker.\n  This particular command will start an interactive sh shell session. You can run other commands using docker run as appropriate.\n  Conclusion aws-vault is a great tool for managing your credentials, helping you work with AWS-related tooling, and makes it easy to follow best-practices. If you\u0026rsquo;re interested in learning more, check out the README.\n",
        "source":"\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/secure-auth@2x.jpg\" alt=\"Using aws-vault\" width=\"2000\" height=\"873\" \u003e}}\n\n## Overview\n\n**[aws-vault]** is a tool for storing your AWS credentials in your system keychain instead of as a plain text file on-disk.\n\nCredentials and other secrets (including your various system passwords) are stored inside your system keychain. They are encrypted, and cannot easily be stolen by a rogue script or application. By keeping your AWS credentials in your system keychain, they are available to you when you are logged in, unavailable when you are logged out, and provide an important layer of security that the standard plain text storage method does not.\n\nIt is designed to work cooperatively with the [AWS Unified CLI Tools][aws-cli]. It also provides utilities for other AWS best practices such as being able to generate session tokens, or logging into the AWS Console with your IAM credentials using a simple command.\n\nYou can learn more about the thinking behind it from the [original 99 designs blog post]({{\u003c wayback \"https://99designs.com.au/tech-blog/blog/2015/10/26/aws-vault/\" \u003e}}).\n\n## Leveraging the Keychain\n\nBy default, every Mac user has a _system_ and a _login_ keychain that stores the bulk of your secure information (e.g., certificate authorities which enable SSL/TLS connections, website passwords or credit cards saved in your browser).\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/keychain@2x.jpg\" alt=\"Leveraging the Keychain\" width=\"1920\" height=\"1080\" \u003e}}\n\nOn macOS, credentials are stored in a non-_login_ keychain in _Keychain Access.app_. Instead, they are stored in a new _aws-vault_ keychain. In order to manage these credentials with the _Keychain Access.app_ app, you'll need to import it.\n\n1. _File → Import Items…_\n\n1. Choose `aws-vault.keychain-db` from the default directory.\n\n1. Right click → _Change Settings for Keychain “aws-vault”…_\n\n1. Change the value for _Lock after {NUMBER} minutes of inactivity_ to something like 1440 minutes (1 day). Feel free to tune for security/convenience according to your tastes.\n\n## AWS Config File\n\nAfter adding credentials to `aws-vault` (e.g., `aws-vault add default`), you can instruct the [aws-cli] to use `aws-vault` instead of `~/.aws/credentials`.\n\nHere is an `~/.aws/config` entry for the _default_ profile:\n\n```ini\n[default]\nregion=us-east-1\ncredential_process=aws-vault exec -j default\n```\n\nAfter all credentials are stored in `aws-vault`, and all `~/.aws/config` entries have been updated with the `credential_process` line, `~/.aws/credentials` should be **empty**.\n\n## Viewing Credentials\n\n{{\u003cmac-gnu\u003e}}\n\nIf you want to view the credentials for a profile, or if you want to expose them as environment variables, you can run:\n\n```bash\naws-vault exec default -- env | grep --no-color ^AWS | sort\n```\n\nIf you want to _use_ them, the [aws-cli] will [pick up environment variables before it looks for a credentials definition](https://docs.aws.amazon.com/cli/latest/topic/config-vars.html#id1). So, if you want to use [aws-vault] with [aws-cli] without specifying the `credential_process` setting in your `~/.aws/config` entry, you can do something like this:\n\n```bash\naws-vault exec default -- aws s3 ls\n```\n\n## Token Types\n\nThe AWS CLI (and any other tools built on AWS SDKs) will leverage the `AWS_SESSION_TOKEN` and `AWS_SECURITY_TOKEN` values before leveraging the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` values.\n\n`AWS_SESSION_TOKEN` and `AWS_SECURITY_TOKEN` tokens are more secure because they are ephemeral, and expire after a short (measured in hours) TTL. For this reason, these should generally be used instead of the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` values.\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/generate-tokens@2x.png\" alt=\"Generating Secure Tokens\" width=\"2000\" height=\"874\" \u003e}}\n\n**But there is an exception** — there are certain types of IAM-related tasks which cannot be performed using `AWS_SESSION_TOKEN` and `AWS_SECURITY_TOKEN` tokens, because they are IAM tokens themselves. In these cases, you want to fall back to the long-lived `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` values. You can do this by passing the `--no-session` option to the `aws-vault` command.\n\n```bash\naws-vault exec default --no-session -- env | grep --no-color ^AWS | sort\n```\n\nHere, you can see that the `AWS_SESSION_TOKEN` and `AWS_SECURITY_TOKEN` tokens are not generated, so the AWS CLI (and any other tools built on AWS SDKs) will leverage the `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY` values instead.\n\n## Passing to (local) Docker\n\nIt is becoming more popular to provide Docker containers for running software, especially when that software has a number of (potentially-complex) dependencies. By wrapping everything up into a nice little Docker image, it makes it much simpler to build and distribute software that is meant to run locally.\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2018/docker-logo.jpg\" alt=\"Docker Logo\" width=\"2400\" height=\"1048\" \u003e}}\n\nWith the traditional `~/.aws` directory, you can mount it as read-only inside a Docker container if you want that Docker container to be able to communicate with AWS on your behalf.\n\n```bash\ndocker run -ti -v $HOME/.aws:/root/.aws:ro {image_name} sh\n```\n\nEasy, right? Wrap it in a `Makefile` or a Bash `alias`, and call it a day.\n\nBut using `aws-vault` makes this a little more complicated. `aws-vault` runs on your local machine (not inside your Docker container), and your `~/.aws/credentials` file is empty. How do we pass your credentials into a Docker container?\n\nBy exporting the environment variables and passing them to `docker run`.\n\n```bash\ndocker run -ti \\\n    --env-file \u003c(aws-vault exec default -- env | grep --no-color ^AWS_) \\\n    {image_name} sh\n```\n\n{{\u003caside\u003e}}\n\u003cp\u003eTested in \u003cb\u003eBash 3.2.57\u003c/b\u003e (latest GPLv2 release; ships by default in macOS) + \u003cb\u003eBash 5.0.3\u003c/b\u003e (GPLv3; installed via Homebrew).\u003c/p\u003e\n{{\u003c/aside\u003e}}\n\nWow! What does this do?\n\n1. Exports the credentials to the environment.\n\n1. Filters the environment variables by those that begin with `AWS`.\n\n1. Run Docker, passing the `AWS_*` environment variables into Docker.\n\n1. This particular command will start an interactive `sh` shell session. You can run other commands using [`docker run`](https://docs.docker.com/engine/reference/commandline/run/) as appropriate.\n\n## Conclusion\n\n[aws-vault] is a great tool for managing your credentials, helping you work with AWS-related tooling, and makes it easy to follow best-practices. If you're interested in learning more, check out the `README`.\n\n  [aws-cli]: https://aws.amazon.com/cli/\n  [aws-vault]: https://github.com/99designs/aws-vault\n"},
    "links": {
        "prev": {"title": "Converting iMessage Stickers, Animoji, and Memoji to Slackmoji (Slack Emoji)", "permalink": "https://ryanparman.com/posts/2019/converting-imessage-stickers-animoji-and-memoji-to-slackmoji-slack-emoji/"},
        "next": {"title": "Using GNU command line tools in macOS instead of FreeBSD tools", "permalink": "https://ryanparman.com/posts/2019/using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Apple’s October 2014 Product Announcement",
    "description": "",
    "summary": {
        "content": "Apple’s October 16th product announcement begins at 10am PST; 1pm EST. My guesses? Definitely: OS X Yosemite, iTunes 12, and the next-gen iPad Air and iPad mini. Maybe: Updated Thunderbolt 2 + Retina display (I’d guessed at this last year and was wrong), iMac with Retina display, updates to the MacBook Pro line, Apple TV 4 with support for third-party apps. Not a chance: An HDTV, more info about Apple Watch, a mega-sized iPad, or a pull-string-to-talk Steve Jobs doll.",
        "isTruncated": true
    },
    "published": "2014-10-09T10:09:33Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2014/apples-october-2014-product-announcement/",
    "relativePermalink": "/posts/2014/apples-october-2014-product-announcement/",
    "aliases": ["/2014/10/09/apples-october-2014-product-announcement/"],
    "images": [],
    "videos": [],
    "categories": ["Apple"],
    "tags": ["apple", "macos", "yosemite", "itunes", "ipad air", "ipad mini", "apple watch", "apple hdtv", "touch id", "retina", "thunderbolt", "apple tv"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 301,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2014/20141009-apples-october-2014-product-announcement.md",
        "logicalName": "20141009-apples-october-2014-product-announcement.md",
        "translationBaseName": "20141009-apples-october-2014-product-announcement",
        "baseFileName": "20141009-apples-october-2014-product-announcement",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2014/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#my-guesses\"\u003eMy guesses?\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#new-ipads\"\u003eNew iPads\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#retina-thunderbolt-2-display\"\u003eRetina Thunderbolt 2 Display\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#apple-tv-4\"\u003eApple TV 4\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nApple’s October 16th product announcement begins at 10am PST; 1pm EST.\n\u003c/p\u003e\n\n\u003ch2 id=\"my-guesses\"\u003eMy guesses?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDefinitely:\u003c/strong\u003e OS X Yosemite, iTunes 12, and the next-gen iPad Air and iPad mini.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eMaybe:\u003c/strong\u003e Updated Thunderbolt 2 + Retina display (I’d guessed at this \u003ca href=\"/2013/09/10/apples-fall-2013-product-announcement/\"\u003elast year\u003c/a\u003e and was wrong), iMac with Retina display, updates to the MacBook Pro line, Apple TV 4 with support for third-party apps.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNot a chance:\u003c/strong\u003e An HDTV, more info about Apple Watch, a mega-sized iPad, or a pull-string-to-talk Steve Jobs doll.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"new-ipads\"\u003eNew iPads\u003c/h2\u003e\n\u003cp\u003eThinner, faster, beefier. I would expect to see a marginally-improved camera, and Touch ID is a definite.\u003c/p\u003e\n\u003cp\u003eiPad Air and iPad mini should have equal specs, except for the screen sizes. I don’t believe that a 12-point-whatever-inch “iPad Air Plus” will be a thing.\u003c/p\u003e\n\u003ch2 id=\"retina-thunderbolt-2-display\"\u003eRetina Thunderbolt 2 Display\u003c/h2\u003e\n\u003cp\u003eI’ve been looking forward to the successor to the Thunderbolt display for quite a while now, and I really hope that this is it. Thunderbolt 2 and USB 3.0 have been shipping in modern Macs for a couple of years now, and I’m anxious to see an updated display.\u003c/p\u003e\n\u003cp\u003eAlso, Helvetica looks like ass in Yosemite on non-Retina displays. It seems like a good time to update.\u003c/p\u003e\n\u003ch2 id=\"apple-tv-4\"\u003eApple TV 4\u003c/h2\u003e\n\u003cp\u003eI’ve also been keenly interested in seeing support for third-party apps on Apple TV.\u003c/p\u003e\n\u003cp\u003eWith modern SDK features like better scalability for different viewports, games for iPad (4:3) and iPhone (16:9), the introduction of a controller API in iOS 7, the Metal API, and a well-built system for managing your account, apps and games, introducing a new Apple TV capable of gaming and third-party apps seems ripe.\u003c/p\u003e\n\u003cp\u003eMaybe not PS4 or Xbox One-caliber just yet, but Apple TV has been outselling both of them (by an order of magnitude) for a couple of years now. Nintendo should be very, very worried.\u003c/p\u003e\n",
        "plain":"Apple’s October 16th product announcement begins at 10am PST; 1pm EST. My guesses?   Definitely: OS X Yosemite, iTunes 12, and the next-gen iPad Air and iPad mini.\n  Maybe: Updated Thunderbolt 2 + Retina display (I’d guessed at this last year and was wrong), iMac with Retina display, updates to the MacBook Pro line, Apple TV 4 with support for third-party apps.\n  Not a chance: An HDTV, more info about Apple Watch, a mega-sized iPad, or a pull-string-to-talk Steve Jobs doll.\n  New iPads Thinner, faster, beefier. I would expect to see a marginally-improved camera, and Touch ID is a definite.\niPad Air and iPad mini should have equal specs, except for the screen sizes. I don’t believe that a 12-point-whatever-inch “iPad Air Plus” will be a thing.\nRetina Thunderbolt 2 Display I’ve been looking forward to the successor to the Thunderbolt display for quite a while now, and I really hope that this is it. Thunderbolt 2 and USB 3.0 have been shipping in modern Macs for a couple of years now, and I’m anxious to see an updated display.\nAlso, Helvetica looks like ass in Yosemite on non-Retina displays. It seems like a good time to update.\nApple TV 4 I’ve also been keenly interested in seeing support for third-party apps on Apple TV.\nWith modern SDK features like better scalability for different viewports, games for iPad (4:3) and iPhone (16:9), the introduction of a controller API in iOS 7, the Metal API, and a well-built system for managing your account, apps and games, introducing a new Apple TV capable of gaming and third-party apps seems ripe.\nMaybe not PS4 or Xbox One-caliber just yet, but Apple TV has been outselling both of them (by an order of magnitude) for a couple of years now. Nintendo should be very, very worried.\n",
        "source":"\n{{\u003cdescription\u003e}}\nApple’s October 16th product announcement begins at 10am PST; 1pm EST.\n{{\u003c/description\u003e}}\n\n## My guesses?\n\n* **Definitely:** OS X Yosemite, iTunes 12, and the next-gen iPad Air and iPad mini.\n\n* **Maybe:** Updated Thunderbolt 2 + Retina display (I’d guessed at this [last year](/2013/09/10/apples-fall-2013-product-announcement/) and was wrong), iMac with Retina display, updates to the MacBook Pro line, Apple TV 4 with support for third-party apps.\n\n* **Not a chance:** An HDTV, more info about Apple Watch, a mega-sized iPad, or a pull-string-to-talk Steve Jobs doll.\n\n## New iPads\n\nThinner, faster, beefier. I would expect to see a marginally-improved camera, and Touch ID is a definite.\n\niPad Air and iPad mini should have equal specs, except for the screen sizes. I don’t believe that a 12-point-whatever-inch “iPad Air Plus” will be a thing.\n\n## Retina Thunderbolt 2 Display\n\nI’ve been looking forward to the successor to the Thunderbolt display for quite a while now, and I really hope that this is it. Thunderbolt 2 and USB 3.0 have been shipping in modern Macs for a couple of years now, and I’m anxious to see an updated display.\n\nAlso, Helvetica looks like ass in Yosemite on non-Retina displays. It seems like a good time to update.\n\n## Apple TV 4\n\nI’ve also been keenly interested in seeing support for third-party apps on Apple TV.\n\nWith modern SDK features like better scalability for different viewports, games for iPad (4:3) and iPhone (16:9), the introduction of a controller API in iOS 7, the Metal API, and a well-built system for managing your account, apps and games, introducing a new Apple TV capable of gaming and third-party apps seems ripe.\n\nMaybe not PS4 or Xbox One-caliber just yet, but Apple TV has been outselling both of them (by an order of magnitude) for a couple of years now. Nintendo should be very, very worried.\n"},
    "links": {
        "prev": {"title": "Dear Lockitron", "permalink": "https://ryanparman.com/posts/2014/dear-lockitron/"},
        "next": {"title": "Rest in Peace, Jonathan Troiano", "permalink": "https://ryanparman.com/posts/2015/rest-in-peace-jonathan-troiano/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Apple’s 2013 iPad Announcement",
    "description": "",
    "summary": {
        "content": "Last month, when writing about Apple’s Fall 2013 Product Announcement, I’d guessed at a few announcements that they didn’t end up making. Today, Apple announced all of those things and more. OS X Mavericks OS X 10.9 ”Mavericks”. Available today. Free (down from $19.99 last year). MacBook Air Lighter and faster than the last model. Faster 802.11ac wireless networking, Bluetooth 4.0 and Thunderbolt 2. Available today. Starting at $999. MacBook Pro with Retina Display Lighter and faster than the last model.",
        "isTruncated": true
    },
    "published": "2013-10-22T18:29:02Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/apples-2013-ipad-announcement/",
    "relativePermalink": "/posts/2013/apples-2013-ipad-announcement/",
    "aliases": ["/2013/10/22/apples-2013-ipad-announcement/"],
    "images": [],
    "videos": [],
    "categories": ["Apple"],
    "tags": ["apple", "macos", "mavericks", "macbook air", "macbook pro", "retina", "mac pro", "ipad air", "ipad mini"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 379,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20131022-apples-2013-ipad-announcement.md",
        "logicalName": "20131022-apples-2013-ipad-announcement.md",
        "translationBaseName": "20131022-apples-2013-ipad-announcement",
        "baseFileName": "20131022-apples-2013-ipad-announcement",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#os-x-mavericks\"\u003eOS X Mavericks\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#macbook-air\"\u003eMacBook Air\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#macbook-pro-with-retina-display\"\u003eMacBook Pro with Retina Display\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#macbook-pro-non-retina\"\u003eMacBook Pro (non-Retina)\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#mac-pro\"\u003eMac Pro\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#ilife-and-iwork-for-ios-and-os-x\"\u003eiLife and iWork (for iOS and OS X)\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#ipad-air\"\u003eiPad Air\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#ipad-mini-with-retina-display\"\u003eiPad mini with Retina Display\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#ipad\"\u003eiPad\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#what-was-not-announced-andor-what-we-didnt-get\"\u003eWhat was not announced and/or what we didn’t get\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eLast month, when writing about \u003ca href=\"/2013/09/10/apples-fall-2013-product-announcement/\"\u003eApple’s Fall 2013 Product Announcement\u003c/a\u003e, I’d guessed at a few announcements that they didn’t end up making. Today, Apple announced all of those things and more.\u003c/p\u003e\n\u003ch2 id=\"os-x-mavericks\"\u003eOS X Mavericks\u003c/h2\u003e\n\u003cp\u003eOS X 10.9 ”Mavericks”. Available today. Free (down from $19.99 last year).\u003c/p\u003e\n\u003ch2 id=\"macbook-air\"\u003eMacBook Air\u003c/h2\u003e\n\u003cp\u003eLighter and faster than the last model. Faster 802.11ac wireless networking, Bluetooth 4.0 and Thunderbolt 2. Available today. Starting at $999.\u003c/p\u003e\n\u003ch2 id=\"macbook-pro-with-retina-display\"\u003eMacBook Pro with Retina Display\u003c/h2\u003e\n\u003cp\u003eLighter and faster than the last model. Faster 802.11ac wireless networking, Bluetooth 4.0 and Thunderbolt 2. Available today. Starting at $1,299.\u003c/p\u003e\n\u003ch2 id=\"macbook-pro-non-retina\"\u003eMacBook Pro (non-Retina)\u003c/h2\u003e\n\u003cp\u003eQuietly discontinued in favor of the all-Retina lineup.\u003c/p\u003e\n\u003ch2 id=\"mac-pro\"\u003eMac Pro\u003c/h2\u003e\n\u003cp\u003eAn incredibly powerful machine. Faster 802.11ac wireless networking, Bluetooth 4.0 and Thunderbolt 2. Available in December. Starting at $2,999.\u003c/p\u003e\n\u003ch2 id=\"ilife-and-iwork-for-ios-and-os-x\"\u003eiLife and iWork (for iOS and OS X)\u003c/h2\u003e\n\u003cp\u003eNew versions for iOS as well as OS X. Faster, better, simpler, more powerful. Free with any Mac or iOS device purchase.\u003c/p\u003e\n\u003ch2 id=\"ipad-air\"\u003eiPad Air\u003c/h2\u003e\n\u003cp\u003eNew line of iPads, replaces “iPad classic”. Smaller, lighter, faster. MIMO wireless networking. Available November 1. Starting at $499. iPad 2 sticking around for $399.\u003c/p\u003e\n\u003ch2 id=\"ipad-mini-with-retina-display\"\u003eiPad mini with Retina Display\u003c/h2\u003e\n\u003cp\u003eiPad mini with a Retina Display. Starting at $399. Available in November. Last-generation iPad mini sticking around for $299.\u003c/p\u003e\n\u003ch2 id=\"ipad\"\u003eiPad\u003c/h2\u003e\n\u003cp\u003eQuietly discontinued in favor of the iPad Air.\u003c/p\u003e\n\u003ch2 id=\"what-was-not-announced-andor-what-we-didnt-get\"\u003eWhat was not announced and/or what we didn’t get\u003c/h2\u003e\n\u003cp\u003eFor all the rumor and speculation from analysts and pundits, here’s where we landed.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAnybody with a brain knew that there wouldn’t be an iWatch or iHDTV.\u003c/li\u003e\n\u003cli\u003eNo “Touch ID” fingerprint sensors in the new iPads. \u003ca href=\"https://web.archive.org/web/20131022182902/https://twitter.com/skyzyx/status/384494631204831233\"\u003eWe’ll be unlocking our iPads like neanderthals for the foreseeable future\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eNo iMac or Mac mini updates.\u003c/li\u003e\n\u003cli\u003eNo Apple TV updates.\u003c/li\u003e\n\u003cli\u003eNo updates to the Thunderbolt display. (I was secretly wishing for a Retina-capable Thunderbolt display with 4K resolution.)\u003c/li\u003e\n\u003cli\u003eiPad Air gets the same larger-pixel update as the iPhone 5s got for better indoor shots, but stays at 5 MP.\u003c/li\u003e\n\u003cli\u003eiPad Air and iPad mini are still on 802.11n wireless networking speeds, but the iPad Air makes up for it with dual-signal \u003ca href=\"https://web.archive.org/web/20131022182902/https://secure.wikimedia.org/wikipedia/en/wiki/MIMO\"\u003eMIMO networking\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eNo Gold/Champagne-colored iPads.\u003c/li\u003e\n\u003cli\u003eAfter reading through the things that the analysts are saying about Apple, they still have absolutely no idea how Apple works — despite Apple operating like clockwork, year after year.\u003c/li\u003e\n\u003c/ul\u003e\n",
        "plain":"Last month, when writing about Apple’s Fall 2013 Product Announcement, I’d guessed at a few announcements that they didn’t end up making. Today, Apple announced all of those things and more.\nOS X Mavericks OS X 10.9 ”Mavericks”. Available today. Free (down from $19.99 last year).\nMacBook Air Lighter and faster than the last model. Faster 802.11ac wireless networking, Bluetooth 4.0 and Thunderbolt 2. Available today. Starting at $999.\nMacBook Pro with Retina Display Lighter and faster than the last model. Faster 802.11ac wireless networking, Bluetooth 4.0 and Thunderbolt 2. Available today. Starting at $1,299.\nMacBook Pro (non-Retina) Quietly discontinued in favor of the all-Retina lineup.\nMac Pro An incredibly powerful machine. Faster 802.11ac wireless networking, Bluetooth 4.0 and Thunderbolt 2. Available in December. Starting at $2,999.\niLife and iWork (for iOS and OS X) New versions for iOS as well as OS X. Faster, better, simpler, more powerful. Free with any Mac or iOS device purchase.\niPad Air New line of iPads, replaces “iPad classic”. Smaller, lighter, faster. MIMO wireless networking. Available November 1. Starting at $499. iPad 2 sticking around for $399.\niPad mini with Retina Display iPad mini with a Retina Display. Starting at $399. Available in November. Last-generation iPad mini sticking around for $299.\niPad Quietly discontinued in favor of the iPad Air.\nWhat was not announced and/or what we didn’t get For all the rumor and speculation from analysts and pundits, here’s where we landed.\n Anybody with a brain knew that there wouldn’t be an iWatch or iHDTV. No “Touch ID” fingerprint sensors in the new iPads. We’ll be unlocking our iPads like neanderthals for the foreseeable future. No iMac or Mac mini updates. No Apple TV updates. No updates to the Thunderbolt display. (I was secretly wishing for a Retina-capable Thunderbolt display with 4K resolution.) iPad Air gets the same larger-pixel update as the iPhone 5s got for better indoor shots, but stays at 5 MP. iPad Air and iPad mini are still on 802.11n wireless networking speeds, but the iPad Air makes up for it with dual-signal MIMO networking. No Gold/Champagne-colored iPads. After reading through the things that the analysts are saying about Apple, they still have absolutely no idea how Apple works — despite Apple operating like clockwork, year after year.  ",
        "source":"\nLast month, when writing about [Apple’s Fall 2013 Product Announcement](/2013/09/10/apples-fall-2013-product-announcement/), I’d guessed at a few announcements that they didn’t end up making. Today, Apple announced all of those things and more.\n\n## OS X Mavericks\n\nOS X 10.9 ”Mavericks”. Available today. Free (down from $19.99 last year).\n\n## MacBook Air\n\nLighter and faster than the last model. Faster 802.11ac wireless networking, Bluetooth 4.0 and Thunderbolt 2. Available today. Starting at $999.\n\n## MacBook Pro with Retina Display\n\nLighter and faster than the last model. Faster 802.11ac wireless networking, Bluetooth 4.0 and Thunderbolt 2. Available today. Starting at $1,299.\n\n## MacBook Pro (non-Retina)\n\nQuietly discontinued in favor of the all-Retina lineup.\n\n## Mac Pro\n\nAn incredibly powerful machine. Faster 802.11ac wireless networking, Bluetooth 4.0 and Thunderbolt 2. Available in December. Starting at $2,999.\n\n## iLife and iWork (for iOS and OS X)\n\nNew versions for iOS as well as OS X. Faster, better, simpler, more powerful. Free with any Mac or iOS device purchase.\n\n## iPad Air\n\nNew line of iPads, replaces “iPad classic”. Smaller, lighter, faster. MIMO wireless networking. Available November 1. Starting at $499. iPad 2 sticking around for $399.\n\n## iPad mini with Retina Display\n\niPad mini with a Retina Display. Starting at $399. Available in November. Last-generation iPad mini sticking around for $299.\n\n## iPad\n\nQuietly discontinued in favor of the iPad Air.\n\n## What was not announced and/or what we didn’t get\n\nFor all the rumor and speculation from analysts and pundits, here’s where we landed.\n\n* Anybody with a brain knew that there wouldn’t be an iWatch or iHDTV.\n* No “Touch ID” fingerprint sensors in the new iPads. [We’ll be unlocking our iPads like neanderthals for the foreseeable future]({{% wayback \"https://twitter.com/skyzyx/status/384494631204831233\" %}}).\n* No iMac or Mac mini updates.\n* No Apple TV updates.\n* No updates to the Thunderbolt display. (I was secretly wishing for a Retina-capable Thunderbolt display with 4K resolution.)\n* iPad Air gets the same larger-pixel update as the iPhone 5s got for better indoor shots, but stays at 5 MP.\n* iPad Air and iPad mini are still on 802.11n wireless networking speeds, but the iPad Air makes up for it with dual-signal [MIMO networking]({{% wayback \"https://secure.wikimedia.org/wikipedia/en/wiki/MIMO\" %}}).\n* No Gold/Champagne-colored iPads.\n* After reading through the things that the analysts are saying about Apple, they still have absolutely no idea how Apple works — despite Apple operating like clockwork, year after year.\n"},
    "links": {
        "prev": {"title": "My experience with iOS 7", "permalink": "https://ryanparman.com/posts/2013/my-experience-with-ios-7/"},
        "next": {"title": "Password security is important. Start treating it like it is.", "permalink": "https://ryanparman.com/posts/2013/password-security-is-important-start-treating-it-like-it-is/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Apple’s Fall 2013 Product Announcement",
    "description": "",
    "summary": {
        "content": "Apple’s fall product announcement begins at 10am PST; 1pm EST. My guesses? Definitely: Next-gen iPhone 5S, iOS 7, OS X Mavericks, iTunes 11 (with iTunes Radio), updated MacBook Pro. Maybe: New iPads (though I’d bet on spring instead), lower unsubsidized-cost iPhone for other (non-American) countries, updated iMac, updated Thunderbolt 2 display (with USB 3.0). Not a chance: An HDTV, a wrist-watch, a pull-string-to-talk Steve Jobs doll. How’d I do? How good were my predictions?",
        "isTruncated": true
    },
    "published": "2013-09-10T16:49:33Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/apples-fall-2013-product-announcement/",
    "relativePermalink": "/posts/2013/apples-fall-2013-product-announcement/",
    "aliases": ["/2013/09/10/apples-fall-2013-product-announcement/"],
    "images": [],
    "videos": [],
    "categories": ["Apple"],
    "tags": ["apple", "iphone", "ios", "macos", "mavericks", "itunes", "macbook pro"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 147,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130910-apples-fall-2013-product-announcement.md",
        "logicalName": "20130910-apples-fall-2013-product-announcement.md",
        "translationBaseName": "20130910-apples-fall-2013-product-announcement",
        "baseFileName": "20130910-apples-fall-2013-product-announcement",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#my-guesses\"\u003eMy guesses?\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#howd-i-do\"\u003eHow’d I do?\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eApple’s \u003ca href=\"https://web.archive.org/web/20130910164933/http://live.theverge.com/apple-iphone-5s-liveblog/\"\u003efall product announcement\u003c/a\u003e begins at 10am PST; 1pm EST.\u003c/p\u003e\n\u003ch2 id=\"my-guesses\"\u003eMy guesses?\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDefinitely:\u003c/strong\u003e Next-gen iPhone 5S, iOS 7, OS X Mavericks, iTunes 11 (with iTunes Radio), updated MacBook Pro.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eMaybe:\u003c/strong\u003e New iPads (though I’d bet on spring instead), lower unsubsidized-cost iPhone for other (non-American) countries, updated iMac, updated Thunderbolt 2 display (with USB 3.0).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eNot a chance:\u003c/strong\u003e An HDTV, a wrist-watch, a pull-string-to-talk Steve Jobs doll.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"howd-i-do\"\u003eHow’d I do?\u003c/h2\u003e\n\u003cp\u003eHow good were my predictions? Well, this event was a little shorter than I was expecting and they only covered iPhone-related stuff.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eNext-gen \u003ca href=\"https://web.archive.org/web/20130910164933/http://www.apple.com/iphone-5s/\"\u003eiPhone 5S\u003c/a\u003e. Check.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://web.archive.org/web/20130910164933/http://www.apple.com/ios/\"\u003eiOS 7\u003c/a\u003e. Check.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://web.archive.org/web/20130910164933/http://www.apple.com/itunes/itunes-radio/\"\u003eiTunes Radio\u003c/a\u003e. Sort-of. It got coverage on the website, but not the event.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://web.archive.org/web/20130910164933/http://www.apple.com/iphone-5c/\"\u003eLower unsubsidized-cost iPhone\u003c/a\u003e for other (non-American) countries. I’m going to say I was wrong. Instead, Apple changed their strategy and created a slightly-modified iPhone 5 called the \u003cem\u003e5c\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNew MacBook Pro. I was also wrong here.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n",
        "plain":"Apple’s fall product announcement begins at 10am PST; 1pm EST.\nMy guesses?   Definitely: Next-gen iPhone 5S, iOS 7, OS X Mavericks, iTunes 11 (with iTunes Radio), updated MacBook Pro.\n  Maybe: New iPads (though I’d bet on spring instead), lower unsubsidized-cost iPhone for other (non-American) countries, updated iMac, updated Thunderbolt 2 display (with USB 3.0).\n  Not a chance: An HDTV, a wrist-watch, a pull-string-to-talk Steve Jobs doll.\n  How’d I do? How good were my predictions? Well, this event was a little shorter than I was expecting and they only covered iPhone-related stuff.\n  Next-gen iPhone 5S. Check.\n  iOS 7. Check.\n  iTunes Radio. Sort-of. It got coverage on the website, but not the event.\n  Lower unsubsidized-cost iPhone for other (non-American) countries. I’m going to say I was wrong. Instead, Apple changed their strategy and created a slightly-modified iPhone 5 called the 5c.\n  New MacBook Pro. I was also wrong here.\n  ",
        "source":"\nApple’s [fall product announcement]({{% wayback \"http://live.theverge.com/apple-iphone-5s-liveblog/\" %}}) begins at 10am PST; 1pm EST.\n\n## My guesses?\n\n* **Definitely:** Next-gen iPhone 5S, iOS 7, OS X Mavericks, iTunes 11 (with iTunes Radio), updated MacBook Pro.\n\n* **Maybe:** New iPads (though I’d bet on spring instead), lower unsubsidized-cost iPhone for other (non-American) countries, updated iMac, updated Thunderbolt 2 display (with USB 3.0).\n\n* **Not a chance:** An HDTV, a wrist-watch, a pull-string-to-talk Steve Jobs doll.\n\n## How’d I do?\n\nHow good were my predictions? Well, this event was a little shorter than I was expecting and they only covered iPhone-related stuff.\n\n* Next-gen [iPhone 5S]({{% wayback \"http://www.apple.com/iphone-5s/\" %}}). Check.\n\n* [iOS 7]({{% wayback \"http://www.apple.com/ios/\" %}}). Check.\n\n* [iTunes Radio]({{% wayback \"http://www.apple.com/itunes/itunes-radio/\" %}}). Sort-of. It got coverage on the website, but not the event.\n\n* [Lower unsubsidized-cost iPhone]({{% wayback \"http://www.apple.com/iphone-5c/\" %}}) for other (non-American) countries. I’m going to say I was wrong. Instead, Apple changed their strategy and created a slightly-modified iPhone 5 called the *5c*.\n\n* New MacBook Pro. I was also wrong here.\n"},
    "links": {
        "prev": {"title": "Stephen Elop to become the next Microsoft CEO? I’d buy it.", "permalink": "https://ryanparman.com/posts/2013/stephen-elop-to-become-the-next-microsoft-ceo-id-buy-it/"},
        "next": {"title": "My experience with iOS 7", "permalink": "https://ryanparman.com/posts/2013/my-experience-with-ios-7/"},
        "ignore": "me"
    }
}

            
        ]
    }
}
