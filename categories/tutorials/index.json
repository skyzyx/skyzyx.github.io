{
    "data": {
        
        
        "count": 6,
        "items": [
            
            {
    "kind": "page",
    "title": "How to create local TLS certificates for development on macOS",
    "description": "",
    "summary": {
        "content": "By creating a Certificate Authority (a.k.a., a “CA”) and trusting it locally, any certificate that we create using this CA will also be trusted locally. This can simplify the development of HTTPS websites on your local machine. This content is a fork of, and is largely based on, “Generating Self-Signed SSL Certificates for Use with Bluemix Custom Domains”, by Tony Erwin, dated 2014-09-15. The examples in this tutorial are from macOS Sierra (10.12). Create a local Certificate Authority Start by opening Keychain Access.",
        "isTruncated": true
    },
    "published": "2019-08-05T19:52:30Z",
    "updated": "2019-08-05T13:51:41-07:00",
    "permalink": "https://ryanparman.com/posts/2019/how-to-create-local-tls-certificates-for-development-on-macos/",
    "relativePermalink": "/posts/2019/how-to-create-local-tls-certificates-for-development-on-macos/",
    "aliases": ["/2019/08/05/how-to-create-local-tls-certificates-for-development-on-macos"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2019/prompt@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/confirming@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-basic-constraints@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-done@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-duration@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-issuer@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage-extension@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-keychain@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-no-san@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-ou@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-rsa@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-san@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-start@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-both@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-save@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-save@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-export@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-folder@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-save@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-always-trust@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-done@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-get-info@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-not-trusted@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-selection@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-start@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-system-defaults@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trust-done@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trusted@2x.png", "https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-cert-menu@2x.png"],
    "videos": [],
    "categories": ["Tutorials"],
    "tags": ["certificate", "certificate authority", "tls", "ssl", "encryption", "development", "local", "macos", "keychain", "pki", "self-signed", "trust", "tutorial"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 1411,
        "readingTime": "7 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2019/20190805-how-to-create-local-tls-certificates-for-development-on-macos.md",
        "logicalName": "20190805-how-to-create-local-tls-certificates-for-development-on-macos.md",
        "translationBaseName": "20190805-how-to-create-local-tls-certificates-for-development-on-macos",
        "baseFileName": "20190805-how-to-create-local-tls-certificates-for-development-on-macos",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2019/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#create-a-local-certificate-authority\"\u003eCreate a local Certificate Authority\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#open-the-certificate-assistant\"\u003eOpen the Certificate Assistant\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#enter-the-values\"\u003eEnter the Values\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#created\"\u003eCreated!\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#trust-the-new-ca\"\u003eTrust the New CA\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#create-a-local-certificate-from-your-new-certificate-authority\"\u003eCreate a local Certificate from your new Certificate Authority\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#open-the-certificate-assistant-1\"\u003eOpen the Certificate Assistant\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#create-your-certificate\"\u003eCreate your Certificate\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#configuring-validity\"\u003eConfiguring Validity\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#configuring-the-organizational-unit\"\u003eConfiguring the Organizational Unit\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#choose-an-issuer\"\u003eChoose an Issuer\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#key-pair-information\"\u003eKey Pair Information\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#key-usage-extension\"\u003eKey Usage Extension\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#extended-key-usage-extension\"\u003eExtended Key Usage Extension\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#basic-constraints-extension\"\u003eBasic Constraints Extension\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#subject-alternate-name-extension\"\u003eSubject Alternate Name Extension\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#specify-a-keychain-location-for-the-certificate\"\u003eSpecify a Keychain Location for the Certificate\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#all-done\"\u003eAll Done!\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#exporting-your-keypair-files\"\u003eExporting your Keypair Files\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#export-your-root-ca-certificate\"\u003eExport your Root CA Certificate\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#export-your-certificate\"\u003eExport your Certificate\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#export-your-private-key\"\u003eExport your Private Key\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#converting-files-into-pem-format\"\u003eConverting Files into PEM Format\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#convert-the-private-key-from-p12--pem\"\u003eConvert the Private Key from P12 → PEM\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#convert-the-certificate-from-cer--pem\"\u003eConvert the Certificate from CER → PEM\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#convert-the-root-ca-from-cer--pem\"\u003eConvert the root CA from CER → PEM\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#confirming-files\"\u003eConfirming Files\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#putting-these-certificates-to-use\"\u003ePutting these Certificates to Use\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#installing-http-server\"\u003eInstalling \u003ccode\u003ehttp-server\u003c/code\u003e\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#pretending-to-be-another-website-locally\"\u003ePretending to be another website, locally\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nBy creating a Certificate Authority (a.k.a., a “CA”) and trusting it locally, any certificate that we create using this CA will also be trusted locally. This can simplify the development of \u003cem\u003eHTTPS\u003c/em\u003e websites on your local machine.\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/prompt@2x.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/prompt@2x.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\n\u003caside class=\"age aside container flex\"\u003e\u003cp\u003eThis content is \u003cem\u003ea fork\u003c/em\u003e of, and is largely based on, \u003ca href=\"https://www.tonyerwin.com/2014/09/generating-self-signed-ssl-certificates.html\"\u003e“Generating Self-Signed SSL Certificates for Use with Bluemix Custom Domains”\u003c/a\u003e, by Tony Erwin, dated 2014-09-15.\u003c/p\u003e\n\u003cp\u003eThe examples in this tutorial are from macOS Sierra (10.12).\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003ch2 id=\"create-a-local-certificate-authority\"\u003eCreate a local Certificate Authority\u003c/h2\u003e\n\u003cp\u003eStart by opening \u003cem\u003eKeychain Access\u003c/em\u003e. You can either search for it inside Spotlight, or you can traverse the file system for \u003cem\u003eComputer\u003c/em\u003e → \u003cem\u003eApplications\u003c/em\u003e → \u003cem\u003eUtilities\u003c/em\u003e → \u003cem\u003eKeychain Access\u003c/em\u003e.\u003c/p\u003e\n\u003ch3 id=\"open-the-certificate-assistant\"\u003eOpen the Certificate Assistant\u003c/h3\u003e\n\u003cp\u003eGo to the \u003cem\u003eKeychain Access\u003c/em\u003e menu, and choose \u003cem\u003eCertificate Assistant\u003c/em\u003e → \u003cem\u003eCreate a Certificate Authority…\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-selection@2x.webp\" alt=\"Create a Certificate Authority…\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-selection@2x.png\" alt=\"Create a Certificate Authority…\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou should see the new Certificate Assistant.\u003c/p\u003e\n\u003ch3 id=\"enter-the-values\"\u003eEnter the Values\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-start@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003eGive it a name.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIdentity Type\u003c/strong\u003e should be \u003cem\u003eSelf Signed Root CA\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eUser Certificate\u003c/strong\u003e should be \u003cem\u003eSSL Server\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLet me override defaults\u003c/strong\u003e should be \u003cem\u003eunchecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMake this CA the default\u003c/strong\u003e is optional.\u003c/li\u003e\n\u003cli\u003eAdd your email address.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eCreate\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"created\"\u003eCreated!\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-done@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAll done! Feel free to close this window.\u003c/p\u003e\n\u003ch3 id=\"trust-the-new-ca\"\u003eTrust the New CA\u003c/h3\u003e\n\u003cp\u003eNow, you should be looking at your Keychain. Select \u003cem\u003eMy Certificates\u003c/em\u003e from the sidebar to filter down the list to what we care about.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-not-trusted@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou\u0026rsquo;ll notice that, by default, our new CA is not trusted. Right-click (or control-click, or two-finger click) the new CA, and choose \u003cem\u003eGet Info\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-get-info@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eMake sure that the \u003cem\u003eTrust\u003c/em\u003e section is visible. Click the small triangle if it isn\u0026rsquo;t.\u003c/p\u003e\n\u003cp\u003eYou should see that the default settings are configured for \u003cem\u003eSystem Defaults\u003c/em\u003e, and that “This root certificate is not trusted”.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-system-defaults@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNext to \u003cem\u003eWhen using this certificate:\u003c/em\u003e, open the pull-down menu and choose \u003cem\u003eAlways Trust\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-always-trust@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAll of the options should now flip to \u003cem\u003eAlways Trust\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trusted@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eBut we\u0026rsquo;re not quite done! When we close the window, we\u0026rsquo;ll be asked for our system password. You need to provide your password correctly before the settings will take effect.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trust-done@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"create-a-local-certificate-from-your-new-certificate-authority\"\u003eCreate a local Certificate from your new Certificate Authority\u003c/h2\u003e\n\u003ch3 id=\"open-the-certificate-assistant-1\"\u003eOpen the Certificate Assistant\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-cert-menu@2x.webp\" alt=\"Open the Certificate Assistant\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-cert-menu@2x.png\" alt=\"Open the Certificate Assistant\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"create-your-certificate\"\u003eCreate your Certificate\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-start@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eName\u003c/strong\u003e should be the hostname you want to create the certificate for (e.g., \u003ccode\u003elocalhost\u003c/code\u003e, \u003ccode\u003e*.google.com\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eIdentity Type\u003c/strong\u003e should be \u003cem\u003eLeaf\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCertificate Type\u003c/strong\u003e should be \u003cem\u003eSSL Server\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eLet me override defaults\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"configuring-validity\"\u003eConfiguring Validity\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-duration@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe default \u003cem\u003eValidity Period\u003c/em\u003e is 365 days. You could also set it to 2 years (730 days), 3 years (1095 days), or any amount you want. (This is a local-only certificate, after all.)\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"configuring-the-organizational-unit\"\u003eConfiguring the Organizational Unit\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-ou@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eEmail Address\u003c/strong\u003e should be your email address. Again, this is a local-only certificate, so this is generally unimportant.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eName (Common Name)\u003c/strong\u003e should be the hostname you want to create the certificate for (e.g., \u003ccode\u003elocalhost\u003c/code\u003e, \u003ccode\u003e*.google.com\u003c/code\u003e).\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOrganization\u003c/strong\u003e should be your company or organization.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eOrganizational Unit\u003c/strong\u003e is a smaller group inside of your company or organization.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCity\u003c/strong\u003e, \u003cstrong\u003eState\u003c/strong\u003e, \u003cstrong\u003eCountry\u003c/strong\u003e should all be self-explanitory.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"choose-an-issuer\"\u003eChoose an Issuer\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-issuer@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis should be the certificate authority that you created earlier.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"key-pair-information\"\u003eKey Pair Information\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-rsa@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eLeave this as-is. When you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"key-usage-extension\"\u003eKey Usage Extension\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eInclude Key Usage Extension\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThis extension is critical\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSignature\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eEverything else should be \u003cem\u003eunchecked\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"extended-key-usage-extension\"\u003eExtended Key Usage Extension\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage-extension@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eInclude Extended Key Usage Extension\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eThis extension is critical\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eSSL Server Authentication\u003c/strong\u003e should be \u003cem\u003echecked\u003c/em\u003e.\u003c/li\u003e\n\u003cli\u003eEverything else should be \u003cem\u003eunchecked\u003c/em\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"basic-constraints-extension\"\u003eBasic Constraints Extension\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-basic-constraints@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eLeave this as-is. When you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"subject-alternate-name-extension\"\u003eSubject Alternate Name Extension\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-no-san@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis \u003cem\u003eshould\u003c/em\u003e be disabled because we don’t need a SAN. If you encounter an error with this selection, you can enable it and set the \u003cstrong\u003edNSName\u003c/strong\u003e value to the same thing as your \u003cem\u003eCommon Name\u003c/em\u003e was (e.g., \u003ccode\u003elocalhost\u003c/code\u003e, \u003ccode\u003e*.google.com\u003c/code\u003e).\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-san@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"specify-a-keychain-location-for-the-certificate\"\u003eSpecify a Keychain Location for the Certificate\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-keychain@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis should be your \u003cem\u003elogin\u003c/em\u003e keychain, which gets unlocked whenever you login.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eContinue\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"all-done\"\u003eAll Done!\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-done@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou should notice that since we trusted our custom CA, and we configured that CA as the \u003cem\u003eIssuer\u003c/em\u003e for this certificate, that this certificate is already trusted by default.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eDone\u003c/em\u003e button.\u003c/p\u003e\n\u003ch2 id=\"exporting-your-keypair-files\"\u003eExporting your Keypair Files\u003c/h2\u003e\n\u003ch3 id=\"export-your-root-ca-certificate\"\u003eExport your Root CA Certificate\u003c/h3\u003e\n\u003cp\u003eSelect your root CA.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eRight-click (or control-click, or two-finger click) the new CA, and choose \u003cem\u003eExport…\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-export@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou\u0026rsquo;ll see a \u003cem\u003eSave As…\u003c/em\u003e dialog box, asking where you want to save your exported file. Type \u003cem\u003eCommand-Shift-G\u003c/em\u003e (⌘⇧G) to bring up a sub-dialog where you can enter the path that you want to traverse to.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-folder@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eYou can put the files anywhere you\u0026rsquo;d like, but in this example, I\u0026rsquo;m going to use \u003ccode\u003e~/.ssh/localhost/\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSince this path doesn’t exist by default, you can enter \u003ccode\u003e~/.ssh/\u003c/code\u003e, press \u003cem\u003eReturn\u003c/em\u003e, then choose the \u003cem\u003eNew Folder\u003c/em\u003e button along the bottom-left, and name it \u003cem\u003elocalhost\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-save@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAgain, you can give the file any name which makes sense to you. I\u0026rsquo;m going to use \u003ccode\u003eca-cert\u003c/code\u003e in this example. For the \u003cstrong\u003eFile Format\u003c/strong\u003e, choose \u003cem\u003eCertificate (.cer)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eSave\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"export-your-certificate\"\u003eExport your Certificate\u003c/h3\u003e\n\u003cp\u003eSelect your certificate.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eRight-click (or control-click, or two-finger click) the new certificate, and choose \u003cem\u003eExport…\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;ll see a \u003cem\u003eSave As…\u003c/em\u003e dialog box, asking where you want to save your exported file.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-save@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAgain, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain, e.g., \u003ccode\u003elocalhost\u003c/code\u003e in this example. For the \u003cstrong\u003eFile Format\u003c/strong\u003e, choose \u003cem\u003eCertificate (.cer)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eSave\u003c/em\u003e button.\u003c/p\u003e\n\u003ch3 id=\"export-your-private-key\"\u003eExport your Private Key\u003c/h3\u003e\n\u003cp\u003eSelect the private key for your certificate.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eRight-click (or control-click, or two-finger click) the new private key, and choose \u003cem\u003eExport…\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eYou\u0026rsquo;ll see a \u003cem\u003eSave As…\u003c/em\u003e dialog box, asking where you want to save your exported file.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-save@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eAgain, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain + \u003ccode\u003e.key\u003c/code\u003e, e.g., \u003ccode\u003elocalhost.key\u003c/code\u003e in this example. For the \u003cstrong\u003eFile Format\u003c/strong\u003e, choose \u003cem\u003ePersonal Information Exchange (.p12)\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eWhen you\u0026rsquo;re done, choose the \u003cem\u003eSave\u003c/em\u003e button. You will probably see a dialog which complains about the file extension.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-both@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eChoose \u003cem\u003eUse both\u003c/em\u003e.\u003c/p\u003e\n\u003ch2 id=\"converting-files-into-pem-format\"\u003eConverting Files into PEM Format\u003c/h2\u003e\n\u003cp\u003eOpen \u003cem\u003eTerminal\u003c/em\u003e, and navigate to the directory where we saved our exported files.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecd ~/.ssh/localhost/\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe\u0026rsquo;re going to use the \u003ccode\u003eopenssl\u003c/code\u003e command to convert our exported files into the widely-supported PEM format.\u003c/p\u003e\n\u003ch3 id=\"convert-the-private-key-from-p12--pem\"\u003eConvert the Private Key from P12 → PEM\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eopenssl pkcs12 -in localhost.key.p12 -nocerts -nodes | openssl rsa \u0026gt; localhost.key.pem\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"convert-the-certificate-from-cer--pem\"\u003eConvert the Certificate from CER → PEM\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eopenssl x509 -inform der -in localhost.cer -out localhost.cer.pem\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"convert-the-root-ca-from-cer--pem\"\u003eConvert the root CA from CER → PEM\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eopenssl x509 -inform der -in ca-cert.cer -out ca-cert.cer.pem\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"confirming-files\"\u003eConfirming Files\u003c/h3\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/confirming@2x.png\" layout=\"responsive\" width=\"\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"putting-these-certificates-to-use\"\u003ePutting these Certificates to Use\u003c/h2\u003e\n\u003cp\u003eYou now have a root CA, a certificate, and a private key that can be used on your local machine for faux-HTTPS connections.\u003c/p\u003e\n\u003cp\u003eAs an example for how these can be used, we\u0026rsquo;ll install the \u003ca href=\"https://www.npmjs.com/package/http-server\"\u003e\u003ccode\u003ehttp-server\u003c/code\u003e package from npm\u003c/a\u003e. (You\u0026rsquo;ll need \u003ca href=\"https://nodejs.org\"\u003eNode.js\u003c/a\u003e installed; See \u003ca href=\"https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md\"\u003eInstall \u003ccode\u003enpm\u003c/code\u003e packages globally without sudo on macOS and Linux\u003c/a\u003e for how to do this without \u003ccode\u003esudo\u003c/code\u003e.)\u003c/p\u003e\n\u003ch3 id=\"installing-http-server\"\u003eInstalling \u003ccode\u003ehttp-server\u003c/code\u003e\u003c/h3\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003enpm install -g http-server\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter the package is installed, you can run a local HTTPS server using the contents of the current directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehttp-server --ssl \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --cert ~/.ssh/localhost/localhost.cer.pem \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --key ~/.ssh/localhost/localhost.key.pem \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    -p \u003cspan style=\"color:#ae81ff\"\u003e8443\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eNow you can open \u003ca href=\"https://localhost:8443\"\u003ehttps://localhost:8443\u003c/a\u003e in your web browser.\u003c/p\u003e\n\u003ch2 id=\"pretending-to-be-another-website-locally\"\u003ePretending to be another website, locally\u003c/h2\u003e\n\u003cp\u003eLet\u0026rsquo;s say that you want to pretend to be \u003ccode\u003efake.google.com\u003c/code\u003e, locally.\u003c/p\u003e\n\u003cp\u003ePerhaps you\u0026rsquo;re testing something with CORS, or cookies, or something else where the domain name matters.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eAfter creating your root CA, create a new certificate where the common name is \u003ccode\u003e*.google.com\u003c/code\u003e. (Again, this will only work on your local machine.) Follow the same instructions you followed for \u003ccode\u003elocalhost\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRun \u003ccode\u003ehttp-server\u003c/code\u003e using your new fake \u003ccode\u003e*.google.com\u003c/code\u003e certificates. But instead, run it on port \u003ccode\u003e443\u003c/code\u003e. Since the port that we want to bind to is smaller than 1000, we\u0026rsquo;ll need to use \u003ccode\u003esudo\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo http-server --ssl \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --cert ~/.ssh/localhost/star.google.cer.pem \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --key ~/.ssh/localhost/star.google.key.pem \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    -p \u003cspan style=\"color:#ae81ff\"\u003e443\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn your \u003ccode\u003e/etc/hosts\u003c/code\u003e file, add a line that says \u003ccode\u003e127.0.0.1 fake.google.com\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn your web browser, visit \u003ca href=\"https://fake.google.com\"\u003ehttps://fake.google.com\u003c/a\u003e and you\u0026rsquo;ll see that it loads successfully. However, if you click on the lock in the address bar and view the certificate, you\u0026rsquo;ll see that the certificate was issued by your own custom root CA.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n",
        "plain":"By creating a Certificate Authority (a.k.a., a “CA”) and trusting it locally, any certificate that we create using this CA will also be trusted locally. This can simplify the development of HTTPS websites on your local machine.   This content is a fork of, and is largely based on, “Generating Self-Signed SSL Certificates for Use with Bluemix Custom Domains”, by Tony Erwin, dated 2014-09-15.\nThe examples in this tutorial are from macOS Sierra (10.12).\n Create a local Certificate Authority Start by opening Keychain Access. You can either search for it inside Spotlight, or you can traverse the file system for Computer → Applications → Utilities → Keychain Access.\nOpen the Certificate Assistant Go to the Keychain Access menu, and choose Certificate Assistant → Create a Certificate Authority….\n  You should see the new Certificate Assistant.\nEnter the Values    Give it a name. Identity Type should be Self Signed Root CA. User Certificate should be SSL Server. Let me override defaults should be unchecked. Make this CA the default is optional. Add your email address.  When you\u0026rsquo;re done, choose the Create button.\nCreated!   All done! Feel free to close this window.\nTrust the New CA Now, you should be looking at your Keychain. Select My Certificates from the sidebar to filter down the list to what we care about.\n  You\u0026rsquo;ll notice that, by default, our new CA is not trusted. Right-click (or control-click, or two-finger click) the new CA, and choose Get Info.\n  Make sure that the Trust section is visible. Click the small triangle if it isn\u0026rsquo;t.\nYou should see that the default settings are configured for System Defaults, and that “This root certificate is not trusted”.\n  Next to When using this certificate:, open the pull-down menu and choose Always Trust.\n  All of the options should now flip to Always Trust.\n  But we\u0026rsquo;re not quite done! When we close the window, we\u0026rsquo;ll be asked for our system password. You need to provide your password correctly before the settings will take effect.\n  Create a local Certificate from your new Certificate Authority Open the Certificate Assistant   Create your Certificate    Name should be the hostname you want to create the certificate for (e.g., localhost, *.google.com). Identity Type should be Leaf. Certificate Type should be SSL Server. Let me override defaults should be checked.  When you\u0026rsquo;re done, choose the Continue button.\nConfiguring Validity   The default Validity Period is 365 days. You could also set it to 2 years (730 days), 3 years (1095 days), or any amount you want. (This is a local-only certificate, after all.)\nWhen you\u0026rsquo;re done, choose the Continue button.\nConfiguring the Organizational Unit    Email Address should be your email address. Again, this is a local-only certificate, so this is generally unimportant. Name (Common Name) should be the hostname you want to create the certificate for (e.g., localhost, *.google.com). Organization should be your company or organization. Organizational Unit is a smaller group inside of your company or organization. City, State, Country should all be self-explanitory.  When you\u0026rsquo;re done, choose the Continue button.\nChoose an Issuer   This should be the certificate authority that you created earlier.\nWhen you\u0026rsquo;re done, choose the Continue button.\nKey Pair Information   Leave this as-is. When you\u0026rsquo;re done, choose the Continue button.\nKey Usage Extension    Include Key Usage Extension should be checked. This extension is critical should be checked. Signature should be checked. Everything else should be unchecked.  When you\u0026rsquo;re done, choose the Continue button.\nExtended Key Usage Extension    Include Extended Key Usage Extension should be checked. This extension is critical should be checked. SSL Server Authentication should be checked. Everything else should be unchecked.  When you\u0026rsquo;re done, choose the Continue button.\nBasic Constraints Extension   Leave this as-is. When you\u0026rsquo;re done, choose the Continue button.\nSubject Alternate Name Extension   This should be disabled because we don’t need a SAN. If you encounter an error with this selection, you can enable it and set the dNSName value to the same thing as your Common Name was (e.g., localhost, *.google.com).\n  When you\u0026rsquo;re done, choose the Continue button.\nSpecify a Keychain Location for the Certificate   This should be your login keychain, which gets unlocked whenever you login.\nWhen you\u0026rsquo;re done, choose the Continue button.\nAll Done!   You should notice that since we trusted our custom CA, and we configured that CA as the Issuer for this certificate, that this certificate is already trusted by default.\nWhen you\u0026rsquo;re done, choose the Done button.\nExporting your Keypair Files Export your Root CA Certificate Select your root CA.\n  Right-click (or control-click, or two-finger click) the new CA, and choose Export….\n  You\u0026rsquo;ll see a Save As… dialog box, asking where you want to save your exported file. Type Command-Shift-G (⌘⇧G) to bring up a sub-dialog where you can enter the path that you want to traverse to.\n  You can put the files anywhere you\u0026rsquo;d like, but in this example, I\u0026rsquo;m going to use ~/.ssh/localhost/.\nSince this path doesn’t exist by default, you can enter ~/.ssh/, press Return, then choose the New Folder button along the bottom-left, and name it localhost.\n  Again, you can give the file any name which makes sense to you. I\u0026rsquo;m going to use ca-cert in this example. For the File Format, choose Certificate (.cer).\nWhen you\u0026rsquo;re done, choose the Save button.\nExport your Certificate Select your certificate.\n  Right-click (or control-click, or two-finger click) the new certificate, and choose Export….\nYou\u0026rsquo;ll see a Save As… dialog box, asking where you want to save your exported file.\n  Again, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain, e.g., localhost in this example. For the File Format, choose Certificate (.cer).\nWhen you\u0026rsquo;re done, choose the Save button.\nExport your Private Key Select the private key for your certificate.\n  Right-click (or control-click, or two-finger click) the new private key, and choose Export….\nYou\u0026rsquo;ll see a Save As… dialog box, asking where you want to save your exported file.\n  Again, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain + .key, e.g., localhost.key in this example. For the File Format, choose Personal Information Exchange (.p12).\nWhen you\u0026rsquo;re done, choose the Save button. You will probably see a dialog which complains about the file extension.\n  Choose Use both.\nConverting Files into PEM Format Open Terminal, and navigate to the directory where we saved our exported files.\ncd ~/.ssh/localhost/ We\u0026rsquo;re going to use the openssl command to convert our exported files into the widely-supported PEM format.\nConvert the Private Key from P12 → PEM openssl pkcs12 -in localhost.key.p12 -nocerts -nodes | openssl rsa \u0026gt; localhost.key.pem Convert the Certificate from CER → PEM openssl x509 -inform der -in localhost.cer -out localhost.cer.pem Convert the root CA from CER → PEM openssl x509 -inform der -in ca-cert.cer -out ca-cert.cer.pem Confirming Files   Putting these Certificates to Use You now have a root CA, a certificate, and a private key that can be used on your local machine for faux-HTTPS connections.\nAs an example for how these can be used, we\u0026rsquo;ll install the http-server package from npm. (You\u0026rsquo;ll need Node.js installed; See Install npm packages globally without sudo on macOS and Linux for how to do this without sudo.)\nInstalling http-server npm install -g http-server After the package is installed, you can run a local HTTPS server using the contents of the current directory.\nhttp-server --ssl \\  --cert ~/.ssh/localhost/localhost.cer.pem \\  --key ~/.ssh/localhost/localhost.key.pem \\  -p 8443 Now you can open https://localhost:8443 in your web browser.\nPretending to be another website, locally Let\u0026rsquo;s say that you want to pretend to be fake.google.com, locally.\nPerhaps you\u0026rsquo;re testing something with CORS, or cookies, or something else where the domain name matters.\n  After creating your root CA, create a new certificate where the common name is *.google.com. (Again, this will only work on your local machine.) Follow the same instructions you followed for localhost.\n  Run http-server using your new fake *.google.com certificates. But instead, run it on port 443. Since the port that we want to bind to is smaller than 1000, we\u0026rsquo;ll need to use sudo.\nsudo http-server --ssl \\  --cert ~/.ssh/localhost/star.google.cer.pem \\  --key ~/.ssh/localhost/star.google.key.pem \\  -p 443   In your /etc/hosts file, add a line that says 127.0.0.1 fake.google.com.\n  In your web browser, visit https://fake.google.com and you\u0026rsquo;ll see that it loads successfully. However, if you click on the lock in the address bar and view the certificate, you\u0026rsquo;ll see that the certificate was issued by your own custom root CA.\n  ",
        "source":"\n{{\u003cdescription\u003e}}\nBy creating a Certificate Authority (a.k.a., a “CA”) and trusting it locally, any certificate that we create using this CA will also be trusted locally. This can simplify the development of \u003cem\u003eHTTPS\u003c/em\u003e websites on your local machine.\n{{\u003c/description\u003e}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/prompt@2x.png\"\u003e}}\n\n{{% aside %}}\nThis content is _a fork_ of, and is largely based on, [“Generating Self-Signed SSL Certificates for Use with Bluemix Custom Domains”](https://www.tonyerwin.com/2014/09/generating-self-signed-ssl-certificates.html), by Tony Erwin, dated 2014-09-15.\n\nThe examples in this tutorial are from macOS Sierra (10.12).\n{{% /aside %}}\n\n## Create a local Certificate Authority\n\nStart by opening _Keychain Access_. You can either search for it inside Spotlight, or you can traverse the file system for _Computer_ → _Applications_ → _Utilities_ → _Keychain Access_.\n\n### Open the Certificate Assistant\n\nGo to the _Keychain Access_ menu, and choose _Certificate Assistant_ → _Create a Certificate Authority…_.\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-selection@2x.png\" alt=\"Create a Certificate Authority…\"\u003e}}\n\nYou should see the new Certificate Assistant.\n\n### Enter the Values\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-start@2x.png\" alt=\"Create your new Certificate Authority…\"\u003e}}\n\n1. Give it a name.\n1. **Identity Type** should be _Self Signed Root CA_.\n1. **User Certificate** should be _SSL Server_.\n1. **Let me override defaults** should be _unchecked_.\n1. **Make this CA the default** is optional.\n1. Add your email address.\n\nWhen you're done, choose the _Create_ button.\n\n### Created!\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-done@2x.png\" alt=\"Certificate Authority has been created.\"\u003e}}\n\nAll done! Feel free to close this window.\n\n### Trust the New CA\n\nNow, you should be looking at your Keychain. Select _My Certificates_ from the sidebar to filter down the list to what we care about.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-not-trusted@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\nYou'll notice that, by default, our new CA is not trusted. Right-click (or control-click, or two-finger click) the new CA, and choose _Get Info_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-get-info@2x.png\" alt=\"Context menu, Get Info…\"\u003e}}\n\nMake sure that the _Trust_ section is visible. Click the small triangle if it isn't.\n\nYou should see that the default settings are configured for _System Defaults_, and that “This root certificate is not trusted”.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-system-defaults@2x.png\" alt=\"Trust options for Certificate Authority\"\u003e}}\n\nNext to _When using this certificate:_, open the pull-down menu and choose _Always Trust_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-always-trust@2x.png\" alt=\"Context menu, Always Trust\"\u003e}}\n\nAll of the options should now flip to _Always Trust_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trusted@2x.png\" alt=\"Trust options for Certificate Authority\"\u003e}}\n\nBut we're not quite done! When we close the window, we'll be asked for our system password. You need to provide your password correctly before the settings will take effect.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-ca-trust-done@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\n## Create a local Certificate from your new Certificate Authority\n\n### Open the Certificate Assistant\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/new-cert-menu@2x.png\" alt=\"Open the Certificate Assistant\"\u003e}}\n\n### Create your Certificate\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-start@2x.png\" alt=\"Create your Certificate\"\u003e}}\n\n1. **Name** should be the hostname you want to create the certificate for (e.g., `localhost`, `*.google.com`).\n1. **Identity Type** should be _Leaf_.\n1. **Certificate Type** should be _SSL Server_.\n1. **Let me override defaults** should be _checked_.\n\nWhen you're done, choose the _Continue_ button.\n\n### Configuring Validity\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-duration@2x.png\" alt=\"Configuring Validity\"\u003e}}\n\nThe default _Validity Period_ is 365 days. You could also set it to 2 years (730 days), 3 years (1095 days), or any amount you want. (This is a local-only certificate, after all.)\n\nWhen you're done, choose the _Continue_ button.\n\n### Configuring the Organizational Unit\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-ou@2x.png\" alt=\"Please specify some personal information below to be used in the certificate.\"\u003e}}\n\n1. **Email Address** should be your email address. Again, this is a local-only certificate, so this is generally unimportant.\n1. **Name (Common Name)** should be the hostname you want to create the certificate for (e.g., `localhost`, `*.google.com`).\n1. **Organization** should be your company or organization.\n1. **Organizational Unit** is a smaller group inside of your company or organization.\n1. **City**, **State**, **Country** should all be self-explanitory.\n\nWhen you're done, choose the _Continue_ button.\n\n### Choose an Issuer\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-issuer@2x.png\" alt=\"Choose an Issuer\"\u003e}}\n\nThis should be the certificate authority that you created earlier.\n\nWhen you're done, choose the _Continue_ button.\n\n### Key Pair Information\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-rsa@2x.png\" alt=\"Key Pair Information\"\u003e}}\n\nLeave this as-is. When you're done, choose the _Continue_ button.\n\n### Key Usage Extension\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage@2x.png\" alt=\"Key Usage Extension\"\u003e}}\n\n1. **Include Key Usage Extension** should be _checked_.\n1. **This extension is critical** should be _checked_.\n1. **Signature** should be _checked_.\n1. Everything else should be _unchecked_.\n\nWhen you're done, choose the _Continue_ button.\n\n### Extended Key Usage Extension\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-key-usage-extension@2x.png\" alt=\"Extended Key Usage Extension\"\u003e}}\n\n1. **Include Extended Key Usage Extension** should be _checked_.\n1. **This extension is critical** should be _checked_.\n1. **SSL Server Authentication** should be _checked_.\n1. Everything else should be _unchecked_.\n\nWhen you're done, choose the _Continue_ button.\n\n### Basic Constraints Extension\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-basic-constraints@2x.png\" alt=\"Basic Constraints Extension\"\u003e}}\n\nLeave this as-is. When you're done, choose the _Continue_ button.\n\n### Subject Alternate Name Extension\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-no-san@2x.png\" alt=\"Subject Alternate Name Extension\"\u003e}}\n\nThis _should_ be disabled because we don’t need a SAN. If you encounter an error with this selection, you can enable it and set the **dNSName** value to the same thing as your _Common Name_ was (e.g., `localhost`, `*.google.com`).\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-san@2x.png\" alt=\"Subject Alternate Name Extension, dNSName field\"\u003e}}\n\nWhen you're done, choose the _Continue_ button.\n\n### Specify a Keychain Location for the Certificate\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-keychain@2x.png\" alt=\"Specify a Keychain Location for the Certificate\"\u003e}}\n\nThis should be your _login_ keychain, which gets unlocked whenever you login.\n\nWhen you're done, choose the _Continue_ button.\n\n### All Done!\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/create-cert-done@2x.png\" alt=\"Your certificate has been successfully created.\"\u003e}}\n\nYou should notice that since we trusted our custom CA, and we configured that CA as the _Issuer_ for this certificate, that this certificate is already trusted by default.\n\nWhen you're done, choose the _Done_ button.\n\n## Exporting your Keypair Files\n\n### Export your Root CA Certificate\n\nSelect your root CA.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\nRight-click (or control-click, or two-finger click) the new CA, and choose _Export…_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-export@2x.png\" alt=\"Context menu, Export CA…\"\u003e}}\n\nYou'll see a _Save As…_ dialog box, asking where you want to save your exported file. Type _Command-Shift-G_ (⌘⇧G) to bring up a sub-dialog where you can enter the path that you want to traverse to.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-folder@2x.png\" alt=\"Dialog, Save As…\"\u003e}}\n\nYou can put the files anywhere you'd like, but in this example, I'm going to use `~/.ssh/localhost/`.\n\nSince this path doesn’t exist by default, you can enter `~/.ssh/`, press _Return_, then choose the _New Folder_ button along the bottom-left, and name it _localhost_.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-root-ca-save@2x.png\" alt=\"Dialog, Save As…\"\u003e}}\n\nAgain, you can give the file any name which makes sense to you. I'm going to use `ca-cert` in this example. For the **File Format**, choose _Certificate (.cer)_.\n\nWhen you're done, choose the _Save_ button.\n\n### Export your Certificate\n\nSelect your certificate.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\nRight-click (or control-click, or two-finger click) the new certificate, and choose _Export…_.\n\nYou'll see a _Save As…_ dialog box, asking where you want to save your exported file.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-save@2x.png\" alt=\"Dialog, Save As…\"\u003e}}\n\nAgain, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain, e.g., `localhost` in this example. For the **File Format**, choose _Certificate (.cer)_.\n\nWhen you're done, choose the _Save_ button.\n\n### Export your Private Key\n\nSelect the private key for your certificate.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key@2x.png\" alt=\"macOS Keychain Access\"\u003e}}\n\nRight-click (or control-click, or two-finger click) the new private key, and choose _Export…_.\n\nYou'll see a _Save As…_ dialog box, asking where you want to save your exported file.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-save@2x.png\" alt=\"Dialog, Save As…\"\u003e}}\n\nAgain, you can give the file any name which makes sense to you. I would recommend giving the file the same name as the domain + `.key`, e.g., `localhost.key` in this example. For the **File Format**, choose _Personal Information Exchange (.p12)_.\n\nWhen you're done, choose the _Save_ button. You will probably see a dialog which complains about the file extension.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/export-localhost-key-both@2x.png\" alt=\"Dialog, Use Both\"\u003e}}\n\nChoose _Use both_.\n\n## Converting Files into PEM Format\n\nOpen _Terminal_, and navigate to the directory where we saved our exported files.\n\n```bash\ncd ~/.ssh/localhost/\n```\n\nWe're going to use the `openssl` command to convert our exported files into the widely-supported PEM format.\n\n### Convert the Private Key from P12 → PEM\n\n```bash\nopenssl pkcs12 -in localhost.key.p12 -nocerts -nodes | openssl rsa \u003e localhost.key.pem\n```\n\n### Convert the Certificate from CER → PEM\n\n```bash\nopenssl x509 -inform der -in localhost.cer -out localhost.cer.pem\n```\n\n### Convert the root CA from CER → PEM\n\n```bash\nopenssl x509 -inform der -in ca-cert.cer -out ca-cert.cer.pem\n```\n\n### Confirming Files\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2019/local-tls-certs/confirming@2x.png\" alt=\"Finder window\"\u003e}}\n\n## Putting these Certificates to Use\n\nYou now have a root CA, a certificate, and a private key that can be used on your local machine for faux-HTTPS connections.\n\nAs an example for how these can be used, we'll install the [`http-server` package from npm](https://www.npmjs.com/package/http-server). (You'll need [Node.js](https://nodejs.org) installed; See [Install `npm` packages globally without sudo on macOS and Linux](https://github.com/sindresorhus/guides/blob/master/npm-global-without-sudo.md) for how to do this without `sudo`.)\n\n### Installing `http-server`\n\n```bash\nnpm install -g http-server\n```\n\nAfter the package is installed, you can run a local HTTPS server using the contents of the current directory.\n\n```bash\nhttp-server --ssl \\\n    --cert ~/.ssh/localhost/localhost.cer.pem \\\n    --key ~/.ssh/localhost/localhost.key.pem \\\n    -p 8443\n```\n\nNow you can open \u003chttps://localhost:8443\u003e in your web browser.\n\n## Pretending to be another website, locally\n\nLet's say that you want to pretend to be `fake.google.com`, locally.\n\nPerhaps you're testing something with CORS, or cookies, or something else where the domain name matters.\n\n1. After creating your root CA, create a new certificate where the common name is `*.google.com`. (Again, this will only work on your local machine.) Follow the same instructions you followed for `localhost`.\n\n1. Run `http-server` using your new fake `*.google.com` certificates. But instead, run it on port `443`. Since the port that we want to bind to is smaller than 1000, we'll need to use `sudo`.\n\n   ```bash\n   sudo http-server --ssl \\\n       --cert ~/.ssh/localhost/star.google.cer.pem \\\n       --key ~/.ssh/localhost/star.google.key.pem \\\n       -p 443\n   ```\n\n\n1. In your `/etc/hosts` file, add a line that says `127.0.0.1 fake.google.com`.\n\n1. In your web browser, visit \u003chttps://fake.google.com\u003e and you'll see that it loads successfully. However, if you click on the lock in the address bar and view the certificate, you'll see that the certificate was issued by your own custom root CA.\n"},
    "links": {
        "prev": {"title": "Using GNU command line tools in macOS instead of FreeBSD tools", "permalink": "https://ryanparman.com/posts/2019/using-gnu-command-line-tools-in-macos-instead-of-freebsd-tools/"},
        "next": {"title": "Playlist: Best of Foo Fighters", "permalink": "https://ryanparman.com/posts/2019/playlist-best-of-foo-fighters/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Converting MKV files to MP4, using Mac OS X, for playback on iPad, Apple TV, Playstation 3, Xbox 360, Roku and other players",
    "description": "",
    "summary": {
        "content": "Nearly 2 years ago, I became a Cord-Cutter. I couldn’t see the sense in paying a ton of money every month for 500 channels that I didn’t watch, just so that I could catch the occasional show. I invested in Netflix and Hulu Plus accounts so that I could watch most of my shows, and for the shows that haven’t made their way into the 21 century yet, there are plenty of places online where you can acquire the latest episodes.",
        "isTruncated": true
    },
    "published": "2013-04-10T07:45:02Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/",
    "relativePermalink": "/posts/2013/converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/",
    "aliases": ["/2013/04/09/converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/"],
    "images": ["https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mkv.png"],
    "videos": [],
    "categories": ["Tutorials"],
    "tags": ["netflix", "hulu", "blu-ray", "dvd", "handbrake", "mkv", "aac", "ac3", "mp4", "h.264", "atomicparsley", "metax", "metaz", "subler", "mp4v2", "itunes"],
    "series": ["Handbrake"],
    "keywords": [],
    "meta": {
        "wordCount": 843,
        "readingTime": "4 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130410-converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players.md",
        "logicalName": "20130410-converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players.md",
        "translationBaseName": "20130410-converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players",
        "baseFileName": "20130410-converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#crash-course-in-digital-video-formats\"\u003eCrash Course in Digital Video Formats\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#mkv--mp4\"\u003eMKV → MP4\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#metadata-and-artwork\"\u003eMetadata and Artwork\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#renaming\"\u003eRenaming\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#streaming-from-itunes\"\u003eStreaming from iTunes\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nNearly 2 years ago, I became a \u003cem\u003eCord-Cutter\u003c/em\u003e. I couldn’t see the sense in paying a ton of money every month for 500 channels that I didn’t watch, just so that I could catch the occasional show.\n\u003c/p\u003e\n\n\u003cp\u003eI invested in \u003ca href=\"https://web.archive.org/web/20130410074502/http://netflix.com\"\u003eNetflix\u003c/a\u003e and \u003ca href=\"https://web.archive.org/web/20130410074502/http://hulu.com/plus\"\u003eHulu Plus\u003c/a\u003e accounts so that I could watch most of my shows, and for the shows that haven’t made their way into the 21 century yet, there are plenty of places online where you can acquire the latest episodes.\u003c/p\u003e\n\u003cp\u003eIf you read my previous post on \u003ca href=\"/2013/04/08/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/\"\u003econverting Blu-ray and DVD movies to MP4\u003c/a\u003e, this process has a slightly different flow.\u003c/p\u003e\n\u003ch2 id=\"crash-course-in-digital-video-formats\"\u003eCrash Course in Digital Video Formats\u003c/h2\u003e\n\u003cp\u003eThese days, if you (ahem) \u003cem\u003eacquire\u003c/em\u003e a high-definition copy of your favorite show online (commonly in 720p), it will most likely be in MKV/H.264/AC3 format.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mkv.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mkv.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe short explanation is that every video file is made up of \u003cstrong\u003e3 different parts\u003c/strong\u003e: the \u003cstrong\u003evideo stream\u003c/strong\u003e, the \u003cstrong\u003eaudio stream\u003c/strong\u003e, and the \u003cstrong\u003econtainer\u003c/strong\u003e. The audio and video are synced-up (a.k.a., “multiplexed” or “muxed”) and are bundled together into a single file using a container format.\u003c/p\u003e\n\u003cp\u003eIf you want to make yourself a little more educated about this stuff, check out the “\u003ca href=\"https://web.archive.org/web/20130410074502/http://diveintohtml5.info/video.html\"\u003eVideo on the Web\u003c/a\u003e” chapter of \u003cem\u003eDive Into HTML5\u003c/em\u003e by Mark Pilgrim.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eMKV\u003c/strong\u003e is a popular container format because it’s designed to be a kitchen sink. You can throw all sorts of stuff inside this container, so people like to stash it full of subtitle files and other sorts of things. \u003cstrong\u003eAC3\u003c/strong\u003e is the name of the \u003cem\u003eDolby Digital\u003c/em\u003e surround-sound audio format. You typically need a dedicated decoder ship to handle this kind of audio, which is common in modern receivers and some TVs.\u003c/p\u003e\n\u003ch2 id=\"mkv--mp4\"\u003eMKV → MP4\u003c/h2\u003e\n\u003cp\u003eThe first thing we need to do download a copy of \u003ca href=\"https://web.archive.org/web/20130410074502/http://www.emmgunn.com/mp4tools/mp4toolshome.html\"\u003eMP4Tools\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eWhile you can use it without a license, it’s always a good idea to support the independent software developers who write this stuff — especially if its useful.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mp4tools-default.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mp4tools-default.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhen you drag your MKV file into MP4Tools, you should see two entries — the video stream and the audio stream.\u003c/p\u003e\n\u003cp\u003eThe video stream should already be in \u003cstrong\u003eH.264\u003c/strong\u003e format. (If it isn’t, stop what you’re doing and run the file through \u003ca href=\"https://web.archive.org/web/20130410074502/http://handbrake.fr\"\u003eHandbrake\u003c/a\u003e instead.) Check the box next to the stream to select it.\u003c/p\u003e\n\u003cp\u003eIf the audio stream is already in \u003cstrong\u003eAAC\u003c/strong\u003e format, this will be very simple. If the audio stream is in \u003cstrong\u003eAC3\u003c/strong\u003e format, this will still be simple, but will take a little longer to complete.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mp4tools-working.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mp4tools-working.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eFor \u003cstrong\u003eH.264\u003c/strong\u003e video, choose \u003cem\u003ePass Thru\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFor \u003cstrong\u003eAAC\u003c/strong\u003e audio (if available), choose \u003cem\u003ePass Thru\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFor \u003cstrong\u003eAC3\u003c/strong\u003e audio (if available), choose the highest AAC audio selection you have available (either \u003cem\u003eAAC (2-Ch.)\u003c/em\u003e or \u003cem\u003eAAC (5.1)\u003c/em\u003e). If you selected \u003cem\u003eAAC (5.1)\u003c/em\u003e, also check the box for \u003cem\u003eadd 2-Ch. Track\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eLastly, choose your intended device. The \u003cem\u003eApple TV\u003c/em\u003e setting tends to have the broadest compatibility in my experience. Leave everything else as the default setting, and click the \u003cem\u003eConvert\u003c/em\u003e button.\u003c/p\u003e\n\u003cp\u003eIn a few minutes, you should have a new \u003ccode\u003e.m4v\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/m4v.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/m4v.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"metadata-and-artwork\"\u003eMetadata and Artwork\u003c/h2\u003e\n\u003cp\u003eIt’s possible that you may have heard of \u003cem\u003eAtomicParsley\u003c/em\u003e, \u003cem\u003eMetaX\u003c/em\u003e or \u003cem\u003eMetaZ\u003c/em\u003e before. They all suck. Check out \u003ca href=\"https://web.archive.org/web/20130410074502/http://code.google.com/p/subler/\"\u003eSubler\u003c/a\u003e instead.\u003c/p\u003e\n\u003cp\u003eOnce you have your \u003ccode\u003e.m4v\u003c/code\u003e file, you’ll want to add the metadata and artwork to the file. As long as the video file starts with a format similar to \u003ccode\u003e\u0026lt;show\u0026gt;.s\u0026lt;#\u0026gt;e\u0026lt;#\u0026gt;\u003c/code\u003e (e.g., \u003ccode\u003eWeeds.s7e1\u003c/code\u003e), Subler will be able to determine the right things to search for.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-metadata.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-metadata.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSubler queries \u003ca href=\"https://web.archive.org/web/20130410074502/http://thetvdb.com\"\u003eTVDB\u003c/a\u003e for TV show data, although I’m generally unimpressed with the TV show artwork. For that, I use \u003ca href=\"https://web.archive.org/web/20130410074502/http://getvideoartwork.com\"\u003eGet Video Artwork\u003c/a\u003e and download the iTunes-compatible, square-shaped TV show artwork.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-artwork.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-artwork.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhile Subler does a good job of checking the right boxes automatically, you’ll want to check the \u003cem\u003eOther Settings\u003c/em\u003e and make sure that the resolution and media kind are set correctly for your new \u003ccode\u003e.m4v\u003c/code\u003e file.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-other.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-other.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"renaming\"\u003eRenaming\u003c/h2\u003e\n\u003cp\u003eI prefer to keep my video files sorted by \u003ccode\u003e\u0026lt;show\u0026gt;/\u0026lt;season\u0026gt;/\u0026lt;file\u0026gt;\u003c/code\u003e. I also go so far to name my files as \u003ccode\u003eS.E - Title.mp4\u003c/code\u003e (e.g., a recent episode of \u003cem\u003eSupernatural\u003c/em\u003e was labeled \u003cem\u003e8.15 - Man’s Best Friend with Benefits\u003c/em\u003e).\u003c/p\u003e\n\u003cp\u003eGoing episode-by-episode can be very tedious, so I wrote up a \u003ca href=\"https://web.archive.org/web/20130410074502/https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/rename-workflow.zip\"\u003eMac OS X service\u003c/a\u003e to handle this for me. The only prerequisite is to install a package called \u003ca href=\"https://web.archive.org/web/20130410074502/https://trac.macports.org/browser/trunk/dports/multimedia/mp4v2/Portfile\"\u003emp4v2\u003c/a\u003e from \u003ca href=\"https://web.archive.org/web/20130410074502/http://macports.org\"\u003eMacPorts\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo port install mp4v2\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eOnce you’ve installed MacPorts (if you hadn’t already) and the \u003cstrong\u003emp4v2\u003c/strong\u003e package, you can install the OS X service by double-clicking it. (It’s an Automator action, so feel free to take a look at what it does before installing it.)\u003c/p\u003e\n\u003cp\u003eWith everything installed, you can now right-click on one or more video files, choose \u003cem\u003eServices\u003c/em\u003e, then “Rename video to 1.01 - Title.mp4”.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/workflow.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/workflow.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWithin a few seconds, the Automator workflow will read the contents of the video file for the season number, episode number, and episode title, and rename the file automatically.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/done.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/done.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"streaming-from-itunes\"\u003eStreaming from iTunes\u003c/h2\u003e\n\u003cp\u003eI’ve already covered this in my \u003ca href=\"/2013/04/08/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/\"\u003eprevious post\u003c/a\u003e, so I’m not going to go over it again here.\u003c/p\u003e\n\u003cp\u003eOnce it’s in iTunes, you can sync shows to your smartphone, iPad, or stream them to a variety of devices throughout your home.\u003c/p\u003e\n",
        "plain":"Nearly 2 years ago, I became a Cord-Cutter. I couldn’t see the sense in paying a ton of money every month for 500 channels that I didn’t watch, just so that I could catch the occasional show. I invested in Netflix and Hulu Plus accounts so that I could watch most of my shows, and for the shows that haven’t made their way into the 21 century yet, there are plenty of places online where you can acquire the latest episodes.\nIf you read my previous post on converting Blu-ray and DVD movies to MP4, this process has a slightly different flow.\nCrash Course in Digital Video Formats These days, if you (ahem) acquire a high-definition copy of your favorite show online (commonly in 720p), it will most likely be in MKV/H.264/AC3 format.\n  The short explanation is that every video file is made up of 3 different parts: the video stream, the audio stream, and the container. The audio and video are synced-up (a.k.a., “multiplexed” or “muxed”) and are bundled together into a single file using a container format.\nIf you want to make yourself a little more educated about this stuff, check out the “Video on the Web” chapter of Dive Into HTML5 by Mark Pilgrim.\nMKV is a popular container format because it’s designed to be a kitchen sink. You can throw all sorts of stuff inside this container, so people like to stash it full of subtitle files and other sorts of things. AC3 is the name of the Dolby Digital surround-sound audio format. You typically need a dedicated decoder ship to handle this kind of audio, which is common in modern receivers and some TVs.\nMKV → MP4 The first thing we need to do download a copy of MP4Tools.\nWhile you can use it without a license, it’s always a good idea to support the independent software developers who write this stuff — especially if its useful.\n  When you drag your MKV file into MP4Tools, you should see two entries — the video stream and the audio stream.\nThe video stream should already be in H.264 format. (If it isn’t, stop what you’re doing and run the file through Handbrake instead.) Check the box next to the stream to select it.\nIf the audio stream is already in AAC format, this will be very simple. If the audio stream is in AC3 format, this will still be simple, but will take a little longer to complete.\n    For H.264 video, choose Pass Thru.\n  For AAC audio (if available), choose Pass Thru.\n  For AC3 audio (if available), choose the highest AAC audio selection you have available (either AAC (2-Ch.) or AAC (5.1)). If you selected AAC (5.1), also check the box for add 2-Ch. Track.\n  Lastly, choose your intended device. The Apple TV setting tends to have the broadest compatibility in my experience. Leave everything else as the default setting, and click the Convert button.\nIn a few minutes, you should have a new .m4v file.\n  Metadata and Artwork It’s possible that you may have heard of AtomicParsley, MetaX or MetaZ before. They all suck. Check out Subler instead.\nOnce you have your .m4v file, you’ll want to add the metadata and artwork to the file. As long as the video file starts with a format similar to \u0026lt;show\u0026gt;.s\u0026lt;#\u0026gt;e\u0026lt;#\u0026gt; (e.g., Weeds.s7e1), Subler will be able to determine the right things to search for.\n  Subler queries TVDB for TV show data, although I’m generally unimpressed with the TV show artwork. For that, I use Get Video Artwork and download the iTunes-compatible, square-shaped TV show artwork.\n  While Subler does a good job of checking the right boxes automatically, you’ll want to check the Other Settings and make sure that the resolution and media kind are set correctly for your new .m4v file.\n  Renaming I prefer to keep my video files sorted by \u0026lt;show\u0026gt;/\u0026lt;season\u0026gt;/\u0026lt;file\u0026gt;. I also go so far to name my files as S.E - Title.mp4 (e.g., a recent episode of Supernatural was labeled 8.15 - Man’s Best Friend with Benefits).\nGoing episode-by-episode can be very tedious, so I wrote up a Mac OS X service to handle this for me. The only prerequisite is to install a package called mp4v2 from MacPorts.\nsudo port install mp4v2 Once you’ve installed MacPorts (if you hadn’t already) and the mp4v2 package, you can install the OS X service by double-clicking it. (It’s an Automator action, so feel free to take a look at what it does before installing it.)\nWith everything installed, you can now right-click on one or more video files, choose Services, then “Rename video to 1.01 - Title.mp4”.\n  Within a few seconds, the Automator workflow will read the contents of the video file for the season number, episode number, and episode title, and rename the file automatically.\n  Streaming from iTunes I’ve already covered this in my previous post, so I’m not going to go over it again here.\nOnce it’s in iTunes, you can sync shows to your smartphone, iPad, or stream them to a variety of devices throughout your home.\n",
        "source":"\n{{\u003c description \u003e}}\nNearly 2 years ago, I became a \u003cem\u003eCord-Cutter\u003c/em\u003e. I couldn’t see the sense in paying a ton of money every month for 500 channels that I didn’t watch, just so that I could catch the occasional show.\n{{\u003c /description \u003e}}\n\nI invested in [Netflix]({{% wayback \"http://netflix.com\" %}}) and [Hulu Plus]({{% wayback \"http://hulu.com/plus\" %}}) accounts so that I could watch most of my shows, and for the shows that haven’t made their way into the 21 century yet, there are plenty of places online where you can acquire the latest episodes.\n\nIf you read my previous post on [converting Blu-ray and DVD movies to MP4](/2013/04/08/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/), this process has a slightly different flow.\n\n\n## Crash Course in Digital Video Formats\n\nThese days, if you (ahem) *acquire* a high-definition copy of your favorite show online (commonly in 720p), it will most likely be in MKV/H.264/AC3 format.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mkv.png\"\u003e}}\n\nThe short explanation is that every video file is made up of **3 different parts**: the **video stream**, the **audio stream**, and the **container**. The audio and video are synced-up (a.k.a., “multiplexed” or “muxed”) and are bundled together into a single file using a container format.\n\nIf you want to make yourself a little more educated about this stuff, check out the “[Video on the Web]({{% wayback \"http://diveintohtml5.info/video.html\" %}})” chapter of *Dive Into HTML5* by Mark Pilgrim.\n\n**MKV** is a popular container format because it’s designed to be a kitchen sink. You can throw all sorts of stuff inside this container, so people like to stash it full of subtitle files and other sorts of things. **AC3** is the name of the *Dolby Digital* surround-sound audio format. You typically need a dedicated decoder ship to handle this kind of audio, which is common in modern receivers and some TVs.\n\n\n## MKV → MP4\n\nThe first thing we need to do download a copy of [MP4Tools]({{% wayback \"http://www.emmgunn.com/mp4tools/mp4toolshome.html\" %}}).\n\nWhile you can use it without a license, it’s always a good idea to support the independent software developers who write this stuff — especially if its useful.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mp4tools-default.png\"\u003e}}\n\nWhen you drag your MKV file into MP4Tools, you should see two entries — the video stream and the audio stream.\n\nThe video stream should already be in **H.264** format. (If it isn’t, stop what you’re doing and run the file through [Handbrake]({{% wayback \"http://handbrake.fr\" %}}) instead.) Check the box next to the stream to select it.\n\nIf the audio stream is already in **AAC** format, this will be very simple. If the audio stream is in **AC3** format, this will still be simple, but will take a little longer to complete.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/mp4tools-working.png\"\u003e}}\n\n1. For **H.264** video, choose *Pass Thru*.\n\n2. For **AAC** audio (if available), choose *Pass Thru*.\n\n3. For **AC3** audio (if available), choose the highest AAC audio selection you have available (either *AAC (2-Ch.)* or *AAC (5.1)*). If you selected *AAC (5.1)*, also check the box for *add 2-Ch. Track*.\n\nLastly, choose your intended device. The *Apple TV* setting tends to have the broadest compatibility in my experience. Leave everything else as the default setting, and click the *Convert* button.\n\nIn a few minutes, you should have a new `.m4v` file.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/m4v.png\"\u003e}}\n\n\n## Metadata and Artwork\n\nIt’s possible that you may have heard of *AtomicParsley*, *MetaX* or *MetaZ* before. They all suck. Check out [Subler]({{% wayback \"http://code.google.com/p/subler/\" %}}) instead.\n\nOnce you have your `.m4v` file, you’ll want to add the metadata and artwork to the file. As long as the video file starts with a format similar to `\u003cshow\u003e.s\u003c#\u003ee\u003c#\u003e` (e.g., `Weeds.s7e1`), Subler will be able to determine the right things to search for.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-metadata.png\"\u003e}}\n\nSubler queries [TVDB]({{% wayback \"http://thetvdb.com\" %}}) for TV show data, although I’m generally unimpressed with the TV show artwork. For that, I use [Get Video Artwork]({{% wayback \"http://getvideoartwork.com\" %}}) and download the iTunes-compatible, square-shaped TV show artwork.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-artwork.png\"\u003e}}\n\nWhile Subler does a good job of checking the right boxes automatically, you’ll want to check the *Other Settings* and make sure that the resolution and media kind are set correctly for your new `.m4v` file.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/subler-other.png\"\u003e}}\n\n\n## Renaming\n\nI prefer to keep my video files sorted by `\u003cshow\u003e/\u003cseason\u003e/\u003cfile\u003e`. I also go so far to name my files as `S.E - Title.mp4` (e.g., a recent episode of *Supernatural* was labeled *8.15 - Man’s Best Friend with Benefits*).\n\nGoing episode-by-episode can be very tedious, so I wrote up a [Mac OS X service]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/rename-workflow.zip\" %}}) to handle this for me. The only prerequisite is to install a package called [mp4v2]({{% wayback \"https://trac.macports.org/browser/trunk/dports/multimedia/mp4v2/Portfile\" %}}) from [MacPorts]({{% wayback \"http://macports.org\" %}}).\n\n```bash\nsudo port install mp4v2\n```\n\nOnce you’ve installed MacPorts (if you hadn’t already) and the **mp4v2** package, you can install the OS X service by double-clicking it. (It’s an Automator action, so feel free to take a look at what it does before installing it.)\n\nWith everything installed, you can now right-click on one or more video files, choose *Services*, then “Rename video to 1.01 - Title.mp4”.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/workflow.png\"\u003e}}\n\nWithin a few seconds, the Automator workflow will read the contents of the video file for the season number, episode number, and episode title, and rename the file automatically.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/mkv/done.png\"\u003e}}\n\n\n## Streaming from iTunes\n\nI’ve already covered this in my [previous post](/2013/04/08/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/), so I’m not going to go over it again here.\n\nOnce it’s in iTunes, you can sync shows to your smartphone, iPad, or stream them to a variety of devices throughout your home.\n"},
    "links": {
        "prev": {"title": "Converting Blu-ray and DVD movies to MP4, using Mac OS X, for playback on iPad, Apple TV, Playstation 3, Xbox 360, Roku and other players", "permalink": "https://ryanparman.com/posts/2013/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/"},
        "next": {"title": "The Microsoft Ecosystem", "permalink": "https://ryanparman.com/posts/2013/the-microsoft-ecosystem/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Converting Blu-ray and DVD movies to MP4, using Mac OS X, for playback on iPad, Apple TV, Playstation 3, Xbox 360, Roku and other players",
    "description": "",
    "summary": {
        "content": "I often find myself wanting to watch my movies when I’m on-the-go, or sitting at work writing code. I also have one Blu-ray player in the house, and hate having to sit through one unskippable warning or commercial after another. Because of this, I choose to exercise my fair-use right to format-shift my movies into something more convenient. Making a personal backup of movies you own is in a legal gray-area in the U.S. Historically, this sort of thing fell under fair use law, but the DMCA (1998) makes it illegal to crack the encryption.",
        "isTruncated": true
    },
    "published": "2013-04-09T07:04:04Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/",
    "relativePermalink": "/posts/2013/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/",
    "aliases": ["/2013/04/08/converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/"],
    "images": ["https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/fbi-warning.png"],
    "videos": [],
    "categories": ["Tutorials"],
    "tags": ["netflix", "hulu", "blu-ray", "dvd", "handbrake", "mkv", "aac", "ac3", "mp4", "h.264", "atomicparsley", "metax", "metaz", "subler", "mp4v2", "itunes", "makemkv", "anydvd"],
    "series": ["Handbrake"],
    "keywords": [],
    "meta": {
        "wordCount": 1311,
        "readingTime": "7 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130409-converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players.md",
        "logicalName": "20130409-converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players.md",
        "translationBaseName": "20130409-converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players",
        "baseFileName": "20130409-converting-blu-ray-and-dvd-movies-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#hardware\"\u003eHardware\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#backing-up-your-discs\"\u003eBacking-up your discs\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#format-shifting-to-mp4h264aac\"\u003eFormat-Shifting to MP4/H.264/AAC\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#metadata-and-artwork\"\u003eMetadata and Artwork\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#streaming-via-itunes\"\u003eStreaming via iTunes\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nI often find myself wanting to watch my movies when I’m on-the-go, or sitting at work writing code. I also have one Blu-ray player in the house, and hate having to sit through one unskippable warning or commercial after another.\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/fbi-warning.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/fbi-warning.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eBecause of this, I choose to exercise my fair-use right to format-shift my movies into something more convenient. Making a personal backup of movies you own is in a legal gray-area in the U.S. Historically, this sort of thing fell under fair use law, but the DMCA (1998) makes it illegal to crack the encryption. This is why backing-up CDs is commonplace while backing-up DVDs and Blu-rays is frowned upon. The encryption is where the line is drawn. You’ve been warned!\u003c/p\u003e\n\u003ch2 id=\"hardware\"\u003eHardware\u003c/h2\u003e\n\u003cp\u003eThe Mac used for this tutorial is an \u003ca href=\"https://web.archive.org/web/20130409070404/http://www.everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i7-2.2-17-early-2011-unibody-thunderbolt-specs.html\"\u003e17\u0026quot; MacBook Pro (early–2011)\u003c/a\u003e with a 64-bit quad-core 2.2 GHz Intel Core i7 processor, 16 GB of RAM, OS X Mountain Lion, and a standard, built-in Superdrive. The external BD-R drive is a \u003ca href=\"https://web.archive.org/web/20130409070404/http://amazon.com/dp/B003CJTQPG/\"\u003eBuffalo MediaStation 6X USB 2.0 Portable Blu-Ray Writer\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"backing-up-your-discs\"\u003eBacking-up your discs\u003c/h2\u003e\n\u003cp\u003ePretty much every Mac since the early 2000s has shipped with a DVD drive, so these are easy to come by. For backing up personal DVDs so that they can be format-shifted, \u003ca href=\"https://web.archive.org/web/20130409070404/http://thelittleappfactory.com/ripit/\"\u003eRipIt\u003c/a\u003e is highly recommended. A license is a paltry $25, and I recommend supporting the developers of this software. Backing up is as simple as inserting the DVD, launching RipIt, and choosing “Rip”. You can expect a rip to take 15–30 minutes, depending on the size of the disc.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-ripit.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-ripit.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eFor Blu-ray discs, you first need a \u003ca href=\"https://web.archive.org/web/20130409070404/http://amazon.com/dp/B003CJTQPG/\"\u003eBlu-ray drive\u003c/a\u003e. For backing up personal Blu-rays so that they can be format-shifted, \u003ca href=\"https://web.archive.org/web/20130409070404/http://www.makemkv.com/download/\"\u003eMakeMKV\u003c/a\u003e is highly recommended. We won’t be making \u003ccode\u003e.mkv\u003c/code\u003e files, but it has support for backups. A license is somewhere in the $60-$80 range, and I recommend supporting the developers of this software. Backing up is as simple as inserting the Blu-ray disc, launching MakeMKV, and choosing “Backup”. You can expect a rip to take 45m–1h15m, depending on the size of the disc.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-makemkv.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-makemkv.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIf you’re on Windows, check-out \u003ca href=\"https://web.archive.org/web/20130409070404/http://www.slysoft.com/en/anydvd.html\"\u003eAnyDVD\u003c/a\u003e and \u003ca href=\"https://web.archive.org/web/20130409070404/http://www.slysoft.com/en/anydvdhd.html\"\u003eAnyDVD HD\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"format-shifting-to-mp4h264aac\"\u003eFormat-Shifting to MP4/H.264/AAC\u003c/h2\u003e\n\u003cp\u003eVideo files are a lot more complicated than most people realize. You may have heard words like MKV, MPEG–4, AVI, MP3, AAC and other acronyms.\u003c/p\u003e\n\u003cp\u003eThe short explanation is that every video file is made up of \u003cstrong\u003e3 different parts\u003c/strong\u003e: the \u003cstrong\u003evideo stream\u003c/strong\u003e, the \u003cstrong\u003eaudio stream\u003c/strong\u003e, and the \u003cstrong\u003econtainer\u003c/strong\u003e. The audio and video are synced-up (a.k.a., “multiplexed” or “muxed”) and are bundled together into a single file using a container format.\u003c/p\u003e\n\u003cp\u003eIf you want to make yourself a little more educated about this stuff, check out the \u0026ldquo;\u003ca href=\"https://web.archive.org/web/20130409070404/http://diveintohtml5.info/video.html\"\u003eVideo on the Web\u003c/a\u003e\u0026rdquo; chapter of \u003cem\u003eDive Into HTML5\u003c/em\u003e by Mark Pilgrim. For this exercise, just know that we want to end up with an \u003cstrong\u003eH.264\u003c/strong\u003e video stream and an \u003cstrong\u003eAAC\u003c/strong\u003e audio stream, wrapped up inside an \u003cstrong\u003eMP4\u003c/strong\u003e container.\u003c/p\u003e\n\u003cp\u003eFor this, we’ll use \u003ca href=\"https://web.archive.org/web/20130409070404/http://handbrake.fr\"\u003eHandbrake\u003c/a\u003e. Handbrake will take our personal backups as input, and produce an \u003ccode\u003e.mp4\u003c/code\u003e (or \u003ccode\u003e.m4v\u003c/code\u003e — same thing) file as output.\u003c/p\u003e\n\u003cp\u003eHandbrake comes with a good set of default settings. If you don’t know what you’re doing, feel free to use those. I’ve tweaked my settings a bit as I prefer higher-quality files at the cost of a larger file size.\u003c/p\u003e\n\u003cp\u003eSee the following screenshots for information on my presets.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDVD:\u003c/strong\u003e \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-video.png\"\u003eVideo\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-audio.png\"\u003eAudio\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-subtitles.png\"\u003eSubtitles\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-advanced.png\"\u003eAdvanced\u003c/a\u003e, and \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-chapters.png\"\u003eChapters\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eBlu-ray:\u003c/strong\u003e \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-video.png\"\u003eVideo\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-audio.png\"\u003eAudio\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-subtitles.png\"\u003eSubtitles\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-advanced.png\"\u003eAdvanced\u003c/a\u003e, and \u003ca href=\"https://web.archive.org/web/20130409070404/https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-chapters.png\"\u003eChapters\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe biggest difference between these is that the video bitrate for DVDs is 3,000 kbps while for Blu-rays it’s 10,000 kbps.\u003c/p\u003e\n\u003cp\u003eTo get started, click the \u003cem\u003eSource\u003c/em\u003e button in the upper-left corner of the main Handbrake window. Find your backup directory, and choose \u003cem\u003eOpen\u003c/em\u003e. Handbrake will parse the files and make sure it has a complete backup to work with. If you’re using my presets, choose \u003cem\u003eDVD (480p)\u003c/em\u003e if your source is a DVD backup, or \u003cem\u003eBlu-ray (1080p)\u003c/em\u003e if your source is a Blu-ray backup. It may also be helpful to check out the \u003ca href=\"https://web.archive.org/web/20130409070404/https://trac.handbrake.fr/wiki/MacGuiGuide\"\u003eHandbrake Quick-Start Guide\u003c/a\u003e if you’re new to the tool.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/handbrake-source.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/handbrake-source.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNext, click the \u003cem\u003eAdd to Queue\u003c/em\u003e button. Once you’ve queued-up all of the movies you want to format-shift, click the \u003cem\u003eStart\u003c/em\u003e button. On the reference hardware listed above, DVDs typically take 45m–1h30m to fully encode a new MP4 file. Blu-rays take 4–6 hours. In both cases, Handbrake will leverage as much of your CPU and RAM as possible, so don’t expect to be able to do much with your computer until its done.\u003c/p\u003e\n\u003cp\u003eWith these settings, expect a \u003cstrong\u003e480p\u003c/strong\u003e MP4 to be around \u003cstrong\u003e1 GB/hour\u003c/strong\u003e of video and a \u003cstrong\u003e1080p\u003c/strong\u003e MP4 to be around \u003cstrong\u003e5 GB/hour\u003c/strong\u003e of video. If having a 15 GB copy of \u003cem\u003eTitanic\u003c/em\u003e is too much, lower the video bitrate for the \u003cem\u003eBlu-ray (1080p)\u003c/em\u003e setting from 10,000 kbps. The lower the setting, the worse the quality, but the smaller the file size.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/titanic.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/titanic.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eOne more tip:\u003c/strong\u003e 1080p video has a resolution of \u003ccode\u003e1920×1080\u003c/code\u003e. The smaller the screen, the less there is for your eyes to notice, so you can be more forgiving of lower-quality. However, if you’re stretching \u003ccode\u003e1920×1080\u003c/code\u003e across your nice new 55\u0026quot; LED TV, a low-quality file will make your whole movie-watching experience suck. The bigger the TV, the better you want the quality to be.\u003c/p\u003e\n\u003ch2 id=\"metadata-and-artwork\"\u003eMetadata and Artwork\u003c/h2\u003e\n\u003cp\u003eOnce you have your \u003ccode\u003e.mp4\u003c/code\u003e or \u003ccode\u003e.m4v\u003c/code\u003e file, you’ll want to give it a proper name and add the metadata and artwork to the file. The format I use is \u003ccode\u003e\u0026lt;name of movie\u0026gt; (\u0026lt;format\u0026gt;).mp4\u003c/code\u003e (e.g., \u003ccode\u003eMy Favorite Movie (1080p).mp4\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eIt’s possible that you may have heard of \u003cem\u003eAtomicParsley\u003c/em\u003e, \u003cem\u003eMetaX\u003c/em\u003e or \u003cem\u003eMetaZ\u003c/em\u003e before. They all suck. Check out \u003ca href=\"https://web.archive.org/web/20130409070404/http://code.google.com/p/subler/\"\u003eSubler\u003c/a\u003e instead.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/subler-metadata.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/subler-metadata.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSubler queries \u003ca href=\"https://web.archive.org/web/20130409070404/http://themoviedb.org\"\u003eThe Movie DB\u003c/a\u003e for movie data and artwork, and uses \u003ca href=\"https://web.archive.org/web/20130409070404/http://thetvdb.com\"\u003eTVDB\u003c/a\u003e for TV show data. While The Movie DB has a pretty awesome selection of movie artwork, I’m generally unimpressed with the TV show artwork. For that, I use \u003ca href=\"https://web.archive.org/web/20130409070404/http://getvideoartwork.com\"\u003eGet Video Artwork\u003c/a\u003e and download the iTunes-compatible, square-shaped TV show artwork.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/subler-artwork.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/subler-artwork.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eSave your changes, and Subler will write the video metadata and artwork into the file.\u003c/p\u003e\n\u003ch2 id=\"streaming-via-itunes\"\u003eStreaming via iTunes\u003c/h2\u003e\n\u003cp\u003eI have an Xbox 360, a Playstation 3, and two Apple TVs at home. I also have an iPad 2, iPad 3 and an iPad mini. Needless to say, I watch a lot of movies and TV shows.\u003c/p\u003e\n\u003cp\u003eBecause the video files tend to be so large, I use an external hard drive attached to my Mac to store the video files. I then tell iTunes where to find the movie by \u003cem\u003eoption-dragging\u003c/em\u003e the MP4 file from Finder into iTunes’ \u003cem\u003eMovie\u003c/em\u003e pane. The \u003cem\u003eoption-drag\u003c/em\u003e tells iTunes “here’s a pointer to the movie, but don’t copy it onto my built-in hard drive”.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/itunes.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/itunes.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eNow it’s time to watch your movie!\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eAs of iOS 5, \u003cstrong\u003eiPad\u003c/strong\u003e supports 1080p video. Simply sync the movie to your iPad and watch it on-the-go.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAs long as your computer running iTunes and your \u003cstrong\u003eApple TV\u003c/strong\u003e are on the same network and are both configured to use the same \u003cem\u003eHome Sharing\u003c/em\u003e account, you should be able to start streaming the movie to your Apple TV right away. (I would always recommend a hard-wired network connection, otherwise a Wireless-N connection. A Wireless-G connection is likely going to require more buffering or have choppy playback.)\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTo stream to your \u003cstrong\u003ePlaystation 3\u003c/strong\u003e, you’ll need to be running a \u003ca href=\"https://web.archive.org/web/20130409070404/https://en.wikipedia.org/wiki/Digital_Living_Network_Alliance\"\u003eDLNA\u003c/a\u003e server on your Mac. \u003ca href=\"https://web.archive.org/web/20130409070404/http://www.nullriver.com/products/medialink\"\u003eMedialink\u003c/a\u003e ($20) can be installed as a System Preference and automatically serve your iTunes content to your Playstation 3.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTo stream to your \u003cstrong\u003eXbox 360\u003c/strong\u003e, you’ll need to be running a similar server which the Xbox understands. \u003ca href=\"https://web.archive.org/web/20130409070404/http://www.nullriver.com/products/connect360\"\u003eConnect360\u003c/a\u003e ($20) can be installed as a System Preference and automatically serve your iTunes content to your Xbox 360.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSince MP4/H.264/AAC is the industry-wide \u003cem\u003estandard\u003c/em\u003e for all modern-age video, pretty much any smartphone, tablet, laptop, operating system, and streaming device created since 2004 can play this format out-of-the-box. Even ancient OS’s like Windows XP have been updated to support this format. Go nuts.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n",
        "plain":"I often find myself wanting to watch my movies when I’m on-the-go, or sitting at work writing code. I also have one Blu-ray player in the house, and hate having to sit through one unskippable warning or commercial after another.   Because of this, I choose to exercise my fair-use right to format-shift my movies into something more convenient. Making a personal backup of movies you own is in a legal gray-area in the U.S. Historically, this sort of thing fell under fair use law, but the DMCA (1998) makes it illegal to crack the encryption. This is why backing-up CDs is commonplace while backing-up DVDs and Blu-rays is frowned upon. The encryption is where the line is drawn. You’ve been warned!\nHardware The Mac used for this tutorial is an 17\u0026quot; MacBook Pro (early–2011) with a 64-bit quad-core 2.2 GHz Intel Core i7 processor, 16 GB of RAM, OS X Mountain Lion, and a standard, built-in Superdrive. The external BD-R drive is a Buffalo MediaStation 6X USB 2.0 Portable Blu-Ray Writer.\nBacking-up your discs Pretty much every Mac since the early 2000s has shipped with a DVD drive, so these are easy to come by. For backing up personal DVDs so that they can be format-shifted, RipIt is highly recommended. A license is a paltry $25, and I recommend supporting the developers of this software. Backing up is as simple as inserting the DVD, launching RipIt, and choosing “Rip”. You can expect a rip to take 15–30 minutes, depending on the size of the disc.\n  For Blu-ray discs, you first need a Blu-ray drive. For backing up personal Blu-rays so that they can be format-shifted, MakeMKV is highly recommended. We won’t be making .mkv files, but it has support for backups. A license is somewhere in the $60-$80 range, and I recommend supporting the developers of this software. Backing up is as simple as inserting the Blu-ray disc, launching MakeMKV, and choosing “Backup”. You can expect a rip to take 45m–1h15m, depending on the size of the disc.\n  If you’re on Windows, check-out AnyDVD and AnyDVD HD.\nFormat-Shifting to MP4/H.264/AAC Video files are a lot more complicated than most people realize. You may have heard words like MKV, MPEG–4, AVI, MP3, AAC and other acronyms.\nThe short explanation is that every video file is made up of 3 different parts: the video stream, the audio stream, and the container. The audio and video are synced-up (a.k.a., “multiplexed” or “muxed”) and are bundled together into a single file using a container format.\nIf you want to make yourself a little more educated about this stuff, check out the \u0026ldquo;Video on the Web\u0026rdquo; chapter of Dive Into HTML5 by Mark Pilgrim. For this exercise, just know that we want to end up with an H.264 video stream and an AAC audio stream, wrapped up inside an MP4 container.\nFor this, we’ll use Handbrake. Handbrake will take our personal backups as input, and produce an .mp4 (or .m4v — same thing) file as output.\nHandbrake comes with a good set of default settings. If you don’t know what you’re doing, feel free to use those. I’ve tweaked my settings a bit as I prefer higher-quality files at the cost of a larger file size.\nSee the following screenshots for information on my presets.\n  DVD: Video, Audio, Subtitles, Advanced, and Chapters.\n  Blu-ray: Video, Audio, Subtitles, Advanced, and Chapters.\n  The biggest difference between these is that the video bitrate for DVDs is 3,000 kbps while for Blu-rays it’s 10,000 kbps.\nTo get started, click the Source button in the upper-left corner of the main Handbrake window. Find your backup directory, and choose Open. Handbrake will parse the files and make sure it has a complete backup to work with. If you’re using my presets, choose DVD (480p) if your source is a DVD backup, or Blu-ray (1080p) if your source is a Blu-ray backup. It may also be helpful to check out the Handbrake Quick-Start Guide if you’re new to the tool.\n  Next, click the Add to Queue button. Once you’ve queued-up all of the movies you want to format-shift, click the Start button. On the reference hardware listed above, DVDs typically take 45m–1h30m to fully encode a new MP4 file. Blu-rays take 4–6 hours. In both cases, Handbrake will leverage as much of your CPU and RAM as possible, so don’t expect to be able to do much with your computer until its done.\nWith these settings, expect a 480p MP4 to be around 1 GB/hour of video and a 1080p MP4 to be around 5 GB/hour of video. If having a 15 GB copy of Titanic is too much, lower the video bitrate for the Blu-ray (1080p) setting from 10,000 kbps. The lower the setting, the worse the quality, but the smaller the file size.\n  One more tip: 1080p video has a resolution of 1920×1080. The smaller the screen, the less there is for your eyes to notice, so you can be more forgiving of lower-quality. However, if you’re stretching 1920×1080 across your nice new 55\u0026quot; LED TV, a low-quality file will make your whole movie-watching experience suck. The bigger the TV, the better you want the quality to be.\nMetadata and Artwork Once you have your .mp4 or .m4v file, you’ll want to give it a proper name and add the metadata and artwork to the file. The format I use is \u0026lt;name of movie\u0026gt; (\u0026lt;format\u0026gt;).mp4 (e.g., My Favorite Movie (1080p).mp4).\nIt’s possible that you may have heard of AtomicParsley, MetaX or MetaZ before. They all suck. Check out Subler instead.\n  Subler queries The Movie DB for movie data and artwork, and uses TVDB for TV show data. While The Movie DB has a pretty awesome selection of movie artwork, I’m generally unimpressed with the TV show artwork. For that, I use Get Video Artwork and download the iTunes-compatible, square-shaped TV show artwork.\n  Save your changes, and Subler will write the video metadata and artwork into the file.\nStreaming via iTunes I have an Xbox 360, a Playstation 3, and two Apple TVs at home. I also have an iPad 2, iPad 3 and an iPad mini. Needless to say, I watch a lot of movies and TV shows.\nBecause the video files tend to be so large, I use an external hard drive attached to my Mac to store the video files. I then tell iTunes where to find the movie by option-dragging the MP4 file from Finder into iTunes’ Movie pane. The option-drag tells iTunes “here’s a pointer to the movie, but don’t copy it onto my built-in hard drive”.\n  Now it’s time to watch your movie!\n  As of iOS 5, iPad supports 1080p video. Simply sync the movie to your iPad and watch it on-the-go.\n  As long as your computer running iTunes and your Apple TV are on the same network and are both configured to use the same Home Sharing account, you should be able to start streaming the movie to your Apple TV right away. (I would always recommend a hard-wired network connection, otherwise a Wireless-N connection. A Wireless-G connection is likely going to require more buffering or have choppy playback.)\n  To stream to your Playstation 3, you’ll need to be running a DLNA server on your Mac. Medialink ($20) can be installed as a System Preference and automatically serve your iTunes content to your Playstation 3.\n  To stream to your Xbox 360, you’ll need to be running a similar server which the Xbox understands. Connect360 ($20) can be installed as a System Preference and automatically serve your iTunes content to your Xbox 360.\n  Since MP4/H.264/AAC is the industry-wide standard for all modern-age video, pretty much any smartphone, tablet, laptop, operating system, and streaming device created since 2004 can play this format out-of-the-box. Even ancient OS’s like Windows XP have been updated to support this format. Go nuts.\n  ",
        "source":"\n{{\u003c description \u003e}}\nI often find myself wanting to watch my movies when I’m on-the-go, or sitting at work writing code. I also have one Blu-ray player in the house, and hate having to sit through one unskippable warning or commercial after another.\n{{\u003c /description \u003e}}\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/fbi-warning.png\"\u003e}}\n\nBecause of this, I choose to exercise my fair-use right to format-shift my movies into something more convenient. Making a personal backup of movies you own is in a legal gray-area in the U.S. Historically, this sort of thing fell under fair use law, but the DMCA (1998) makes it illegal to crack the encryption. This is why backing-up CDs is commonplace while backing-up DVDs and Blu-rays is frowned upon. The encryption is where the line is drawn. You’ve been warned!\n\n\n## Hardware\n\nThe Mac used for this tutorial is an [17\" MacBook Pro (early–2011)]({{% wayback \"http://www.everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i7-2.2-17-early-2011-unibody-thunderbolt-specs.html\" %}}) with a 64-bit quad-core 2.2 GHz Intel Core i7 processor, 16 GB of RAM, OS X Mountain Lion, and a standard, built-in Superdrive. The external BD-R drive is a [Buffalo MediaStation 6X USB 2.0 Portable Blu-Ray Writer]({{% wayback \"http://amazon.com/dp/B003CJTQPG/\" %}}).\n\n\n## Backing-up your discs\n\nPretty much every Mac since the early 2000s has shipped with a DVD drive, so these are easy to come by. For backing up personal DVDs so that they can be format-shifted, [RipIt]({{% wayback \"http://thelittleappfactory.com/ripit/\" %}}) is highly recommended. A license is a paltry $25, and I recommend supporting the developers of this software. Backing up is as simple as inserting the DVD, launching RipIt, and choosing “Rip”. You can expect a rip to take 15–30 minutes, depending on the size of the disc.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-ripit.png\"\u003e}}\n\nFor Blu-ray discs, you first need a [Blu-ray drive]({{% wayback \"http://amazon.com/dp/B003CJTQPG/\" %}}). For backing up personal Blu-rays so that they can be format-shifted, [MakeMKV]({{% wayback \"http://www.makemkv.com/download/\" %}}) is highly recommended. We won’t be making `.mkv` files, but it has support for backups. A license is somewhere in the $60-$80 range, and I recommend supporting the developers of this software. Backing up is as simple as inserting the Blu-ray disc, launching MakeMKV, and choosing “Backup”. You can expect a rip to take 45m–1h15m, depending on the size of the disc.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-makemkv.png\"\u003e}}\n\nIf you’re on Windows, check-out [AnyDVD]({{% wayback \"http://www.slysoft.com/en/anydvd.html\" %}}) and [AnyDVD HD]({{% wayback \"http://www.slysoft.com/en/anydvdhd.html\" %}}).\n\n\n## Format-Shifting to MP4/H.264/AAC\n\nVideo files are a lot more complicated than most people realize. You may have heard words like MKV, MPEG–4, AVI, MP3, AAC and other acronyms.\n\nThe short explanation is that every video file is made up of **3 different parts**: the **video stream**, the **audio stream**, and the **container**. The audio and video are synced-up (a.k.a., “multiplexed” or “muxed”) and are bundled together into a single file using a container format.\n\nIf you want to make yourself a little more educated about this stuff, check out the \"[Video on the Web]({{% wayback \"http://diveintohtml5.info/video.html\" %}})\" chapter of *Dive Into HTML5* by Mark Pilgrim. For this exercise, just know that we want to end up with an **H.264** video stream and an **AAC** audio stream, wrapped up inside an **MP4** container.\n\nFor this, we’ll use [Handbrake]({{% wayback \"http://handbrake.fr\" %}}). Handbrake will take our personal backups as input, and produce an `.mp4` (or `.m4v` — same thing) file as output.\n\nHandbrake comes with a good set of default settings. If you don’t know what you’re doing, feel free to use those. I’ve tweaked my settings a bit as I prefer higher-quality files at the cost of a larger file size.\n\nSee the following screenshots for information on my presets.\n\n* **DVD:** [Video]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-video.png\" %}}), [Audio]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-audio.png\" %}}), [Subtitles]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-subtitles.png\" %}}), [Advanced]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-advanced.png\" %}}), and [Chapters]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/dvd-chapters.png\" %}}).\n\n* **Blu-ray:** [Video]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-video.png\" %}}), [Audio]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-audio.png\" %}}), [Subtitles]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-subtitles.png\" %}}), [Advanced]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-advanced.png\" %}}), and [Chapters]({{% wayback \"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/bluray-chapters.png\" %}}).\n\nThe biggest difference between these is that the video bitrate for DVDs is 3,000 kbps while for Blu-rays it’s 10,000 kbps.\n\nTo get started, click the *Source* button in the upper-left corner of the main Handbrake window. Find your backup directory, and choose *Open*. Handbrake will parse the files and make sure it has a complete backup to work with. If you’re using my presets, choose *DVD (480p)* if your source is a DVD backup, or *Blu-ray (1080p)* if your source is a Blu-ray backup. It may also be helpful to check out the [Handbrake Quick-Start Guide]({{% wayback \"https://trac.handbrake.fr/wiki/MacGuiGuide\" %}}) if you’re new to the tool.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/handbrake-source.png\"\u003e}}\n\nNext, click the *Add to Queue* button. Once you’ve queued-up all of the movies you want to format-shift, click the *Start* button. On the reference hardware listed above, DVDs typically take 45m–1h30m to fully encode a new MP4 file. Blu-rays take 4–6 hours. In both cases, Handbrake will leverage as much of your CPU and RAM as possible, so don’t expect to be able to do much with your computer until its done.\n\nWith these settings, expect a **480p** MP4 to be around **1 GB/hour** of video and a **1080p** MP4 to be around **5 GB/hour** of video. If having a 15 GB copy of *Titanic* is too much, lower the video bitrate for the *Blu-ray (1080p)* setting from 10,000 kbps. The lower the setting, the worse the quality, but the smaller the file size.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/titanic.png\"\u003e}}\n\n**One more tip:** 1080p video has a resolution of `1920×1080`. The smaller the screen, the less there is for your eyes to notice, so you can be more forgiving of lower-quality. However, if you’re stretching `1920×1080` across your nice new 55\" LED TV, a low-quality file will make your whole movie-watching experience suck. The bigger the TV, the better you want the quality to be.\n\n\n## Metadata and Artwork\n\nOnce you have your `.mp4` or `.m4v` file, you’ll want to give it a proper name and add the metadata and artwork to the file. The format I use is `\u003cname of movie\u003e (\u003cformat\u003e).mp4` (e.g., `My Favorite Movie (1080p).mp4`).\n\nIt’s possible that you may have heard of *AtomicParsley*, *MetaX* or *MetaZ* before. They all suck. Check out [Subler]({{% wayback \"http://code.google.com/p/subler/\" %}}) instead.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/subler-metadata.png\"\u003e}}\n\nSubler queries [The Movie DB]({{% wayback \"http://themoviedb.org\" %}}) for movie data and artwork, and uses [TVDB]({{% wayback \"http://thetvdb.com\" %}}) for TV show data. While The Movie DB has a pretty awesome selection of movie artwork, I’m generally unimpressed with the TV show artwork. For that, I use [Get Video Artwork]({{% wayback \"http://getvideoartwork.com\" %}}) and download the iTunes-compatible, square-shaped TV show artwork.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/subler-artwork.png\"\u003e}}\n\nSave your changes, and Subler will write the video metadata and artwork into the file.\n\n\n## Streaming via iTunes\n\nI have an Xbox 360, a Playstation 3, and two Apple TVs at home. I also have an iPad 2, iPad 3 and an iPad mini. Needless to say, I watch a lot of movies and TV shows.\n\nBecause the video files tend to be so large, I use an external hard drive attached to my Mac to store the video files. I then tell iTunes where to find the movie by *option-dragging* the MP4 file from Finder into iTunes’ *Movie* pane. The *option-drag* tells iTunes “here’s a pointer to the movie, but don’t copy it onto my built-in hard drive”.\n\n{{\u003cfullimage src=\"https://s3.amazonaws.com/s3.ryanparman.com/images/blu-ray/itunes.png\"\u003e}}\n\nNow it’s time to watch your movie!\n\n1. As of iOS 5, **iPad** supports 1080p video. Simply sync the movie to your iPad and watch it on-the-go.\n\n2. As long as your computer running iTunes and your **Apple TV** are on the same network and are both configured to use the same *Home Sharing* account, you should be able to start streaming the movie to your Apple TV right away. (I would always recommend a hard-wired network connection, otherwise a Wireless-N connection. A Wireless-G connection is likely going to require more buffering or have choppy playback.)\n\n3. To stream to your **Playstation 3**, you’ll need to be running a [DLNA]({{% wayback \"https://en.wikipedia.org/wiki/Digital_Living_Network_Alliance\" %}}) server on your Mac. [Medialink]({{% wayback \"http://www.nullriver.com/products/medialink\" %}}) ($20) can be installed as a System Preference and automatically serve your iTunes content to your Playstation 3.\n\n4. To stream to your **Xbox 360**, you’ll need to be running a similar server which the Xbox understands. [Connect360]({{% wayback \"http://www.nullriver.com/products/connect360\" %}}) ($20) can be installed as a System Preference and automatically serve your iTunes content to your Xbox 360.\n\n5. Since MP4/H.264/AAC is the industry-wide *standard* for all modern-age video, pretty much any smartphone, tablet, laptop, operating system, and streaming device created since 2004 can play this format out-of-the-box. Even ancient OS’s like Windows XP have been updated to support this format. Go nuts.\n"},
    "links": {
        "prev": {"title": "H.265 has been approved", "permalink": "https://ryanparman.com/posts/2013/h265-has-been-approved/"},
        "next": {"title": "Converting MKV files to MP4, using Mac OS X, for playback on iPad, Apple TV, Playstation 3, Xbox 360, Roku and other players", "permalink": "https://ryanparman.com/posts/2013/converting-mkv-files-to-mp4-using-mac-os-x-for-playback-on-ipad-apple-tv-playstation-3-xbox-360-roku-and-other-players/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Remove Comcast/Xfinity start page from Firefox (Mac)",
    "description": "",
    "summary": {
        "content": "The Comcast/Xfinity installer adds crap to your Mac, including forcibly setting an Xfinity portal as the homepage. It’s a really douchey thing to do. The Problem I set up my new Comcast Xfinity internet service today using the self-install kit. After walking through the necessary questions, it then forced me to download and install their crap-ware onto my Mac before it would register the flow as “completed”. Being given no choice, I begrudgingly ran the installer. Afterwards, I ended up with extra Comcast/Xfinity bookmarks in multiple browsers (Firefox \u0026amp; Safari), and the homepages for both browsers were set to an Xfinity portal page.",
        "isTruncated": true
    },
    "published": "2011-07-07T09:18:35Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2011/remove-comcastxfinity-start-page-from-firefox-mac/",
    "relativePermalink": "/posts/2011/remove-comcastxfinity-start-page-from-firefox-mac/",
    "aliases": ["/2011/07/07/remove-comcastxfinity-start-page-from-firefox-mac/"],
    "images": ["https://cdn.ryanparman.com/wp-content/uploads/2011/07/comcast-xfinity.png"],
    "videos": [],
    "categories": ["Tutorials"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 394,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2011/20110707-remove-comcastxfinity-start-page-from-firefox-mac.md",
        "logicalName": "20110707-remove-comcastxfinity-start-page-from-firefox-mac.md",
        "translationBaseName": "20110707-remove-comcastxfinity-start-page-from-firefox-mac",
        "baseFileName": "20110707-remove-comcastxfinity-start-page-from-firefox-mac",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2011/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#the-problem\"\u003eThe Problem\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#fixing-the-issue\"\u003eFixing the issue\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#update-hahahugoshortcode-s5-hbhb\"\u003eUpdate (HAHAHUGOSHORTCODE-s5-HBHB)\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nThe Comcast/Xfinity installer adds crap to your Mac, including forcibly setting an Xfinity portal as the homepage. It’s a really douchey thing to do.\n\u003c/p\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/07/comcast-xfinity.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/07/comcast-xfinity.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"the-problem\"\u003eThe Problem\u003c/h2\u003e\n\u003cp\u003eI set up my new Comcast Xfinity internet service today using the self-install kit. After walking through the necessary questions, it then \u003cem\u003eforced\u003c/em\u003e me to download and install their crap-ware onto my Mac before it would register the flow as “completed”. Being given no choice, I begrudgingly ran the installer. Afterwards, I ended up with extra Comcast/Xfinity bookmarks in multiple browsers (Firefox \u0026amp; Safari), and the homepages for both browsers were set to an Xfinity portal page. Fixing the homepage in Safari was easy — you just change it how you always change it.\u003c/p\u003e\n\u003cp\u003eUnfortunately, fixing Firefox’s homepage was trickier. \u003cstrong\u003eThe installer disabled my ability to change my homepage back to whatever I wanted it to be.\u003c/strong\u003e BAD COMCAST! BAD! I did some Googling around, but nobody seemed to know WTF was going on or how to fix it.\u003c/p\u003e\n\u003cp\u003eI ended up dropping into Terminal and running \u003ccode\u003ecd /; grep -ri comcast .\u003c/code\u003e in order to find the solution. Here it is: they add a custom user.js file to your Firefox profile which overrides certain settings from the \u003ccode\u003eabout:config\u003c/code\u003e panel (including the browser homepage). Ass-hats! This is how I fixed it:\u003c/p\u003e\n\u003ch2 id=\"fixing-the-issue\"\u003eFixing the issue\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eIn your address bar, go to \u003ccode\u003eabout:support\u003c/code\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/07/support.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/07/support.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eClick the button that says \u003cem\u003e“Show In Finder”\u003c/em\u003e (Mac) or \u003cem\u003e“Open Containing Folder”\u003c/em\u003e (Windows). This should show you your profile folder.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/07/profile.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/07/profile.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eGo inside of that folder, and look for a file called \u003ccode\u003euser.js\u003c/code\u003e. Delete it.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/07/userjs.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/07/userjs.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eGo into the preferences, and reset your homepage.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRestart Firefox, and your preferred homepage should be back.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"update-hahahugoshortcode-s5-hbhb\"\u003eUpdate (\u003ctime datetime=\"2011–11–09\"\u003e2011–11–09\u003c/time\u003e\n)\u003c/h2\u003e\n\u003cp\u003eWhen I originally posted this, it was after I had hunted across the Comcast FAQ, forums and Google as a whole to try to find a solution. Nothing was written about this issue when I came up with my workaround.\u003c/p\u003e\n\u003cp\u003eAfter I posted the solution to this problem and it caught the attention of some bloggers (Brian Krebs from \u003ca href=\"https://web.archive.org/web/20110707091835/http://krebsonsecurity.com/2011/07/comcast-hijacks-firefox-homepage-well-fix/\"\u003eKrebs on Security\u003c/a\u003e and Tim Cushing of \u003ca href=\"https://web.archive.org/web/20110707091835/http://www.techdirt.com/articles/20110722/02383515203/comcast-hijacks-mac-firefox-users-homepage-offers-blame-game-faux-apology-return.shtml\"\u003eTechdirt\u003c/a\u003e), Comcast wrote up the same set of instructions (although with a less anti-Comcast tone) and added them to the \u003ca href=\"https://web.archive.org/web/20110707091835/http://customer.comcast.com/Pages/FAQViewer.aspx?Guid=9dac6569-c2d3-467d-b747-1cc67fe61284\"\u003eComcast FAQ\u003c/a\u003e. While they didn’t directly rip me off, they didn’t even give me a hat tip for bringing the solution to light.\u003c/p\u003e\n\u003cp\u003eStay classy, Comcast.\u003c/p\u003e\n",
        "plain":"The Comcast/Xfinity installer adds crap to your Mac, including forcibly setting an Xfinity portal as the homepage. It’s a really douchey thing to do.   The Problem I set up my new Comcast Xfinity internet service today using the self-install kit. After walking through the necessary questions, it then forced me to download and install their crap-ware onto my Mac before it would register the flow as “completed”. Being given no choice, I begrudgingly ran the installer. Afterwards, I ended up with extra Comcast/Xfinity bookmarks in multiple browsers (Firefox \u0026amp; Safari), and the homepages for both browsers were set to an Xfinity portal page. Fixing the homepage in Safari was easy — you just change it how you always change it.\nUnfortunately, fixing Firefox’s homepage was trickier. The installer disabled my ability to change my homepage back to whatever I wanted it to be. BAD COMCAST! BAD! I did some Googling around, but nobody seemed to know WTF was going on or how to fix it.\nI ended up dropping into Terminal and running cd /; grep -ri comcast . in order to find the solution. Here it is: they add a custom user.js file to your Firefox profile which overrides certain settings from the about:config panel (including the browser homepage). Ass-hats! This is how I fixed it:\nFixing the issue   In your address bar, go to about:support.\n    Click the button that says “Show In Finder” (Mac) or “Open Containing Folder” (Windows). This should show you your profile folder.\n    Go inside of that folder, and look for a file called user.js. Delete it.\n    Go into the preferences, and reset your homepage.\n  Restart Firefox, and your preferred homepage should be back.\n  Update (2011–11–09 ) When I originally posted this, it was after I had hunted across the Comcast FAQ, forums and Google as a whole to try to find a solution. Nothing was written about this issue when I came up with my workaround.\nAfter I posted the solution to this problem and it caught the attention of some bloggers (Brian Krebs from Krebs on Security and Tim Cushing of Techdirt), Comcast wrote up the same set of instructions (although with a less anti-Comcast tone) and added them to the Comcast FAQ. While they didn’t directly rip me off, they didn’t even give me a hat tip for bringing the solution to light.\nStay classy, Comcast.\n",
        "source":"\n{{\u003cdescription\u003e}}\nThe Comcast/Xfinity installer adds crap to your Mac, including forcibly setting an Xfinity portal as the homepage. It’s a really douchey thing to do.\n{{\u003c/description\u003e}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/07/comcast-xfinity.png\"\u003e}}\n\n## The Problem\n\nI set up my new Comcast Xfinity internet service today using the self-install kit. After walking through the necessary questions, it then *forced* me to download and install their crap-ware onto my Mac before it would register the flow as “completed”. Being given no choice, I begrudgingly ran the installer. Afterwards, I ended up with extra Comcast/Xfinity bookmarks in multiple browsers (Firefox \u0026 Safari), and the homepages for both browsers were set to an Xfinity portal page. Fixing the homepage in Safari was easy — you just change it how you always change it.\n\nUnfortunately, fixing Firefox’s homepage was trickier. **The installer disabled my ability to change my homepage back to whatever I wanted it to be.** BAD COMCAST! BAD! I did some Googling around, but nobody seemed to know WTF was going on or how to fix it.\n\nI ended up dropping into Terminal and running `cd /; grep -ri comcast .` in order to find the solution. Here it is: they add a custom user.js file to your Firefox profile which overrides certain settings from the `about:config` panel (including the browser homepage). Ass-hats! This is how I fixed it:\n\n## Fixing the issue\n\n1. In your address bar, go to `about:support`.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/07/support.png\"\u003e}}\n\n2. Click the button that says *“Show In Finder”* (Mac) or *“Open Containing Folder”* (Windows). This should show you your profile folder.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/07/profile.png\"\u003e}}\n\n3. Go inside of that folder, and look for a file called `user.js`. Delete it.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/07/userjs.png\"\u003e}}\n\n4. Go into the preferences, and reset your homepage.\n\n5. Restart Firefox, and your preferred homepage should be back.\n\n## Update ({{\u003cdate \"2011–11–09\"\u003e}})\n\nWhen I originally posted this, it was after I had hunted across the Comcast FAQ, forums and Google as a whole to try to find a solution. Nothing was written about this issue when I came up with my workaround.\n\nAfter I posted the solution to this problem and it caught the attention of some bloggers (Brian Krebs from [Krebs on Security]({{% wayback \"http://krebsonsecurity.com/2011/07/comcast-hijacks-firefox-homepage-well-fix/\" %}}) and Tim Cushing of [Techdirt]({{% wayback \"http://www.techdirt.com/articles/20110722/02383515203/comcast-hijacks-mac-firefox-users-homepage-offers-blame-game-faux-apology-return.shtml\" %}})), Comcast wrote up the same set of instructions (although with a less anti-Comcast tone) and added them to the [Comcast FAQ]({{% wayback \"http://customer.comcast.com/Pages/FAQViewer.aspx?Guid=9dac6569-c2d3-467d-b747-1cc67fe61284\" %}}). While they didn’t directly rip me off, they didn’t even give me a hat tip for bringing the solution to light.\n\nStay classy, Comcast.\n"},
    "links": {
        "prev": {"title": "3D iPad? I don't believe it.", "permalink": "https://ryanparman.com/posts/2011/3d-ipad-i-dont-believe-it/"},
        "next": {"title": "The Hiring Process, Part I: What I Look For in a CV/Résumé", "permalink": "https://ryanparman.com/posts/2011/the-hiring-process-part-i-what-i-look-for-in-a-cvresume/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Creating iPhone ringtones with iTunes and QuickTime",
    "description": "",
    "summary": {
        "content": "You can either spend money on iPhone ringtones on the iTunes Store, purchase an application that makes them for you, or you can make your own for free. I make all of my own ringtones from music that I already own. There are a few steps involved here, but overall, the process is pretty straightforward. Getting Started The first thing you’ll need to do is find a song that you want to convert into a ringtone. iPhone ringtones can only be 30 seconds long, so if you find something you like that’s 30 seconds or shorter, skip directly to step 9.",
        "isTruncated": true
    },
    "published": "2011-01-09T04:12:36Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2011/creating-iphone-ringtones-with-itunes-and-quicktime/",
    "relativePermalink": "/posts/2011/creating-iphone-ringtones-with-itunes-and-quicktime/",
    "aliases": ["/2011/01/08/creating-iphone-ringtones-with-itunes-and-quicktime/"],
    "images": ["https://cdn.ryanparman.com/wp-content/uploads/2011/01/1.png"],
    "videos": [],
    "categories": ["Tutorials"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 628,
        "readingTime": "3 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2011/20110109-creating-iphone-ringtones-with-itunes-and-quicktime.md",
        "logicalName": "20110109-creating-iphone-ringtones-with-itunes-and-quicktime.md",
        "translationBaseName": "20110109-creating-iphone-ringtones-with-itunes-and-quicktime",
        "baseFileName": "20110109-creating-iphone-ringtones-with-itunes-and-quicktime",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2011/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#getting-started\"\u003eGetting Started\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eYou can either spend money on iPhone ringtones on the iTunes Store, purchase an application that makes them for you, or you can make your own for free.\u003c/p\u003e\n\u003cp\u003eI make all of my own ringtones from music that I already own. There are a few steps involved here, but overall, the process is pretty straightforward.\u003c/p\u003e\n\u003ch2 id=\"getting-started\"\u003eGetting Started\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eThe first thing you’ll need to do is find a song that you want to convert into a ringtone.\u003c/p\u003e\n\u003cp\u003eiPhone ringtones can only be 30 seconds long, so if you find something you like that’s 30 seconds or shorter, skip directly to \u003cem\u003estep 9\u003c/em\u003e. Otherwise, I’ll walk you through the process of editing down a longer song into a 30-second ringtone.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/1.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/1.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce you’ve selected the song you want to use, right-click (or control-click if you have a one-button mouse), and choose the option that will allow you to see the file itself. On Mac OS X, this is \u003cem\u003eShow in Finder\u003c/em\u003e. On Windows, this is \u003cem\u003eShow in Explorer\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/2.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/2.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce the window opens containing the song, make a copy of it somewhere — preferably your desktop.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/3.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/3.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOpen the file using the latest version of QuickTime 7, which is \u003ca href=\"https://web.archive.org/web/20110109041236/http://support.apple.com/kb/DL923\"\u003eQuickTime 7.6.6 for Mac OS X\u003c/a\u003e or \u003ca href=\"https://web.archive.org/web/20110109041236/http://support.apple.com/kb/dl837\"\u003eQuickTime 7.6.9 for Windows\u003c/a\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/4.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/4.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e If you’re running Mac OS X 10.6 “Snow Leopard”, it’s possible that you have the newer \u003ca href=\"https://web.archive.org/web/20110109041236/http://www.apple.com/macosx/what-is-macosx/quicktime.html\"\u003eQuickTime X\u003c/a\u003e installed, but not the older QuickTime 7. Unfortunately, because QuickTime X was completely re-written from scratch, its player does not yet editing and exporting in other formats. If you’re not sure whether or not you have QuickTime 7 installed, you can use Spotlight to search for \u003cem\u003equicktime 7\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/19.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/19.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUsing the small arrows at the bottom of the timeline, decide which 30 seconds of the song you want to use for your ringtone.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/5.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/5.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFrom the menubar, choose \u003cem\u003eEdit \u0026gt; Trim to Selection\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/6.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/6.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThis will shorten the length of the entire song to just the 30 second clip you created.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/7.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/7.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFrom the menubar, choose \u003cem\u003eFile → Export\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/8.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/8.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eWhen the dialog box comes up, choose where you want to save the file to (I would recommend your Desktop), and change the \u003cem\u003eExport\u003c/em\u003e selection at the bottom to \u003cem\u003eSound to Wave\u003c/em\u003e. Choose \u003cem\u003eSave\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/9.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/9.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce you’ve saved the 30-second clip as a \u003ccode\u003e.wav\u003c/code\u003e file, drag it into iTunes.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/10.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/10.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFrom the menubar, choose \u003cem\u003eAdvanced → Create AAC Version\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/11.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/11.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou should now have the original \u003ccode\u003e.wav\u003c/code\u003e version, and a new \u003ccode\u003e.m4a\u003c/code\u003e version. (If you’re interested in learning about why AAC files have an \u003ccode\u003e.m4a\u003c/code\u003e file extension, read the \u003cem\u003eAudio Codecs\u003c/em\u003e section of \u003ca href=\"https://web.archive.org/web/20110109041236/http://diveintohtml5.org/video.html\"\u003eDive Into HTML5\u003c/a\u003e.)\u003c/p\u003e\n\u003cp\u003eRight-click (or control-click if you have a one-button mouse) on the new file, and choose the option that will allow you to see the file itself. On Mac OS X, this is \u003cem\u003eShow in Finder\u003c/em\u003e. On Windows, this is \u003cem\u003eShow in Explorer\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/12.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/12.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSelect the \u003ccode\u003e.m4a\u003c/code\u003e file, and change its file extension to \u003ccode\u003e.m4r\u003c/code\u003e instead.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/13.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/13.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eMac OS X will ask you if you’re sure you want to change the file extension to \u003ccode\u003e.m4r\u003c/code\u003e. Choose \u003cem\u003eUse .m4r\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/14.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/14.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eBack in iTunes, you can delete the \u003ccode\u003e.wav\u003c/code\u003e and \u003ccode\u003e.m4a\u003c/code\u003e files from your library. You won’t need them anymore.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/15.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/15.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDrag the new \u003ccode\u003e.m4r\u003c/code\u003e ringtone we created into iTunes. Unless you removed it in your Preference, you should see an option for \u003cem\u003eRingtones\u003c/em\u003e in the sidebar.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/16.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/16.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you haven’t done it already, connect your iPhone to iTunes. Select your iPhone in the sidebar, then choose Ringtones from the bar along the top. From there, you can either sync all ringtones, or selected ringtones. If you prefer to do the latter, make sure that the checkbox next to your new ringtone is checked.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/17.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/17.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSync your iPhone. Once it completes, pick up your iPhone and launch the \u003cem\u003eSettings\u003c/em\u003e app. Next, go to the \u003cem\u003eSounds\u003c/em\u003e option. From there, you can change your various sound settings.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/18.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/18.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003c/ol\u003e\n",
        "plain":"You can either spend money on iPhone ringtones on the iTunes Store, purchase an application that makes them for you, or you can make your own for free.\nI make all of my own ringtones from music that I already own. There are a few steps involved here, but overall, the process is pretty straightforward.\nGetting Started   The first thing you’ll need to do is find a song that you want to convert into a ringtone.\niPhone ringtones can only be 30 seconds long, so if you find something you like that’s 30 seconds or shorter, skip directly to step 9. Otherwise, I’ll walk you through the process of editing down a longer song into a 30-second ringtone.\n    Once you’ve selected the song you want to use, right-click (or control-click if you have a one-button mouse), and choose the option that will allow you to see the file itself. On Mac OS X, this is Show in Finder. On Windows, this is Show in Explorer.\n    Once the window opens containing the song, make a copy of it somewhere — preferably your desktop.\n    Open the file using the latest version of QuickTime 7, which is QuickTime 7.6.6 for Mac OS X or QuickTime 7.6.9 for Windows.\n  Note: If you’re running Mac OS X 10.6 “Snow Leopard”, it’s possible that you have the newer QuickTime X installed, but not the older QuickTime 7. Unfortunately, because QuickTime X was completely re-written from scratch, its player does not yet editing and exporting in other formats. If you’re not sure whether or not you have QuickTime 7 installed, you can use Spotlight to search for quicktime 7.\n    Using the small arrows at the bottom of the timeline, decide which 30 seconds of the song you want to use for your ringtone.\n    From the menubar, choose Edit \u0026gt; Trim to Selection.\n  This will shorten the length of the entire song to just the 30 second clip you created.\n    From the menubar, choose File → Export.\n  When the dialog box comes up, choose where you want to save the file to (I would recommend your Desktop), and change the Export selection at the bottom to Sound to Wave. Choose Save.\n    Once you’ve saved the 30-second clip as a .wav file, drag it into iTunes.\n    From the menubar, choose Advanced → Create AAC Version.\n    You should now have the original .wav version, and a new .m4a version. (If you’re interested in learning about why AAC files have an .m4a file extension, read the Audio Codecs section of Dive Into HTML5.)\nRight-click (or control-click if you have a one-button mouse) on the new file, and choose the option that will allow you to see the file itself. On Mac OS X, this is Show in Finder. On Windows, this is Show in Explorer.\n    Select the .m4a file, and change its file extension to .m4r instead.\n  Mac OS X will ask you if you’re sure you want to change the file extension to .m4r. Choose Use .m4r.\n    Back in iTunes, you can delete the .wav and .m4a files from your library. You won’t need them anymore.\n    Drag the new .m4r ringtone we created into iTunes. Unless you removed it in your Preference, you should see an option for Ringtones in the sidebar.\n    If you haven’t done it already, connect your iPhone to iTunes. Select your iPhone in the sidebar, then choose Ringtones from the bar along the top. From there, you can either sync all ringtones, or selected ringtones. If you prefer to do the latter, make sure that the checkbox next to your new ringtone is checked.\n    Sync your iPhone. Once it completes, pick up your iPhone and launch the Settings app. Next, go to the Sounds option. From there, you can change your various sound settings.\n    ",
        "source":"\nYou can either spend money on iPhone ringtones on the iTunes Store, purchase an application that makes them for you, or you can make your own for free.\n\nI make all of my own ringtones from music that I already own. There are a few steps involved here, but overall, the process is pretty straightforward.\n\n## Getting Started\n\n1. The first thing you’ll need to do is find a song that you want to convert into a ringtone.\n\n    iPhone ringtones can only be 30 seconds long, so if you find something you like that’s 30 seconds or shorter, skip directly to *step 9*. Otherwise, I’ll walk you through the process of editing down a longer song into a 30-second ringtone.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/1.png\"\u003e}}\n\n2. Once you’ve selected the song you want to use, right-click (or control-click if you have a one-button mouse), and choose the option that will allow you to see the file itself. On Mac OS X, this is *Show in Finder*. On Windows, this is *Show in Explorer*.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/2.png\"\u003e}}\n\n3. Once the window opens containing the song, make a copy of it somewhere — preferably your desktop.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/3.png\"\u003e}}\n\n4. Open the file using the latest version of QuickTime 7, which is [QuickTime 7.6.6 for Mac OS X]({{% wayback \"http://support.apple.com/kb/DL923\" %}}) or [QuickTime 7.6.9 for Windows]({{% wayback \"http://support.apple.com/kb/dl837\" %}}).\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/4.png\"\u003e}}\n\n    **Note:** If you’re running Mac OS X 10.6 “Snow Leopard”, it’s possible that you have the newer [QuickTime X]({{% wayback \"http://www.apple.com/macosx/what-is-macosx/quicktime.html\" %}}) installed, but not the older QuickTime 7. Unfortunately, because QuickTime X was completely re-written from scratch, its player does not yet editing and exporting in other formats. If you’re not sure whether or not you have QuickTime 7 installed, you can use Spotlight to search for *quicktime 7*.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/19.png\"\u003e}}\n\n5. Using the small arrows at the bottom of the timeline, decide which 30 seconds of the song you want to use for your ringtone.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/5.png\"\u003e}}\n\n6. From the menubar, choose *Edit \u0026gt; Trim to Selection*.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/6.png\"\u003e}}\n\n    This will shorten the length of the entire song to just the 30 second clip you created.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/7.png\"\u003e}}\n\n7. From the menubar, choose *File → Export*.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/8.png\"\u003e}}\n\n    When the dialog box comes up, choose where you want to save the file to (I would recommend your Desktop), and change the *Export* selection at the bottom to *Sound to Wave*. Choose *Save*.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/9.png\"\u003e}}\n\n8. Once you’ve saved the 30-second clip as a `.wav` file, drag it into iTunes.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/10.png\"\u003e}}\n\n9. From the menubar, choose *Advanced → Create AAC Version*.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/11.png\"\u003e}}\n\n10. You should now have the original `.wav` version, and a new `.m4a` version. (If you’re interested in learning about why AAC files have an `.m4a` file extension, read the *Audio Codecs* section of [Dive Into HTML5]({{% wayback \"http://diveintohtml5.org/video.html\" %}}).)\n\n    Right-click (or control-click if you have a one-button mouse) on the new file, and choose the option that will allow you to see the file itself. On Mac OS X, this is *Show in Finder*. On Windows, this is *Show in Explorer*.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/12.png\"\u003e}}\n\n11. Select the `.m4a` file, and change its file extension to `.m4r` instead.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/13.png\"\u003e}}\n\n    Mac OS X will ask you if you’re sure you want to change the file extension to `.m4r`. Choose *Use .m4r*.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/14.png\"\u003e}}\n\n12. Back in iTunes, you can delete the `.wav` and `.m4a` files from your library. You won’t need them anymore.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/15.png\"\u003e}}\n\n13. Drag the new `.m4r` ringtone we created into iTunes. Unless you removed it in your Preference, you should see an option for *Ringtones* in the sidebar.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/16.png\"\u003e}}\n\n14. If you haven’t done it already, connect your iPhone to iTunes. Select your iPhone in the sidebar, then choose Ringtones from the bar along the top. From there, you can either sync all ringtones, or selected ringtones. If you prefer to do the latter, make sure that the checkbox next to your new ringtone is checked.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/17.png\"\u003e}}\n\n15. Sync your iPhone. Once it completes, pick up your iPhone and launch the *Settings* app. Next, go to the *Sounds* option. From there, you can change your various sound settings.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/01/18.png\"\u003e}}\n"},
    "links": {
        "prev": {"title": "Nothing Lasts Forever", "permalink": "https://ryanparman.com/posts/2011/nothing-lasts-forever/"},
        "next": {"title": "Searching through the AWS SDK for PHP documentation", "permalink": "https://ryanparman.com/posts/2011/searching-through-the-aws-sdk-for-php-documentation/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "The proper way to blow your nose",
    "description": "",
    "summary": {
        "content": "I’ve had a head cold for the last 3 days (which is why some of you haven’t seen me online), and in that time I’ve gone through 5 rolls of toilet paper due to blowing my nose. I’ve tried various medicines, and although Sudafed was able to slow the drip, I’ve been blowing my nose almost constantly. For those who are concerned about efficiency in all things (as I am), I believe I’ve found the most efficient way to get the snot as far away from your sinuses as possible.",
        "isTruncated": true
    },
    "published": "2006-04-23T00:34:42Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2006/the-proper-way-to-blow-your-nose/",
    "relativePermalink": "/posts/2006/the-proper-way-to-blow-your-nose/",
    "aliases": ["/2006/04/22/the-proper-way-to-blow-your-nose/"],
    "images": [],
    "videos": [],
    "categories": ["Tutorials"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 297,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2006/20060423-the-proper-way-to-blow-your-nose.md",
        "logicalName": "20060423-the-proper-way-to-blow-your-nose.md",
        "translationBaseName": "20060423-the-proper-way-to-blow-your-nose",
        "baseFileName": "20060423-the-proper-way-to-blow-your-nose",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2006/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI’ve had a head cold for the last 3 days (which is why some of you haven’t seen me online), and in that time I’ve gone through 5 rolls of toilet paper due to blowing my nose. I’ve tried various medicines, and although Sudafed was able to slow the drip, I’ve been blowing my nose almost constantly. For those who are concerned about efficiency in all things (as I am), I believe I’ve found the most efficient way to get the snot as far away from your sinuses as possible.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eTake the roll of toilet paper and wrap it around your hand 2 or 3 times. This is really all you need per blow.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAs you cover your nose with the toilet paper, plug one of your nostrils to ensure that maximum airflow is being forced through the other nostril, ensuring that the greatest amount of snot is removed.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDo the same to the other nostril. Repeat as necessary.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce you’re through blowing, you still have bits of snot that cling to your nose hair. We’ll want to clean these out as well.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTake one perforated square of the toilet paper and cram the whole thing into your nostril. Make sure that there is enough sticking out for you to grab. Once it’s in there, twist the toilet paper in a circular fashion. Give it a minimum of 4–5 rotations before pulling it back out.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDo the same to the other nostril. Repeat as necessary.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou’re done!\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIn my experience, this is the most effective way to get all of your snot out. It’s also safe to use this method without following up with a mirror to make sure that there is no snot clinging to your nose hair because the follow-up twisting is nice and tidy.\u003c/p\u003e\n",
        "plain":"I’ve had a head cold for the last 3 days (which is why some of you haven’t seen me online), and in that time I’ve gone through 5 rolls of toilet paper due to blowing my nose. I’ve tried various medicines, and although Sudafed was able to slow the drip, I’ve been blowing my nose almost constantly. For those who are concerned about efficiency in all things (as I am), I believe I’ve found the most efficient way to get the snot as far away from your sinuses as possible.\n  Take the roll of toilet paper and wrap it around your hand 2 or 3 times. This is really all you need per blow.\n  As you cover your nose with the toilet paper, plug one of your nostrils to ensure that maximum airflow is being forced through the other nostril, ensuring that the greatest amount of snot is removed.\n  Do the same to the other nostril. Repeat as necessary.\n  Once you’re through blowing, you still have bits of snot that cling to your nose hair. We’ll want to clean these out as well.\n  Take one perforated square of the toilet paper and cram the whole thing into your nostril. Make sure that there is enough sticking out for you to grab. Once it’s in there, twist the toilet paper in a circular fashion. Give it a minimum of 4–5 rotations before pulling it back out.\n  Do the same to the other nostril. Repeat as necessary.\n  You’re done!\n  In my experience, this is the most effective way to get all of your snot out. It’s also safe to use this method without following up with a mirror to make sure that there is no snot clinging to your nose hair because the follow-up twisting is nice and tidy.\n",
        "source":"\nI’ve had a head cold for the last 3 days (which is why some of you haven’t seen me online), and in that time I’ve gone through 5 rolls of toilet paper due to blowing my nose. I’ve tried various medicines, and although Sudafed was able to slow the drip, I’ve been blowing my nose almost constantly. For those who are concerned about efficiency in all things (as I am), I believe I’ve found the most efficient way to get the snot as far away from your sinuses as possible.\n\n1. Take the roll of toilet paper and wrap it around your hand 2 or 3 times. This is really all you need per blow.\n\n2. As you cover your nose with the toilet paper, plug one of your nostrils to ensure that maximum airflow is being forced through the other nostril, ensuring that the greatest amount of snot is removed.\n\n3. Do the same to the other nostril. Repeat as necessary.\n\n4. Once you’re through blowing, you still have bits of snot that cling to your nose hair. We’ll want to clean these out as well.\n\n5. Take one perforated square of the toilet paper and cram the whole thing into your nostril. Make sure that there is enough sticking out for you to grab. Once it’s in there, twist the toilet paper in a circular fashion. Give it a minimum of 4–5 rotations before pulling it back out.\n\n6. Do the same to the other nostril. Repeat as necessary.\n\n7. You’re done!\n\nIn my experience, this is the most effective way to get all of your snot out. It’s also safe to use this method without following up with a mirror to make sure that there is no snot clinging to your nose hair because the follow-up twisting is nice and tidy.\n"},
    "links": {
        "prev": {"title": "CSS's text-shadow property in Firefox 2?", "permalink": "https://ryanparman.com/posts/2006/csss-text-shadow-property-in-firefox-2/"},
        "next": {"title": "SimplePie Beta 2 is now available!", "permalink": "https://ryanparman.com/posts/2006/simplepie-beta-2-is-now-available/"},
        "ignore": "me"
    }
}

            
        ]
    }
}
