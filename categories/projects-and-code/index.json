{
    "data": {
        
        
        "count": 62,
        "items": [
            
            {
    "kind": "page",
    "title": "Serving Bandwidth-Friendly Video with HTTP Live Streaming (HLS)",
    "description": "",
    "summary": {
        "content": "While YouTube is free (as in money) to use, the cost is paid in terms of privacy and advertising analytics. So I've decided to investigate self-hosting my video content. The Cost of YouTube With YouTube, you sacrifice privacy in favor of cost. YouTube is the very best at what they do (serve video to all resolutions and bandwidths), and they are backed by Google who is the very best at what they do (collect data in order to facilitate selling a primed audience to advertisers).",
        "isTruncated": true
    },
    "published": "2018-09-09T03:18:33Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2018/serving-bandwidth-friendly-video-with-hls/",
    "relativePermalink": "/posts/2018/serving-bandwidth-friendly-video-with-hls/",
    "aliases": ["/2018/09/09/serving-bandwidth-friendly-video-with-hls"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2018/adaptive-bitrate-streaming.png", "https://cdn.ryanparman.com/hugo/posts/2018/youtube-2017.png"],
    "videos": ["https://cdn.ryanparman.com/hls/hallelujah.fmp4/progressive.mp4"],
    "categories": ["Projects and Code"],
    "tags": ["youtube", "h.264", "hls", "mpeg", "dash", "streaming", "s3", "cloudfront", "safari", "chrome", "firefox", "edge"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 1611,
        "readingTime": "8 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2018/20180909-serving-bandwidth-friendly-video-with-hls.md",
        "logicalName": "20180909-serving-bandwidth-friendly-video-with-hls.md",
        "translationBaseName": "20180909-serving-bandwidth-friendly-video-with-hls",
        "baseFileName": "20180909-serving-bandwidth-friendly-video-with-hls",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2018/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#the-cost-of-youtube\"\u003eThe Cost of YouTube\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#self-hosting-video-content\"\u003eSelf-Hosting Video Content\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#adaptive-bitrate-streaming\"\u003eAdaptive Bitrate Streaming\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#http-live-streaming-hls\"\u003eHTTP Live Streaming (HLS)\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#sample-video\"\u003eSample Video\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#implementation\"\u003eImplementation\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#encoding-and-deploying-video\"\u003eEncoding and Deploying Video\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#the-client-side-code\"\u003eThe Client-Side Code\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#enabling-chrome-firefox-and-edge-using-hlsjs\"\u003eEnabling Chrome, Firefox, and Edge using hls.js\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#cors\"\u003eCORS\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nWhile YouTube is free (as in money) to use, the cost is paid in terms of privacy and advertising analytics. So I've decided to investigate self-hosting my video content.\n\u003c/p\u003e\n\n\u003ch2 id=\"the-cost-of-youtube\"\u003eThe Cost of YouTube\u003c/h2\u003e\n\u003cp\u003eWith YouTube, you sacrifice privacy in favor of cost. YouTube is the very best at what they do (serve video to all resolutions and bandwidths), and they are backed by Google who is the very best at what they do (collect data in order to facilitate selling a primed audience to advertisers).\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2018/youtube-2017.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2018/youtube-2017.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThere’s nothing inherently wrong with that. We live in a capitalistic society; there is money to be made; Google/YouTube is providing a service to advertisers; many consumers will (knowingly or unknowingly) give up their privacy in exchange for free-as-in-money services.\u003c/p\u003e\n\u003cp\u003eBut as I\u0026rsquo;ve gotten older and started to realize just \u003cem\u003ehow much\u003c/em\u003e data Google has on each and every one of us, I\u0026rsquo;ve started valuing my privacy a lot more. I\u0026rsquo;d like to provide an option for you to protect your privacy as well.\u003c/p\u003e\n\u003ch2 id=\"self-hosting-video-content\"\u003eSelf-Hosting Video Content\u003c/h2\u003e\n\u003cp\u003eEven with efficient video codecs, video can still cost a lot of money to serve.\u003c/p\u003e\n\u003cp\u003eMany websites provide \u003cem\u003ea video\u003c/em\u003e to their users, wherein this video is a single file, and the browser will begin loading and playing the video from start to finish. This means that even if the user only watches the first few seconds of a 5 minute video, it\u0026rsquo;s possible that the video is downloaded in its entirety — which is an unnecessary cost.\u003c/p\u003e\n\u003cp\u003eHowever, we can provide a \u003cem\u003ebetter user experience\u003c/em\u003e as well as \u003cem\u003ereduce hosting costs\u003c/em\u003e by leveraging the ability to serve bandwidth-adaptive chunks of video to players on-demand.\u003c/p\u003e\n\u003ch3 id=\"adaptive-bitrate-streaming\"\u003eAdaptive Bitrate Streaming\u003c/h3\u003e\n\u003cp\u003eThere are two major, semi-compatible approaches to \u003ca href=\"https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming\"\u003eadaptive bitrate streaming\u003c/a\u003e over HTTP. One is called \u003ca href=\"https://web.archive.org/web/20180909031833/https://en.wikipedia.org/wiki/HTTP_Live_Streaming\"\u003eHTTP Live Streaming\u003c/a\u003e (“HLS”), and the other is called \u003ca href=\"https://web.archive.org/web/20180909031833/https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP\"\u003eDynamic Adaptive Streaming over HTTP\u003c/a\u003e (“MPEG-DASH”).\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2018/adaptive-bitrate-streaming.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2018/adaptive-bitrate-streaming.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eFrom \u003ca href=\"https://web.archive.org/web/20180909031833/https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming\"\u003eWikipedia\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eAdaptive bitrate streaming is a technique used in streaming multimedia over computer networks. While in the past most video or audio streaming technologies utilized streaming protocols such as RTP with RTSP, today\u0026rsquo;s adaptive streaming technologies are almost exclusively based on HTTP and designed to work efficiently over large distributed HTTP networks such as the Internet.\u003c/p\u003e\n\u003cp\u003eIt works by detecting a user\u0026rsquo;s bandwidth and CPU capacity in real time and adjusting the quality of the media stream accordingly. It requires the use of an encoder which can encode a single source media (video or audio) at multiple bit rates. The player client switches between streaming the different encodings depending on available resources. \u0026ldquo;The result: very little buffering, fast start time and a good experience for both high-end and low-end connections.\u0026rdquo; […]\u003c/p\u003e\n\u003cp\u003eHTTP-based adaptive bitrate streaming technologies yield additional benefits over traditional server-driven adaptive bitrate streaming. First, since the streaming technology is built on top of HTTP, contrary to RTP-based adaptive streaming, the packets have no difficulties traversing firewall and NAT devices. Second, since HTTP streaming is purely client-driven, all adaptation logic resides at the client. This reduces the requirement of persistent connections between server and client application. Furthermore, the server is not required to maintain session state information on each client, increasing scalability. Finally, existing HTTP delivery infrastructure, such as HTTP caches and servers can be seamlessly adopted.\u003c/p\u003e\n\u003cp\u003eA scalable CDN is used to deliver media streaming to an Internet audience. The CDN receives the stream from the source at its Origin server, then replicates it to many or all of its Edge cache servers. The end-user requests the stream and is redirected to the \u0026ldquo;closest\u0026rdquo; Edge server. […] The use of HTTP-based adaptive streaming allows the Edge server to run a simple HTTP server software, whose licence cost is cheap or free, reducing software licensing cost, compared to costly media server licences (e.g. Adobe Flash Media Streaming Server). The CDN cost for HTTP streaming media is then similar to HTTP web caching CDN cost.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis means that we can use off-the-shelf services like \u003ca href=\"https://aws.amazon.com/s3\"\u003eAmazon S3\u003c/a\u003e and \u003ca href=\"https://aws.amazon.com/cloudfront\"\u003eAmazon CloudFront\u003c/a\u003e to serve video, which are relatively inexpensive and have large user-bases who can answer questions when you run into issues.\u003c/p\u003e\n\u003ch3 id=\"http-live-streaming-hls\"\u003eHTTP Live Streaming (HLS)\u003c/h3\u003e\n\u003cp\u003eAfter doing some research, I came across a blog post that was particularly helpful — “\u003ca href=\"https://web.archive.org/web/20180909031833/https://vincent.bernat.ch/en/blog/2018-self-hosted-videos\"\u003eSelf-hosted videos with HLS\u003c/a\u003e” by Vincent Bernat.\u003c/p\u003e\n\u003cp\u003eVincent writes:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eTo serve HLS videos, you need three kinds of files:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003ethe media segments (encoded with different bitrates/resolutions),\u003c/li\u003e\n\u003cli\u003ea media playlist for each variant, listing the media segments, and\u003c/li\u003e\n\u003cli\u003ea master playlist, listing the media playlists.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eMedia segments can come in two formats:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eMPEG-2 Transport Streams (TS), or\u003c/li\u003e\n\u003cli\u003eFragmented MP4.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFragmented MP4 media segments are supported since iOS 10. They are a bit more efficient and can be reused to serve the same content as MPEG-DASH (only the playlists are different). Also, they can be served from the same file with range requests. However, if you want to target older versions of iOS, you need to stick with MPEG-2 TS.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAt the time of this writing, iOS 12 will be out in a week or two. A quick search tells me that \u003ca href=\"https://web.archive.org/web/20180909031833/https://data.apteligent.com/ios/\"\u003eiOS 10 and newer make up 85% of all iOS users\u003c/a\u003e. This means that I can pretty safely use the \u003cem\u003eFragmented MP4\u003c/em\u003e method which, according to \u003ca href=\"https://web.archive.org/web/20180909031833/https://bitmovin.com/hls-news-wwdc-2016/\"\u003ethese\u003c/a\u003e \u003ca href=\"https://web.archive.org/web/20180909031833/http://www.streamingmedia.com/Articles/ReadArticle.aspx?ArticleID=111796\"\u003esources\u003c/a\u003e, is more compatible with MPEG-DASH for some cross-over implementations in the future.\u003c/p\u003e\n\u003ch2 id=\"sample-video\"\u003eSample Video\u003c/h2\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; overflow: hidden;\"\u003e\n    \u003cvideo poster=\"https://cdn.ryanparman.com/hls/hallelujah.fmp4/poster.jpg\" controls preload=\"none\" style=\"position: absolute; width: 100%; height: 100%;\"\u003e\n      \u003csource src=\"https://cdn.ryanparman.com/hls/hallelujah.fmp4/index.m3u8\" type=\"application/vnd.apple.mpegurl\"\u003e\n      \u003csource src=\"https://cdn.ryanparman.com/hls/hallelujah.fmp4/progressive.mp4\" type='video/mp4; codecs=\"avc1.4d401f, mp4a.40.2\"'\u003e\n    \u003c/video\u003e\n\u003c/div\u003e\u003cp class=\"tc black-60 db mb2\"\u003e\u003csmall\u003e\u003cb\u003eSource:\u003c/b\u003e \u003ca href=\"https://youtu.be/e1C9kpMV2e8\"\u003eHallelujah - Brooklyn Duo (Piano \u0026#43; Cello)\u003c/a\u003e\u003c/small\u003e\u003c/p\u003e\n\u003ch2 id=\"implementation\"\u003eImplementation\u003c/h2\u003e\n\u003ch3 id=\"encoding-and-deploying-video\"\u003eEncoding and Deploying Video\u003c/h3\u003e\n\u003cp\u003eVincent Bernat provides a tool on GitHub which greatly simplifies the process of creating the various video fragments called \u003ca href=\"https://web.archive.org/web/20180909031833/https://github.com/vincentbernat/video2hls\"\u003evideo2hls\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eFor \u003ca href=\"https://github.com/skyzyx/blog/blob/master/Makefile\"\u003ethis website\u003c/a\u003e, I have put together a workflow for creating and serving HLS video content.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eI use \u003cstrong\u003eH.264\u003c/strong\u003e video with \u003cstrong\u003eAAC\u003c/strong\u003e audio wrapped inside an \u003cstrong\u003eMP4\u003c/strong\u003e container, \u003cem\u003eexclusively\u003c/em\u003e. These are all defined as part of the MPEG-4 specification, and is the \u003ca href=\"https://caniuse.com/#search=H.264\"\u003ebest-supported grouping of codecs and containers across all browsers and devices\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eHardware-level decoders are commonplace inside computers, phones, tablets, and set-top boxes like Xbox, PlayStation, and Apple TV.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eI have a directory called \u003ccode\u003estreaming-video\u003c/code\u003e, which is separate from the images that I use and push to S3. Video files are large, and I don\u0026rsquo;t want to accidentally push partially-completed video data to my caching CDN before they\u0026rsquo;re ready.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eI have a command which takes any video file inside the \u003ccode\u003estreaming-video\u003c/code\u003e folder, with a filename ending in \u003ccode\u003e-source.mp4\u003c/code\u003e, and passes it through \u003ccode\u003evideo2hls\u003c/code\u003e, creating a folder called \u003ccode\u003e{video}.fmp4\u003c/code\u003e which contains all of the video and playlist files I need across a large variety of bandwidths and resolutions.\u003c/p\u003e\n\u003cp\u003eIt will only do the work to create the directory and all of the fragmented files if the directory doesn\u0026rsquo;t already exist.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003efind ./streaming-video -type f -name \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*-source.mp4\u0026#34;\u003c/span\u003e | xargs -I \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    bash -c \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;if [ ! -d \u0026#34;${1%-source.mp4}.fmp4\u0026#34; ]; then \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e        video2hls --debug --output \u0026#34;${1%-source.mp4}.fmp4\u0026#34; --hls-type fmp4 \u0026#34;$1\u0026#34;; \\\n\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e    fi;\u0026#39;\u003c/span\u003e _ \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eI find all of the \u003ccode\u003e.m3u8\u003c/code\u003e playlist files and gzip them (since they\u0026rsquo;re just text). This is essentially an in-place rewrite of the files.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003efind ./streaming-video -type f -name \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;*.m3u8\u0026#34;\u003c/span\u003e | xargs -P \u003cspan style=\"color:#ae81ff\"\u003e8\u003c/span\u003e -I \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    bash -c \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;! gunzip -t $1 2\u0026gt;/dev/null \u0026amp;\u0026amp; gzip -v $1 \u0026amp;\u0026amp; mv -v $1.gz $1;\u0026#39;\u003c/span\u003e _ \u003cspan style=\"color:#f92672\"\u003e{}\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLastly, I push all of the files up to the \u003ccode\u003ehls\u003c/code\u003e folder in my S3 bucket using the \u003ca href=\"https://github.com/aws/aws-cli\"\u003eAWS Unified CLI Tools\u003c/a\u003e, setting the correct \u003ccode\u003eContent-Type\u003c/code\u003e and \u003ccode\u003eContent-Encoding\u003c/code\u003e headers.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#75715e\"\u003e# The .m3u8 playlists that we gzipped\u003c/span\u003e\naws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --exclude \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.*\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --include \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.m3u8\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --acl\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epublic-read \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --cache-control max-age\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e31536000,public \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --content-type \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;application/vnd.apple.mpegurl\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --content-encoding \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;gzip\u0026#39;\u003c/span\u003e\n\n\u003cspan style=\"color:#75715e\"\u003e# The video \u0026#34;posters\u0026#34;\u003c/span\u003e\naws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --exclude \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.*\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --include \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.jpg\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --acl\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epublic-read \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --cache-control max-age\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e31536000,public \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --content-type \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;image/jpeg\u0026#39;\u003c/span\u003e\n\n\u003cspan style=\"color:#75715e\"\u003e# The fragmented MP4 files\u003c/span\u003e\naws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --exclude \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.*\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --include \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;*.mp4\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --acl\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003epublic-read \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --cache-control max-age\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e31536000,public \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --content-type \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;video/mp4\u0026#39;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"the-client-side-code\"\u003eThe Client-Side Code\u003c/h3\u003e\n\u003cp\u003eAfter pushing the content to our CDN, we can use the standard HTML5 \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e tag to tell browsers how to load the requested assets.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003evideo\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eposter\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cdn.ryanparman.com/hls/hallelujah.fmp4/poster.jpg\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003econtrols\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003epreload\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;none\u0026#34;\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan style=\"color:#f92672\"\u003esource\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cdn.ryanparman.com/hls/hallelujah.fmp4/index.m3u8\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;application/vnd.apple.mpegurl\u0026#34;\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan style=\"color:#f92672\"\u003esource\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cdn.ryanparman.com/hls/hallelujah.fmp4/progressive.mp4\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etype\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;video/mp4; codecs=\u0026#34;avc1.4d401f, mp4a.40.2\u0026#34;\u0026#39;\u003c/span\u003e\u0026gt;\n\u0026lt;/\u003cspan style=\"color:#f92672\"\u003evideo\u003c/span\u003e\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eHere, we have a static \u003cem\u003eposter\u003c/em\u003e image that the \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e element loads by default.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eNext, we have an HLS-compatible playlist file (\u003ccode\u003e.m3u8\u003c/code\u003e), which ultimately points to the correct \u003ccode\u003e.mp4\u003c/code\u003e files.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLastly, we have a standard \u003ccode\u003e.mp4\u003c/code\u003e fallback.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"enabling-chrome-firefox-and-edge-using-hlsjs\"\u003eEnabling Chrome, Firefox, and Edge using hls.js\u003c/h3\u003e\n\u003cp\u003eDailymotion has released a JavaScript library called \u003ca href=\"https://github.com/video-dev/hls.js\"\u003ehls.js\u003c/a\u003e which enables HLS playback on browsers like Chrome, Firefox, and Edge using Fragmented MP4 sources.\u003c/p\u003e\n\u003cp\u003eYou can load the script from the CDN:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esrc\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;https://cdn.jsdelivr.net/npm/hls.js@latest\u0026#34;\u003c/span\u003e\u0026gt;\u0026lt;/\u003cspan style=\"color:#f92672\"\u003escript\u003c/span\u003e\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAfter that, we have the implementation. Here, we start with a working \u003ccode\u003e\u0026lt;video\u0026gt;\u003c/code\u003e element, then use JavaScript to swap over to HLS.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e(() =\u0026gt; {\n  \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;use strict\u0026#39;\u003c/span\u003e;\n\n  \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eHls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eisSupported\u003c/span\u003e()) {\n    \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eselector\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;video source[type=\u0026#39;application/vnd.apple.mpegurl\u0026#39;]\u0026#34;\u003c/span\u003e,\n        \u003cspan style=\"color:#a6e22e\"\u003evideoSources\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document.\u003cspan style=\"color:#a6e22e\"\u003equerySelectorAll\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eselector\u003c/span\u003e);\n\n    \u003cspan style=\"color:#a6e22e\"\u003evideoSources\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eforEach\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003evideoSource\u003c/span\u003e =\u0026gt; {\n      \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003em3u8\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evideoSource\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003esrc\u003c/span\u003e,\n          \u003cspan style=\"color:#a6e22e\"\u003eonce\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e;\n\n      \u003cspan style=\"color:#75715e\"\u003e// Clone the video to remove any source\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e      \u003cspan style=\"color:#66d9ef\"\u003elet\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eoldVideo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003evideoSource\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparentNode\u003c/span\u003e,\n          \u003cspan style=\"color:#a6e22e\"\u003enewVideo\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eoldVideo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ecloneNode\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e);\n\n      \u003cspan style=\"color:#75715e\"\u003e// Replace video tag with our clone.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e      \u003cspan style=\"color:#a6e22e\"\u003eoldVideo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eparentNode\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ereplaceChild\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enewVideo\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003eoldVideo\u003c/span\u003e);\n\n      \u003cspan style=\"color:#75715e\"\u003e// On play, initialize hls.js, once.\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e      \u003cspan style=\"color:#a6e22e\"\u003enewVideo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eaddEventListener\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;play\u0026#39;\u003c/span\u003e, () =\u0026gt; {\n        \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eonce\u003c/span\u003e) {\n          \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e;\n        };\n        \u003cspan style=\"color:#a6e22e\"\u003eonce\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e;\n\n        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehls\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003enew\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eHls\u003c/span\u003e({\n          \u003cspan style=\"color:#a6e22e\"\u003ecapLevelToPlayerSize\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e\n        });\n        \u003cspan style=\"color:#a6e22e\"\u003ehls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eattachMedia\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003enewVideo\u003c/span\u003e);\n        \u003cspan style=\"color:#a6e22e\"\u003ehls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eloadSource\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003em3u8\u003c/span\u003e);\n        \u003cspan style=\"color:#a6e22e\"\u003ehls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eon\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003eHls\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eEvents\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eMANIFEST_PARSED\u003c/span\u003e, (\u003cspan style=\"color:#a6e22e\"\u003eevent\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003edata\u003c/span\u003e) =\u0026gt; {\n          \u003cspan style=\"color:#a6e22e\"\u003enewVideo\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eplay\u003c/span\u003e();\n        });\n      }, \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e);\n    });\n  }\n})();\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch3 id=\"cors\"\u003eCORS\u003c/h3\u003e\n\u003cp\u003eIf you are serving the files from a third-party host (such as Amazon S3), you will need to enable \u003ca href=\"https://caniuse.com/#search=cors\"\u003eCORS\u003c/a\u003e support on your bucket.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-xml\" data-lang=\"xml\"\u003e\u003cspan style=\"color:#75715e\"\u003e\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e\u0026lt;CORSConfiguration\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003exmlns=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://s3.amazonaws.com/doc/2006-03-01/\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026gt;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;CORSRule\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;AllowedHeader\u0026gt;\u003c/span\u003e*\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/AllowedHeader\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;AllowedOrigin\u0026gt;\u003c/span\u003e*\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/AllowedOrigin\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;AllowedMethod\u0026gt;\u003c/span\u003eGET\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/AllowedMethod\u0026gt;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003e\u0026lt;AllowedMethod\u0026gt;\u003c/span\u003eHEAD\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/AllowedMethod\u0026gt;\u003c/span\u003e\n  \u003cspan style=\"color:#f92672\"\u003e\u0026lt;/CORSRule\u0026gt;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e\u0026lt;/CORSConfiguration\u0026gt;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAdditionally, if you have a CDN cache in front of that S3 bucket (e.g., Amazon CloudFront), you\u0026rsquo;ll need to make sure that it is configured to allow the \u003ccode\u003eOrigin\u003c/code\u003e headers through and also respond to the HTTP \u003ccode\u003eOPTIONS\u003c/code\u003e verb.\u003c/p\u003e\n\u003cp\u003eYou can find more information about solving this problem with CloudFront at “\u003ca href=\"https://web.archive.org/web/20180909031833/https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html#header-caching-web-cors\"\u003eConfiguring CloudFront to Respect CORS Settings\u003c/a\u003e”.\u003c/p\u003e\n\u003cscript src=\"https://cdn.jsdelivr.net/npm/hls.js@latest\"\u003e\u003c/script\u003e\n\u003cscript type=\"text/javascript\" src=\"https://ryanparman.com/js/stream-hls.min.270faa3c315322e584846228fe3da0897e67544a45ac2646b9050c886baa54b9.js\" integrity=\"sha256-Jw\u0026#43;qPDFTIuWEhGIo/j2giX5nVEpFrCZGuQUMiGuqVLk=\"\u003e\u003c/script\u003e\n\n",
        "plain":"While YouTube is free (as in money) to use, the cost is paid in terms of privacy and advertising analytics. So I've decided to investigate self-hosting my video content. The Cost of YouTube With YouTube, you sacrifice privacy in favor of cost. YouTube is the very best at what they do (serve video to all resolutions and bandwidths), and they are backed by Google who is the very best at what they do (collect data in order to facilitate selling a primed audience to advertisers).\n  There’s nothing inherently wrong with that. We live in a capitalistic society; there is money to be made; Google/YouTube is providing a service to advertisers; many consumers will (knowingly or unknowingly) give up their privacy in exchange for free-as-in-money services.\nBut as I\u0026rsquo;ve gotten older and started to realize just how much data Google has on each and every one of us, I\u0026rsquo;ve started valuing my privacy a lot more. I\u0026rsquo;d like to provide an option for you to protect your privacy as well.\nSelf-Hosting Video Content Even with efficient video codecs, video can still cost a lot of money to serve.\nMany websites provide a video to their users, wherein this video is a single file, and the browser will begin loading and playing the video from start to finish. This means that even if the user only watches the first few seconds of a 5 minute video, it\u0026rsquo;s possible that the video is downloaded in its entirety — which is an unnecessary cost.\nHowever, we can provide a better user experience as well as reduce hosting costs by leveraging the ability to serve bandwidth-adaptive chunks of video to players on-demand.\nAdaptive Bitrate Streaming There are two major, semi-compatible approaches to adaptive bitrate streaming over HTTP. One is called HTTP Live Streaming (“HLS”), and the other is called Dynamic Adaptive Streaming over HTTP (“MPEG-DASH”).\n  From Wikipedia:\n Adaptive bitrate streaming is a technique used in streaming multimedia over computer networks. While in the past most video or audio streaming technologies utilized streaming protocols such as RTP with RTSP, today\u0026rsquo;s adaptive streaming technologies are almost exclusively based on HTTP and designed to work efficiently over large distributed HTTP networks such as the Internet.\nIt works by detecting a user\u0026rsquo;s bandwidth and CPU capacity in real time and adjusting the quality of the media stream accordingly. It requires the use of an encoder which can encode a single source media (video or audio) at multiple bit rates. The player client switches between streaming the different encodings depending on available resources. \u0026ldquo;The result: very little buffering, fast start time and a good experience for both high-end and low-end connections.\u0026rdquo; […]\nHTTP-based adaptive bitrate streaming technologies yield additional benefits over traditional server-driven adaptive bitrate streaming. First, since the streaming technology is built on top of HTTP, contrary to RTP-based adaptive streaming, the packets have no difficulties traversing firewall and NAT devices. Second, since HTTP streaming is purely client-driven, all adaptation logic resides at the client. This reduces the requirement of persistent connections between server and client application. Furthermore, the server is not required to maintain session state information on each client, increasing scalability. Finally, existing HTTP delivery infrastructure, such as HTTP caches and servers can be seamlessly adopted.\nA scalable CDN is used to deliver media streaming to an Internet audience. The CDN receives the stream from the source at its Origin server, then replicates it to many or all of its Edge cache servers. The end-user requests the stream and is redirected to the \u0026ldquo;closest\u0026rdquo; Edge server. […] The use of HTTP-based adaptive streaming allows the Edge server to run a simple HTTP server software, whose licence cost is cheap or free, reducing software licensing cost, compared to costly media server licences (e.g. Adobe Flash Media Streaming Server). The CDN cost for HTTP streaming media is then similar to HTTP web caching CDN cost.\n This means that we can use off-the-shelf services like Amazon S3 and Amazon CloudFront to serve video, which are relatively inexpensive and have large user-bases who can answer questions when you run into issues.\nHTTP Live Streaming (HLS) After doing some research, I came across a blog post that was particularly helpful — “Self-hosted videos with HLS” by Vincent Bernat.\nVincent writes:\n To serve HLS videos, you need three kinds of files:\n the media segments (encoded with different bitrates/resolutions), a media playlist for each variant, listing the media segments, and a master playlist, listing the media playlists.  Media segments can come in two formats:\n MPEG-2 Transport Streams (TS), or Fragmented MP4.  Fragmented MP4 media segments are supported since iOS 10. They are a bit more efficient and can be reused to serve the same content as MPEG-DASH (only the playlists are different). Also, they can be served from the same file with range requests. However, if you want to target older versions of iOS, you need to stick with MPEG-2 TS.\n At the time of this writing, iOS 12 will be out in a week or two. A quick search tells me that iOS 10 and newer make up 85% of all iOS users. This means that I can pretty safely use the Fragmented MP4 method which, according to these sources, is more compatible with MPEG-DASH for some cross-over implementations in the future.\nSample Video  Source: Hallelujah - Brooklyn Duo (Piano \u0026#43; Cello)\nImplementation Encoding and Deploying Video Vincent Bernat provides a tool on GitHub which greatly simplifies the process of creating the various video fragments called video2hls.\nFor this website, I have put together a workflow for creating and serving HLS video content.\n  I use H.264 video with AAC audio wrapped inside an MP4 container, exclusively. These are all defined as part of the MPEG-4 specification, and is the best-supported grouping of codecs and containers across all browsers and devices.\nHardware-level decoders are commonplace inside computers, phones, tablets, and set-top boxes like Xbox, PlayStation, and Apple TV.\n  I have a directory called streaming-video, which is separate from the images that I use and push to S3. Video files are large, and I don\u0026rsquo;t want to accidentally push partially-completed video data to my caching CDN before they\u0026rsquo;re ready.\n  I have a command which takes any video file inside the streaming-video folder, with a filename ending in -source.mp4, and passes it through video2hls, creating a folder called {video}.fmp4 which contains all of the video and playlist files I need across a large variety of bandwidths and resolutions.\nIt will only do the work to create the directory and all of the fragmented files if the directory doesn\u0026rsquo;t already exist.\nfind ./streaming-video -type f -name \u0026#34;*-source.mp4\u0026#34; | xargs -I {} \\  bash -c \u0026#39;if [ ! -d \u0026#34;${1%-source.mp4}.fmp4\u0026#34; ]; then \\ video2hls --debug --output \u0026#34;${1%-source.mp4}.fmp4\u0026#34; --hls-type fmp4 \u0026#34;$1\u0026#34;; \\ fi;\u0026#39; _ {} \\;   I find all of the .m3u8 playlist files and gzip them (since they\u0026rsquo;re just text). This is essentially an in-place rewrite of the files.\nfind ./streaming-video -type f -name \u0026#34;*.m3u8\u0026#34; | xargs -P 8 -I {} \\  bash -c \u0026#39;! gunzip -t $1 2\u0026gt;/dev/null \u0026amp;\u0026amp; gzip -v $1 \u0026amp;\u0026amp; mv -v $1.gz $1;\u0026#39; _ {} \\;   Lastly, I push all of the files up to the hls folder in my S3 bucket using the AWS Unified CLI Tools, setting the correct Content-Type and Content-Encoding headers.\n# The .m3u8 playlists that we gzipped aws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \\  --exclude \u0026#39;*.*\u0026#39; \\  --include \u0026#39;*.m3u8\u0026#39; \\  --acl=public-read \\  --cache-control max-age=31536000,public \\  --content-type \u0026#39;application/vnd.apple.mpegurl\u0026#39; \\  --content-encoding \u0026#39;gzip\u0026#39; # The video \u0026#34;posters\u0026#34; aws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \\  --exclude \u0026#39;*.*\u0026#39; \\  --include \u0026#39;*.jpg\u0026#39; \\  --acl=public-read \\  --cache-control max-age=31536000,public \\  --content-type \u0026#39;image/jpeg\u0026#39; # The fragmented MP4 files aws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \\  --exclude \u0026#39;*.*\u0026#39; \\  --include \u0026#39;*.mp4\u0026#39; \\  --acl=public-read \\  --cache-control max-age=31536000,public \\  --content-type \u0026#39;video/mp4\u0026#39;   The Client-Side Code After pushing the content to our CDN, we can use the standard HTML5 \u0026lt;video\u0026gt; tag to tell browsers how to load the requested assets.\n\u0026lt;video poster=\u0026#34;https://cdn.ryanparman.com/hls/hallelujah.fmp4/poster.jpg\u0026#34; controls preload=\u0026#34;none\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;https://cdn.ryanparman.com/hls/hallelujah.fmp4/index.m3u8\u0026#34; type=\u0026#34;application/vnd.apple.mpegurl\u0026#34;\u0026gt; \u0026lt;source src=\u0026#34;https://cdn.ryanparman.com/hls/hallelujah.fmp4/progressive.mp4\u0026#34; type=\u0026#39;video/mp4; codecs=\u0026#34;avc1.4d401f, mp4a.40.2\u0026#34;\u0026#39;\u0026gt; \u0026lt;/video\u0026gt;   Here, we have a static poster image that the \u0026lt;video\u0026gt; element loads by default.\n  Next, we have an HLS-compatible playlist file (.m3u8), which ultimately points to the correct .mp4 files.\n  Lastly, we have a standard .mp4 fallback.\n  Enabling Chrome, Firefox, and Edge using hls.js Dailymotion has released a JavaScript library called hls.js which enables HLS playback on browsers like Chrome, Firefox, and Edge using Fragmented MP4 sources.\nYou can load the script from the CDN:\n\u0026lt;script src=\u0026#34;https://cdn.jsdelivr.net/npm/hls.js@latest\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; After that, we have the implementation. Here, we start with a working \u0026lt;video\u0026gt; element, then use JavaScript to swap over to HLS.\n(() =\u0026gt; { \u0026#39;use strict\u0026#39;; if (Hls.isSupported()) { let selector = \u0026#34;video source[type=\u0026#39;application/vnd.apple.mpegurl\u0026#39;]\u0026#34;, videoSources = document.querySelectorAll(selector); videoSources.forEach(videoSource =\u0026gt; { let m3u8 = videoSource.src, once = false; // Clone the video to remove any source  let oldVideo = videoSource.parentNode, newVideo = oldVideo.cloneNode(false); // Replace video tag with our clone.  oldVideo.parentNode.replaceChild(newVideo, oldVideo); // On play, initialize hls.js, once.  newVideo.addEventListener(\u0026#39;play\u0026#39;, () =\u0026gt; { if (once) { return; }; once = true; var hls = new Hls({ capLevelToPlayerSize: false }); hls.attachMedia(newVideo); hls.loadSource(m3u8); hls.on(Hls.Events.MANIFEST_PARSED, (event, data) =\u0026gt; { newVideo.play(); }); }, false); }); } })(); CORS If you are serving the files from a third-party host (such as Amazon S3), you will need to enable CORS support on your bucket.\n\u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;CORSConfiguration xmlns=\u0026#34;http://s3.amazonaws.com/doc/2006-03-01/\u0026#34;\u0026gt; \u0026lt;CORSRule\u0026gt; \u0026lt;AllowedHeader\u0026gt;*\u0026lt;/AllowedHeader\u0026gt; \u0026lt;AllowedOrigin\u0026gt;*\u0026lt;/AllowedOrigin\u0026gt; \u0026lt;AllowedMethod\u0026gt;GET\u0026lt;/AllowedMethod\u0026gt; \u0026lt;AllowedMethod\u0026gt;HEAD\u0026lt;/AllowedMethod\u0026gt; \u0026lt;/CORSRule\u0026gt; \u0026lt;/CORSConfiguration\u0026gt; Additionally, if you have a CDN cache in front of that S3 bucket (e.g., Amazon CloudFront), you\u0026rsquo;ll need to make sure that it is configured to allow the Origin headers through and also respond to the HTTP OPTIONS verb.\nYou can find more information about solving this problem with CloudFront at “Configuring CloudFront to Respect CORS Settings”.\n  ",
        "source":"\n{{\u003cdescription\u003e}}\nWhile YouTube is free (as in money) to use, the cost is paid in terms of privacy and advertising analytics. So I've decided to investigate self-hosting my video content.\n{{\u003c/description\u003e}}\n\n## The Cost of YouTube\n\nWith YouTube, you sacrifice privacy in favor of cost. YouTube is the very best at what they do (serve video to all resolutions and bandwidths), and they are backed by Google who is the very best at what they do (collect data in order to facilitate selling a primed audience to advertisers).\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2018/youtube-2017.png\"\u003e}}\n\nThere’s nothing inherently wrong with that. We live in a capitalistic society; there is money to be made; Google/YouTube is providing a service to advertisers; many consumers will (knowingly or unknowingly) give up their privacy in exchange for free-as-in-money services.\n\nBut as I've gotten older and started to realize just _how much_ data Google has on each and every one of us, I've started valuing my privacy a lot more. I'd like to provide an option for you to protect your privacy as well.\n\n## Self-Hosting Video Content\n\nEven with efficient video codecs, video can still cost a lot of money to serve.\n\nMany websites provide _a video_ to their users, wherein this video is a single file, and the browser will begin loading and playing the video from start to finish. This means that even if the user only watches the first few seconds of a 5 minute video, it's possible that the video is downloaded in its entirety — which is an unnecessary cost.\n\nHowever, we can provide a _better user experience_ as well as _reduce hosting costs_ by leveraging the ability to serve bandwidth-adaptive chunks of video to players on-demand.\n\n### Adaptive Bitrate Streaming\n\nThere are two major, semi-compatible approaches to [adaptive bitrate streaming](https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming) over HTTP. One is called [HTTP Live Streaming]({{\u003c wayback \"https://en.wikipedia.org/wiki/HTTP_Live_Streaming\" \u003e}}) (“HLS”), and the other is called [Dynamic Adaptive Streaming over HTTP]({{\u003c wayback \"https://en.wikipedia.org/wiki/Dynamic_Adaptive_Streaming_over_HTTP\" \u003e}}) (“MPEG-DASH”).\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2018/adaptive-bitrate-streaming.png\"\u003e}}\n\nFrom [Wikipedia]({{\u003c wayback \"https://en.wikipedia.org/wiki/Adaptive_bitrate_streaming\" \u003e}}):\n\n\u003e Adaptive bitrate streaming is a technique used in streaming multimedia over computer networks. While in the past most video or audio streaming technologies utilized streaming protocols such as RTP with RTSP, today's adaptive streaming technologies are almost exclusively based on HTTP and designed to work efficiently over large distributed HTTP networks such as the Internet.\n\u003e \n\u003e It works by detecting a user's bandwidth and CPU capacity in real time and adjusting the quality of the media stream accordingly. It requires the use of an encoder which can encode a single source media (video or audio) at multiple bit rates. The player client switches between streaming the different encodings depending on available resources. \"The result: very little buffering, fast start time and a good experience for both high-end and low-end connections.\" […]\n\u003e\n\u003e HTTP-based adaptive bitrate streaming technologies yield additional benefits over traditional server-driven adaptive bitrate streaming. First, since the streaming technology is built on top of HTTP, contrary to RTP-based adaptive streaming, the packets have no difficulties traversing firewall and NAT devices. Second, since HTTP streaming is purely client-driven, all adaptation logic resides at the client. This reduces the requirement of persistent connections between server and client application. Furthermore, the server is not required to maintain session state information on each client, increasing scalability. Finally, existing HTTP delivery infrastructure, such as HTTP caches and servers can be seamlessly adopted.\n\u003e\n\u003e A scalable CDN is used to deliver media streaming to an Internet audience. The CDN receives the stream from the source at its Origin server, then replicates it to many or all of its Edge cache servers. The end-user requests the stream and is redirected to the \"closest\" Edge server. […] The use of HTTP-based adaptive streaming allows the Edge server to run a simple HTTP server software, whose licence cost is cheap or free, reducing software licensing cost, compared to costly media server licences (e.g. Adobe Flash Media Streaming Server). The CDN cost for HTTP streaming media is then similar to HTTP web caching CDN cost.\n\nThis means that we can use off-the-shelf services like [Amazon S3](https://aws.amazon.com/s3) and [Amazon CloudFront](https://aws.amazon.com/cloudfront) to serve video, which are relatively inexpensive and have large user-bases who can answer questions when you run into issues.\n\n### HTTP Live Streaming (HLS)\n\nAfter doing some research, I came across a blog post that was particularly helpful — “[Self-hosted videos with HLS]({{\u003c wayback \"https://vincent.bernat.ch/en/blog/2018-self-hosted-videos\" \u003e}})” by Vincent Bernat.\n\nVincent writes:\n\n\u003e To serve HLS videos, you need three kinds of files:\n\u003e \n\u003e * the media segments (encoded with different bitrates/resolutions),\n\u003e * a media playlist for each variant, listing the media segments, and\n\u003e * a master playlist, listing the media playlists.\n\u003e \n\u003e Media segments can come in two formats:\n\u003e \n\u003e * MPEG-2 Transport Streams (TS), or\n\u003e * Fragmented MP4.\n\u003e \n\u003e Fragmented MP4 media segments are supported since iOS 10. They are a bit more efficient and can be reused to serve the same content as MPEG-DASH (only the playlists are different). Also, they can be served from the same file with range requests. However, if you want to target older versions of iOS, you need to stick with MPEG-2 TS.\n\nAt the time of this writing, iOS 12 will be out in a week or two. A quick search tells me that [iOS 10 and newer make up 85% of all iOS users]({{\u003c wayback \"https://data.apteligent.com/ios/\" \u003e}}). This means that I can pretty safely use the _Fragmented MP4_ method which, according to [these]({{\u003c wayback \"https://bitmovin.com/hls-news-wwdc-2016/\" \u003e}}) [sources]({{\u003c wayback \"http://www.streamingmedia.com/Articles/ReadArticle.aspx?ArticleID=111796\" \u003e}}), is more compatible with MPEG-DASH for some cross-over implementations in the future.\n\n## Sample Video\n\n{{\u003chls src=\"hallelujah\"\n       sourceUrl=\"https://youtu.be/e1C9kpMV2e8\"\n       sourceTitle=\"Hallelujah - Brooklyn Duo (Piano + Cello)\"\n\u003e}}\n\n## Implementation\n\n### Encoding and Deploying Video\n\nVincent Bernat provides a tool on GitHub which greatly simplifies the process of creating the various video fragments called [video2hls]({{\u003c wayback \"https://github.com/vincentbernat/video2hls\" \u003e}}).\n\nFor [this website](https://github.com/skyzyx/blog/blob/master/Makefile), I have put together a workflow for creating and serving HLS video content.\n\n1. I use **H.264** video with **AAC** audio wrapped inside an **MP4** container, _exclusively_. These are all defined as part of the MPEG-4 specification, and is the [best-supported grouping of codecs and containers across all browsers and devices](https://caniuse.com/#search=H.264).\n\n    Hardware-level decoders are commonplace inside computers, phones, tablets, and set-top boxes like Xbox, PlayStation, and Apple TV.\n\n1. I have a directory called `streaming-video`, which is separate from the images that I use and push to S3. Video files are large, and I don't want to accidentally push partially-completed video data to my caching CDN before they're ready.\n\n1. I have a command which takes any video file inside the `streaming-video` folder, with a filename ending in `-source.mp4`, and passes it through `video2hls`, creating a folder called `{video}.fmp4` which contains all of the video and playlist files I need across a large variety of bandwidths and resolutions.\n\n    It will only do the work to create the directory and all of the fragmented files if the directory doesn't already exist.\n\n    ```bash\n    find ./streaming-video -type f -name \"*-source.mp4\" | xargs -I {} \\\n        bash -c 'if [ ! -d \"${1%-source.mp4}.fmp4\" ]; then \\\n            video2hls --debug --output \"${1%-source.mp4}.fmp4\" --hls-type fmp4 \"$1\"; \\\n        fi;' _ {} \\;\n    ```\n\n1. I find all of the `.m3u8` playlist files and gzip them (since they're just text). This is essentially an in-place rewrite of the files.\n\n    ```bash\n    find ./streaming-video -type f -name \"*.m3u8\" | xargs -P 8 -I {} \\\n        bash -c '! gunzip -t $1 2\u003e/dev/null \u0026\u0026 gzip -v $1 \u0026\u0026 mv -v $1.gz $1;' _ {} \\;\n    ```\n\n1. Lastly, I push all of the files up to the `hls` folder in my S3 bucket using the [AWS Unified CLI Tools](https://github.com/aws/aws-cli), setting the correct `Content-Type` and `Content-Encoding` headers.\n\n    ```bash\n    # The .m3u8 playlists that we gzipped\n    aws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \\\n        --exclude '*.*' \\\n        --include '*.m3u8' \\\n        --acl=public-read \\\n        --cache-control max-age=31536000,public \\\n        --content-type 'application/vnd.apple.mpegurl' \\\n        --content-encoding 'gzip'\n\n    # The video \"posters\"\n    aws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \\\n        --exclude '*.*' \\\n        --include '*.jpg' \\\n        --acl=public-read \\\n        --cache-control max-age=31536000,public \\\n        --content-type 'image/jpeg'\n\n    # The fragmented MP4 files\n    aws s3 sync ./streaming-video s3://blog.ryanparman.com/hls \\\n        --exclude '*.*' \\\n        --include '*.mp4' \\\n        --acl=public-read \\\n        --cache-control max-age=31536000,public \\\n        --content-type 'video/mp4'\n    ```\n\n### The Client-Side Code\n\nAfter pushing the content to our CDN, we can use the standard HTML5 `\u003cvideo\u003e` tag to tell browsers how to load the requested assets.\n\n```html\n\u003cvideo poster=\"https://cdn.ryanparman.com/hls/hallelujah.fmp4/poster.jpg\" controls preload=\"none\"\u003e\n    \u003csource src=\"https://cdn.ryanparman.com/hls/hallelujah.fmp4/index.m3u8\" type=\"application/vnd.apple.mpegurl\"\u003e\n    \u003csource src=\"https://cdn.ryanparman.com/hls/hallelujah.fmp4/progressive.mp4\" type='video/mp4; codecs=\"avc1.4d401f, mp4a.40.2\"'\u003e\n\u003c/video\u003e\n```\n\n1. Here, we have a static _poster_ image that the `\u003cvideo\u003e` element loads by default.\n\n1. Next, we have an HLS-compatible playlist file (`.m3u8`), which ultimately points to the correct `.mp4` files.\n\n1. Lastly, we have a standard `.mp4` fallback.\n\n### Enabling Chrome, Firefox, and Edge using hls.js\n\nDailymotion has released a JavaScript library called [hls.js](https://github.com/video-dev/hls.js) which enables HLS playback on browsers like Chrome, Firefox, and Edge using Fragmented MP4 sources.\n\nYou can load the script from the CDN:\n\n```html\n\u003cscript src=\"https://cdn.jsdelivr.net/npm/hls.js@latest\"\u003e\u003c/script\u003e\n```\n\nAfter that, we have the implementation. Here, we start with a working `\u003cvideo\u003e` element, then use JavaScript to swap over to HLS.\n\n```javascript\n(() =\u003e {\n  'use strict';\n\n  if (Hls.isSupported()) {\n    let selector = \"video source[type='application/vnd.apple.mpegurl']\",\n        videoSources = document.querySelectorAll(selector);\n\n    videoSources.forEach(videoSource =\u003e {\n      let m3u8 = videoSource.src,\n          once = false;\n\n      // Clone the video to remove any source\n      let oldVideo = videoSource.parentNode,\n          newVideo = oldVideo.cloneNode(false);\n\n      // Replace video tag with our clone.\n      oldVideo.parentNode.replaceChild(newVideo, oldVideo);\n\n      // On play, initialize hls.js, once.\n      newVideo.addEventListener('play', () =\u003e {\n        if (once) {\n          return;\n        };\n        once = true;\n\n        var hls = new Hls({\n          capLevelToPlayerSize: false\n        });\n        hls.attachMedia(newVideo);\n        hls.loadSource(m3u8);\n        hls.on(Hls.Events.MANIFEST_PARSED, (event, data) =\u003e {\n          newVideo.play();\n        });\n      }, false);\n    });\n  }\n})();\n```\n\n### CORS\n\nIf you are serving the files from a third-party host (such as Amazon S3), you will need to enable [CORS](https://caniuse.com/#search=cors) support on your bucket.\n\n```xml\n\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n\u003cCORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\"\u003e\n  \u003cCORSRule\u003e\n    \u003cAllowedHeader\u003e*\u003c/AllowedHeader\u003e\n    \u003cAllowedOrigin\u003e*\u003c/AllowedOrigin\u003e\n    \u003cAllowedMethod\u003eGET\u003c/AllowedMethod\u003e\n    \u003cAllowedMethod\u003eHEAD\u003c/AllowedMethod\u003e\n  \u003c/CORSRule\u003e\n\u003c/CORSConfiguration\u003e\n```\n\nAdditionally, if you have a CDN cache in front of that S3 bucket (e.g., Amazon CloudFront), you'll need to make sure that it is configured to allow the `Origin` headers through and also respond to the HTTP `OPTIONS` verb.\n\nYou can find more information about solving this problem with CloudFront at “[Configuring CloudFront to Respect CORS Settings]({{\u003c wayback \"https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/header-caching.html#header-caching-web-cors\" \u003e}})”.\n\n\u003cscript src=\"https://cdn.jsdelivr.net/npm/hls.js@latest\"\u003e\u003c/script\u003e\n{{\u003cscript src=\"/js/stream-hls.js\"\u003e}}\n"},
    "links": {
        "prev": {"title": "Clueless Recruiters, Issue #8", "permalink": "https://ryanparman.com/posts/2018/clueless-recruiters-issue-8/"},
        "next": {"title": "The Hiring Process, Part I", "permalink": "https://ryanparman.com/posts/2018/the-hiring-process-part-i-what-i-look-for-in-a-cv-resume-remastered/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "PHP, DOMDocument, XPath 1.0, Case-Insensitivity, and Performance",
    "description": "",
    "summary": {
        "content": "TL;DR: How I improved the performance of case-insensitive XPath queries by 30–35%, reducing an 8× performance hit to only 4.5–5×. This was originally posted to the SimplePie NG blog. Parse-at-all-costs Most feeds are a mess. The old SimplePie “OG” took a parse-at-all-costs philosophy, and could handle many of the most broken feeds you could find — at a cost. While the early versions of SimplePie supported the letter of the RSS 2.0 specification, there were a surprising number of feeds which didn’t.",
        "isTruncated": true
    },
    "published": "2018-02-04T00:26:21Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2018/php-domdocument-xpath-1-0-case-insensitivity-and-performance/",
    "relativePermalink": "/posts/2018/php-domdocument-xpath-1-0-case-insensitivity-and-performance/",
    "aliases": ["/2018/02/04/php-domdocument-xpath-1-0-case-insensitivity-and-performance"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2017/hackerman.jpg"],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": ["simplepie", "simplepie-ng", "php", "xpath", "xslt", "rss", "domdocument", "performance"],
    "series": ["Editors Choice"],
    "keywords": [],
    "meta": {
        "wordCount": 1178,
        "readingTime": "6 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2018/20180204-php-domdocument-xpath-1-0-case-insensitivity-and-performance.md",
        "logicalName": "20180204-php-domdocument-xpath-1-0-case-insensitivity-and-performance.md",
        "translationBaseName": "20180204-php-domdocument-xpath-1-0-case-insensitivity-and-performance",
        "baseFileName": "20180204-php-domdocument-xpath-1-0-case-insensitivity-and-performance",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2018/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#parse-at-all-costs\"\u003eParse-at-all-costs\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#introducing-xpath\"\u003eIntroducing XPath\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#performance-testing\"\u003ePerformance-testing\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#test-machine-and-environment\"\u003eTest machine and environment\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#first-pass-case-insensitive-with-xpath-translate\"\u003eFirst pass; Case-insensitive with XPath translate()\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#second-pass-normal-case-sensitive\"\u003eSecond pass; Normal, case-sensitive\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#experimentation\"\u003eExperimentation\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#xslt\"\u003eXSLT\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#enabling-php-functions-in-xpath\"\u003eEnabling PHP functions in XPath\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#simplify-translate\"\u003eSimplify translate()\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#wrapping-up\"\u003eWrapping-up\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nTL;DR: How I improved the performance of case-insensitive XPath queries by 30–35%, reducing an 8× performance hit to only 4.5–5×.\n\u003c/p\u003e\n\n\n\u003caside class=\"age aside container flex\"\u003e\u003cp\u003eThis was originally posted to the \u003ca href=\"https://medium.com/simplepie-ng/php-domdocument-xpath-1-0-case-insensitivity-and-performance-ad962b98e71c\"\u003eSimplePie NG blog\u003c/a\u003e.\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2017/hackerman.webp\" alt=\"Title card for “Hackerman”, a character from the short film “Kung Fury”. http://www.kungfury.com\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2017/hackerman.jpg\" alt=\"Title card for “Hackerman”, a character from the short film “Kung Fury”. http://www.kungfury.com\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003ch2 id=\"parse-at-all-costs\"\u003eParse-at-all-costs\u003c/h2\u003e\n\u003cp\u003eMost feeds are a mess. The old SimplePie “OG” took a parse-at-all-costs philosophy, and could handle many of the most broken feeds you could find — at a cost. While the early versions of SimplePie supported the letter of the RSS 2.0 specification, there were a surprising number of feeds which didn’t.\u003c/p\u003e\n\u003cp\u003eOnce SimplePie started to get popular (2006–2008), we started getting bug reports from users who were working with RSS feeds containing elements such as \u003ccode\u003e\u0026lt;pubdate\u0026gt;\u003c/code\u003e (instead of \u003ca href=\"https://web.archive.org/web/20180204002621/http://www.rssboard.org/rss-specification\"\u003e\u003ccode\u003e\u0026lt;pubDate\u0026gt;\u003c/code\u003e\u003c/a\u003e) and \u003ccode\u003e\u0026lt;managingeditor\u0026gt;\u003c/code\u003e (instead of \u003ca href=\"https://web.archive.org/web/20180204002621/http://www.rssboard.org/rss-specification\"\u003e\u003ccode\u003e\u0026lt;managingEditor\u0026gt;\u003c/code\u003e\u003c/a\u003e). At first we told users that the feeds were broken — which they were. But then we started getting enough reports that we decided to do something about it.\u003c/p\u003e\n\u003ch2 id=\"introducing-xpath\"\u003eIntroducing XPath\u003c/h2\u003e\n\u003cp\u003eFast-forward to the summer of 2017 when I started work on SimplePie NG in earnest. There are a number of things I’m doing differently (read: better) this time around. The first is that the \u003cem\u003efastest\u003c/em\u003e approach is the \u003cem\u003edefault\u003c/em\u003e approach. A corollary to this principle is that if you want to do more things, you will pay for them with performance penalties.\u003c/p\u003e\n\u003cp\u003eDuring my time working at Amazon Web Services on the SDK for PHP, I discovered some substantial performance gains by moving a lot of the response-parsing code to XPath. As such, the core XML parsing in SimplePie NG is all built around \u003ca href=\"https://web.archive.org/web/20180204002621/https://secure.php.net/domdocument\"\u003eDOMDocument\u003c/a\u003e and \u003ca href=\"https://web.archive.org/web/20180204002621/https://secure.php.net/domxpath\"\u003eXPath\u003c/a\u003e queries.\u003c/p\u003e\n\u003cp\u003eTo solve this case-insensitivity problem, \u003ca href=\"https://web.archive.org/web/20180204002621/https://stackoverflow.com/questions/2893551/case-insensitive-matching-in-xpath\"\u003esearching Stack Overflow for “case insensitive xpath”\u003c/a\u003e tells you about the XPath 2.0 functions \u003ca href=\"https://web.archive.org/web/20180204002621/https://www.w3.org/TR/xpath-functions/#func-matches\"\u003e\u003ccode\u003ematches()\u003c/code\u003e\u003c/a\u003e and \u003ca href=\"https://web.archive.org/web/20180204002621/https://www.w3.org/TR/xpath-functions/#func-lower-case\"\u003e\u003ccode\u003elower-case()\u003c/code\u003e\u003c/a\u003e. However, I was surprised to learn that PHP only supports XPath 1.0. After doing some digging, the reason appears to be that the underlying \u003ca href=\"https://web.archive.org/web/20180204002621/http://xmlsoft.org\"\u003elibxml2\u003c/a\u003e library only supports XPath 1.0, with \u003ca href=\"https://web.archive.org/web/20180204002621/https://mail.gnome.org/archives/xml/2007-February/msg00077.html\"\u003eno updated support on the horizon\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe only alternative that Google and Stack Overflow had for me was the XPath 1.0 function, \u003ca href=\"https://web.archive.org/web/20180204002621/https://www.w3.org/TR/xpath/#function-translate\"\u003e\u003ccode\u003etranslate()\u003c/code\u003e\u003c/a\u003e. In PHP, the case-insensitive query for the \u003ccode\u003e\u0026lt;rss\u0026gt;\u003c/code\u003e element would be:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"color:#f92672\"\u003e/*\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003etranslate\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003ename\u003c/span\u003e(), \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;abcdefghijklmnopqrstuvwxyz\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;rss\u0026#39;\u003c/span\u003e]\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eIt’s simple enough to turn this into a pattern inside of a function. Case-insensitive XML parsing. Done. Boo-yah.\u003c/p\u003e\n\u003ch2 id=\"performance-testing\"\u003ePerformance-testing\u003c/h2\u003e\n\u003cp\u003eA little while later, I started some early work on benchmarking SimplePie NG. I parsed a number of normal-sized feeds, and got back a bunch of perfectly reasonable results. But one thing that I wanted to test was memory usage to make sure there were no memory leaks.\u003c/p\u003e\n\u003cp\u003eI put together a quick and dirty test suite by starting with Tim Bray’s feed (one of the more nuanced and complex Atom 1.0 feeds), \u003ca href=\"https://web.archive.org/web/20180204002621/https://raw.githubusercontent.com/simplepie/simplepie-ng/master/tests/Integration/feeds/full/atom10/tim-bray-500.xml\"\u003eduplicating the entries to a total of 500\u003c/a\u003e (increasing the size to around 3 MB), and then \u003ca href=\"https://web.archive.org/web/20180204002621/https://github.com/simplepie/simplepie-ng/blob/master/tests/benchmarks/atom10.php\"\u003ewrote a test that flexed everything\u003c/a\u003e about SimplePie NG that I could think of. I then started running the test over and over again, collecting data about the timing and memory usage, and when the cache kicks-in and the engine warms up.\u003c/p\u003e\n\u003ch3 id=\"test-machine-and-environment\"\u003eTest machine and environment\u003c/h3\u003e\n\u003cp\u003eI’m running this on a \u003ca href=\"https://web.archive.org/web/20180204002621/https://everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i7-2.2-17-early-2011-unibody-thunderbolt-specs.html\"\u003e2011 “Core i7” MacBook Pro\u003c/a\u003e, with 16 GB of RAM and an after-market SATA-III SSD. I have various background processes running, so it isn’t the same as running it on a fresh Linux web server. I also have \u003cem\u003eXDebug\u003c/em\u003e enabled, and I’m testing on the CLI where \u003cem\u003eZend OpCache\u003c/em\u003e is disabled.\u003c/p\u003e\n\u003ch3 id=\"first-pass-case-insensitive-with-xpath-translate\"\u003eFirst pass; Case-insensitive with XPath translate()\u003c/h3\u003e\n\u003cp\u003eThe intial results for this 3 MB, 500-entry feed — with case-insensitivity enabled by way of the XPath \u003ccode\u003etranslate()\u003c/code\u003e function — had an average runtime of \u003cstrong\u003e26 seconds\u003c/strong\u003e. That was \u003cem\u003equite\u003c/em\u003e a bit slower than I was hoping for (especially on PHP 7.2), but then again it \u003cem\u003ewas\u003c/em\u003e a big file with \u003cem\u003ea lot\u003c/em\u003e of entries.\u003c/p\u003e\n\u003cp\u003eLet’s compare to case-insensitivity turned off (i.e., case-sensitive XML parsing).\u003c/p\u003e\n\u003ch3 id=\"second-pass-normal-case-sensitive\"\u003eSecond pass; Normal, case-sensitive\u003c/h3\u003e\n\u003cp\u003eThe next round of results on the same 3 MB, 500-entry feed—with standard case-sensitive XPath queries—had an average runtime of \u003cstrong\u003e3.5 seconds\u003c/strong\u003e. That’s \u003cem\u003ea lot\u003c/em\u003e better.\u003c/p\u003e\n\u003cp\u003eTo do some quick math, the normal query took only \u003cstrong\u003e14%\u003c/strong\u003e of the amount of time it took to do a case-insensitive query. Or, put another way, the case-insensitive query took around \u003cstrong\u003e7.5×\u003c/strong\u003e longer than the normal query. \u003cem\u003eThat’s awful!\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"experimentation\"\u003eExperimentation\u003c/h2\u003e\n\u003cp\u003eI had to find a way to improve the performance of the case-insensitive XPath query. Could I reduce the number of times I had to call \u003ccode\u003etranslate()\u003c/code\u003e?\u003c/p\u003e\n\u003ch3 id=\"xslt\"\u003eXSLT\u003c/h3\u003e\n\u003cp\u003eI tried experimenting with XSLT for a few days. The goal was to transform the XML \u003cem\u003eonce\u003c/em\u003e with XSLT into a new XML document where all elements were lowercase, then I could just use regular XPath queries and avoid \u003ccode\u003etranslate()\u003c/code\u003e all-together.\u003c/p\u003e\n\u003cp\u003eOverall, I still think this is a fantastic idea if \u003cem\u003eyou know where your XML data is coming from\u003c/em\u003e. Unfortunately for me, I don’t, and I was completely unable to craft an appropriate XSLT template that would allow me to convert all tag names to lowercase without breaking a bunch of other things (e.g., entities). I ended up having to abandon this path.\u003c/p\u003e\n\u003ch3 id=\"enabling-php-functions-in-xpath\"\u003eEnabling PHP functions in XPath\u003c/h3\u003e\n\u003cp\u003eI only dabbled with this briefly, but there was no discernable performance improvement that I can recall. Also, the PHP documentation is lacking around this feature, so it was a lot of trial and error.\u003c/p\u003e\n\u003ch3 id=\"simplify-translate\"\u003eSimplify translate()\u003c/h3\u003e\n\u003cp\u003eFinally, I wondered if I could reduce the amount of time that \u003ccode\u003etranslate()\u003c/code\u003e takes if I simply gave it less work to do. Instead of giving it the entire alphabet, what if I only gave it the letters that were in the XML element name?\u003c/p\u003e\n\u003cp\u003ePHP has a function \u003ca href=\"https://web.archive.org/web/20180204002621/https://secure.php.net/manual/en/function.count-chars.php\"\u003e\u003ccode\u003ecount_chars()\u003c/code\u003e\u003c/a\u003e that can return the unique characters in a string. From here, we can create upper and lower-case versions of the string, and just use those in the \u003cem\u003etranslate()\u003c/em\u003e function.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ephp\u003c/span\u003e\n\n$word           \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;rss\u0026#39;\u003c/span\u003e;\n$elementLetters \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e\\count_chars\u003c/span\u003e($word, \u003cspan style=\"color:#ae81ff\"\u003e3\u003c/span\u003e);\n$lettersLower   \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e\\mb_strtolower\u003c/span\u003e($elementLetters);\n$lettersUpper   \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e\\mb_strtoupper\u003c/span\u003e($elementLetters);\n\n$query \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e\\sprintf\u003c/span\u003e(\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;/*[translate(name(), \\\u0026#39;%s\\\u0026#39;, \\\u0026#39;%s\\\u0026#39;) = \\\u0026#39;%s\\\u0026#39;]\u0026#39;\u003c/span\u003e,\n    $lettersUpper,\n    $lettersLower,\n    $word\n);\n\n\u003cspan style=\"color:#75715e\"\u003e# /*[translate(name(), \u0026#39;RS\u0026#39;, \u0026#39;rs\u0026#39;) = \u0026#39;rss\u0026#39;\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e$results \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e $domxpath\u003cspan style=\"color:#f92672\"\u003e-\u0026gt;\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003equery\u003c/span\u003e($query);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eTesting this approach on the same 3 MB, 500-entry feed — with case-insensitivity enabled by way of our smarter \u003ccode\u003etranslate()\u003c/code\u003e function — had an average runtime of \u003cstrong\u003e17 seconds\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eRunning the same benchmarks against my other test feeds consistently showed a \u003cstrong\u003e30–35% improvement\u003c/strong\u003e in performance when using only the required letters in the \u003ccode\u003etranslate()\u003c/code\u003e function instead of the entire alphabet.\u003c/p\u003e\n\u003ch2 id=\"wrapping-up\"\u003eWrapping-up\u003c/h2\u003e\n\u003cp\u003eEven with this technique (on this particular set of data, with this particular testing approach), case-insensitive queries are still \u003cstrong\u003e4.5–5×\u003c/strong\u003e slower than their case-sensitive counterparts. Using the \u003ccode\u003etranslate()\u003c/code\u003e XPath 1.0 function in PHP has a substantial impact on performance, so \u003cem\u003edon’t use it if you don’t have to\u003c/em\u003e.\u003c/p\u003e\n\u003cp\u003eI still think that there is some viability in leveraging XSLT in a first pass, which I expect would substantially reduce the case-insensitive processing time, but someone with more XSLT experience than me would need to contribute that code.\u003c/p\u003e\n\u003cp\u003eLastly, SimplePie NG performs the faster case-sensitive queries by default. You are able to opt-in to case-insensitive mode on a per-feed basis. If you’re just processing a few average-sized feeds with this mode enabled, you probably won’t notice much of an impact.\u003c/p\u003e\n",
        "plain":"TL;DR: How I improved the performance of case-insensitive XPath queries by 30–35%, reducing an 8× performance hit to only 4.5–5×. This was originally posted to the SimplePie NG blog.\n   Parse-at-all-costs Most feeds are a mess. The old SimplePie “OG” took a parse-at-all-costs philosophy, and could handle many of the most broken feeds you could find — at a cost. While the early versions of SimplePie supported the letter of the RSS 2.0 specification, there were a surprising number of feeds which didn’t.\nOnce SimplePie started to get popular (2006–2008), we started getting bug reports from users who were working with RSS feeds containing elements such as \u0026lt;pubdate\u0026gt; (instead of \u0026lt;pubDate\u0026gt;) and \u0026lt;managingeditor\u0026gt; (instead of \u0026lt;managingEditor\u0026gt;). At first we told users that the feeds were broken — which they were. But then we started getting enough reports that we decided to do something about it.\nIntroducing XPath Fast-forward to the summer of 2017 when I started work on SimplePie NG in earnest. There are a number of things I’m doing differently (read: better) this time around. The first is that the fastest approach is the default approach. A corollary to this principle is that if you want to do more things, you will pay for them with performance penalties.\nDuring my time working at Amazon Web Services on the SDK for PHP, I discovered some substantial performance gains by moving a lot of the response-parsing code to XPath. As such, the core XML parsing in SimplePie NG is all built around DOMDocument and XPath queries.\nTo solve this case-insensitivity problem, searching Stack Overflow for “case insensitive xpath” tells you about the XPath 2.0 functions matches() and lower-case(). However, I was surprised to learn that PHP only supports XPath 1.0. After doing some digging, the reason appears to be that the underlying libxml2 library only supports XPath 1.0, with no updated support on the horizon.\nThe only alternative that Google and Stack Overflow had for me was the XPath 1.0 function, translate(). In PHP, the case-insensitive query for the \u0026lt;rss\u0026gt; element would be:\n/*[translate(name(), \u0026#39;ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0026#39;, \u0026#39;abcdefghijklmnopqrstuvwxyz\u0026#39;) = \u0026#39;rss\u0026#39;] It’s simple enough to turn this into a pattern inside of a function. Case-insensitive XML parsing. Done. Boo-yah.\nPerformance-testing A little while later, I started some early work on benchmarking SimplePie NG. I parsed a number of normal-sized feeds, and got back a bunch of perfectly reasonable results. But one thing that I wanted to test was memory usage to make sure there were no memory leaks.\nI put together a quick and dirty test suite by starting with Tim Bray’s feed (one of the more nuanced and complex Atom 1.0 feeds), duplicating the entries to a total of 500 (increasing the size to around 3 MB), and then wrote a test that flexed everything about SimplePie NG that I could think of. I then started running the test over and over again, collecting data about the timing and memory usage, and when the cache kicks-in and the engine warms up.\nTest machine and environment I’m running this on a 2011 “Core i7” MacBook Pro, with 16 GB of RAM and an after-market SATA-III SSD. I have various background processes running, so it isn’t the same as running it on a fresh Linux web server. I also have XDebug enabled, and I’m testing on the CLI where Zend OpCache is disabled.\nFirst pass; Case-insensitive with XPath translate() The intial results for this 3 MB, 500-entry feed — with case-insensitivity enabled by way of the XPath translate() function — had an average runtime of 26 seconds. That was quite a bit slower than I was hoping for (especially on PHP 7.2), but then again it was a big file with a lot of entries.\nLet’s compare to case-insensitivity turned off (i.e., case-sensitive XML parsing).\nSecond pass; Normal, case-sensitive The next round of results on the same 3 MB, 500-entry feed—with standard case-sensitive XPath queries—had an average runtime of 3.5 seconds. That’s a lot better.\nTo do some quick math, the normal query took only 14% of the amount of time it took to do a case-insensitive query. Or, put another way, the case-insensitive query took around 7.5× longer than the normal query. That’s awful!\nExperimentation I had to find a way to improve the performance of the case-insensitive XPath query. Could I reduce the number of times I had to call translate()?\nXSLT I tried experimenting with XSLT for a few days. The goal was to transform the XML once with XSLT into a new XML document where all elements were lowercase, then I could just use regular XPath queries and avoid translate() all-together.\nOverall, I still think this is a fantastic idea if you know where your XML data is coming from. Unfortunately for me, I don’t, and I was completely unable to craft an appropriate XSLT template that would allow me to convert all tag names to lowercase without breaking a bunch of other things (e.g., entities). I ended up having to abandon this path.\nEnabling PHP functions in XPath I only dabbled with this briefly, but there was no discernable performance improvement that I can recall. Also, the PHP documentation is lacking around this feature, so it was a lot of trial and error.\nSimplify translate() Finally, I wondered if I could reduce the amount of time that translate() takes if I simply gave it less work to do. Instead of giving it the entire alphabet, what if I only gave it the letters that were in the XML element name?\nPHP has a function count_chars() that can return the unique characters in a string. From here, we can create upper and lower-case versions of the string, and just use those in the translate() function.\n\u0026lt;?php $word = \u0026#39;rss\u0026#39;; $elementLetters = \\count_chars($word, 3); $lettersLower = \\mb_strtolower($elementLetters); $lettersUpper = \\mb_strtoupper($elementLetters); $query = \\sprintf( \u0026#39;/*[translate(name(), \\\u0026#39;%s\\\u0026#39;, \\\u0026#39;%s\\\u0026#39;) = \\\u0026#39;%s\\\u0026#39;]\u0026#39;, $lettersUpper, $lettersLower, $word ); # /*[translate(name(), \u0026#39;RS\u0026#39;, \u0026#39;rs\u0026#39;) = \u0026#39;rss\u0026#39; $results = $domxpath-\u0026gt;query($query); Testing this approach on the same 3 MB, 500-entry feed — with case-insensitivity enabled by way of our smarter translate() function — had an average runtime of 17 seconds.\nRunning the same benchmarks against my other test feeds consistently showed a 30–35% improvement in performance when using only the required letters in the translate() function instead of the entire alphabet.\nWrapping-up Even with this technique (on this particular set of data, with this particular testing approach), case-insensitive queries are still 4.5–5× slower than their case-sensitive counterparts. Using the translate() XPath 1.0 function in PHP has a substantial impact on performance, so don’t use it if you don’t have to.\nI still think that there is some viability in leveraging XSLT in a first pass, which I expect would substantially reduce the case-insensitive processing time, but someone with more XSLT experience than me would need to contribute that code.\nLastly, SimplePie NG performs the faster case-sensitive queries by default. You are able to opt-in to case-insensitive mode on a per-feed basis. If you’re just processing a few average-sized feeds with this mode enabled, you probably won’t notice much of an impact.\n",
        "source":"\n{{\u003cdescription\u003e}}\nTL;DR: How I improved the performance of case-insensitive XPath queries by 30–35%, reducing an 8× performance hit to only 4.5–5×.\n{{\u003c/description\u003e}}\n\n{{% aside %}}\nThis was originally posted to the \u003ca href=\"https://medium.com/simplepie-ng/php-domdocument-xpath-1-0-case-insensitivity-and-performance-ad962b98e71c\"\u003eSimplePie NG blog\u003c/a\u003e.\n{{% /aside %}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2017/hackerman.jpg\" alt=\"Title card for “Hackerman”, a character from the short film “Kung Fury”. http://www.kungfury.com\" \u003e}}\n\n## Parse-at-all-costs\n\nMost feeds are a mess. The old SimplePie “OG” took a parse-at-all-costs philosophy, and could handle many of the most broken feeds you could find — at a cost. While the early versions of SimplePie supported the letter of the RSS 2.0 specification, there were a surprising number of feeds which didn’t.\n\nOnce SimplePie started to get popular (2006–2008), we started getting bug reports from users who were working with RSS feeds containing elements such as `\u003cpubdate\u003e` (instead of [`\u003cpubDate\u003e`]({{\u003c wayback \"http://www.rssboard.org/rss-specification\" \u003e}})) and `\u003cmanagingeditor\u003e` (instead of [`\u003cmanagingEditor\u003e`]({{\u003c wayback \"http://www.rssboard.org/rss-specification\" \u003e}})). At first we told users that the feeds were broken — which they were. But then we started getting enough reports that we decided to do something about it.\n\n## Introducing XPath\n\nFast-forward to the summer of 2017 when I started work on SimplePie NG in earnest. There are a number of things I’m doing differently (read: better) this time around. The first is that the _fastest_ approach is the _default_ approach. A corollary to this principle is that if you want to do more things, you will pay for them with performance penalties.\n\nDuring my time working at Amazon Web Services on the SDK for PHP, I discovered some substantial performance gains by moving a lot of the response-parsing code to XPath. As such, the core XML parsing in SimplePie NG is all built around [DOMDocument]({{\u003c wayback \"https://secure.php.net/domdocument\" \u003e}}) and [XPath]({{\u003c wayback \"https://secure.php.net/domxpath\" \u003e}}) queries.\n\nTo solve this case-insensitivity problem, [searching Stack Overflow for “case insensitive xpath”]({{\u003c wayback \"https://stackoverflow.com/questions/2893551/case-insensitive-matching-in-xpath\" \u003e}}) tells you about the XPath 2.0 functions [`matches()`]({{\u003c wayback \"https://www.w3.org/TR/xpath-functions/#func-matches\" \u003e}}) and [`lower-case()`]({{\u003c wayback \"https://www.w3.org/TR/xpath-functions/#func-lower-case\" \u003e}}). However, I was surprised to learn that PHP only supports XPath 1.0. After doing some digging, the reason appears to be that the underlying [libxml2]({{\u003c wayback \"http://xmlsoft.org\" \u003e}}) library only supports XPath 1.0, with [no updated support on the horizon]({{\u003c wayback \"https://mail.gnome.org/archives/xml/2007-February/msg00077.html\" \u003e}}).\n\nThe only alternative that Google and Stack Overflow had for me was the XPath 1.0 function, [`translate()`]({{\u003c wayback \"https://www.w3.org/TR/xpath/#function-translate\" \u003e}}). In PHP, the case-insensitive query for the `\u003crss\u003e` element would be:\n\n```php\n/*[translate(name(), 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz') = 'rss']\n```\n\nIt’s simple enough to turn this into a pattern inside of a function. Case-insensitive XML parsing. Done. Boo-yah.\n\n## Performance-testing\n\nA little while later, I started some early work on benchmarking SimplePie NG. I parsed a number of normal-sized feeds, and got back a bunch of perfectly reasonable results. But one thing that I wanted to test was memory usage to make sure there were no memory leaks.\n\nI put together a quick and dirty test suite by starting with Tim Bray’s feed (one of the more nuanced and complex Atom 1.0 feeds), [duplicating the entries to a total of 500]({{\u003c wayback \"https://raw.githubusercontent.com/simplepie/simplepie-ng/master/tests/Integration/feeds/full/atom10/tim-bray-500.xml\" \u003e}}) (increasing the size to around 3 MB), and then [wrote a test that flexed everything]({{\u003c wayback \"https://github.com/simplepie/simplepie-ng/blob/master/tests/benchmarks/atom10.php\" \u003e}}) about SimplePie NG that I could think of. I then started running the test over and over again, collecting data about the timing and memory usage, and when the cache kicks-in and the engine warms up.\n\n### Test machine and environment\n\nI’m running this on a [2011 “Core i7” MacBook Pro]({{\u003c wayback \"https://everymac.com/systems/apple/macbook_pro/specs/macbook-pro-core-i7-2.2-17-early-2011-unibody-thunderbolt-specs.html\" \u003e}}), with 16 GB of RAM and an after-market SATA-III SSD. I have various background processes running, so it isn’t the same as running it on a fresh Linux web server. I also have _XDebug_ enabled, and I’m testing on the CLI where _Zend OpCache_ is disabled.\n\n### First pass; Case-insensitive with XPath translate()\n\nThe intial results for this 3 MB, 500-entry feed — with case-insensitivity enabled by way of the XPath `translate()` function — had an average runtime of **26 seconds**. That was _quite_ a bit slower than I was hoping for (especially on PHP 7.2), but then again it _was_ a big file with _a lot_ of entries.\n\nLet’s compare to case-insensitivity turned off (i.e., case-sensitive XML parsing).\n\n### Second pass; Normal, case-sensitive\n\nThe next round of results on the same 3 MB, 500-entry feed—with standard case-sensitive XPath queries—had an average runtime of **3.5 seconds**. That’s _a lot_ better.\n\nTo do some quick math, the normal query took only **14%** of the amount of time it took to do a case-insensitive query. Or, put another way, the case-insensitive query took around **7.5×** longer than the normal query. _That’s awful!_\n\n## Experimentation\n\nI had to find a way to improve the performance of the case-insensitive XPath query. Could I reduce the number of times I had to call `translate()`?\n\n### XSLT\n\nI tried experimenting with XSLT for a few days. The goal was to transform the XML _once_ with XSLT into a new XML document where all elements were lowercase, then I could just use regular XPath queries and avoid `translate()` all-together.\n\nOverall, I still think this is a fantastic idea if _you know where your XML data is coming from_. Unfortunately for me, I don’t, and I was completely unable to craft an appropriate XSLT template that would allow me to convert all tag names to lowercase without breaking a bunch of other things (e.g., entities). I ended up having to abandon this path.\n\n### Enabling PHP functions in XPath\n\nI only dabbled with this briefly, but there was no discernable performance improvement that I can recall. Also, the PHP documentation is lacking around this feature, so it was a lot of trial and error.\n\n### Simplify translate()\n\nFinally, I wondered if I could reduce the amount of time that `translate()` takes if I simply gave it less work to do. Instead of giving it the entire alphabet, what if I only gave it the letters that were in the XML element name?\n\nPHP has a function [`count_chars()`]({{\u003c wayback \"https://secure.php.net/manual/en/function.count-chars.php\" \u003e}}) that can return the unique characters in a string. From here, we can create upper and lower-case versions of the string, and just use those in the _translate()_ function.\n\n```php\n\u003c?php\n\n$word           = 'rss';\n$elementLetters = \\count_chars($word, 3);\n$lettersLower   = \\mb_strtolower($elementLetters);\n$lettersUpper   = \\mb_strtoupper($elementLetters);\n\n$query = \\sprintf(\n    '/*[translate(name(), \\'%s\\', \\'%s\\') = \\'%s\\']',\n    $lettersUpper,\n    $lettersLower,\n    $word\n);\n\n# /*[translate(name(), 'RS', 'rs') = 'rss'\n$results = $domxpath-\u003equery($query);\n```\n\nTesting this approach on the same 3 MB, 500-entry feed — with case-insensitivity enabled by way of our smarter `translate()` function — had an average runtime of **17 seconds**.\n\nRunning the same benchmarks against my other test feeds consistently showed a **30–35% improvement** in performance when using only the required letters in the `translate()` function instead of the entire alphabet.\n\n## Wrapping-up\n\nEven with this technique (on this particular set of data, with this particular testing approach), case-insensitive queries are still **4.5–5×** slower than their case-sensitive counterparts. Using the `translate()` XPath 1.0 function in PHP has a substantial impact on performance, so _don’t use it if you don’t have to_.\n\nI still think that there is some viability in leveraging XSLT in a first pass, which I expect would substantially reduce the case-insensitive processing time, but someone with more XSLT experience than me would need to contribute that code.\n\nLastly, SimplePie NG performs the faster case-sensitive queries by default. You are able to opt-in to case-insensitive mode on a per-feed basis. If you’re just processing a few average-sized feeds with this mode enabled, you probably won’t notice much of an impact.\n"},
    "links": {
        "prev": {"title": "A Refresh of the SimplePie Logo", "permalink": "https://ryanparman.com/posts/2017/a-refresh-of-the-simplepie-logo/"},
        "next": {"title": "Dear Nintendo, Part II", "permalink": "https://ryanparman.com/posts/2018/dear-nintendo-part-ii/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "A Refresh of the SimplePie Logo",
    "description": "",
    "summary": {
        "content": "Today, I’m introducing a refresh of the SimplePie logo and the most visible part of its brand. I’m calling this new branding style SimplePie Neue. This was originally posted to the SimplePie NG blog. The Icon I designed the original SimplePie logo back in 2005. At the time, Web 2.0 and Ajax were brand-new things to most web developers. Mac OS X “Tiger” 10.4 was the latest OS running on my 17” PowerBook G4, and while the hard glossy feel hadn’t yet taken over the Internet, shadows and gradients definitely had.",
        "isTruncated": true
    },
    "published": "2017-12-17T23:36:16Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2017/a-refresh-of-the-simplepie-logo/",
    "relativePermalink": "/posts/2017/a-refresh-of-the-simplepie-logo/",
    "aliases": ["/2017/12/17/a-refresh-of-the-simplepie-logo"],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2017/simplepie-classic.png", "https://cdn.ryanparman.com/hugo/posts/2017/simplepie-neue.png", "https://cdn.ryanparman.com/hugo/posts/2017/simplepie-neue-wordmark.png", "https://cdn.ryanparman.com/hugo/posts/2017/simplepie-classic-wordmark.png"],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": ["simplepie", "simplepie-ng", "design", "logo", "powerbook-g4", "wordmark", "magpie rss", "wordpress"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 718,
        "readingTime": "4 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2017/20171217-a-refresh-of-the-simplepie-logo.md",
        "logicalName": "20171217-a-refresh-of-the-simplepie-logo.md",
        "translationBaseName": "20171217-a-refresh-of-the-simplepie-logo",
        "baseFileName": "20171217-a-refresh-of-the-simplepie-logo",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2017/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#the-icon\"\u003eThe Icon\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#the-word\"\u003eThe Word\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#coming-soon\"\u003eComing Soon…\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nToday, I’m introducing a refresh of the SimplePie logo and the most visible part of its brand. I’m calling this new branding style \u003cem\u003eSimplePie Neue\u003c/em\u003e.\n\u003c/p\u003e\n\n\n\u003caside class=\"age aside container flex\"\u003e\u003cp\u003eThis was originally posted to the \u003ca href=\"https://medium.com/simplepie-ng/a-refresh-of-the-simplepie-logo-eeb8bf46fd91\"\u003eSimplePie NG blog\u003c/a\u003e.\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003ch2 id=\"the-icon\"\u003eThe Icon\u003c/h2\u003e\n\u003cp\u003eI designed the original SimplePie logo back in 2005. At the time, Web 2.0 and Ajax were brand-new things to most web developers. Mac OS X “Tiger” 10.4 was the latest OS running on my 17” PowerBook G4, and while the \u003ca href=\"https://duckduckgo.com/?q=web 2.0 logo\"\u003ehard glossy feel\u003c/a\u003e hadn’t yet taken over the Internet, shadows and gradients definitely had.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-classic.png\" layout=\"responsive\" width=\"400\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003eThe SimplePie logo (2005–2017)\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eStill to this day, I enjoy looking at this logo. I remember spending hours and hours on the colors of the gradients to get just the right look.\u003c/p\u003e\n\u003cp\u003eBut times change, and so do tastes. I’d lost the original logo source years ago, and all I had left was this one PNG file. So to go with \u003ca href=\"https://web.archive.org/web/20171217233616/https://github.com/simplepie/simplepie-ng\"\u003ekickstarting the development of the next-generation of SimplePie\u003c/a\u003e, I decided it was time for a brand refresh (and I wanted to make sure I worked with vector art this time around!).\u003c/p\u003e\n\u003cp\u003eTo pay homage and and honor to the well-liked and familiar SimplePie logo, I wanted to keep the primary identifying elements. But I also wanted to simplify and clean it up.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-neue.png\" layout=\"responsive\" width=\"400\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003eThe SimplePie logo (2017–)\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eJust like the Apple logo in 1998, I realized that it wasn’t the unordered rainbow stripes, or the gloss of the System 7.5 variation of the logo—it was the shape itself that people identified with. Similarly, I’ve kept the major themes of the logo, while simplifying it and enabling it to scale better from \u003cem\u003etiny\u003c/em\u003e to \u003cem\u003elarge\u003c/em\u003e resolutions.\u003c/p\u003e\n\u003cp\u003ePart of me still looks at the depth and gradients of the original logo and misses them. But in wanting to change the personality of the SimplePie brand, I think that the change is a positive one.\u003c/p\u003e\n\u003ch2 id=\"the-word\"\u003eThe Word\u003c/h2\u003e\n\u003cp\u003eSimplePie is an amalgamation of the phrase “Simple API for Magpie RSS”. Magpie RSS was the RSS parser \u003cem\u003edu jour\u003c/em\u003e for PHP developers in 2004, and the earliest versions of SimplePie simply wrapped it.\u003c/p\u003e\n\u003cp\u003eBut SimplePie has come to be (strangely and unexpectedly) a well-known bit of software over the years (I don’t believe that \u003cem\u003emillions of users\u003c/em\u003e is an exaggeration). Like with the icon, I wanted to pay homage to the original icon and wordmark, but as I mentioned, I want to change the personality of SimplePie moving forward — particularly with SimplePie NG.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-classic-wordmark.png\" layout=\"responsive\" width=\"180\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003eThe SimplePie wordmark (2005–2017)\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe original personality was fun, a little smart-aleky, and would bend over backwards to work with even the least-skilled PHP users. The font was \u003ca href=\"https://web.archive.org/web/20171217233616/https://www.dafont.com/yanone-kaffeesatz.font\"\u003eYanone Kaffeesatz, Bold\u003c/a\u003e, and the letter spacing was pulled \u003cem\u003eway\u003c/em\u003e-in.\u003c/p\u003e\n\u003cp\u003eThe new SimplePie is not designed for \u003cem\u003eye olde WordPress user\u003c/em\u003e. It is designed as high-quality, professional-grade software for PHP Software Engineers. I intend for its peers to be \u003ca href=\"https://web.archive.org/web/20171217233616/http://guzzlephp.org\"\u003eGuzzle\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20171217233616/http://symfony.com\"\u003eSymfony\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20171217233616/https://aws.amazon.com/sdk-for-php/\"\u003eAWS SDK for PHP\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20171217233616/https://seldaek.github.io/monolog/\"\u003eMonolog\u003c/a\u003e, and other professional-grade software packages. And with all of this intended professionalism, there isn’t as much room for goofing off. SimplePie NG is more \u003cem\u003esmart\u003c/em\u003e and less \u003cem\u003e-aleky\u003c/em\u003e. And it will still help you out, but you need to understand your fundamentals. And no, it’s probably not going to work with your crappy $3/mo shared hosting plan.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns pv4-l\"\u003e\n\t\u003camp-img src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-neue-wordmark.png\" layout=\"responsive\" width=\"324\" height=\"\"\u003e\u003c/amp-img\u003e\n    \u003cp class=\"f6 gray tc db\"\u003eThe SimplePie wordmark (2017–)\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eThe first thing you’ll probably notice is the typeface change to \u003ca href=\"https://web.archive.org/web/20171217233616/https://developer.apple.com/fonts/\"\u003eSF Pro Display, Medium\u003c/a\u003e—the newest (2017) version of Apple’s San Francisco typeface that it uses throughout its products and on its website. The letter spacing is still pulled-in, but much less so than before.\u003c/p\u003e\n\u003cp\u003eI also added the “ɴԍ” using the following glyphs: \u003ca href=\"https://web.archive.org/web/20171217233616/http://www.fileformat.info/info/unicode/char/0274/index.htm\"\u003eLATIN LETTER SMALL CAPITAL N\u003c/a\u003e, and \u003ca href=\"https://web.archive.org/web/20171217233616/http://www.fileformat.info/info/unicode/char/50d/index.htm\"\u003eCYRILLIC SMALL LETTER KOMI SJE\u003c/a\u003e. I made them about 45% smaller than the rest of the text, centered them horizontally, and left the same amount of space around the word “SimplePie”.\u003c/p\u003e\n\u003cp\u003eSwitching to San Francisco Pro gives the logo a cleaner, more professional look while still maintaining the overall spirit of the original logo. It’s like looking at one of those \u003cem\u003emakeover\u003c/em\u003e shows on TV.\u003c/p\u003e\n\u003ch2 id=\"coming-soon\"\u003eComing Soon…\u003c/h2\u003e\n\u003cp\u003eI’m planning to do a complete reboot of the website when SimplePie NG ships its 1.0 release. While you will begin seeing the \u003cem\u003eNeue\u003c/em\u003e branding here and \u003ca href=\"https://web.archive.org/web/20171217233616/https://github.com/simplepie/simplepie-ng\"\u003eon GitHub\u003c/a\u003e, look for a freshly-redesigned website with the new feel when 1.0 gets tagged and released to Composer.\u003c/p\u003e\n",
        "plain":"Today, I’m introducing a refresh of the SimplePie logo and the most visible part of its brand. I’m calling this new branding style SimplePie Neue. This was originally posted to the SimplePie NG blog.\n The Icon I designed the original SimplePie logo back in 2005. At the time, Web 2.0 and Ajax were brand-new things to most web developers. Mac OS X “Tiger” 10.4 was the latest OS running on my 17” PowerBook G4, and while the hard glossy feel hadn’t yet taken over the Internet, shadows and gradients definitely had.\n The SimplePie logo (2005–2017)\n Still to this day, I enjoy looking at this logo. I remember spending hours and hours on the colors of the gradients to get just the right look.\nBut times change, and so do tastes. I’d lost the original logo source years ago, and all I had left was this one PNG file. So to go with kickstarting the development of the next-generation of SimplePie, I decided it was time for a brand refresh (and I wanted to make sure I worked with vector art this time around!).\nTo pay homage and and honor to the well-liked and familiar SimplePie logo, I wanted to keep the primary identifying elements. But I also wanted to simplify and clean it up.\n The SimplePie logo (2017–)\n Just like the Apple logo in 1998, I realized that it wasn’t the unordered rainbow stripes, or the gloss of the System 7.5 variation of the logo—it was the shape itself that people identified with. Similarly, I’ve kept the major themes of the logo, while simplifying it and enabling it to scale better from tiny to large resolutions.\nPart of me still looks at the depth and gradients of the original logo and misses them. But in wanting to change the personality of the SimplePie brand, I think that the change is a positive one.\nThe Word SimplePie is an amalgamation of the phrase “Simple API for Magpie RSS”. Magpie RSS was the RSS parser du jour for PHP developers in 2004, and the earliest versions of SimplePie simply wrapped it.\nBut SimplePie has come to be (strangely and unexpectedly) a well-known bit of software over the years (I don’t believe that millions of users is an exaggeration). Like with the icon, I wanted to pay homage to the original icon and wordmark, but as I mentioned, I want to change the personality of SimplePie moving forward — particularly with SimplePie NG.\n The SimplePie wordmark (2005–2017)\n The original personality was fun, a little smart-aleky, and would bend over backwards to work with even the least-skilled PHP users. The font was Yanone Kaffeesatz, Bold, and the letter spacing was pulled way-in.\nThe new SimplePie is not designed for ye olde WordPress user. It is designed as high-quality, professional-grade software for PHP Software Engineers. I intend for its peers to be Guzzle, Symfony, AWS SDK for PHP, Monolog, and other professional-grade software packages. And with all of this intended professionalism, there isn’t as much room for goofing off. SimplePie NG is more smart and less -aleky. And it will still help you out, but you need to understand your fundamentals. And no, it’s probably not going to work with your crappy $3/mo shared hosting plan.\n The SimplePie wordmark (2017–)\n The first thing you’ll probably notice is the typeface change to SF Pro Display, Medium—the newest (2017) version of Apple’s San Francisco typeface that it uses throughout its products and on its website. The letter spacing is still pulled-in, but much less so than before.\nI also added the “ɴԍ” using the following glyphs: LATIN LETTER SMALL CAPITAL N, and CYRILLIC SMALL LETTER KOMI SJE. I made them about 45% smaller than the rest of the text, centered them horizontally, and left the same amount of space around the word “SimplePie”.\nSwitching to San Francisco Pro gives the logo a cleaner, more professional look while still maintaining the overall spirit of the original logo. It’s like looking at one of those makeover shows on TV.\nComing Soon… I’m planning to do a complete reboot of the website when SimplePie NG ships its 1.0 release. While you will begin seeing the Neue branding here and on GitHub, look for a freshly-redesigned website with the new feel when 1.0 gets tagged and released to Composer.\n",
        "source":"\n{{\u003cdescription\u003e}}\nToday, I’m introducing a refresh of the SimplePie logo and the most visible part of its brand. I’m calling this new branding style \u003cem\u003eSimplePie Neue\u003c/em\u003e.\n{{\u003c/description\u003e}}\n\n{{% aside %}}\nThis was originally posted to the \u003ca href=\"https://medium.com/simplepie-ng/a-refresh-of-the-simplepie-logo-eeb8bf46fd91\"\u003eSimplePie NG blog\u003c/a\u003e.\n{{% /aside %}}\n\n## The Icon\n\nI designed the original SimplePie logo back in 2005. At the time, Web 2.0 and Ajax were brand-new things to most web developers. Mac OS X “Tiger” 10.4 was the latest OS running on my 17” PowerBook G4, and while the [hard glossy feel]({{\u003c search \"web 2.0 logo\" \u003e}}) hadn’t yet taken over the Internet, shadows and gradients definitely had.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-classic.png\" alt=\"The SimplePie logo (2005–2017)\" figure=\"The SimplePie logo (2005–2017)\" width=\"400\"\u003e}}\n\nStill to this day, I enjoy looking at this logo. I remember spending hours and hours on the colors of the gradients to get just the right look.\n\nBut times change, and so do tastes. I’d lost the original logo source years ago, and all I had left was this one PNG file. So to go with [kickstarting the development of the next-generation of SimplePie]({{\u003c wayback \"https://github.com/simplepie/simplepie-ng\" \u003e}}), I decided it was time for a brand refresh (and I wanted to make sure I worked with vector art this time around!).\n\nTo pay homage and and honor to the well-liked and familiar SimplePie logo, I wanted to keep the primary identifying elements. But I also wanted to simplify and clean it up.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-neue.png\" alt=\"The SimplePie logo (2017–)\" figure=\"The SimplePie logo (2017–)\" width=\"400\"\u003e}}\n\nJust like the Apple logo in 1998, I realized that it wasn’t the unordered rainbow stripes, or the gloss of the System 7.5 variation of the logo—it was the shape itself that people identified with. Similarly, I’ve kept the major themes of the logo, while simplifying it and enabling it to scale better from _tiny_ to _large_ resolutions.\n\nPart of me still looks at the depth and gradients of the original logo and misses them. But in wanting to change the personality of the SimplePie brand, I think that the change is a positive one.\n\n## The Word\n\nSimplePie is an amalgamation of the phrase “Simple API for Magpie RSS”. Magpie RSS was the RSS parser _du jour_ for PHP developers in 2004, and the earliest versions of SimplePie simply wrapped it.\n\nBut SimplePie has come to be (strangely and unexpectedly) a well-known bit of software over the years (I don’t believe that _millions of users_ is an exaggeration). Like with the icon, I wanted to pay homage to the original icon and wordmark, but as I mentioned, I want to change the personality of SimplePie moving forward — particularly with SimplePie NG.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-classic-wordmark.png\" alt=\"The SimplePie wordmark (2005–2017)\" figure=\"The SimplePie wordmark (2005–2017)\" width=\"180\"\u003e}}\n\nThe original personality was fun, a little smart-aleky, and would bend over backwards to work with even the least-skilled PHP users. The font was [Yanone Kaffeesatz, Bold]({{\u003c wayback \"https://www.dafont.com/yanone-kaffeesatz.font\" \u003e}}), and the letter spacing was pulled _way_-in.\n\nThe new SimplePie is not designed for _ye olde WordPress user_. It is designed as high-quality, professional-grade software for PHP Software Engineers. I intend for its peers to be [Guzzle]({{\u003c wayback \"http://guzzlephp.org\" \u003e}}), [Symfony]({{\u003c wayback \"http://symfony.com\" \u003e}}), [AWS SDK for PHP]({{\u003c wayback \"https://aws.amazon.com/sdk-for-php/\" \u003e}}), [Monolog]({{\u003c wayback \"https://seldaek.github.io/monolog/\" \u003e}}), and other professional-grade software packages. And with all of this intended professionalism, there isn’t as much room for goofing off. SimplePie NG is more _smart_ and less _-aleky_. And it will still help you out, but you need to understand your fundamentals. And no, it’s probably not going to work with your crappy $3/mo shared hosting plan.\n\n{{\u003cfullimage-noshadow src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-neue-wordmark.png\" alt=\"The SimplePie wordmark (2017–)\" figure=\"The SimplePie wordmark (2017–)\" width=\"324\"\u003e}}\n\nThe first thing you’ll probably notice is the typeface change to [SF Pro Display, Medium]({{\u003c wayback \"https://developer.apple.com/fonts/\" \u003e}})—the newest (2017) version of Apple’s San Francisco typeface that it uses throughout its products and on its website. The letter spacing is still pulled-in, but much less so than before.\n\nI also added the “ɴԍ” using the following glyphs: [LATIN LETTER SMALL CAPITAL N]({{\u003c wayback \"http://www.fileformat.info/info/unicode/char/0274/index.htm\" \u003e}}), and [CYRILLIC SMALL LETTER KOMI SJE]({{\u003c wayback \"http://www.fileformat.info/info/unicode/char/50d/index.htm\" \u003e}}). I made them about 45% smaller than the rest of the text, centered them horizontally, and left the same amount of space around the word “SimplePie”.\n\nSwitching to San Francisco Pro gives the logo a cleaner, more professional look while still maintaining the overall spirit of the original logo. It’s like looking at one of those _makeover_ shows on TV.\n\n## Coming Soon…\n\nI’m planning to do a complete reboot of the website when SimplePie NG ships its 1.0 release. While you will begin seeing the _Neue_ branding here and [on GitHub]({{\u003c wayback \"https://github.com/simplepie/simplepie-ng\" \u003e}}), look for a freshly-redesigned website with the new feel when 1.0 gets tagged and released to Composer.\n"},
    "links": {
        "prev": {"title": "SimplePie is back in development!", "permalink": "https://ryanparman.com/posts/2017/simplepie-is-back-in-development/"},
        "next": {"title": "PHP, DOMDocument, XPath 1.0, Case-Insensitivity, and Performance", "permalink": "https://ryanparman.com/posts/2018/php-domdocument-xpath-1-0-case-insensitivity-and-performance/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "SimplePie is back in development!",
    "description": "",
    "summary": {
        "content": "After retiring from SimplePie development in 2009, the project more or less went into maintenance mode. While I am thankful to the folks who have contributed to its development over the last 8 years, it’s time for a reboot. This was originally posted to the SimplePie NG blog. SimplePie NG is a modern, next-generation PHP package for working with syndication feeds. It is being re-written from the ground-up to take advantage of the changes that have happened in the PHP community since the SimplePie project was started back in 2004.",
        "isTruncated": true
    },
    "published": "2017-12-07T12:00:00Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2017/simplepie-is-back-in-development/",
    "relativePermalink": "/posts/2017/simplepie-is-back-in-development/",
    "aliases": [],
    "images": ["https://cdn.ryanparman.com/hugo/posts/2017/simplepie-back-in-development.gif"],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": ["simplepie", "simplepie-ng", "odeo", "psr", "middleware", "performance", "rss", "atom", "jsonfeed"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 359,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2017/20171207-simplepie-is-back-in-development.md",
        "logicalName": "20171207-simplepie-is-back-in-development.md",
        "translationBaseName": "20171207-simplepie-is-back-in-development",
        "baseFileName": "20171207-simplepie-is-back-in-development",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2017/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#the-plan\"\u003eThe Plan\u003c/a\u003e\n      \u003cul\u003e\n        \u003cli\u003e\u003ca href=\"#the-things-to-avoid-next-time\"\u003eThe things to avoid next time\u003c/a\u003e\u003c/li\u003e\n        \u003cli\u003e\u003ca href=\"#the-things-to-do-better-this-time-around\"\u003eThe things to do better this time around\u003c/a\u003e\u003c/li\u003e\n      \u003c/ul\u003e\n    \u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#where-can-i-get-it\"\u003eWhere can I get it?\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nAfter retiring from SimplePie development in 2009, the project more or less went into maintenance mode. While I am thankful to the folks who have contributed to its development over the last 8 years, it’s time for a reboot.\n\u003c/p\u003e\n\n\n\u003caside class=\"age aside container flex\"\u003e\u003cp\u003eThis was originally posted to the \u003ca href=\"https://medium.com/simplepie-ng/simplepie-is-back-in-development-76376284366a\"\u003eSimplePie NG blog\u003c/a\u003e.\u003c/p\u003e\n\u003c/aside\u003e\n\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-back-in-development.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-back-in-development.gif\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eSimplePie NG\u003c/strong\u003e is a modern, next-generation PHP package for working with syndication feeds. It is being re-written from the ground-up to take advantage of the changes that have happened in the PHP community since the SimplePie project was started back in 2004.\u003c/p\u003e\n\u003ch2 id=\"the-plan\"\u003eThe Plan\u003c/h2\u003e\n\u003cp\u003eI’ve spent several years thinking about how I would do things differently if I were to start the project over from scratch — including thinking about all the things we did that turned out to be a terrible idea in retrospect.\u003c/p\u003e\n\u003ch3 id=\"the-things-to-avoid-next-time\"\u003eThe things to avoid next time\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ca href=\"https://web.archive.org/web/20171207120000/https://www.crunchbase.com/organization/odeo\"\u003eOdeo\u003c/a\u003e integration.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIntegration with the various social bookmarking services \u003cem\u003edu jour\u003c/em\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTrying to do everything and build everything from scratch.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"the-things-to-do-better-this-time-around\"\u003eThe things to do better this time around\u003c/h3\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eEmbrace the PSRs (logging, caching, HTTP messaging).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLeverage a middleware-based system for adding support for new formats. This will allow people to write custom middleware that is Composer-installable.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTake advantage of the modern features of PHP. Notably, we are focusing on targeting professional-grade software engineers, and building great software.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFocusing on performance, memory usage, specification compliance, feed compatibility, and testing from the very beginning.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eSupporting RSS, Atom, and the new \u003ca href=\"https://web.archive.org/web/20171207120000/https://jsonfeed.org/version/1\"\u003eJSON Feed\u003c/a\u003e out of the box.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"where-can-i-get-it\"\u003eWhere can I get it?\u003c/h2\u003e\n\u003cp\u003eI’m still in the “big bang” (e.g., iteration zero, proof-of-concept) phase. I’m implementing support for Atom 1.0 first (since it is the best-specified) and leveraging XPath expressions to \u003cem\u003eradically\u003c/em\u003e improve parsing performance. As such, I must say…\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eHighly experimental. Don’t use this.\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eI’m working on this project outside of work hours, so it will probably be a few months before I tag an alpha release. I want to add the core Atom, RSS, and JSON Feed support before I tag an alpha release.\u003c/p\u003e\n\u003cp\u003eHowever, if there are features you want to see, or want to dabble with the code a bit, I encourage you to come \u003ca href=\"https://web.archive.org/web/20171207120000/https://github.com/simplepie/simplepie-ng\"\u003echeck things out in GitHub\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"After retiring from SimplePie development in 2009, the project more or less went into maintenance mode. While I am thankful to the folks who have contributed to its development over the last 8 years, it’s time for a reboot. This was originally posted to the SimplePie NG blog.\n   SimplePie NG is a modern, next-generation PHP package for working with syndication feeds. It is being re-written from the ground-up to take advantage of the changes that have happened in the PHP community since the SimplePie project was started back in 2004.\nThe Plan I’ve spent several years thinking about how I would do things differently if I were to start the project over from scratch — including thinking about all the things we did that turned out to be a terrible idea in retrospect.\nThe things to avoid next time   Odeo integration.\n  Integration with the various social bookmarking services du jour.\n  Trying to do everything and build everything from scratch.\n  The things to do better this time around   Embrace the PSRs (logging, caching, HTTP messaging).\n  Leverage a middleware-based system for adding support for new formats. This will allow people to write custom middleware that is Composer-installable.\n  Take advantage of the modern features of PHP. Notably, we are focusing on targeting professional-grade software engineers, and building great software.\n  Focusing on performance, memory usage, specification compliance, feed compatibility, and testing from the very beginning.\n  Supporting RSS, Atom, and the new JSON Feed out of the box.\n  Where can I get it? I’m still in the “big bang” (e.g., iteration zero, proof-of-concept) phase. I’m implementing support for Atom 1.0 first (since it is the best-specified) and leveraging XPath expressions to radically improve parsing performance. As such, I must say…\nHighly experimental. Don’t use this.\nI’m working on this project outside of work hours, so it will probably be a few months before I tag an alpha release. I want to add the core Atom, RSS, and JSON Feed support before I tag an alpha release.\nHowever, if there are features you want to see, or want to dabble with the code a bit, I encourage you to come check things out in GitHub.\n",
        "source":"\n{{\u003cdescription\u003e}}\nAfter retiring from SimplePie development in 2009, the project more or less went into maintenance mode. While I am thankful to the folks who have contributed to its development over the last 8 years, it’s time for a reboot.\n{{\u003c/description\u003e}}\n\n{{% aside %}}\nThis was originally posted to the \u003ca href=\"https://medium.com/simplepie-ng/simplepie-is-back-in-development-76376284366a\"\u003eSimplePie NG blog\u003c/a\u003e.\n{{% /aside %}}\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/hugo/posts/2017/simplepie-back-in-development.gif\"\u003e}}\n\n**SimplePie NG** is a modern, next-generation PHP package for working with syndication feeds. It is being re-written from the ground-up to take advantage of the changes that have happened in the PHP community since the SimplePie project was started back in 2004.\n\n## The Plan\n\nI’ve spent several years thinking about how I would do things differently if I were to start the project over from scratch — including thinking about all the things we did that turned out to be a terrible idea in retrospect.\n\n### The things to avoid next time\n\n* [Odeo]({{\u003c wayback \"https://www.crunchbase.com/organization/odeo\" \u003e}}) integration.\n\n* Integration with the various social bookmarking services _du jour_.\n\n* Trying to do everything and build everything from scratch.\n\n### The things to do better this time around\n\n* Embrace the PSRs (logging, caching, HTTP messaging).\n\n* Leverage a middleware-based system for adding support for new formats. This will allow people to write custom middleware that is Composer-installable.\n\n* Take advantage of the modern features of PHP. Notably, we are focusing on targeting professional-grade software engineers, and building great software.\n\n* Focusing on performance, memory usage, specification compliance, feed compatibility, and testing from the very beginning.\n\n* Supporting RSS, Atom, and the new [JSON Feed]({{\u003c wayback \"https://jsonfeed.org/version/1\" \u003e}}) out of the box.\n\n## Where can I get it?\n\nI’m still in the “big bang” (e.g., iteration zero, proof-of-concept) phase. I’m implementing support for Atom 1.0 first (since it is the best-specified) and leveraging XPath expressions to _radically_ improve parsing performance. As such, I must say…\n\n**Highly experimental. Don’t use this.**\n\nI’m working on this project outside of work hours, so it will probably be a few months before I tag an alpha release. I want to add the core Atom, RSS, and JSON Feed support before I tag an alpha release.\n\nHowever, if there are features you want to see, or want to dabble with the code a bit, I encourage you to come [check things out in GitHub]({{\u003c wayback \"https://github.com/simplepie/simplepie-ng\" \u003e}}).\n"},
    "links": {
        "prev": {"title": "Business Review: Del Sol Auto Sales", "permalink": "https://ryanparman.com/posts/2017/business-review-del-sol-auto-sales/"},
        "next": {"title": "A Refresh of the SimplePie Logo", "permalink": "https://ryanparman.com/posts/2017/a-refresh-of-the-simplepie-logo/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Easily SSH into Amazon EC2 instances using the Name tag",
    "description": "",
    "summary": {
        "content": "It’s been a while since I’ve written about code, so I thought I’d post this little AWS-related tip for OS X and Linux users. If you have the Unified AWS CLI Tools configured, you can add these functions to your Bash profile (typically either ~/.bash_profile or ~/.profile) to enable you to SSH into an instance by “Name” tag, or simply lookup the IP address or DNS hostname. hostname_from_instance \u0026lt;instance-name\u0026gt; ip_from_instance \u0026lt;instance-name\u0026gt; ssh-aws \u0026lt;instance-name\u0026gt; Bash code function hostname_from_instance() { echo $(aws ec2 describe-instances --filters \u0026#34;{\\\u0026#34;Name\\\u0026#34;:\\\u0026#34;tag:Name\\\u0026#34;, \\\u0026#34;Values\\\u0026#34;:[\\\u0026#34;$1\\\u0026#34;]}\u0026#34; --query=\u0026#39;Reservations[0].",
        "isTruncated": true
    },
    "published": "2014-01-29T10:42:14Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2014/easily-ssh-into-amazon-ec2-instances-using-the-name-tag/",
    "relativePermalink": "/posts/2014/easily-ssh-into-amazon-ec2-instances-using-the-name-tag/",
    "aliases": ["/2014/01/29/easily-ssh-into-amazon-ec2-instances-using-the-name-tag/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": ["aws", "ec2", "ssh", "aws-cli", "jmespath"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 268,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2014/20140129-easily-ssh-into-amazon-ec2-instances-using-the-name-tag.md",
        "logicalName": "20140129-easily-ssh-into-amazon-ec2-instances-using-the-name-tag.md",
        "translationBaseName": "20140129-easily-ssh-into-amazon-ec2-instances-using-the-name-tag",
        "baseFileName": "20140129-easily-ssh-into-amazon-ec2-instances-using-the-name-tag",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2014/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#bash-code\"\u003eBash code\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#notes\"\u003eNotes\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#references\"\u003eReferences\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eIt’s been a while since I’ve written about code, so I thought I’d post this little AWS-related tip for OS X and Linux users.\u003c/p\u003e\n\u003cp\u003eIf you have the \u003ca href=\"https://web.archive.org/web/20140129104214/https://github.com/aws/aws-cli/\"\u003eUnified AWS CLI Tools\u003c/a\u003e configured, you can add these functions to your Bash profile (typically either \u003ccode\u003e~/.bash_profile\u003c/code\u003e or \u003ccode\u003e~/.profile\u003c/code\u003e) to enable you to SSH into an instance by “Name” tag, or simply lookup the IP address or DNS hostname.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehostname_from_instance \u0026lt;instance-name\u0026gt;\n\nip_from_instance \u0026lt;instance-name\u0026gt;\n\nssh-aws \u0026lt;instance-name\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"bash-code\"\u003eBash code\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e hostname_from_instance\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    echo \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003eaws ec2 describe-instances --filters \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{\\\u0026#34;Name\\\u0026#34;:\\\u0026#34;tag:Name\\\u0026#34;, \\\u0026#34;Values\\\u0026#34;:[\\\u0026#34;\u003c/span\u003e$1\u003cspan style=\"color:#e6db74\"\u003e\\\u0026#34;]}\u0026#34;\u003c/span\u003e --query\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Reservations[0].Instances[0].PublicDnsName\u0026#39;\u003c/span\u003e | tr -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\n\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e ip_from_instance\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    echo \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003eaws ec2 describe-instances --filters \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{\\\u0026#34;Name\\\u0026#34;:\\\u0026#34;tag:Name\\\u0026#34;, \\\u0026#34;Values\\\u0026#34;:[\\\u0026#34;\u003c/span\u003e$1\u003cspan style=\"color:#e6db74\"\u003e\\\u0026#34;]}\u0026#34;\u003c/span\u003e --query\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Reservations[0].Instances[0].PublicIpAddress\u0026#39;\u003c/span\u003e | tr -d \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#34;\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\n\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e ssh-aws\u003cspan style=\"color:#f92672\"\u003e()\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    ssh -i ~/.ssh/your-keypair.pem ec2-user@\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003eip_from_instance \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e$1\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"notes\"\u003eNotes\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eThis assumes that every instance you have has a unique “Name” tag, and will return the IP address or public DNS hostname of that instance (for use with SSH access). If multiple instances share the same “Name” tag, it will simply use the first “Name” match.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you’re running instances inside a (private) VPC, you should expect to lookup the public Elastic IP address for the instance.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you’re running instances inside a (public, classic) EC2, you should expect to lookup the public DNS hostname (unless you’ve configured an Elastic IP — in which case, go nuts).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the case where you’re running instances in the private subnet of a VPC, and SSH access to those instances is only possible from a bastion host in the public subnet, this is not the solution for you.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFeel free to tweak/adjust as necessary.\u003c/p\u003e\n\u003ch2 id=\"references\"\u003eReferences\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://web.archive.org/web/20140129104214/https://github.com/aws/aws-cli/\"\u003eUnified AWS CLI Tools\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://web.archive.org/web/20140129104214/https://github.com/boto/jmespath\"\u003eJMESpath\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://web.archive.org/web/20140129104214/http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-DescribeInstances.html\"\u003eEC2 API Reference: DescribeInstances\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n",
        "plain":"It’s been a while since I’ve written about code, so I thought I’d post this little AWS-related tip for OS X and Linux users.\nIf you have the Unified AWS CLI Tools configured, you can add these functions to your Bash profile (typically either ~/.bash_profile or ~/.profile) to enable you to SSH into an instance by “Name” tag, or simply lookup the IP address or DNS hostname.\nhostname_from_instance \u0026lt;instance-name\u0026gt; ip_from_instance \u0026lt;instance-name\u0026gt; ssh-aws \u0026lt;instance-name\u0026gt; Bash code function hostname_from_instance() { echo $(aws ec2 describe-instances --filters \u0026#34;{\\\u0026#34;Name\\\u0026#34;:\\\u0026#34;tag:Name\\\u0026#34;, \\\u0026#34;Values\\\u0026#34;:[\\\u0026#34;$1\\\u0026#34;]}\u0026#34; --query=\u0026#39;Reservations[0].Instances[0].PublicDnsName\u0026#39; | tr -d \u0026#39;\u0026#34;\u0026#39;) } function ip_from_instance() { echo $(aws ec2 describe-instances --filters \u0026#34;{\\\u0026#34;Name\\\u0026#34;:\\\u0026#34;tag:Name\\\u0026#34;, \\\u0026#34;Values\\\u0026#34;:[\\\u0026#34;$1\\\u0026#34;]}\u0026#34; --query=\u0026#39;Reservations[0].Instances[0].PublicIpAddress\u0026#39; | tr -d \u0026#39;\u0026#34;\u0026#39;) } function ssh-aws() { ssh -i ~/.ssh/your-keypair.pem ec2-user@$(ip_from_instance \u0026#34;$1\u0026#34;) } Notes   This assumes that every instance you have has a unique “Name” tag, and will return the IP address or public DNS hostname of that instance (for use with SSH access). If multiple instances share the same “Name” tag, it will simply use the first “Name” match.\n  If you’re running instances inside a (private) VPC, you should expect to lookup the public Elastic IP address for the instance.\n  If you’re running instances inside a (public, classic) EC2, you should expect to lookup the public DNS hostname (unless you’ve configured an Elastic IP — in which case, go nuts).\n  In the case where you’re running instances in the private subnet of a VPC, and SSH access to those instances is only possible from a bastion host in the public subnet, this is not the solution for you.\n  Feel free to tweak/adjust as necessary.\nReferences  Unified AWS CLI Tools JMESpath EC2 API Reference: DescribeInstances  ",
        "source":"\nIt’s been a while since I’ve written about code, so I thought I’d post this little AWS-related tip for OS X and Linux users.\n\nIf you have the [Unified AWS CLI Tools]({{% wayback \"https://github.com/aws/aws-cli/\" %}}) configured, you can add these functions to your Bash profile (typically either `~/.bash_profile` or `~/.profile`) to enable you to SSH into an instance by “Name” tag, or simply lookup the IP address or DNS hostname.\n\n```bash\nhostname_from_instance \u003cinstance-name\u003e\n\nip_from_instance \u003cinstance-name\u003e\n\nssh-aws \u003cinstance-name\u003e\n```\n\n## Bash code\n\n```bash\nfunction hostname_from_instance() {\n    echo $(aws ec2 describe-instances --filters \"{\\\"Name\\\":\\\"tag:Name\\\", \\\"Values\\\":[\\\"$1\\\"]}\" --query='Reservations[0].Instances[0].PublicDnsName' | tr -d '\"')\n}\n\nfunction ip_from_instance() {\n    echo $(aws ec2 describe-instances --filters \"{\\\"Name\\\":\\\"tag:Name\\\", \\\"Values\\\":[\\\"$1\\\"]}\" --query='Reservations[0].Instances[0].PublicIpAddress' | tr -d '\"')\n}\n\nfunction ssh-aws() {\n    ssh -i ~/.ssh/your-keypair.pem ec2-user@$(ip_from_instance \"$1\")\n}\n```\n\n## Notes\n\n* This assumes that every instance you have has a unique “Name” tag, and will return the IP address or public DNS hostname of that instance (for use with SSH access). If multiple instances share the same “Name” tag, it will simply use the first “Name” match.\n\n* If you’re running instances inside a (private) VPC, you should expect to lookup the public Elastic IP address for the instance.\n\n* If you’re running instances inside a (public, classic) EC2, you should expect to lookup the public DNS hostname (unless you’ve configured an Elastic IP — in which case, go nuts).\n\n* In the case where you’re running instances in the private subnet of a VPC, and SSH access to those instances is only possible from a bastion host in the public subnet, this is not the solution for you.\n\nFeel free to tweak/adjust as necessary.\n\n## References\n\n* [Unified AWS CLI Tools]({{% wayback \"https://github.com/aws/aws-cli/\" %}})\n* [JMESpath]({{% wayback \"https://github.com/boto/jmespath\" %}})\n* [EC2 API Reference: DescribeInstances]({{% wayback \"http://docs.aws.amazon.com/AWSEC2/latest/APIReference/ApiReference-query-DescribeInstances.html\" %}})\n"},
    "links": {
        "prev": {"title": "Games of the Year, 2013", "permalink": "https://ryanparman.com/posts/2014/games-of-the-year-2013/"},
        "next": {"title": "If your website supports passwords, please stop sucking at it", "permalink": "https://ryanparman.com/posts/2014/if-your-website-supports-passwords-please-stop-sucking-at-it/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Uploading web files to a new Amazon EC2 instance",
    "description": "",
    "summary": {
        "content": "This is one of a few quick tutorials I’ve had sitting around on my hard drive for a while. I’m posting it now for the sake of anyone who may find these instructions useful. It’s important to note that these are the instructions you’d use for a standalone EC2 instance. If your app is low-traffic enough to only need a single server, a better option would be to leverage a single-instance Elastic Beanstalk environment which gives you more, better and simpler deployment options.",
        "isTruncated": true
    },
    "published": "2013-08-11T04:19:50Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2013/uploading-web-files-to-a-new-amazon-ec2-instance/",
    "relativePermalink": "/posts/2013/uploading-web-files-to-a-new-amazon-ec2-instance/",
    "aliases": ["/2013/08/10/uploading-web-files-to-a-new-amazon-ec2-instance/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": ["aws", "ec2", "ssh", "yum", "transmit", "cyberduck", "elastic beanstalk"],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 466,
        "readingTime": "3 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2013/20130811-uploading-web-files-to-a-new-amazon-ec2-instance.md",
        "logicalName": "20130811-uploading-web-files-to-a-new-amazon-ec2-instance.md",
        "translationBaseName": "20130811-uploading-web-files-to-a-new-amazon-ec2-instance",
        "baseFileName": "20130811-uploading-web-files-to-a-new-amazon-ec2-instance",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2013/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#launching-an-instance\"\u003eLaunching an instance\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#logging-in-and-fixing-access-permissions\"\u003eLogging in and fixing access permissions\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#installing-any-required-software\"\u003eInstalling any required software\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#uploading-your-web-files\"\u003eUploading your web files\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eThis is one of a few quick tutorials I’ve had sitting around on my hard drive for a while. I’m posting it now for the sake of anyone who may find these instructions useful.\u003c/p\u003e\n\u003cp\u003eIt’s important to note that these are the instructions you’d use for a standalone EC2 instance. If your app is low-traffic enough to only need a single server, a better option would be to leverage a \u003ca href=\"https://web.archive.org/web/20130811041950/http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deployment.newapp.html\"\u003esingle-instance Elastic Beanstalk environment\u003c/a\u003e which gives you more, better and simpler deployment options.\u003c/p\u003e\n\u003ch2 id=\"launching-an-instance\"\u003eLaunching an instance\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eYou’ll need to launch a new EC2 instance. The simplest way is from the \u003ca href=\"http://console.aws.amazon.com/ec2\"\u003eAWS Management Console\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAs part of this process, you’ll create a new \u003cem\u003ekeypair\u003c/em\u003e. The key pair will have a \u003cstrong\u003ename\u003c/strong\u003e and a \u003cstrong\u003ekeypair file\u003c/strong\u003e (\u003ccode\u003e.pem\u003c/code\u003e). The \u003ccode\u003e.pem\u003c/code\u003e file is a replacement for a password. You’ll need this file to log into your EC2 instance.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce the instance has launched, you’ll want to select it in the EC2 console, and find the \u003cstrong\u003epublic hostname\u003c/strong\u003e in the details section of the screen.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"logging-in-and-fixing-access-permissions\"\u003eLogging in and fixing access permissions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eArmed with \u003cstrong\u003eTerminal/\u003ca href=\"https://web.archive.org/web/20130811041950/http://www.chiark.greenend.org.uk/~sgtatham/putty/\"\u003ePuTTY\u003c/a\u003e\u003c/strong\u003e, your \u003cstrong\u003ekeypair file\u003c/strong\u003e (\u003ccode\u003e.pem\u003c/code\u003e), and the \u003cstrong\u003epublic hostname\u003c/strong\u003e of the instance, you’re ready to log into your instance.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you’re using \u003cstrong\u003eTerminal\u003c/strong\u003e, log into your instance using the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003essh -i \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003epath-to-keypair-pem\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e ec2-user@\u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003epublic-hostname\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you’re using a GUI tool for connecting (e.g., PuTTY), here are the important bits:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHostname: \u003ccode\u003e{public-hostname}\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUser: \u003ccode\u003eec2-user\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eKey: \u003ccode\u003e{path-to-keypair-pem}\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOnce you’re logged into the EC2 instance as the \u003ccode\u003eec2-user\u003c/code\u003e user, you’ll need to switch to the \u003ccode\u003eroot\u003c/code\u003e user.\\\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo -i\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMove into the default Apache \u003ccode\u003eDocumentRoot\u003c/code\u003e directory.\\\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecd /var/www/html\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eChange the owner of this directory to the \u003ccode\u003eec2-user\u003c/code\u003e user. This will enable you to use a GUI-based tool to upload your web files.\\\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003echown ec2-user .\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"installing-any-required-software\"\u003eInstalling any required software\u003c/h2\u003e\n\u003cp\u003eA new EC2 instance is essentially a blank slate. Very little is installed on the instance by default (which keeps it lean and fast), but there are many, many packages available for install via \u003ccode\u003eyum\u003c/code\u003e.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eyum list available\u003c/code\u003e will show you all of the packages that are available to install.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eyum list installed\u003c/code\u003e will show you all of the packages that are already installed.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eyum help\u003c/code\u003e will show you which commands are available to use.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you wanted to install PHP and Apache on your server, you would type (assuming you’re already the \u003cem\u003esuperuser\u003c/em\u003e (i.e., \u003ccode\u003esudo -i\u003c/code\u003e)):\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eyum install php apache\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"uploading-your-web-files\"\u003eUploading your web files\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eUsing the SFTP client of your choice (I prefer \u003ca href=\"https://web.archive.org/web/20130811041950/http://panic.com/transmit/\"\u003eTransmit\u003c/a\u003e or \u003ca href=\"https://web.archive.org/web/20130811041950/http://cyberduck.ch\"\u003eCyberduck\u003c/a\u003e, depending on what I’m doing), connect to your EC2 instance over SFTP using the following credentials:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eHostname: \u003ccode\u003e{public-hostname}\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eUser: \u003ccode\u003eec2-user\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eKey: \u003ccode\u003e{path-to-keypair-pem}\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMove to the \u003ccode\u003e/var/www/html\u003c/code\u003e directory.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eDrag your web files into this directory to upload them. \u003ccode\u003eindex.html\u003c/code\u003e will be loaded as the homepage when you load the \u003cstrong\u003epublic hostname\u003c/strong\u003e in your web browser.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n",
        "plain":"This is one of a few quick tutorials I’ve had sitting around on my hard drive for a while. I’m posting it now for the sake of anyone who may find these instructions useful.\nIt’s important to note that these are the instructions you’d use for a standalone EC2 instance. If your app is low-traffic enough to only need a single server, a better option would be to leverage a single-instance Elastic Beanstalk environment which gives you more, better and simpler deployment options.\nLaunching an instance   You’ll need to launch a new EC2 instance. The simplest way is from the AWS Management Console.\n  As part of this process, you’ll create a new keypair. The key pair will have a name and a keypair file (.pem). The .pem file is a replacement for a password. You’ll need this file to log into your EC2 instance.\n  Once the instance has launched, you’ll want to select it in the EC2 console, and find the public hostname in the details section of the screen.\n  Logging in and fixing access permissions   Armed with Terminal/PuTTY, your keypair file (.pem), and the public hostname of the instance, you’re ready to log into your instance.\n  If you’re using Terminal, log into your instance using the following command:\nssh -i {path-to-keypair-pem} ec2-user@{public-hostname}   If you’re using a GUI tool for connecting (e.g., PuTTY), here are the important bits:\n Hostname: {public-hostname} User: ec2-user Key: {path-to-keypair-pem}    Once you’re logged into the EC2 instance as the ec2-user user, you’ll need to switch to the root user.\\\nsudo -i   Move into the default Apache DocumentRoot directory.\\\ncd /var/www/html   Change the owner of this directory to the ec2-user user. This will enable you to use a GUI-based tool to upload your web files.\\\nchown ec2-user .   Installing any required software A new EC2 instance is essentially a blank slate. Very little is installed on the instance by default (which keeps it lean and fast), but there are many, many packages available for install via yum.\n yum list available will show you all of the packages that are available to install. yum list installed will show you all of the packages that are already installed. yum help will show you which commands are available to use.  If you wanted to install PHP and Apache on your server, you would type (assuming you’re already the superuser (i.e., sudo -i)):\nyum install php apache Uploading your web files   Using the SFTP client of your choice (I prefer Transmit or Cyberduck, depending on what I’m doing), connect to your EC2 instance over SFTP using the following credentials:\n Hostname: {public-hostname} User: ec2-user Key: {path-to-keypair-pem}    Move to the /var/www/html directory.\n  Drag your web files into this directory to upload them. index.html will be loaded as the homepage when you load the public hostname in your web browser.\n  ",
        "source":"\nThis is one of a few quick tutorials I’ve had sitting around on my hard drive for a while. I’m posting it now for the sake of anyone who may find these instructions useful.\n\nIt’s important to note that these are the instructions you’d use for a standalone EC2 instance. If your app is low-traffic enough to only need a single server, a better option would be to leverage a [single-instance Elastic Beanstalk environment]({{% wayback \"http://docs.aws.amazon.com/elasticbeanstalk/latest/dg/using-features.deployment.newapp.html\" %}}) which gives you more, better and simpler deployment options.\n\n\n## Launching an instance\n\n1. You’ll need to launch a new EC2 instance. The simplest way is from the [AWS Management Console](http://console.aws.amazon.com/ec2).\n\n2. As part of this process, you’ll create a new *keypair*. The key pair will have a **name** and a **keypair file** (`.pem`). The `.pem` file is a replacement for a password. You’ll need this file to log into your EC2 instance.\n\n3. Once the instance has launched, you’ll want to select it in the EC2 console, and find the **public hostname** in the details section of the screen.\n\n\n## Logging in and fixing access permissions\n\n1. Armed with **Terminal/[PuTTY]({{% wayback \"http://www.chiark.greenend.org.uk/~sgtatham/putty/\" %}})**, your **keypair file** (`.pem`), and the **public hostname** of the instance, you’re ready to log into your instance.\n\n2. If you’re using **Terminal**, log into your instance using the following command:\n\n    ```bash\n    ssh -i {path-to-keypair-pem} ec2-user@{public-hostname}\n    ```\n\n3. If you’re using a GUI tool for connecting (e.g., PuTTY), here are the important bits:\n\n    * Hostname: `{public-hostname}`\n    * User: `ec2-user`\n    * Key: `{path-to-keypair-pem}`\n\n4. Once you’re logged into the EC2 instance as the `ec2-user` user, you’ll need to switch to the `root` user.\\\n\n    ```bash\n    sudo -i\n    ```\n\n5. Move into the default Apache `DocumentRoot` directory.\\\n\n    ```bash\n    cd /var/www/html\n    ```\n\n6. Change the owner of this directory to the `ec2-user` user. This will enable you to use a GUI-based tool to upload your web files.\\\n\n    ```bash\n    chown ec2-user .\n    ```\n\n## Installing any required software\n\nA new EC2 instance is essentially a blank slate. Very little is installed on the instance by default (which keeps it lean and fast), but there are many, many packages available for install via `yum`.\n\n* `yum list available` will show you all of the packages that are available to install.\n* `yum list installed` will show you all of the packages that are already installed.\n* `yum help` will show you which commands are available to use.\n\nIf you wanted to install PHP and Apache on your server, you would type (assuming you’re already the *superuser* (i.e., `sudo -i`)):\n\n```bash\nyum install php apache\n```\n\n## Uploading your web files\n\n1. Using the SFTP client of your choice (I prefer [Transmit]({{% wayback \"http://panic.com/transmit/\" %}}) or [Cyberduck]({{% wayback \"http://cyberduck.ch\" %}}), depending on what I’m doing), connect to your EC2 instance over SFTP using the following credentials:\n\n    * Hostname: `{public-hostname}`\n    * User: `ec2-user`\n    * Key: `{path-to-keypair-pem}`\n\n2. Move to the `/var/www/html` directory.\n\n3. Drag your web files into this directory to upload them. `index.html` will be loaded as the homepage when you load the **public hostname** in your web browser.\n"},
    "links": {
        "prev": {"title": "Things I learned about how websites manage passwords", "permalink": "https://ryanparman.com/posts/2013/things-i-learned-about-how-websites-manage-passwords/"},
        "next": {"title": "Stephen Elop to become the next Microsoft CEO? I’d buy it.", "permalink": "https://ryanparman.com/posts/2013/stephen-elop-to-become-the-next-microsoft-ceo-id-buy-it/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Awesome new features coming in PHP 5.4",
    "description": "",
    "summary": {
        "content": "The next version of PHP, which saw its first release candidate today, has some really awesome new features. You can see a complete list of changes in the README, but here are the ones that caught my eye. Classes Support for Traits (i.e., mix-ins; addresses the multiple-inheritance problem). Support for chaining from the constructor: (new Class)-\u0026gt;method() Support for Class::{expr}() syntax. Closures inherit $this from the outer scope. Added ReflectionClass::newInstanceWithoutConstructor() to create a new instance of a class without invoking its constructor.",
        "isTruncated": true
    },
    "published": "2011-11-11T09:03:20Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2011/awesome-new-features-coming-in-php-5-4/",
    "relativePermalink": "/posts/2011/awesome-new-features-coming-in-php-5-4/",
    "aliases": ["/2011/11/11/awesome-new-features-coming-in-php-5-4/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 156,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2011/20111111-awesome-new-features-coming-in-php-5-4.md",
        "logicalName": "20111111-awesome-new-features-coming-in-php-5-4.md",
        "translationBaseName": "20111111-awesome-new-features-coming-in-php-5-4",
        "baseFileName": "20111111-awesome-new-features-coming-in-php-5-4",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2011/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#classes\"\u003eClasses\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#improvements\"\u003eImprovements\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#fixing-the-cruft\"\u003eFixing the cruft\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eThe next version of PHP, which saw its first release candidate today, has some really awesome new features. You can see a complete list of changes in the \u003ca href=\"https://web.archive.org/web/20111111090320/https://cdn.ryanparman.com/wp-content/uploads/2011/11/NEWS_5_4_0_RC1.txt\"\u003eREADME\u003c/a\u003e, but here are the ones that caught my eye.\u003c/p\u003e\n\u003ch2 id=\"classes\"\u003eClasses\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eSupport for Traits (i.e., mix-ins; addresses the multiple-inheritance problem).\u003c/li\u003e\n\u003cli\u003eSupport for chaining from the constructor: \u003ccode\u003e(new Class)-\u0026gt;method()\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003eSupport for \u003ccode\u003eClass::{expr}()\u003c/code\u003e syntax.\u003c/li\u003e\n\u003cli\u003eClosures inherit \u003ccode\u003e$this\u003c/code\u003e from the outer scope.\u003c/li\u003e\n\u003cli\u003eAdded \u003ccode\u003eReflectionClass::newInstanceWithoutConstructor()\u003c/code\u003e to create a new instance of a class without invoking its constructor.\u003c/li\u003e\n\u003cli\u003eAdded a new typehint: \u003ccode\u003ecallable\u003c/code\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"improvements\"\u003eImprovements\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eArray dereferencing and short array syntax: \u003ccode\u003eecho [1, 2, 3][0]\u003c/code\u003e\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003ejson_encode()\u003c/code\u003e now supports these additional flags: \u003ccode\u003eJSON_UNESCAPED_UNICODE\u003c/code\u003e, \u003ccode\u003eJSON_BIGINT_AS_STRING\u003c/code\u003e, \u003ccode\u003eJSON_NUMERIC_CHECK\u003c/code\u003e, \u003ccode\u003eJSON_PRETTY_PRINT\u003c/code\u003e and \u003ccode\u003eJSON_UNESCAPED_SLASHES\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eMultibyte support is enabled by default.\u003c/li\u003e\n\u003cli\u003eFaster \u003ccode\u003eunserialize()\u003c/code\u003e and ternary operator performance.\u003c/li\u003e\n\u003cli\u003eIPv6 support.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"fixing-the-cruft\"\u003eFixing the cruft\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003eext/mysql\u003c/code\u003e, \u003ccode\u003emysqli\u003c/code\u003e and \u003ccode\u003epdo_mysql\u003c/code\u003e now use \u003ccode\u003emysqlnd\u003c/code\u003e by default.\u003c/li\u003e\n\u003cli\u003eRemoved magic quotes, safe mode, register globals, allow call-time pass-by-reference, and more!\u003c/li\u003e\n\u003cli\u003eDefault character set is now \u003ccode\u003eUTF-8\u003c/code\u003e instead of \u003ccode\u003eISO-8859-1\u003c/code\u003e.\u003c/li\u003e\n\u003c/ul\u003e\n",
        "plain":"The next version of PHP, which saw its first release candidate today, has some really awesome new features. You can see a complete list of changes in the README, but here are the ones that caught my eye.\nClasses  Support for Traits (i.e., mix-ins; addresses the multiple-inheritance problem). Support for chaining from the constructor: (new Class)-\u0026gt;method() Support for Class::{expr}() syntax. Closures inherit $this from the outer scope. Added ReflectionClass::newInstanceWithoutConstructor() to create a new instance of a class without invoking its constructor. Added a new typehint: callable  Improvements  Array dereferencing and short array syntax: echo [1, 2, 3][0] json_encode() now supports these additional flags: JSON_UNESCAPED_UNICODE, JSON_BIGINT_AS_STRING, JSON_NUMERIC_CHECK, JSON_PRETTY_PRINT and JSON_UNESCAPED_SLASHES. Multibyte support is enabled by default. Faster unserialize() and ternary operator performance. IPv6 support.  Fixing the cruft  ext/mysql, mysqli and pdo_mysql now use mysqlnd by default. Removed magic quotes, safe mode, register globals, allow call-time pass-by-reference, and more! Default character set is now UTF-8 instead of ISO-8859-1.  ",
        "source":"\nThe next version of PHP, which saw its first release candidate today, has some really awesome new features. You can see a complete list of changes in the [README]({{% wayback \"https://cdn.ryanparman.com/wp-content/uploads/2011/11/NEWS_5_4_0_RC1.txt\" %}}), but here are the ones that caught my eye.\n\n## Classes\n\n* Support for Traits (i.e., mix-ins; addresses the multiple-inheritance problem).\n* Support for chaining from the constructor: `(new Class)-\u003emethod()`\n* Support for `Class::{expr}()` syntax.\n* Closures inherit `$this` from the outer scope.\n* Added `ReflectionClass::newInstanceWithoutConstructor()` to create a new instance of a class without invoking its constructor.\n* Added a new typehint: `callable`\n\n## Improvements\n\n* Array dereferencing and short array syntax: `echo [1, 2, 3][0]`\n* `json_encode()` now supports these additional flags: `JSON_UNESCAPED_UNICODE`, `JSON_BIGINT_AS_STRING`, `JSON_NUMERIC_CHECK`, `JSON_PRETTY_PRINT` and `JSON_UNESCAPED_SLASHES`.\n* Multibyte support is enabled by default.\n* Faster `unserialize()` and ternary operator performance.\n* IPv6 support.\n\n## Fixing the cruft\n\n* `ext/mysql`, `mysqli` and `pdo_mysql` now use `mysqlnd` by default.\n* Removed magic quotes, safe mode, register globals, allow call-time pass-by-reference, and more!\n* Default character set is now `UTF-8` instead of `ISO-8859-1`.\n\n"},
    "links": {
        "prev": {"title": "How to make technical professionals not hate your guts: A guide for technical recruiters", "permalink": "https://ryanparman.com/posts/2011/how-to-make-technical-professionals-not-hate-your-guts-a-guide-for-technical-recruiters/"},
        "next": {"title": "Clueless Recruiters, Issue #2", "permalink": "https://ryanparman.com/posts/2011/clueless-recruiters-issue-2/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Searching through the AWS SDK for PHP documentation",
    "description": "",
    "summary": {
        "content": "Although the AWS SDK for PHP is growing as fast as Amazon’s breadth of web services, it should still be easy to find the information that you need in order to develop. This is a goal that I take very seriously. Back in 2005, I took a job with Stryker Endoscopy as a member of their Internal User Experience team, where our focus was on Usability and User-Centered Design (UCD). (I take no responsibility for how bad their public website is!",
        "isTruncated": true
    },
    "published": "2011-02-28T02:15:20Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2011/searching-through-the-aws-sdk-for-php-documentation/",
    "relativePermalink": "/posts/2011/searching-through-the-aws-sdk-for-php-documentation/",
    "aliases": ["/2011/02/27/searching-through-the-aws-sdk-for-php-documentation/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 1141,
        "readingTime": "6 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2011/20110228-searching-through-the-aws-sdk-for-php-documentation.md",
        "logicalName": "20110228-searching-through-the-aws-sdk-for-php-documentation.md",
        "translationBaseName": "20110228-searching-through-the-aws-sdk-for-php-documentation",
        "baseFileName": "20110228-searching-through-the-aws-sdk-for-php-documentation",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2011/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#i--quality\"\u003eI ♥ Quality\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#making-it-better\"\u003eMaking It Better\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#searching-the-aws-sdk-for-php-documentation-from-google-chrome\"\u003eSearching the AWS SDK for PHP documentation from Google Chrome\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#searching-the-aws-sdk-for-php-documentation-from-mozilla-firefox\"\u003eSearching the AWS SDK for PHP documentation from Mozilla Firefox\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#searching-the-aws-sdk-for-php-documentation-from-alfred\"\u003eSearching the AWS SDK for PHP documentation from Alfred\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#the-end\"\u003eThe End\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eAlthough the AWS SDK for PHP is growing as fast as Amazon’s breadth of web services, it should still be easy to find the information that you need in order to develop. This is a goal that I take very seriously.\u003c/p\u003e\n\u003cp\u003eBack in 2005, I took a job with \u003ca href=\"https://web.archive.org/web/20110228021520/http://stryker.com/endoscopy/\"\u003eStryker Endoscopy\u003c/a\u003e as a member of their Internal User Experience team, where our focus was on Usability and User-Centered Design (UCD). (I take no responsibility for how bad their public website is!) I gained some invaluable insight into the usability process and the principles behind UCD that I’ve carried with me over the years as I’ve migrated from UX and Front-End Development toward building Software Development Kits (SDKs) for infrastructure services. The most valuable of these is this:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eYou can have all of the greatest functionality in the world. But if nobody can use it, what’s the point?\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eI’m tempted to launch into a tirade against the stunning ignorance of software engineers who think we UX people “make it look pretty.” \u003cem\u003eA Photoshop mockup does not a user experience make.\u003c/em\u003e Those same \u003cem\u003ewoefully\u003c/em\u003e uneducated people don’t understand how much science is involved in producing high-quality user interfaces — nor do they understand that if a person can’t figure out how to use the software, it’s not a problem with the person… it’s a problem with the software. As I’ve shifted toward producing developer-facing software, I’ve always maintained the notion that “developers are people too.” The administration and developer tools of \u003ca href=\"https://web.archive.org/web/20110228021520/http://reardencommerce.com\"\u003esome web applications\u003c/a\u003e are a \u003cem\u003ecrime against humanity\u003c/em\u003e. Of course, that’s what happens when you make the mistake of thinking that corporate stakeholders are your customers instead of \u003cem\u003eReal Human Beings™\u003c/em\u003e. [I’m starting to rant. Let me switch gears.]\u003c/p\u003e\n\u003ch2 id=\"i--quality\"\u003eI ♥ Quality\u003c/h2\u003e\n\u003cp\u003eI believe that documentation is equally — if not more — important as the code itself. It’s a critical part of the user (i.e., developer) experience right up there with API design and SDK design. When I was building \u003cem\u003eCloudFusion\u003c/em\u003e (the pre-cursor to the AWS SDK for PHP), I spent quite a bit of time trying to find a high-quality documentation tool that delivered what I believed my users deserved. After searching for a good tool over the course of 2–3 years, I finally broke down and wrote my own tool that produced the kind of high-quality documentation that my users deserve. (That project is called “Vanity”, and is currently incubating).\u003c/p\u003e\n\u003ch2 id=\"making-it-better\"\u003eMaking It Better\u003c/h2\u003e\n\u003cp\u003eWith the release of the \u003ca href=\"https://web.archive.org/web/20110228021520/https://aws.amazon.com/releasenotes/release-aws-sdk-for-php-1-2-4/\"\u003eAWS SDK for PHP 1.2.4\u003c/a\u003e, we really tried to raise the bar for our documentation. Here are some of the features that we now provide:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eRewrote the in-file documentation blocks to use the more common and better supported \u003ca href=\"https://web.archive.org/web/20110228021520/http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_phpDocumentor.quickstart.pkg.html#coding.phpcomments\"\u003ePHPDoc\u003c/a\u003e format instead of the \u003ca href=\"https://web.archive.org/web/20110228021520/http://naturaldocs.org/documenting.html\"\u003eNaturalDocs\u003c/a\u003e format we used previously.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eComplete API reference documentation for all methods and classes.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOne or more usage examples for nearly every single method.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eUsage examples are generated from real \u003ca href=\"https://web.archive.org/web/20110228021520/http://qa.php.net/write-test.php\"\u003ePHPT\u003c/a\u003e tests, ensuring that the sample code actually works.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eA breakdown of all complex parameters so that you can see what all of the possible options are.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe API reference documentation is available in HTML, raw XML, raw JSON and Serialized PHP formats.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOffline documentation can be downloaded as \u003ccode\u003e.zip\u003c/code\u003e, \u003ccode\u003e.gz\u003c/code\u003e and \u003ccode\u003e.bz2\u003c/code\u003e archives.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIntelligent search along with a class browser.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eView the source code of any method in the SDK.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe file that a given method is defined in.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLinks out to the \u003ca href=\"https://web.archive.org/web/20110228021520/https://github.com/amazonwebservices/aws-sdk-for-php\"\u003eGitHub repository\u003c/a\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eComplete inheritance chains and interface conformity.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eMethods that are related to the one you’re looking at.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLinks out to \u003ca href=\"https://web.archive.org/web/20110228021520/http://php.net\"\u003ePHP.net\u003c/a\u003e, where appropriate.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eInstant feedback, as in the ability to point out an error or some other issue directly on a page itself, instead of needing to hunt for a feedback link somewhere else in the site.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe ability to link directly to a search query.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIt’s this last feature that I’ve come to talk about today — the ability to easily search the docs from tools you already use.\u003c/p\u003e\n\u003ch2 id=\"searching-the-aws-sdk-for-php-documentation-from-google-chrome\"\u003eSearching the AWS SDK for PHP documentation from Google Chrome\u003c/h2\u003e\n\u003cp\u003eFor this, we need to tell Chrome to use the following pattern when searching the API reference.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-plain\" data-lang=\"plain\"\u003ehttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eOpen the Google Chrome preferences panel.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome1.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome1.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the \u003cem\u003eSearch\u003c/em\u003e section, click \u003cem\u003eManage Search Engines…\u003c/em\u003e. This will show the \u003cem\u003eSearch Engines\u003c/em\u003e panel.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome2.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome2.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIn the \u003cem\u003eOther search engines\u003c/em\u003e section, fill out the fields as shown below. The URL in the last field is the one I posted above.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome3.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome3.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOpen a new tab. Typing \u0026ldquo;\u003cem\u003eaws[space]\u003c/em\u003e\u0026rdquo; will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome4.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome4.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThis will open the SDK API reference documentation. Your search terms will be pre-filled in the search field on the left. You can navigate through the documentation from there!\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome5.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome5.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"searching-the-aws-sdk-for-php-documentation-from-mozilla-firefox\"\u003eSearching the AWS SDK for PHP documentation from Mozilla Firefox\u003c/h2\u003e\n\u003cp\u003eThis process is very similar to Google Chrome. For this, we need to tell Firefox to use the following pattern when searching the API reference.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-plain\" data-lang=\"plain\"\u003ehttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%s\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eOpen the Firefox Bookmarks Manager by choosing \u003cem\u003eBookmarks \u0026gt; Show All Bookmarks\u003c/em\u003e from the menubar. Once that’s open, click the gear icon and create a new bookmark.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox1.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox1.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFirefox will present a \u003cem\u003eNew Bookmark\u003c/em\u003e dialog.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox2.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox2.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFill out the fields as shown below. The URL in the \u003cem\u003eLocation\u003c/em\u003e field is the one I posted above. Firefox calls this a \u003cem\u003eKeyword Search\u003c/em\u003e.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox3.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox3.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eOpen a new tab. Typing \u0026ldquo;\u003cem\u003eaws[space]\u003c/em\u003e\u0026rdquo; will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox4.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox4.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThis will open the SDK API reference documentation. Your search terms will be pre-filled in the search field on the left. You can navigate through the documentation from there!\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox5.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox5.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"searching-the-aws-sdk-for-php-documentation-from-alfred\"\u003eSearching the AWS SDK for PHP documentation from Alfred\u003c/h2\u003e\n\u003cp\u003eThis approach is my personal favorite, but is specific to \u003ca href=\"https://web.archive.org/web/20110228021520/http://alfredapp.com\"\u003eAlfred\u003c/a\u003e, an app launcher for Mac OS X. For this, we need to tell Alfred to use the following pattern when searching the API reference.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-plain\" data-lang=\"plain\"\u003ehttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eAlternatively, you can use the \u003ca href=\"alfredapp://customsearch/AWS%20SDK%20for%20PHP/sdk/utf8/url=http://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%7Bquery%7D\"\u003efollowing URL\u003c/a\u003e to accomplish what we’re going to do here:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-plain\" data-lang=\"plain\"\u003ealfredapp://customsearch/AWS%20SDK%20for%20PHP/aws/utf8/url=http://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eOpen the Alfred preferences, and choose \u003cem\u003eCustom Searches\u003c/em\u003e from the sidebar. Once there, click the plus symbol at the bottom to add a new custom search.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred1.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred1.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFill out the fields as shown below. The URL in the \u003cem\u003eSearch URL\u003c/em\u003e field is the one I posted above. Click \u003cem\u003eAdd\u003c/em\u003e when you’re done.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred2.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred2.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eClose the preferences, and bring up Alfred! Typing \u0026ldquo;\u003cem\u003eaws[space]\u003c/em\u003e\u0026rdquo; will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred3.webp\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred3.png\" alt=\"\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"the-end\"\u003eThe End\u003c/h2\u003e\n\u003cp\u003eI hope that this tutorial helps make your use of the AWS SDK for PHP even easier! Are there some other cool uses for the SDK docs that I might not be aware of? Let me know in the comments!\u003c/p\u003e\n",
        "plain":"Although the AWS SDK for PHP is growing as fast as Amazon’s breadth of web services, it should still be easy to find the information that you need in order to develop. This is a goal that I take very seriously.\nBack in 2005, I took a job with Stryker Endoscopy as a member of their Internal User Experience team, where our focus was on Usability and User-Centered Design (UCD). (I take no responsibility for how bad their public website is!) I gained some invaluable insight into the usability process and the principles behind UCD that I’ve carried with me over the years as I’ve migrated from UX and Front-End Development toward building Software Development Kits (SDKs) for infrastructure services. The most valuable of these is this:\n You can have all of the greatest functionality in the world. But if nobody can use it, what’s the point?\n I’m tempted to launch into a tirade against the stunning ignorance of software engineers who think we UX people “make it look pretty.” A Photoshop mockup does not a user experience make. Those same woefully uneducated people don’t understand how much science is involved in producing high-quality user interfaces — nor do they understand that if a person can’t figure out how to use the software, it’s not a problem with the person… it’s a problem with the software. As I’ve shifted toward producing developer-facing software, I’ve always maintained the notion that “developers are people too.” The administration and developer tools of some web applications are a crime against humanity. Of course, that’s what happens when you make the mistake of thinking that corporate stakeholders are your customers instead of Real Human Beings™. [I’m starting to rant. Let me switch gears.]\nI ♥ Quality I believe that documentation is equally — if not more — important as the code itself. It’s a critical part of the user (i.e., developer) experience right up there with API design and SDK design. When I was building CloudFusion (the pre-cursor to the AWS SDK for PHP), I spent quite a bit of time trying to find a high-quality documentation tool that delivered what I believed my users deserved. After searching for a good tool over the course of 2–3 years, I finally broke down and wrote my own tool that produced the kind of high-quality documentation that my users deserve. (That project is called “Vanity”, and is currently incubating).\nMaking It Better With the release of the AWS SDK for PHP 1.2.4, we really tried to raise the bar for our documentation. Here are some of the features that we now provide:\n  Rewrote the in-file documentation blocks to use the more common and better supported PHPDoc format instead of the NaturalDocs format we used previously.\n  Complete API reference documentation for all methods and classes.\n  One or more usage examples for nearly every single method.\n  Usage examples are generated from real PHPT tests, ensuring that the sample code actually works.\n  A breakdown of all complex parameters so that you can see what all of the possible options are.\n  The API reference documentation is available in HTML, raw XML, raw JSON and Serialized PHP formats.\n  Offline documentation can be downloaded as .zip, .gz and .bz2 archives.\n  Intelligent search along with a class browser.\n  View the source code of any method in the SDK.\n  The file that a given method is defined in.\n  Links out to the GitHub repository.\n  Complete inheritance chains and interface conformity.\n  Methods that are related to the one you’re looking at.\n  Links out to PHP.net, where appropriate.\n  Instant feedback, as in the ability to point out an error or some other issue directly on a page itself, instead of needing to hunt for a feedback link somewhere else in the site.\n  The ability to link directly to a search query.\n  It’s this last feature that I’ve come to talk about today — the ability to easily search the docs from tools you already use.\nSearching the AWS SDK for PHP documentation from Google Chrome For this, we need to tell Chrome to use the following pattern when searching the API reference.\nhttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%s   Open the Google Chrome preferences panel.\n    In the Search section, click Manage Search Engines…. This will show the Search Engines panel.\n    In the Other search engines section, fill out the fields as shown below. The URL in the last field is the one I posted above.\n    Open a new tab. Typing \u0026ldquo;aws[space]\u0026rdquo; will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\n    This will open the SDK API reference documentation. Your search terms will be pre-filled in the search field on the left. You can navigate through the documentation from there!\n    Searching the AWS SDK for PHP documentation from Mozilla Firefox This process is very similar to Google Chrome. For this, we need to tell Firefox to use the following pattern when searching the API reference.\nhttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%s   Open the Firefox Bookmarks Manager by choosing Bookmarks \u0026gt; Show All Bookmarks from the menubar. Once that’s open, click the gear icon and create a new bookmark.\n    Firefox will present a New Bookmark dialog.\n    Fill out the fields as shown below. The URL in the Location field is the one I posted above. Firefox calls this a Keyword Search.\n    Open a new tab. Typing \u0026ldquo;aws[space]\u0026rdquo; will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\n    This will open the SDK API reference documentation. Your search terms will be pre-filled in the search field on the left. You can navigate through the documentation from there!\n    Searching the AWS SDK for PHP documentation from Alfred This approach is my personal favorite, but is specific to Alfred, an app launcher for Mac OS X. For this, we need to tell Alfred to use the following pattern when searching the API reference.\nhttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query} Alternatively, you can use the following URL to accomplish what we’re going to do here:\nalfredapp://customsearch/AWS%20SDK%20for%20PHP/aws/utf8/url=http://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query}   Open the Alfred preferences, and choose Custom Searches from the sidebar. Once there, click the plus symbol at the bottom to add a new custom search.\n    Fill out the fields as shown below. The URL in the Search URL field is the one I posted above. Click Add when you’re done.\n    Close the preferences, and bring up Alfred! Typing \u0026ldquo;aws[space]\u0026rdquo; will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\n    The End I hope that this tutorial helps make your use of the AWS SDK for PHP even easier! Are there some other cool uses for the SDK docs that I might not be aware of? Let me know in the comments!\n",
        "source":"\nAlthough the AWS SDK for PHP is growing as fast as Amazon’s breadth of web services, it should still be easy to find the information that you need in order to develop. This is a goal that I take very seriously.\n\nBack in 2005, I took a job with [Stryker Endoscopy]({{% wayback \"http://stryker.com/endoscopy/\" %}}) as a member of their Internal User Experience team, where our focus was on Usability and User-Centered Design (UCD). (I take no responsibility for how bad their public website is!) I gained some invaluable insight into the usability process and the principles behind UCD that I’ve carried with me over the years as I’ve migrated from UX and Front-End Development toward building Software Development Kits (SDKs) for infrastructure services. The most valuable of these is this:\n\n\u003e You can have all of the greatest functionality in the world. But if nobody can use it, what’s the point?\n\nI’m tempted to launch into a tirade against the stunning ignorance of software engineers who think we UX people “make it look pretty.” *A Photoshop mockup does not a user experience make.* Those same *woefully* uneducated people don’t understand how much science is involved in producing high-quality user interfaces — nor do they understand that if a person can’t figure out how to use the software, it’s not a problem with the person… it’s a problem with the software. As I’ve shifted toward producing developer-facing software, I’ve always maintained the notion that “developers are people too.” The administration and developer tools of [some web applications]({{% wayback \"http://reardencommerce.com\" %}}) are a *crime against humanity*. Of course, that’s what happens when you make the mistake of thinking that corporate stakeholders are your customers instead of *Real Human Beings™*. \\[I’m starting to rant. Let me switch gears.\\]\n\n## I ♥ Quality\n\nI believe that documentation is equally — if not more — important as the code itself. It’s a critical part of the user (i.e., developer) experience right up there with API design and SDK design. When I was building *CloudFusion* (the pre-cursor to the AWS SDK for PHP), I spent quite a bit of time trying to find a high-quality documentation tool that delivered what I believed my users deserved. After searching for a good tool over the course of 2–3 years, I finally broke down and wrote my own tool that produced the kind of high-quality documentation that my users deserve. (That project is called “Vanity”, and is currently incubating).\n\n## Making It Better\n\nWith the release of the [AWS SDK for PHP 1.2.4]({{% wayback \"https://aws.amazon.com/releasenotes/release-aws-sdk-for-php-1-2-4/\" %}}), we really tried to raise the bar for our documentation. Here are some of the features that we now provide:\n\n* Rewrote the in-file documentation blocks to use the more common and better supported [PHPDoc]({{% wayback \"http://manual.phpdoc.org/HTMLSmartyConverter/HandS/phpDocumentor/tutorial_phpDocumentor.quickstart.pkg.html#coding.phpcomments\" %}}) format instead of the [NaturalDocs]({{% wayback \"http://naturaldocs.org/documenting.html\" %}}) format we used previously.\n\n* Complete API reference documentation for all methods and classes.\n\n* One or more usage examples for nearly every single method.\n\n* Usage examples are generated from real [PHPT]({{% wayback \"http://qa.php.net/write-test.php\" %}}) tests, ensuring that the sample code actually works.\n\n* A breakdown of all complex parameters so that you can see what all of the possible options are.\n\n* The API reference documentation is available in HTML, raw XML, raw JSON and Serialized PHP formats.\n\n* Offline documentation can be downloaded as `.zip`, `.gz` and `.bz2` archives.\n\n* Intelligent search along with a class browser.\n\n* View the source code of any method in the SDK.\n\n* The file that a given method is defined in.\n\n* Links out to the [GitHub repository]({{% wayback \"https://github.com/amazonwebservices/aws-sdk-for-php\" %}}).\n\n* Complete inheritance chains and interface conformity.\n\n* Methods that are related to the one you’re looking at.\n\n* Links out to [PHP.net]({{% wayback \"http://php.net\" %}}), where appropriate.\n\n* Instant feedback, as in the ability to point out an error or some other issue directly on a page itself, instead of needing to hunt for a feedback link somewhere else in the site.\n\n* The ability to link directly to a search query.\n\nIt’s this last feature that I’ve come to talk about today — the ability to easily search the docs from tools you already use.\n\n## Searching the AWS SDK for PHP documentation from Google Chrome\n\nFor this, we need to tell Chrome to use the following pattern when searching the API reference.\n\n```plain\nhttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%s\n```\n\n1. Open the Google Chrome preferences panel.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome1.png\"\u003e}}\n\n2. In the *Search* section, click *Manage Search Engines…*. This will show the *Search Engines* panel.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome2.png\"\u003e}}\n\n3. In the *Other search engines* section, fill out the fields as shown below. The URL in the last field is the one I posted above.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome3.png\"\u003e}}\n\n4. Open a new tab. Typing \"*aws\\[space\\]*\" will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome4.png\"\u003e}}\n\n5. This will open the SDK API reference documentation. Your search terms will be pre-filled in the search field on the left. You can navigate through the documentation from there!\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/chrome5.png\"\u003e}}\n\n## Searching the AWS SDK for PHP documentation from Mozilla Firefox\n\nThis process is very similar to Google Chrome. For this, we need to tell Firefox to use the following pattern when searching the API reference.\n\n```plain\nhttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q=%s\n```\n\n1. Open the Firefox Bookmarks Manager by choosing *Bookmarks \u0026gt; Show All Bookmarks* from the menubar. Once that’s open, click the gear icon and create a new bookmark.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox1.png\"\u003e}}\n\n2. Firefox will present a *New Bookmark* dialog.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox2.png\"\u003e}}\n\n3. Fill out the fields as shown below. The URL in the *Location* field is the one I posted above. Firefox calls this a *Keyword Search*.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox3.png\"\u003e}}\n\n4. Open a new tab. Typing \"*aws\\[space\\]*\" will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox4.png\"\u003e}}\n\n5. This will open the SDK API reference documentation. Your search terms will be pre-filled in the search field on the left. You can navigate through the documentation from there!\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/firefox5.png\"\u003e}}\n\n## Searching the AWS SDK for PHP documentation from Alfred\n\nThis approach is my personal favorite, but is specific to [Alfred]({{% wayback \"http://alfredapp.com\" %}}), an app launcher for Mac OS X. For this, we need to tell Alfred to use the following pattern when searching the API reference.\n\n```plain\nhttp://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query}\n```\n\nAlternatively, you can use the [following URL](alfredapp://customsearch/AWS%20SDK%20for%20PHP/sdk/utf8/url=http://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query}) to accomplish what we’re going to do here:\n\n```plain\nalfredapp://customsearch/AWS%20SDK%20for%20PHP/aws/utf8/url=http://docs.amazonwebservices.com/AWSSDKforPHP/latest/?q={query}\n```\n\n1. Open the Alfred preferences, and choose *Custom Searches* from the sidebar. Once there, click the plus symbol at the bottom to add a new custom search.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred1.png\"\u003e}}\n\n2. Fill out the fields as shown below. The URL in the *Search URL* field is the one I posted above. Click *Add* when you’re done.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred2.png\"\u003e}}\n\n3. Close the preferences, and bring up Alfred! Typing \"*aws\\[space\\]*\" will trigger the AWS SDK for PHP search. Search for whichever keywords you’d like. At the time of this writing, classes, methods, properties and constants are supported.\n\n    {{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2011/02/alfred3.png\"\u003e}}\n\n## The End\n\nI hope that this tutorial helps make your use of the AWS SDK for PHP even easier! Are there some other cool uses for the SDK docs that I might not be aware of? Let me know in the comments!\n"},
    "links": {
        "prev": {"title": "Creating iPhone ringtones with iTunes and QuickTime", "permalink": "https://ryanparman.com/posts/2011/creating-iphone-ringtones-with-itunes-and-quicktime/"},
        "next": {"title": "Death to Recruiters", "permalink": "https://ryanparman.com/posts/2011/death-to-recruiters/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "CloudFusion has become the official AWS SDK for PHP!",
    "description": "",
    "summary": {
        "content": "It’s always been a dream of mine to get paid to work on something I love. I spent more than 5 years working on SimplePie, and although it gained hundreds of thousands of users all over the world, it never gave anything back to me. It was a labor of love, and I did it both for the recognition as well as my desire to take something complex and make it simple. In July 2007, while working on my startup — WarpShare — I rebooted my old Tarzan project, which was a wrapper around what is now Amazon’s Product Advertising API.",
        "isTruncated": true
    },
    "published": "2010-09-29T01:39:20Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2010/cloudfusion-has-become-the-official-aws-sdk-for-php/",
    "relativePermalink": "/posts/2010/cloudfusion-has-become-the-official-aws-sdk-for-php/",
    "aliases": ["/2010/09/28/cloudfusion-has-become-the-official-aws-sdk-for-php/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 266,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2010/20100929-cloudfusion-has-become-the-official-aws-sdk-for-php.md",
        "logicalName": "20100929-cloudfusion-has-become-the-official-aws-sdk-for-php.md",
        "translationBaseName": "20100929-cloudfusion-has-become-the-official-aws-sdk-for-php",
        "baseFileName": "20100929-cloudfusion-has-become-the-official-aws-sdk-for-php",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2010/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eIt’s always been a dream of mine to get paid to work on something I love.\u003c/p\u003e\n\u003cp\u003eI spent more than 5 years working on \u003ca href=\"https://web.archive.org/web/20100929013920/http://simplepie.org\"\u003eSimplePie\u003c/a\u003e, and although it gained hundreds of thousands of users all over the world, it never gave anything back to me. It was a labor of love, and I did it both for the recognition as well as my desire to take something complex and make it simple.\u003c/p\u003e\n\u003cp\u003eIn July 2007, while working on my startup — \u003ca href=\"https://web.archive.org/web/20100929013920/http://warpshare.com\"\u003eWarpShare\u003c/a\u003e — I rebooted my old \u003cem\u003eTarzan\u003c/em\u003e project, which was a wrapper around what is now \u003ca href=\"https://web.archive.org/web/20100929013920/https://affiliate-program.amazon.com/gp/advertising/api/detail/main.html\"\u003eAmazon’s Product Advertising API\u003c/a\u003e. Tarzan grew and grew until it became a fairly popular toolkit for working with \u003ca href=\"https://web.archive.org/web/20100929013920/http://aws.amazon.com\"\u003eAmazon Web Services\u003c/a\u003e. I’ve been amazed to find out who some of my customers are!\u003c/p\u003e\n\u003cp\u003eTarzan caught the attention of two companies — Amazon and \u003ca href=\"https://web.archive.org/web/20100929013920/http://rackspacecloud.com\"\u003eRackspace\u003c/a\u003e. It was during this time when I had Rackspace folks pinging me that I decided that I wanted to branch out beyond just Amazon’s services, and renamed the project to \u003cem\u003eCloudFusion\u003c/em\u003e. Ultimately, however, it wasn’t meant to be. In February 2010, I accepted an offer to join Amazon Web Services to work on the then-secret \u003ca href=\"https://web.archive.org/web/20100929013920/http://aws.amazon.com/sdkforphp\"\u003eAWS SDK for PHP\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAs of today, \u003cem\u003ethe AWS SDK for PHP has superseded CloudFusion for all of the infrastructure services\u003c/em\u003e. It’s been an exciting time here at Amazon, and I’m looking forward to all of the awesome stuff we have in the pipeline! I hope that you’ll see all of the energy I put into the SDK, and that you’ll come to love it as much as I do!\u003c/p\u003e\n",
        "plain":"It’s always been a dream of mine to get paid to work on something I love.\nI spent more than 5 years working on SimplePie, and although it gained hundreds of thousands of users all over the world, it never gave anything back to me. It was a labor of love, and I did it both for the recognition as well as my desire to take something complex and make it simple.\nIn July 2007, while working on my startup — WarpShare — I rebooted my old Tarzan project, which was a wrapper around what is now Amazon’s Product Advertising API. Tarzan grew and grew until it became a fairly popular toolkit for working with Amazon Web Services. I’ve been amazed to find out who some of my customers are!\nTarzan caught the attention of two companies — Amazon and Rackspace. It was during this time when I had Rackspace folks pinging me that I decided that I wanted to branch out beyond just Amazon’s services, and renamed the project to CloudFusion. Ultimately, however, it wasn’t meant to be. In February 2010, I accepted an offer to join Amazon Web Services to work on the then-secret AWS SDK for PHP.\nAs of today, the AWS SDK for PHP has superseded CloudFusion for all of the infrastructure services. It’s been an exciting time here at Amazon, and I’m looking forward to all of the awesome stuff we have in the pipeline! I hope that you’ll see all of the energy I put into the SDK, and that you’ll come to love it as much as I do!\n",
        "source":"\nIt’s always been a dream of mine to get paid to work on something I love.\n\nI spent more than 5 years working on [SimplePie]({{% wayback \"http://simplepie.org\" %}}), and although it gained hundreds of thousands of users all over the world, it never gave anything back to me. It was a labor of love, and I did it both for the recognition as well as my desire to take something complex and make it simple.\n\nIn July 2007, while working on my startup — [WarpShare]({{% wayback \"http://warpshare.com\" %}}) — I rebooted my old *Tarzan* project, which was a wrapper around what is now [Amazon’s Product Advertising API]({{% wayback \"https://affiliate-program.amazon.com/gp/advertising/api/detail/main.html\" %}}). Tarzan grew and grew until it became a fairly popular toolkit for working with [Amazon Web Services]({{% wayback \"http://aws.amazon.com\" %}}). I’ve been amazed to find out who some of my customers are!\n\nTarzan caught the attention of two companies — Amazon and [Rackspace]({{% wayback \"http://rackspacecloud.com\" %}}). It was during this time when I had Rackspace folks pinging me that I decided that I wanted to branch out beyond just Amazon’s services, and renamed the project to *CloudFusion*. Ultimately, however, it wasn’t meant to be. In February 2010, I accepted an offer to join Amazon Web Services to work on the then-secret [AWS SDK for PHP]({{% wayback \"http://aws.amazon.com/sdkforphp\" %}}).\n\nAs of today, *the AWS SDK for PHP has superseded CloudFusion for all of the infrastructure services*. It’s been an exciting time here at Amazon, and I’m looking forward to all of the awesome stuff we have in the pipeline! I hope that you’ll see all of the energy I put into the SDK, and that you’ll come to love it as much as I do!\n"},
    "links": {
        "prev": {"title": "PHP Coding Standards", "permalink": "https://ryanparman.com/posts/2010/php-coding-standards/"},
        "next": {"title": "Dear Oracle, Get a Clue", "permalink": "https://ryanparman.com/posts/2010/dear-oracle-get-a-clue/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "PHP Coding Standards",
    "description": "",
    "summary": {
        "content": "For the past several years, I’ve been developing a coding style for PHP that all began with SimplePie. Since then, I’ve been polishing the standards from one project to the next to the point where I believe that I have a solid, rational set of guidelines that others can share and re-use. Any feedback that other PHP developers may have is welcome. I’m hoping to incorporate the better bits of feedback into improvements to the standards. http://j.mp/php-standards",
        "isTruncated": false
    },
    "published": "2010-07-31T04:11:38Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2010/php-coding-standards/",
    "relativePermalink": "/posts/2010/php-coding-standards/",
    "aliases": ["/2010/07/30/php-coding-standards/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 77,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2010/20100731-php-coding-standards.md",
        "logicalName": "20100731-php-coding-standards.md",
        "translationBaseName": "20100731-php-coding-standards",
        "baseFileName": "20100731-php-coding-standards",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2010/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eFor the past several years, I’ve been developing a coding style for PHP that all began with SimplePie.\u003c/p\u003e\n\u003cp\u003eSince then, I’ve been polishing the standards from one project to the next to the point where I believe that I have a solid, rational set of guidelines that others can share and re-use. Any feedback that other PHP developers may have is welcome. I’m hoping to incorporate the better bits of feedback into improvements to the standards. \u003ca href=\"http://j.mp/php-standards\"\u003ehttp://j.mp/php-standards\u003c/a\u003e\u003c/p\u003e\n",
        "plain":"For the past several years, I’ve been developing a coding style for PHP that all began with SimplePie.\nSince then, I’ve been polishing the standards from one project to the next to the point where I believe that I have a solid, rational set of guidelines that others can share and re-use. Any feedback that other PHP developers may have is welcome. I’m hoping to incorporate the better bits of feedback into improvements to the standards. http://j.mp/php-standards\n",
        "source":"\nFor the past several years, I’ve been developing a coding style for PHP that all began with SimplePie.\n\nSince then, I’ve been polishing the standards from one project to the next to the point where I believe that I have a solid, rational set of guidelines that others can share and re-use. Any feedback that other PHP developers may have is welcome. I’m hoping to incorporate the better bits of feedback into improvements to the standards. \u003chttp://j.mp/php-standards\u003e\n"},
    "links": {
        "prev": {"title": "Movie Review: The Last Airbender", "permalink": "https://ryanparman.com/posts/2010/movie-review-the-last-airbender/"},
        "next": {"title": "CloudFusion has become the official AWS SDK for PHP!", "permalink": "https://ryanparman.com/posts/2010/cloudfusion-has-become-the-official-aws-sdk-for-php/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Installing PHP 5.3 with mysqlnd on Mac OS X with MacPorts",
    "description": "",
    "summary": {
        "content": "Historically, I’ve always preferred to use Apple’s built-in Apache 2.2 and PHP 5.x that comes with Leopard. However, after trying to compile PHP 5.3 from scratch and connect it with Apache, I decided to just use the MacPorts installer instead. That did mean giving up control of a finely-tuned Apache installation, but in the end, I think I’ve ended up with a better localhost system. Prerequisites Install MacPorts Also, make sure that your MacPorts install is completely up-to-date with:",
        "isTruncated": true
    },
    "published": "2009-07-11T20:33:44Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2009/installing-php-5-3-with-mysqlnd-on-mac-os-x-with-macports/",
    "relativePermalink": "/posts/2009/installing-php-5-3-with-mysqlnd-on-mac-os-x-with-macports/",
    "aliases": ["/2009/07/11/installing-php-5-3-with-mysqlnd-on-mac-os-x-with-macports/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": ["Editors Choice"],
    "keywords": [],
    "meta": {
        "wordCount": 716,
        "readingTime": "4 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2009/20090711-installing-php-5-3-with-mysqlnd-on-mac-os-x-with-macports.md",
        "logicalName": "20090711-installing-php-5-3-with-mysqlnd-on-mac-os-x-with-macports.md",
        "translationBaseName": "20090711-installing-php-5-3-with-mysqlnd-on-mac-os-x-with-macports",
        "baseFileName": "20090711-installing-php-5-3-with-mysqlnd-on-mac-os-x-with-macports",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2009/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#prerequisites\"\u003ePrerequisites\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#installation\"\u003eInstallation\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#extra-stuff\"\u003eExtra stuff\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#replacing-older-versions\"\u003eReplacing older versions\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#shortcuts\"\u003eShortcuts\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eHistorically, I’ve always preferred to use Apple’s built-in Apache 2.2 and PHP 5.x that comes with Leopard. However, after trying to compile PHP 5.3 from scratch and connect it with Apache, I decided to just use the \u003ca href=\"https://web.archive.org/web/20090711203344/http://www.macports.org/install.php\"\u003eMacPorts\u003c/a\u003e installer instead. That did mean giving up control of a finely-tuned Apache installation, but in the end, I think I’ve ended up with a better localhost system.\u003c/p\u003e\n\u003ch2 id=\"prerequisites\"\u003ePrerequisites\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003eInstall \u003ca href=\"https://web.archive.org/web/20090711203344/http://www.macports.org/install.php\"\u003eMacPorts\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlso, make sure that your MacPorts install is completely up-to-date with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo port -d selfupdate\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\u003cp\u003eNow, I’ve never used MacPorts to install PHP or Apache before, so I’m starting with a clean slate. If you’ve already installed PHP or Apache with MacPorts, your steps may be different. As always, your mileage may vary. For me, I develop several open-source projects, so I need things that others may not. Adjust these steps as necessary.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eUsing “Web Sharing” in your Sharing Preferences should be turned off. Currently this points to the (old) Apple Apache installation, although we’ll change that later.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFrom Terminal, install PHP 5.3 + Apache, and some other stuff. This will likely take quite a while. I’m installing SQLite, MySQL, and PostgreSQL because of my work on \u003ca href=\"https://web.archive.org/web/20090711203344/http://cachecore.googlecode.com\"\u003eCacheCore\u003c/a\u003e, so you may or may not need those. \u003ccode\u003emysqlnd\u003c/code\u003e is the new PHP Native Driver for MySQL and is supposed to be better, so we’ll use that. We also need to enable non-default settings for cURL.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo port install curl +ssl+ipv6+ares+idn+gss+openldap+sftp_scp \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ephp5 +apache2+fastcgi+pear\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou can see all available options by running \u003ccode\u003eport variants php5\u003c/code\u003e.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe new Apache configuration file is stored at \u003ccode\u003e/opt/local/apache2/conf/httpd.conf\u003c/code\u003e while the old one was at \u003ccode\u003e/etc/apache2/conf/httpd.conf\u003c/code\u003e. Take a moment to copy over any settings you’ll want to maintain into the new Apache installation.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou’ll also want to include your \u003cem\u003eextra\u003c/em\u003e settings. Toward the bottom of your \u003ccode\u003ehttpd.conf\u003c/code\u003e file, add the following line:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-apache\" data-lang=\"apache\"\u003e\u003cspan style=\"color:#75715e\"\u003e# All settings\u003c/span\u003e\nInclude conf/extra/*.conf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eIf you \u003cstrong\u003edon’t\u003c/strong\u003e have an SSL certificate, rename your SSL configuration:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecd /opt/local/apache2\nsudo mv conf/extra/httpd-ssl.conf conf/extra/httpd-ssl.conf-disabled\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou’ll also want to enable PHP in Apache:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo mv conf/extras-conf/mod_php.conf conf/extra/mod_php.conf\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe new PHP configuration file is stored at \u003ccode\u003e/opt/local/etc/php5/php.ini\u003c/code\u003e while the old one was at \u003ccode\u003e/etc/php.ini\u003c/code\u003e. Take a moment to copy over any settings you’ll want to maintain into the new PHP installation.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou’ll need to tell Apache to enable PHP support. Open your new \u003ccode\u003ehttpd.conf\u003c/code\u003e file, find where the extensions are loaded (with \u003ccode\u003eLoadModule\u003c/code\u003e), and add this to the end of the line:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-apache\" data-lang=\"apache\"\u003eLoadModule php5_module modules/libphp5.so\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRestart Apache. If you were using \u003ccode\u003eapachectl\u003c/code\u003e before, it still points to the old Apache, so we’ll want to point specifically to the new one.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo /opt/local/apache2/bin/apachectl restart\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eAt this point, PHP 5.3 with Apache 2.2 and the new \u003ccode\u003emysqlnd\u003c/code\u003e extension are all installed.\u003c/p\u003e\n\u003ch2 id=\"extra-stuff\"\u003eExtra stuff\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eI generally prefer to have lots more stuff installed locally so that I can worry more about developing and less about installing. Because of this, I also install a few other things.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo port install memcached \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-apc \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-curl \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-gd \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-http \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-iconv \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-imagick \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-mbstring \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-memcache \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-mysql \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-openssl \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-postgresql \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-sockets \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-sqlite \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-tidy \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php5-xdebug \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRestart Apache with:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo /opt/local/apache2/bin/apachectl restart\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"replacing-older-versions\"\u003eReplacing older versions\u003c/h2\u003e\n\u003cp\u003eNow, we want to continue using our command-line PHP scripts and the “Web Sharing” checkbox in the Sharing Preference Pane, so let’s make sure that those are all pointing to the new locations instead. We’ll be backing up and redirecting \u003ccode\u003ephp\u003c/code\u003e, \u003ccode\u003eapachectl\u003c/code\u003e, and \u003ccode\u003ehttpd\u003c/code\u003e.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eOpen up your Sharing Preference Pane, and disable Web Sharing\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRun the following command on the Terminal:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo mv /usr/bin/php /usr/bin/php.bak \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo ln -s /opt/local/bin/php /usr/bin/php; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003esudo mv /usr/sbin/apachectl /usr/sbin/apachectl.bak \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo ln -s /opt/local/apache2/bin/apachectl /usr/sbin/apachectl; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003esudo mv /usr/sbin/httpd /usr/sbin/httpd.bak \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e sudo ln -s /opt/local/apache2/bin/httpd /usr/sbin/httpd;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRe-enable Web Sharing in the preference pane.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"shortcuts\"\u003eShortcuts\u003c/h2\u003e\n\u003cp\u003eLastly, I like to set up some shortcuts so that I can access all of my important localhost stuff from one place. I’ll create a new directory called \u003ccode\u003ewww-config\u003c/code\u003e and then I’ll place symlinks into it for quick access to Apache and PHP configuration files.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esudo mkdir /www-config \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd /www-config \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003esudo ln -s /opt/local/apache2/bin/apachectl /www-config/apachectl \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003esudo ln -s /opt/local/apache2/conf/ /www-config/httpd-conf \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003esudo ln -s /opt/local/apache2/logs/ /www-config/logs \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003esudo ln -s /opt/local/var/db/php5/ /www-config/php-ini \u003cspan style=\"color:#f92672\"\u003e\u0026amp;\u0026amp;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003esudo ln -s /opt/local/etc/php5/php.ini /www-config/php.ini\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e",
        "plain":"Historically, I’ve always preferred to use Apple’s built-in Apache 2.2 and PHP 5.x that comes with Leopard. However, after trying to compile PHP 5.3 from scratch and connect it with Apache, I decided to just use the MacPorts installer instead. That did mean giving up control of a finely-tuned Apache installation, but in the end, I think I’ve ended up with a better localhost system.\nPrerequisites  Install MacPorts  Also, make sure that your MacPorts install is completely up-to-date with:\nsudo port -d selfupdate Installation Now, I’ve never used MacPorts to install PHP or Apache before, so I’m starting with a clean slate. If you’ve already installed PHP or Apache with MacPorts, your steps may be different. As always, your mileage may vary. For me, I develop several open-source projects, so I need things that others may not. Adjust these steps as necessary.\n  Using “Web Sharing” in your Sharing Preferences should be turned off. Currently this points to the (old) Apple Apache installation, although we’ll change that later.\n  From Terminal, install PHP 5.3 + Apache, and some other stuff. This will likely take quite a while. I’m installing SQLite, MySQL, and PostgreSQL because of my work on CacheCore, so you may or may not need those. mysqlnd is the new PHP Native Driver for MySQL and is supposed to be better, so we’ll use that. We also need to enable non-default settings for cURL.\nsudo port install curl +ssl+ipv6+ares+idn+gss+openldap+sftp_scp \\ php5 +apache2+fastcgi+pear You can see all available options by running port variants php5.\n  The new Apache configuration file is stored at /opt/local/apache2/conf/httpd.conf while the old one was at /etc/apache2/conf/httpd.conf. Take a moment to copy over any settings you’ll want to maintain into the new Apache installation.\n  You’ll also want to include your extra settings. Toward the bottom of your httpd.conf file, add the following line:\n# All settings Include conf/extra/*.conf   If you don’t have an SSL certificate, rename your SSL configuration:\ncd /opt/local/apache2 sudo mv conf/extra/httpd-ssl.conf conf/extra/httpd-ssl.conf-disabled   You’ll also want to enable PHP in Apache:\nsudo mv conf/extras-conf/mod_php.conf conf/extra/mod_php.conf   The new PHP configuration file is stored at /opt/local/etc/php5/php.ini while the old one was at /etc/php.ini. Take a moment to copy over any settings you’ll want to maintain into the new PHP installation.\n  You’ll need to tell Apache to enable PHP support. Open your new httpd.conf file, find where the extensions are loaded (with LoadModule), and add this to the end of the line:\nLoadModule php5_module modules/libphp5.so   Restart Apache. If you were using apachectl before, it still points to the old Apache, so we’ll want to point specifically to the new one.\nsudo /opt/local/apache2/bin/apachectl restart   At this point, PHP 5.3 with Apache 2.2 and the new mysqlnd extension are all installed.\nExtra stuff   I generally prefer to have lots more stuff installed locally so that I can worry more about developing and less about installing. Because of this, I also install a few other things.\nsudo port install memcached \\  php5-apc \\  php5-curl \\  php5-gd \\  php5-http \\  php5-iconv \\  php5-imagick \\  php5-mbstring \\  php5-memcache \\  php5-mysql \\  php5-openssl \\  php5-postgresql \\  php5-sockets \\  php5-sqlite \\  php5-tidy \\  php5-xdebug \\ ;   Restart Apache with:\nsudo /opt/local/apache2/bin/apachectl restart   Replacing older versions Now, we want to continue using our command-line PHP scripts and the “Web Sharing” checkbox in the Sharing Preference Pane, so let’s make sure that those are all pointing to the new locations instead. We’ll be backing up and redirecting php, apachectl, and httpd.\n  Open up your Sharing Preference Pane, and disable Web Sharing\n  Run the following command on the Terminal:\nsudo mv /usr/bin/php /usr/bin/php.bak \u0026amp;\u0026amp; sudo ln -s /opt/local/bin/php /usr/bin/php; \\ sudo mv /usr/sbin/apachectl /usr/sbin/apachectl.bak \u0026amp;\u0026amp; sudo ln -s /opt/local/apache2/bin/apachectl /usr/sbin/apachectl; \\ sudo mv /usr/sbin/httpd /usr/sbin/httpd.bak \u0026amp;\u0026amp; sudo ln -s /opt/local/apache2/bin/httpd /usr/sbin/httpd;   Re-enable Web Sharing in the preference pane.\n  Shortcuts Lastly, I like to set up some shortcuts so that I can access all of my important localhost stuff from one place. I’ll create a new directory called www-config and then I’ll place symlinks into it for quick access to Apache and PHP configuration files.\nsudo mkdir /www-config \u0026amp;\u0026amp; \\ cd /www-config \u0026amp;\u0026amp; \\ sudo ln -s /opt/local/apache2/bin/apachectl /www-config/apachectl \u0026amp;\u0026amp; \\ sudo ln -s /opt/local/apache2/conf/ /www-config/httpd-conf \u0026amp;\u0026amp; \\ sudo ln -s /opt/local/apache2/logs/ /www-config/logs \u0026amp;\u0026amp; \\ sudo ln -s /opt/local/var/db/php5/ /www-config/php-ini \u0026amp;\u0026amp; \\ sudo ln -s /opt/local/etc/php5/php.ini /www-config/php.ini ",
        "source":"\nHistorically, I’ve always preferred to use Apple’s built-in Apache 2.2 and PHP 5.x that comes with Leopard. However, after trying to compile PHP 5.3 from scratch and connect it with Apache, I decided to just use the [MacPorts]({{% wayback \"http://www.macports.org/install.php\" %}}) installer instead. That did mean giving up control of a finely-tuned Apache installation, but in the end, I think I’ve ended up with a better localhost system.\n\n## Prerequisites\n\n* Install [MacPorts]({{% wayback \"http://www.macports.org/install.php\" %}})\n\nAlso, make sure that your MacPorts install is completely up-to-date with:\n\n```bash\nsudo port -d selfupdate\n```\n\n## Installation\n\nNow, I’ve never used MacPorts to install PHP or Apache before, so I’m starting with a clean slate. If you’ve already installed PHP or Apache with MacPorts, your steps may be different. As always, your mileage may vary. For me, I develop several open-source projects, so I need things that others may not. Adjust these steps as necessary.\n\n1. Using “Web Sharing” in your Sharing Preferences should be turned off. Currently this points to the (old) Apple Apache installation, although we’ll change that later.\n\n2. From Terminal, install PHP 5.3 + Apache, and some other stuff. This will likely take quite a while. I’m installing SQLite, MySQL, and PostgreSQL because of my work on [CacheCore]({{% wayback \"http://cachecore.googlecode.com\" %}}), so you may or may not need those. `mysqlnd` is the new PHP Native Driver for MySQL and is supposed to be better, so we’ll use that. We also need to enable non-default settings for cURL.\n\n    ```bash\n    sudo port install curl +ssl+ipv6+ares+idn+gss+openldap+sftp_scp \\\n    php5 +apache2+fastcgi+pear\n    ```\n\n    You can see all available options by running `port variants php5`.\n\n3. The new Apache configuration file is stored at `/opt/local/apache2/conf/httpd.conf` while the old one was at `/etc/apache2/conf/httpd.conf`. Take a moment to copy over any settings you’ll want to maintain into the new Apache installation.\n\n4. You’ll also want to include your *extra* settings. Toward the bottom of your `httpd.conf` file, add the following line:\n\n    ```apache\n    # All settings\n    Include conf/extra/*.conf\n    ```\n\n5. If you **don’t** have an SSL certificate, rename your SSL configuration:\n\n    ```bash\n    cd /opt/local/apache2\n    sudo mv conf/extra/httpd-ssl.conf conf/extra/httpd-ssl.conf-disabled\n    ```\n\n6. You’ll also want to enable PHP in Apache:\n\n    ```bash\n    sudo mv conf/extras-conf/mod_php.conf conf/extra/mod_php.conf\n    ```\n\n7. The new PHP configuration file is stored at `/opt/local/etc/php5/php.ini` while the old one was at `/etc/php.ini`. Take a moment to copy over any settings you’ll want to maintain into the new PHP installation.\n\n8. You’ll need to tell Apache to enable PHP support. Open your new `httpd.conf` file, find where the extensions are loaded (with `LoadModule`), and add this to the end of the line:\n\n    ```apache\n    LoadModule php5_module modules/libphp5.so\n    ```\n\n9. Restart Apache. If you were using `apachectl` before, it still points to the old Apache, so we’ll want to point specifically to the new one.\n\n    ```bash\n    sudo /opt/local/apache2/bin/apachectl restart\n    ```\n\nAt this point, PHP 5.3 with Apache 2.2 and the new `mysqlnd` extension are all installed.\n\n## Extra stuff\n\n1. I generally prefer to have lots more stuff installed locally so that I can worry more about developing and less about installing. Because of this, I also install a few other things.\n\n    ```bash\n    sudo port install memcached \\\n        php5-apc \\\n        php5-curl \\\n        php5-gd \\\n        php5-http \\\n        php5-iconv \\\n        php5-imagick \\\n        php5-mbstring \\\n        php5-memcache \\\n        php5-mysql \\\n        php5-openssl \\\n        php5-postgresql \\\n        php5-sockets \\\n        php5-sqlite \\\n        php5-tidy \\\n        php5-xdebug \\\n    ;\n    ```\n\n2. Restart Apache with:\n\n    ```bash\n    sudo /opt/local/apache2/bin/apachectl restart\n    ```\n\n## Replacing older versions\n\nNow, we want to continue using our command-line PHP scripts and the “Web Sharing” checkbox in the Sharing Preference Pane, so let’s make sure that those are all pointing to the new locations instead. We’ll be backing up and redirecting `php`, `apachectl`, and `httpd`.\n\n1. Open up your Sharing Preference Pane, and disable Web Sharing\n\n2. Run the following command on the Terminal:\n\n    ```bash\n    sudo mv /usr/bin/php /usr/bin/php.bak \u0026\u0026 sudo ln -s /opt/local/bin/php /usr/bin/php; \\\n    sudo mv /usr/sbin/apachectl /usr/sbin/apachectl.bak \u0026\u0026 sudo ln -s /opt/local/apache2/bin/apachectl /usr/sbin/apachectl; \\\n    sudo mv /usr/sbin/httpd /usr/sbin/httpd.bak \u0026\u0026 sudo ln -s /opt/local/apache2/bin/httpd /usr/sbin/httpd;\n    ```\n\n3. Re-enable Web Sharing in the preference pane.\n\n## Shortcuts\n\nLastly, I like to set up some shortcuts so that I can access all of my important localhost stuff from one place. I’ll create a new directory called `www-config` and then I’ll place symlinks into it for quick access to Apache and PHP configuration files.\n\n```bash\nsudo mkdir /www-config \u0026\u0026 \\\ncd /www-config \u0026\u0026 \\\nsudo ln -s /opt/local/apache2/bin/apachectl /www-config/apachectl \u0026\u0026 \\\nsudo ln -s /opt/local/apache2/conf/ /www-config/httpd-conf \u0026\u0026 \\\nsudo ln -s /opt/local/apache2/logs/ /www-config/logs \u0026\u0026 \\\nsudo ln -s /opt/local/var/db/php5/ /www-config/php-ini \u0026\u0026 \\\nsudo ln -s /opt/local/etc/php5/php.ini /www-config/php.ini\n```\n"},
    "links": {
        "prev": {"title": "Run Internet Explorer 6 (or IE7, or IE8) images in VirtualBox on Mac OS X", "permalink": "https://ryanparman.com/posts/2009/run-ie6-ie7-ie8-images-virtualbox-macosx/"},
        "next": {"title": "WebKit 3D CSS Transforms", "permalink": "https://ryanparman.com/posts/2009/webkit-3d-css-transforms/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Introducing DOMBuilder",
    "description": "",
    "summary": {
        "content": "The DOM I hate the DOM. Actually, I take that back. I love the DOM, but I hate the fact that generating DOM nodes in JavaScript is so verbose and unintuitive. You need to construct a new element, then add properties, then construct a child element, then add properties, then append the child to the parent, and the parent to whatever DOM object you want that’s already in the page. A few years ago I discovered Builder.node(), a component of Scriptaculous.",
        "isTruncated": true
    },
    "published": "2009-02-27T17:13:22Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2009/introducing-dombuilder/",
    "relativePermalink": "/posts/2009/introducing-dombuilder/",
    "aliases": ["/2009/02/27/introducing-dombuilder/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 339,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2009/20090227-introducing-dombuilder.md",
        "logicalName": "20090227-introducing-dombuilder.md",
        "translationBaseName": "20090227-introducing-dombuilder",
        "baseFileName": "20090227-introducing-dombuilder",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2009/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#the-dom\"\u003eThe DOM\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#examples\"\u003eExamples\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#download\"\u003eDownload\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003ch2 id=\"the-dom\"\u003eThe DOM\u003c/h2\u003e\n\u003cp\u003eI hate the DOM. Actually, I take that back. I love the DOM, but I hate the fact that generating DOM nodes in JavaScript is so verbose and unintuitive.\u003c/p\u003e\n\u003cp\u003eYou need to construct a new element, then add properties, then construct a child element, then add properties, then append the child to the parent, and the parent to whatever DOM object you want that’s already in the page.\u003c/p\u003e\n\u003cp\u003eA few years ago I discovered \u003ccode\u003eBuilder.node()\u003c/code\u003e, a component of \u003ca href=\"https://web.archive.org/web/20090227171322/http://script.aculo.us\"\u003eScriptaculous\u003c/a\u003e. The problem is that Scriptaculous relies on Prototype, and both are HUGE JavaScript libraries. Later I moved to Moo.fx/MooTools, then I didn’t do much JavaScript for a while, then I started doing a lot with YUI, while sprinkling a little jQuery around here and there. None of these other frameworks had an equivalent to \u003ccode\u003eBuilder.node()\u003c/code\u003e, and again, that sucks.\u003c/p\u003e\n\u003cp\u003eSo last night, I wrote a small JavaScript class to handle this very thing. Introducing \u003ca href=\"https://web.archive.org/web/20090227171322/http://github.com/skyzyx/dombuilder/\"\u003eDOMBuilder\u003c/a\u003e. DOMBuilder is small, fast, and doesn’t depend on any other JavaScript frameworks meaning that it’s easy to use in any project where you need to construct nested DOM elements.\u003c/p\u003e\n\u003cp\u003eThe fully commented debug version clocks in around 3k. The minified version is 739 bytes. With gzip compression, it squeezes down to a mere 393 bytes. It’s not quite as terse or elegant as I’d like (yet), but it’s a good result for about 2 hours of hacking.\u003c/p\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cp\u003eHere’s the HTML we want to generate:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-html\" data-lang=\"html\"\u003e\u0026lt;\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;location_select_control\u0026#34;\u003c/span\u003e\u0026gt;\n    \u0026lt;\u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ehref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;location_select_label\u0026#34;\u003c/span\u003e\u0026gt;\n        \u0026lt;\u003cspan style=\"color:#f92672\"\u003elabel\u003c/span\u003e\u0026gt;This is my label\u0026lt;/\u003cspan style=\"color:#f92672\"\u003elabel\u003c/span\u003e\u0026gt;\n    \u0026lt;/\u003cspan style=\"color:#f92672\"\u003ea\u003c/span\u003e\u0026gt;\n\u0026lt;/\u003cspan style=\"color:#f92672\"\u003ediv\u003c/span\u003e\u0026gt;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eHere is how we’d do it with the standard DOM:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"color:#a6e22e\"\u003econtrol_div\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document.\u003cspan style=\"color:#a6e22e\"\u003ecreateElement\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;div\u0026#39;\u003c/span\u003e);\n\u003cspan style=\"color:#a6e22e\"\u003econtrol_div\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eclassName\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;location_select_control\u0026#34;\u003c/span\u003e;\n\u003cspan style=\"color:#a6e22e\"\u003econtrol_link\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document.\u003cspan style=\"color:#a6e22e\"\u003ecreateElement\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e);\n\u003cspan style=\"color:#a6e22e\"\u003econtrol_link\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003ehref\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u003c/span\u003e;\n\u003cspan style=\"color:#a6e22e\"\u003econtrol_link\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eclassName\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;location_select_label\u0026#34;\u003c/span\u003e;\n\u003cspan style=\"color:#a6e22e\"\u003econtrol_label\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document.\u003cspan style=\"color:#a6e22e\"\u003ecreateElement\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;label\u0026#39;\u003c/span\u003e);\n\u003cspan style=\"color:#a6e22e\"\u003econtrol_label\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einnerHTML\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;This is my label\u0026#34;\u003c/span\u003e;\n\u003cspan style=\"color:#a6e22e\"\u003econtrol_link\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eappendChild\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econtrol_label\u003c/span\u003e);\n\u003cspan style=\"color:#a6e22e\"\u003econtrol_div\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eappendChild\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econtrol_link\u003c/span\u003e);\ndocument.\u003cspan style=\"color:#a6e22e\"\u003ebody\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eappendChild\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003econtrol_div\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLastly, here’s how we’d do it with DOMBuilder:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eDOMBuilder\u003c/span\u003e;\ndocument.\u003cspan style=\"color:#a6e22e\"\u003ebody\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eappendChild\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;div\u0026#39;\u003c/span\u003e, { \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;location_select_control\u0026#39;\u003c/span\u003e }).\u003cspan style=\"color:#a6e22e\"\u003echild\u003c/span\u003e(\n    \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;a\u0026#39;\u003c/span\u003e, { \u003cspan style=\"color:#a6e22e\"\u003ehref\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;location_select_label\u0026#39;\u003c/span\u003e }).\u003cspan style=\"color:#a6e22e\"\u003echild\u003c/span\u003e(\n        \u003cspan style=\"color:#a6e22e\"\u003e_\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;label\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003einnerHTML\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;This is my label\u0026#39;\u003c/span\u003e)\n    )\n).\u003cspan style=\"color:#a6e22e\"\u003easDOM\u003c/span\u003e());\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"download\"\u003eDownload\u003c/h2\u003e\n\u003cp\u003eThis code is BSD licensed, so feel free to use it in personal or commercial projects. You can download it from \u003ca href=\"https://web.archive.org/web/20090227171322/http://github.com/skyzyx/dombuilder/\"\u003eGitHub\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"The DOM I hate the DOM. Actually, I take that back. I love the DOM, but I hate the fact that generating DOM nodes in JavaScript is so verbose and unintuitive.\nYou need to construct a new element, then add properties, then construct a child element, then add properties, then append the child to the parent, and the parent to whatever DOM object you want that’s already in the page.\nA few years ago I discovered Builder.node(), a component of Scriptaculous. The problem is that Scriptaculous relies on Prototype, and both are HUGE JavaScript libraries. Later I moved to Moo.fx/MooTools, then I didn’t do much JavaScript for a while, then I started doing a lot with YUI, while sprinkling a little jQuery around here and there. None of these other frameworks had an equivalent to Builder.node(), and again, that sucks.\nSo last night, I wrote a small JavaScript class to handle this very thing. Introducing DOMBuilder. DOMBuilder is small, fast, and doesn’t depend on any other JavaScript frameworks meaning that it’s easy to use in any project where you need to construct nested DOM elements.\nThe fully commented debug version clocks in around 3k. The minified version is 739 bytes. With gzip compression, it squeezes down to a mere 393 bytes. It’s not quite as terse or elegant as I’d like (yet), but it’s a good result for about 2 hours of hacking.\nExamples Here’s the HTML we want to generate:\n\u0026lt;div class=\u0026#34;location_select_control\u0026#34;\u0026gt; \u0026lt;a href=\u0026#34;\u0026#34; class=\u0026#34;location_select_label\u0026#34;\u0026gt; \u0026lt;label\u0026gt;This is my label\u0026lt;/label\u0026gt; \u0026lt;/a\u0026gt; \u0026lt;/div\u0026gt; Here is how we’d do it with the standard DOM:\ncontrol_div = document.createElement(\u0026#39;div\u0026#39;); control_div.className = \u0026#34;location_select_control\u0026#34;; control_link = document.createElement(\u0026#39;a\u0026#39;); control_link.href = \u0026#34;\u0026#34;; control_link.className = \u0026#34;location_select_label\u0026#34;; control_label = document.createElement(\u0026#39;label\u0026#39;); control_label.innerHTML = \u0026#34;This is my label\u0026#34;; control_link.appendChild(control_label); control_div.appendChild(control_link); document.body.appendChild(control_div); Lastly, here’s how we’d do it with DOMBuilder:\nvar _ = DOMBuilder; document.body.appendChild(_(\u0026#39;div\u0026#39;, { class:\u0026#39;location_select_control\u0026#39; }).child( _(\u0026#39;a\u0026#39;, { href:\u0026#39;\u0026#39;, class:\u0026#39;location_select_label\u0026#39; }).child( _(\u0026#39;label\u0026#39;).innerHTML(\u0026#39;This is my label\u0026#39;) ) ).asDOM()); Download This code is BSD licensed, so feel free to use it in personal or commercial projects. You can download it from GitHub.\n",
        "source":"\n## The DOM\n\nI hate the DOM. Actually, I take that back. I love the DOM, but I hate the fact that generating DOM nodes in JavaScript is so verbose and unintuitive.\n\nYou need to construct a new element, then add properties, then construct a child element, then add properties, then append the child to the parent, and the parent to whatever DOM object you want that’s already in the page.\n\nA few years ago I discovered `Builder.node()`, a component of [Scriptaculous]({{% wayback \"http://script.aculo.us\" %}}). The problem is that Scriptaculous relies on Prototype, and both are HUGE JavaScript libraries. Later I moved to Moo.fx/MooTools, then I didn’t do much JavaScript for a while, then I started doing a lot with YUI, while sprinkling a little jQuery around here and there. None of these other frameworks had an equivalent to `Builder.node()`, and again, that sucks.\n\nSo last night, I wrote a small JavaScript class to handle this very thing. Introducing [DOMBuilder]({{% wayback \"http://github.com/skyzyx/dombuilder/\" %}}). DOMBuilder is small, fast, and doesn’t depend on any other JavaScript frameworks meaning that it’s easy to use in any project where you need to construct nested DOM elements.\n\nThe fully commented debug version clocks in around 3k. The minified version is 739 bytes. With gzip compression, it squeezes down to a mere 393 bytes. It’s not quite as terse or elegant as I’d like (yet), but it’s a good result for about 2 hours of hacking.\n\n## Examples\n\nHere’s the HTML we want to generate:\n\n```html\n\u003cdiv class=\"location_select_control\"\u003e\n    \u003ca href=\"\" class=\"location_select_label\"\u003e\n        \u003clabel\u003eThis is my label\u003c/label\u003e\n    \u003c/a\u003e\n\u003c/div\u003e\n```\n\nHere is how we’d do it with the standard DOM:\n\n```javascript\ncontrol_div = document.createElement('div');\ncontrol_div.className = \"location_select_control\";\ncontrol_link = document.createElement('a');\ncontrol_link.href = \"\";\ncontrol_link.className = \"location_select_label\";\ncontrol_label = document.createElement('label');\ncontrol_label.innerHTML = \"This is my label\";\ncontrol_link.appendChild(control_label);\ncontrol_div.appendChild(control_link);\ndocument.body.appendChild(control_div);\n```\n\nLastly, here’s how we’d do it with DOMBuilder:\n\n```javascript\nvar _ = DOMBuilder;\ndocument.body.appendChild(_('div', { class:'location_select_control' }).child(\n    _('a', { href:'', class:'location_select_label' }).child(\n        _('label').innerHTML('This is my label')\n    )\n).asDOM());\n```\n\n## Download\n\nThis code is BSD licensed, so feel free to use it in personal or commercial projects. You can download it from [GitHub]({{% wayback \"http://github.com/skyzyx/dombuilder/\" %}}).\n"},
    "links": {
        "prev": {"title": "Run Internet Explorer 6 (or IE7, or IE8) images in VMware Fusion on Mac OS X", "permalink": "https://ryanparman.com/posts/2009/run-ie6-ie7-ie8-images-vmware-fusion-macosx/"},
        "next": {"title": "Those kids and their Wiis", "permalink": "https://ryanparman.com/posts/2009/those-kids-and-their-wiis/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Tarzan 2.0 is finally here!",
    "description": "",
    "summary": {
        "content": "After 18 months of ongoing development, I am proud to announce the immediate availability of Tarzan 2.0! The Tarzan platform has complete support for six different AWS services (S3, CloudFront, EC2, SimpleDB, SQS, and Amazon Associates) and has been built from the ground-up to be fast, memory-efficient, easy to use, and easy to build on top of by providing a solid set of core tools for your (and our) web application. You can download the 2.0 release from http://bit.ly/tarzan2, and please Digg us at http://bit.",
        "isTruncated": true
    },
    "published": "2008-12-10T17:45:28Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2008/tarzan-20-is-finally-here/",
    "relativePermalink": "/posts/2008/tarzan-20-is-finally-here/",
    "aliases": ["/2008/12/10/tarzan-20-is-finally-here/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 85,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2008/20081210-tarzan-20-is-finally-here.md",
        "logicalName": "20081210-tarzan-20-is-finally-here.md",
        "translationBaseName": "20081210-tarzan-20-is-finally-here",
        "baseFileName": "20081210-tarzan-20-is-finally-here",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2008/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eAfter 18 months of ongoing development, I am proud to announce the immediate availability of Tarzan 2.0!\u003c/p\u003e\n\u003cp\u003eThe Tarzan platform has complete support for six different AWS services (S3, CloudFront, EC2, SimpleDB, SQS, and Amazon Associates) and has been built from the ground-up to be fast, memory-efficient, easy to use, and easy to build on top of by providing a solid set of core tools for your (and our) web application.\u003c/p\u003e\n\u003cp\u003eYou can download the 2.0 release from \u003ca href=\"http://bit.ly/tarzan2\"\u003ehttp://bit.ly/tarzan2\u003c/a\u003e, and please Digg us at \u003ca href=\"http://bit.ly/digg-tarzan\"\u003ehttp://bit.ly/digg-tarzan\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"After 18 months of ongoing development, I am proud to announce the immediate availability of Tarzan 2.0!\nThe Tarzan platform has complete support for six different AWS services (S3, CloudFront, EC2, SimpleDB, SQS, and Amazon Associates) and has been built from the ground-up to be fast, memory-efficient, easy to use, and easy to build on top of by providing a solid set of core tools for your (and our) web application.\nYou can download the 2.0 release from http://bit.ly/tarzan2, and please Digg us at http://bit.ly/digg-tarzan.\n",
        "source":"\nAfter 18 months of ongoing development, I am proud to announce the immediate availability of Tarzan 2.0!\n\nThe Tarzan platform has complete support for six different AWS services (S3, CloudFront, EC2, SimpleDB, SQS, and Amazon Associates) and has been built from the ground-up to be fast, memory-efficient, easy to use, and easy to build on top of by providing a solid set of core tools for your (and our) web application.\n\nYou can download the 2.0 release from \u003chttp://bit.ly/tarzan2\u003e, and please Digg us at \u003chttp://bit.ly/digg-tarzan\u003e.\n"},
    "links": {
        "prev": {"title": "Loving my new iPhone 3G!", "permalink": "https://ryanparman.com/posts/2008/loving-my-new-iphone-3g/"},
        "next": {"title": "Run Internet Explorer 6 (or IE7, or IE8) images in VMware Fusion on Mac OS X", "permalink": "https://ryanparman.com/posts/2009/run-ie6-ie7-ie8-images-vmware-fusion-macosx/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "New Tarzan pre-release is available!",
    "description": "",
    "summary": {
        "content": "Today we announce an updated Tarzan pre-release build for any developers not using the subversion trunk. A lot of work has gone into Tarzan over the past 2 months since the last release, namely: Added the ability to change the content-type of an existing object in S3. Fixed some minor bugs in SimpleDB and S3. Re-wrote all of the documentation in the entire project (which enables us to generate awesome documentation which can be found on the Tarzan documentation page).",
        "isTruncated": true
    },
    "published": "2008-10-11T08:32:06Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2008/new-tarzan-pre-release-is-available/",
    "relativePermalink": "/posts/2008/new-tarzan-pre-release-is-available/",
    "aliases": ["/2008/10/11/new-tarzan-pre-release-is-available/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 151,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2008/20081011-new-tarzan-pre-release-is-available.md",
        "logicalName": "20081011-new-tarzan-pre-release-is-available.md",
        "translationBaseName": "20081011-new-tarzan-pre-release-is-available",
        "baseFileName": "20081011-new-tarzan-pre-release-is-available",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2008/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eToday we announce an updated Tarzan pre-release build for any developers not using the subversion trunk. A lot of work has gone into Tarzan over the past 2 months since the last release, namely:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eAdded the ability to change the content-type of an existing object in S3.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eFixed some minor bugs in SimpleDB and S3.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRe-wrote all of the documentation in the entire project (which enables us to generate awesome documentation which can be found on the \u003ca href=\"https://web.archive.org/web/20081011083206/http://tarzan-aws.com/docs/\"\u003eTarzan documentation\u003c/a\u003e page).\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLaunched an entirely \u003ca href=\"https://web.archive.org/web/20081011083206/http://tarzan-aws.com\"\u003enew website\u003c/a\u003e!\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAdded support for caching frequently requested data to enhance performance. Caching types currently include file-based, APC, MySQL, PostgreSQL, and SQLite. Informal tests tend to show a speed-up of between 600x–1000x, depending on the request and the type of cache being used.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf you’d rather not use the bleeding-edge subversion trunk builds, you can grab the latest pre-release build from the \u003ca href=\"https://web.archive.org/web/20081011083206/http://tarzan-aws.com/download/\"\u003eTarzan download\u003c/a\u003e page. Check it out!\u003c/p\u003e\n",
        "plain":"Today we announce an updated Tarzan pre-release build for any developers not using the subversion trunk. A lot of work has gone into Tarzan over the past 2 months since the last release, namely:\n  Added the ability to change the content-type of an existing object in S3.\n  Fixed some minor bugs in SimpleDB and S3.\n  Re-wrote all of the documentation in the entire project (which enables us to generate awesome documentation which can be found on the Tarzan documentation page).\n  Launched an entirely new website!\n  Added support for caching frequently requested data to enhance performance. Caching types currently include file-based, APC, MySQL, PostgreSQL, and SQLite. Informal tests tend to show a speed-up of between 600x–1000x, depending on the request and the type of cache being used.\n  If you’d rather not use the bleeding-edge subversion trunk builds, you can grab the latest pre-release build from the Tarzan download page. Check it out!\n",
        "source":"\nToday we announce an updated Tarzan pre-release build for any developers not using the subversion trunk. A lot of work has gone into Tarzan over the past 2 months since the last release, namely:\n\n* Added the ability to change the content-type of an existing object in S3.\n\n* Fixed some minor bugs in SimpleDB and S3.\n\n* Re-wrote all of the documentation in the entire project (which enables us to generate awesome documentation which can be found on the [Tarzan documentation]({{% wayback \"http://tarzan-aws.com/docs/\" %}}) page).\n\n* Launched an entirely [new website]({{% wayback \"http://tarzan-aws.com\" %}})!\n\n* Added support for caching frequently requested data to enhance performance. Caching types currently include file-based, APC, MySQL, PostgreSQL, and SQLite. Informal tests tend to show a speed-up of between 600x–1000x, depending on the request and the type of cache being used.\n\nIf you’d rather not use the bleeding-edge subversion trunk builds, you can grab the latest pre-release build from the [Tarzan download]({{% wayback \"http://tarzan-aws.com/download/\" %}}) page. Check it out!\n"},
    "links": {
        "prev": {"title": "Tarzan 2", "permalink": "https://ryanparman.com/posts/2008/tarzan-2/"},
        "next": {"title": "Loving my new iPhone 3G!", "permalink": "https://ryanparman.com/posts/2008/loving-my-new-iphone-3g/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Tarzan 2",
    "description": "",
    "summary": {
        "content": "If you’ve been following my blog over the past few years, you might remember an old project I was working on back in early 2005 called Tarzan. At the time, the only Amazon web service was their e-catalog (e-commerce) service, and that was was Tarzan specialized in. I ended up scrapping the project around the same time as Geoffrey came to me and said that he wanted to help work on another one of my little side projects, SimplePie. Of course, as most of the web development community knows, SimplePie has gone on to be wildly popular and Tarzan essentially bit the dust.",
        "isTruncated": true
    },
    "published": "2008-10-02T16:44:06Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2008/tarzan-2/",
    "relativePermalink": "/posts/2008/tarzan-2/",
    "aliases": ["/2008/10/02/tarzan-2/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 325,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2008/20081002-tarzan-2.md",
        "logicalName": "20081002-tarzan-2.md",
        "translationBaseName": "20081002-tarzan-2",
        "baseFileName": "20081002-tarzan-2",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2008/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eIf you’ve been following my blog over the past few years, you might remember an old project I was working on back in early 2005 called Tarzan. At the time, the only Amazon web service was their e-catalog (e-commerce) service, and that was was Tarzan specialized in.\u003c/p\u003e\n\u003cp\u003eI ended up scrapping the project around the same time as \u003ca href=\"https://web.archive.org/web/20081002164406/http://gsnedders.com/\"\u003eGeoffrey\u003c/a\u003e came to me and said that he wanted to help work on another one of my little side projects, \u003ca href=\"https://web.archive.org/web/20081002164406/http://simplepie.org/\"\u003eSimplePie\u003c/a\u003e. Of course, as most of the web development community knows, SimplePie has gone on to be wildly popular and Tarzan essentially bit the dust.\u003c/p\u003e\n\u003cp\u003eFast-forward two years, and I’ve started my own company, \u003ca href=\"https://web.archive.org/web/20081002164406/http://warpshare.com\"\u003eWarpShare\u003c/a\u003e. I’ve spoken before about the frustrations I’ve had trying to find and download music, movies, and TV shows with high quality, no DRM, with excellent metadata, all for cheap or free. “Legal” is nice, but not required. I believe many of us feel the same way. So I went on to start a company where one of the focuses is to do almost exactly this, except that the “legal” became required instead of optional, and where all parties involved can get what they want. But I’m not here to talk about that.\u003c/p\u003e\n\u003cp\u003eWe knew that an undertaking of this kind of magnitude would require quite a bit of infrastructure, lots of data processing, and huge databases for cheap or free (we’re a pre-VC funding startup). Amazon’s new “cloud computing” initiative to the rescue! I’ll let you read up on \u003ca href=\"https://web.archive.org/web/20081002164406/http://aws.amazon.com/\"\u003eAmazon Web Services\u003c/a\u003e on your own, but I ended up deciding to resurrect the old Tarzan project as something entirely new.\u003c/p\u003e\n\u003cp\u003eThat currently-in-development software will, when officially released, be known as \u003ca href=\"https://web.archive.org/web/20081002164406/http://tarzan-aws.com\"\u003eTarzan\u003c/a\u003e 2.0. I’ve already spent some time talking about it, so if you’re interested in this new “cloud computing” thing (including storage-in-the-cloud and lightweight-databasing-in-the-cloud) and you’re a PHP developer, take a moment to give \u003ca href=\"https://web.archive.org/web/20081002164406/http://tarzan-aws.com\"\u003eTarzan\u003c/a\u003e a look. I think you’ll like it.\u003c/p\u003e\n",
        "plain":"If you’ve been following my blog over the past few years, you might remember an old project I was working on back in early 2005 called Tarzan. At the time, the only Amazon web service was their e-catalog (e-commerce) service, and that was was Tarzan specialized in.\nI ended up scrapping the project around the same time as Geoffrey came to me and said that he wanted to help work on another one of my little side projects, SimplePie. Of course, as most of the web development community knows, SimplePie has gone on to be wildly popular and Tarzan essentially bit the dust.\nFast-forward two years, and I’ve started my own company, WarpShare. I’ve spoken before about the frustrations I’ve had trying to find and download music, movies, and TV shows with high quality, no DRM, with excellent metadata, all for cheap or free. “Legal” is nice, but not required. I believe many of us feel the same way. So I went on to start a company where one of the focuses is to do almost exactly this, except that the “legal” became required instead of optional, and where all parties involved can get what they want. But I’m not here to talk about that.\nWe knew that an undertaking of this kind of magnitude would require quite a bit of infrastructure, lots of data processing, and huge databases for cheap or free (we’re a pre-VC funding startup). Amazon’s new “cloud computing” initiative to the rescue! I’ll let you read up on Amazon Web Services on your own, but I ended up deciding to resurrect the old Tarzan project as something entirely new.\nThat currently-in-development software will, when officially released, be known as Tarzan 2.0. I’ve already spent some time talking about it, so if you’re interested in this new “cloud computing” thing (including storage-in-the-cloud and lightweight-databasing-in-the-cloud) and you’re a PHP developer, take a moment to give Tarzan a look. I think you’ll like it.\n",
        "source":"\nIf you’ve been following my blog over the past few years, you might remember an old project I was working on back in early 2005 called Tarzan. At the time, the only Amazon web service was their e-catalog (e-commerce) service, and that was was Tarzan specialized in.\n\nI ended up scrapping the project around the same time as [Geoffrey]({{% wayback \"http://gsnedders.com/\" %}}) came to me and said that he wanted to help work on another one of my little side projects, [SimplePie]({{% wayback \"http://simplepie.org/\" %}}). Of course, as most of the web development community knows, SimplePie has gone on to be wildly popular and Tarzan essentially bit the dust.\n\nFast-forward two years, and I’ve started my own company, [WarpShare]({{% wayback \"http://warpshare.com\" %}}). I’ve spoken before about the frustrations I’ve had trying to find and download music, movies, and TV shows with high quality, no DRM, with excellent metadata, all for cheap or free. “Legal” is nice, but not required. I believe many of us feel the same way. So I went on to start a company where one of the focuses is to do almost exactly this, except that the “legal” became required instead of optional, and where all parties involved can get what they want. But I’m not here to talk about that.\n\nWe knew that an undertaking of this kind of magnitude would require quite a bit of infrastructure, lots of data processing, and huge databases for cheap or free (we’re a pre-VC funding startup). Amazon’s new “cloud computing” initiative to the rescue! I’ll let you read up on [Amazon Web Services]({{% wayback \"http://aws.amazon.com/\" %}}) on your own, but I ended up deciding to resurrect the old Tarzan project as something entirely new.\n\nThat currently-in-development software will, when officially released, be known as [Tarzan]({{% wayback \"http://tarzan-aws.com\" %}}) 2.0. I’ve already spent some time talking about it, so if you’re interested in this new “cloud computing” thing (including storage-in-the-cloud and lightweight-databasing-in-the-cloud) and you’re a PHP developer, take a moment to give [Tarzan]({{% wayback \"http://tarzan-aws.com\" %}}) a look. I think you’ll like it.\n"},
    "links": {
        "prev": {"title": "Dr. Horrible’s Sing-Along Blog", "permalink": "https://ryanparman.com/posts/2008/dr-horribles-sing-along-blog/"},
        "next": {"title": "New Tarzan pre-release is available!", "permalink": "https://ryanparman.com/posts/2008/new-tarzan-pre-release-is-available/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Installing FFMPEG and FFMPEG-PHP in Fedora 8 running on Amazon EC2",
    "description": "",
    "summary": {
        "content": "I’ve spent a bit of time working with Amazon EC2 recently. One of the things I’ve been working on is getting a stable build of FFMPEG and FFMPEG-PHP running on a Fedora 8 image in Amazon EC2. This is essentially going to be a tutorial to get things up and running. Of course, your milage may vary. These instructions apply to a 32-bit Fedora 8 installation. The hardware I primarily use happens to be on EC2, but these instructions aren’t specific to EC2.",
        "isTruncated": true
    },
    "published": "2008-06-28T23:56:05Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2008/installing-ffmpeg-php-fedora-amazon-aws/",
    "relativePermalink": "/posts/2008/installing-ffmpeg-php-fedora-amazon-aws/",
    "aliases": ["/2008/06/28/installing-ffmpeg-php-fedora-amazon-aws/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 874,
        "readingTime": "5 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2008/20080628-installing-ffmpeg-php-fedora-amazon-aws.md",
        "logicalName": "20080628-installing-ffmpeg-php-fedora-amazon-aws.md",
        "translationBaseName": "20080628-installing-ffmpeg-php-fedora-amazon-aws",
        "baseFileName": "20080628-installing-ffmpeg-php-fedora-amazon-aws",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2008/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#preparing-the-lamp-stack-and-a-few-other-things\"\u003ePreparing the LAMP stack (and a few other things)\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#installing-ffmpeg\"\u003eInstalling FFMPEG\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#installing-ffmpeg-php\"\u003eInstalling FFMPEG-PHP\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#all-done\"\u003eAll done!\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eI’ve spent a bit of time working with Amazon EC2 recently. One of the things I’ve been working on is getting a stable build of FFMPEG and FFMPEG-PHP running on a Fedora 8 image in Amazon EC2. This is essentially going to be a tutorial to get things up and running. Of course, your milage may vary.\u003c/p\u003e\n\u003cp\u003eThese instructions apply to a 32-bit Fedora 8 installation. The hardware I primarily use happens to be on EC2, but these instructions aren’t specific to EC2. You may need to tweak things a smidge for an x64 system.\u003c/p\u003e\n\u003ch2 id=\"preparing-the-lamp-stack-and-a-few-other-things\"\u003ePreparing the LAMP stack (and a few other things)\u003c/h2\u003e\n\u003cp\u003eFor FFMPEG-PHP to work, you need to have a web server with PHP support up and running. You’ll definitely need GD for image processing and mbstring is helpful in conjunction with PHP5’s built-in iconv support for managing multiple character sets in ID3 tags.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eInstall PHP, necessary extensions and supporting software.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eyum -y install \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php-devel \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php-gd \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    php-mbstring \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    gcc \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    gcc-c++ \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    libtool \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    svn \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    git \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    yasm \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    gsm-devel \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    libogg-devel \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    libvorbis-devel \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    libtheora-devel \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAlso, I like to create a directory with symlinks to important files so that I can access everything more efficiently. These will be used throughout this tutorial.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003emkdir /www-config; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003eln -s /etc/init.d/httpd /www-config/httpd; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003eln -s /etc/httpd/conf/httpd.conf /www-config/httpd.conf; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003eln -s /var/log/httpd/ /www-config/logs; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003eln -s /usr/lib/php/modules/ /www-config/php5-extensions; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003eln -s /etc/httpd/conf.d/php.conf /www-config/php.conf; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003eln -s /etc/httpd/conf.d/ /www-config/apache-conf; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003eln -s /etc/php.ini /www-config/php.ini; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003eln -s /etc/php.d/ /www-config/php-ini; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003eln -s /var/www/html/ /www-config/public-html; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e/www-config/httpd restart;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003ePHP 5.x should now be installed and you should have a directory prepared that lets you easily access important files for managing your configuration.\u003c/p\u003e\n\u003ch2 id=\"installing-ffmpeg\"\u003eInstalling FFMPEG\u003c/h2\u003e\n\u003cp\u003eFFMPEG can be fairly complicated to get running properly, so here’s what I’ve gotten working thus far.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eDownload FFMPEG source.\u003c/strong\u003e Export the latest FFMPEG trunk from Subversion, then change to the source directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003esvn export svn://svn.mplayerhq.hu/ffmpeg/trunk /ffmpeg-trunk-source; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd /ffmpeg-trunk-source;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall \u003ca href=\"https://web.archive.org/web/20080628235605/http://www.videolan.org/developers/x264.html\"\u003ex264\u003c/a\u003e.\u003c/strong\u003e Export the latest x264 trunk from Git. Enter the directory, make, install, and go back to the parent directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit clone git://git.videolan.org/x264.git; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd x264; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e./configure --prefix\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/usr --enable-shared --enable-pthread; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake install; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd ..;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall \u003ca href=\"https://web.archive.org/web/20080628235605/http://liba52.sourceforge.net/\"\u003eliba52\u003c/a\u003e.\u003c/strong\u003e Download the latest version of liba52 (Currently 0.7.4). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget http://liba52.sourceforge.net/files/a52dec-0.7.4.tar.gz; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003etar -zxvf a52dec-0.7.4.tar.gz; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd a52dec-0.7.4; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e./configure --prefix\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/usr --enable-double; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake install; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd ..;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall \u003ca href=\"https://web.archive.org/web/20080628235605/http://www.audiocoding.com/\"\u003eFAAC\u003c/a\u003e.\u003c/strong\u003e Download the latest version of FAAC (Currently 1.26). Decompress the package, enter the directory, create the configure file, run configure, make, install, and go back to the parent directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget http://downloads.sourceforge.net/faac/faac-1.26.tar.gz; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003etar -zxvf faac-1.26.tar.gz; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd faac; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003eautoreconf -vif; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e./configure --prefix\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/usr; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake install; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd ..;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall \u003ca href=\"https://web.archive.org/web/20080628235605/http://www.audiocoding.com/\"\u003eFAAD\u003c/a\u003e.\u003c/strong\u003e Download the latest version of FAAD (Currently 2.6.1). Decompress the package, enter the directory, create the configure file, run configure, make, install, and go back to the parent directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget http://downloads.sourceforge.net/faac/faad2-2.6.1.tar.gz; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003etar -zxvf faad2-2.6.1.tar.gz; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd faad2; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003eautoreconf -vif; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e./configure --prefix\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/usr; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake install; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd ..;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall \u003ca href=\"https://web.archive.org/web/20080628235605/http://lame.sourceforge.net/\"\u003eLAME\u003c/a\u003e.\u003c/strong\u003e Download the latest version of LAME (Currently 3.98b8). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget http://downloads.sourceforge.net/lame/lame-3.98b8.tar.gz; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003etar -zxvf lame-3.98b8.tar.gz; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd lame-3.98b8; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e./configure --prefix\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/usr; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake install; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd ..;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall \u003ca href=\"https://web.archive.org/web/20080628235605/http://libmpeg2.sourceforge.net/\"\u003elibmpeg2\u003c/a\u003e.\u003c/strong\u003e Download the latest version of libmpeg2 (Currently 0.4.1). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget http://libmpeg2.sourceforge.net/files/mpeg2dec-0.4.1.tar.gz; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003etar -zxvf mpeg2dec-0.4.1.tar.gz; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd mpeg2dec-0.4.1; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e./configure --prefix\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/usr; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake install; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd ..;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall \u003ca href=\"https://web.archive.org/web/20080628235605/http://xvid.org/\"\u003eXvid\u003c/a\u003e.\u003c/strong\u003e Download the latest version of Xvid (Currently 1.1.3). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget http://downloads.xvid.org/downloads/xvidcore-1.1.3.tar.gz; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003etar -zxvf xvidcore-1.1.3.tar.gz; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd xvidcore-1.1.3/build/generic; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e./configure --prefix\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/usr; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake install; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd ../../../;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInstall \u003ca href=\"https://web.archive.org/web/20080628235605/http://www.penguin.cz/~utx/amr\"\u003eAMR/3GPP\u003c/a\u003e.\u003c/strong\u003e Download the latest version of AMR (Currently 7.0.0.1). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ewget http://ftp.penguin.cz/pub/users/utx/amr/amrnb-7.0.0.1.tar.bz2; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003etar -jxvf amrnb-7.0.0.1.tar.bz2; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd amrnb-7.0.0.1; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e./configure --prefix\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/usr; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake install; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd ../;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eCompile FFMPEG.\u003c/strong\u003e Configure, make, and install the software, including all options that enable enhanced functionality.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e./configure \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --prefix\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/usr \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-static \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-gpl \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-nonfree \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-postproc \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-avfilter \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-avfilter-lavf \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-liba52 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-liba52bin \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-libamr-nb \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-libfaac \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-libfaad \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-libfaadbin \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-libgsm \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-libmp3lame \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-libtheora \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-libvorbis \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-libx264 \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e    --enable-libxvid \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e;\n\nmake; make install;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"installing-ffmpeg-php\"\u003eInstalling FFMPEG-PHP\u003c/h2\u003e\n\u003cp\u003eOnce you have FFMPEG functioning properly, you can install the FFMPEG-PHP extension.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eDownload and install FFMPEG-PHP source. Enter the directory, download the source, run phpize, configure, make, install, and go back to the parent directory.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecd /ffmpeg-trunk-source; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ewget http://downloads.sourceforge.net/ffmpeg-php/ffmpeg-php-0.5.3.1.tbz2; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003etar -jxvf ffmpeg-php-0.5.3.1.tbz2; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd ffmpeg-php-0.5.3.1; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ephpize; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003e./configure --prefix\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e/usr; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003emake install; \u003cspan style=\"color:#ae81ff\"\u003e\\\n\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e\u003c/span\u003ecd ..;\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAdd FFMPEG-PHP to the PHP configuration.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eecho \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;extension=ffmpeg.so\u0026#34;\u003c/span\u003e \u0026gt; /www-config/php-ini/ffmpeg.ini\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eRestart Apache.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e/www-config/httpd restart\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"all-done\"\u003eAll done!\u003c/h2\u003e\n\u003cp\u003eFFMPEG and FFMPEG-PHP should now be installed and ready to go. Make sure to check your error log if something isn’t working properly.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ecat /www-config/logs/error_log\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e",
        "plain":"I’ve spent a bit of time working with Amazon EC2 recently. One of the things I’ve been working on is getting a stable build of FFMPEG and FFMPEG-PHP running on a Fedora 8 image in Amazon EC2. This is essentially going to be a tutorial to get things up and running. Of course, your milage may vary.\nThese instructions apply to a 32-bit Fedora 8 installation. The hardware I primarily use happens to be on EC2, but these instructions aren’t specific to EC2. You may need to tweak things a smidge for an x64 system.\nPreparing the LAMP stack (and a few other things) For FFMPEG-PHP to work, you need to have a web server with PHP support up and running. You’ll definitely need GD for image processing and mbstring is helpful in conjunction with PHP5’s built-in iconv support for managing multiple character sets in ID3 tags.\n  Install PHP, necessary extensions and supporting software.\nyum -y install \\  php-devel \\  php-gd \\  php-mbstring \\  gcc \\  gcc-c++ \\  libtool \\  svn \\  git \\  yasm \\  gsm-devel \\  libogg-devel \\  libvorbis-devel \\  libtheora-devel \\ ;   Also, I like to create a directory with symlinks to important files so that I can access everything more efficiently. These will be used throughout this tutorial.\nmkdir /www-config; \\ ln -s /etc/init.d/httpd /www-config/httpd; \\ ln -s /etc/httpd/conf/httpd.conf /www-config/httpd.conf; \\ ln -s /var/log/httpd/ /www-config/logs; \\ ln -s /usr/lib/php/modules/ /www-config/php5-extensions; \\ ln -s /etc/httpd/conf.d/php.conf /www-config/php.conf; \\ ln -s /etc/httpd/conf.d/ /www-config/apache-conf; \\ ln -s /etc/php.ini /www-config/php.ini; \\ ln -s /etc/php.d/ /www-config/php-ini; \\ ln -s /var/www/html/ /www-config/public-html; \\ /www-config/httpd restart;   PHP 5.x should now be installed and you should have a directory prepared that lets you easily access important files for managing your configuration.\nInstalling FFMPEG FFMPEG can be fairly complicated to get running properly, so here’s what I’ve gotten working thus far.\n  Download FFMPEG source. Export the latest FFMPEG trunk from Subversion, then change to the source directory.\nsvn export svn://svn.mplayerhq.hu/ffmpeg/trunk /ffmpeg-trunk-source; \\ cd /ffmpeg-trunk-source;   Install x264. Export the latest x264 trunk from Git. Enter the directory, make, install, and go back to the parent directory.\ngit clone git://git.videolan.org/x264.git; \\ cd x264; \\ ./configure --prefix=/usr --enable-shared --enable-pthread; \\ make; \\ make install; \\ cd ..;   Install liba52. Download the latest version of liba52 (Currently 0.7.4). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\nwget http://liba52.sourceforge.net/files/a52dec-0.7.4.tar.gz; \\ tar -zxvf a52dec-0.7.4.tar.gz; \\ cd a52dec-0.7.4; \\ ./configure --prefix=/usr --enable-double; \\ make; \\ make install; \\ cd ..;   Install FAAC. Download the latest version of FAAC (Currently 1.26). Decompress the package, enter the directory, create the configure file, run configure, make, install, and go back to the parent directory.\nwget http://downloads.sourceforge.net/faac/faac-1.26.tar.gz; \\ tar -zxvf faac-1.26.tar.gz; \\ cd faac; \\ autoreconf -vif; \\ ./configure --prefix=/usr; \\ make; \\ make install; \\ cd ..;   Install FAAD. Download the latest version of FAAD (Currently 2.6.1). Decompress the package, enter the directory, create the configure file, run configure, make, install, and go back to the parent directory.\nwget http://downloads.sourceforge.net/faac/faad2-2.6.1.tar.gz; \\ tar -zxvf faad2-2.6.1.tar.gz; \\ cd faad2; \\ autoreconf -vif; \\ ./configure --prefix=/usr; \\ make; \\ make install; \\ cd ..;   Install LAME. Download the latest version of LAME (Currently 3.98b8). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\nwget http://downloads.sourceforge.net/lame/lame-3.98b8.tar.gz; \\ tar -zxvf lame-3.98b8.tar.gz; \\ cd lame-3.98b8; \\ ./configure --prefix=/usr; \\ make; \\ make install; \\ cd ..;   Install libmpeg2. Download the latest version of libmpeg2 (Currently 0.4.1). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\nwget http://libmpeg2.sourceforge.net/files/mpeg2dec-0.4.1.tar.gz; \\ tar -zxvf mpeg2dec-0.4.1.tar.gz; \\ cd mpeg2dec-0.4.1; \\ ./configure --prefix=/usr; \\ make; \\ make install; \\ cd ..;   Install Xvid. Download the latest version of Xvid (Currently 1.1.3). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\nwget http://downloads.xvid.org/downloads/xvidcore-1.1.3.tar.gz; \\ tar -zxvf xvidcore-1.1.3.tar.gz; \\ cd xvidcore-1.1.3/build/generic; \\ ./configure --prefix=/usr; \\ make; \\ make install; \\ cd ../../../;   Install AMR/3GPP. Download the latest version of AMR (Currently 7.0.0.1). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\nwget http://ftp.penguin.cz/pub/users/utx/amr/amrnb-7.0.0.1.tar.bz2; \\ tar -jxvf amrnb-7.0.0.1.tar.bz2; \\ cd amrnb-7.0.0.1; \\ ./configure --prefix=/usr; \\ make; \\ make install; \\ cd ../;   Compile FFMPEG. Configure, make, and install the software, including all options that enable enhanced functionality.\n./configure \\  --prefix=/usr \\  --enable-static \\  --enable-gpl \\  --enable-nonfree \\  --enable-postproc \\  --enable-avfilter \\  --enable-avfilter-lavf \\  --enable-liba52 \\  --enable-liba52bin \\  --enable-libamr-nb \\  --enable-libfaac \\  --enable-libfaad \\  --enable-libfaadbin \\  --enable-libgsm \\  --enable-libmp3lame \\  --enable-libtheora \\  --enable-libvorbis \\  --enable-libx264 \\  --enable-libxvid \\ ; make; make install;   Installing FFMPEG-PHP Once you have FFMPEG functioning properly, you can install the FFMPEG-PHP extension.\n  Download and install FFMPEG-PHP source. Enter the directory, download the source, run phpize, configure, make, install, and go back to the parent directory.\ncd /ffmpeg-trunk-source; \\ wget http://downloads.sourceforge.net/ffmpeg-php/ffmpeg-php-0.5.3.1.tbz2; \\ tar -jxvf ffmpeg-php-0.5.3.1.tbz2; \\ cd ffmpeg-php-0.5.3.1; \\ phpize; \\ ./configure --prefix=/usr; \\ make; \\ make install; \\ cd ..;   Add FFMPEG-PHP to the PHP configuration.\necho \u0026#34;extension=ffmpeg.so\u0026#34; \u0026gt; /www-config/php-ini/ffmpeg.ini   Restart Apache.\n/www-config/httpd restart   All done! FFMPEG and FFMPEG-PHP should now be installed and ready to go. Make sure to check your error log if something isn’t working properly.\ncat /www-config/logs/error_log ",
        "source":"\nI’ve spent a bit of time working with Amazon EC2 recently. One of the things I’ve been working on is getting a stable build of FFMPEG and FFMPEG-PHP running on a Fedora 8 image in Amazon EC2. This is essentially going to be a tutorial to get things up and running. Of course, your milage may vary.\n\nThese instructions apply to a 32-bit Fedora 8 installation. The hardware I primarily use happens to be on EC2, but these instructions aren’t specific to EC2. You may need to tweak things a smidge for an x64 system.\n\n## Preparing the LAMP stack (and a few other things)\n\nFor FFMPEG-PHP to work, you need to have a web server with PHP support up and running. You’ll definitely need GD for image processing and mbstring is helpful in conjunction with PHP5’s built-in iconv support for managing multiple character sets in ID3 tags.\n\n1. Install PHP, necessary extensions and supporting software.\n\n    ```bash\n    yum -y install \\\n        php-devel \\\n        php-gd \\\n        php-mbstring \\\n        gcc \\\n        gcc-c++ \\\n        libtool \\\n        svn \\\n        git \\\n        yasm \\\n        gsm-devel \\\n        libogg-devel \\\n        libvorbis-devel \\\n        libtheora-devel \\\n    ;\n    ```\n\n2. Also, I like to create a directory with symlinks to important files so that I can access everything more efficiently. These will be used throughout this tutorial.\n\n    ```bash\n    mkdir /www-config; \\\n    ln -s /etc/init.d/httpd /www-config/httpd; \\\n    ln -s /etc/httpd/conf/httpd.conf /www-config/httpd.conf; \\\n    ln -s /var/log/httpd/ /www-config/logs; \\\n    ln -s /usr/lib/php/modules/ /www-config/php5-extensions; \\\n    ln -s /etc/httpd/conf.d/php.conf /www-config/php.conf; \\\n    ln -s /etc/httpd/conf.d/ /www-config/apache-conf; \\\n    ln -s /etc/php.ini /www-config/php.ini; \\\n    ln -s /etc/php.d/ /www-config/php-ini; \\\n    ln -s /var/www/html/ /www-config/public-html; \\\n    /www-config/httpd restart;\n    ```\n\nPHP 5.x should now be installed and you should have a directory prepared that lets you easily access important files for managing your configuration.\n\n## Installing FFMPEG\n\nFFMPEG can be fairly complicated to get running properly, so here’s what I’ve gotten working thus far.\n\n1. **Download FFMPEG source.** Export the latest FFMPEG trunk from Subversion, then change to the source directory.\n\n    ```bash\n    svn export svn://svn.mplayerhq.hu/ffmpeg/trunk /ffmpeg-trunk-source; \\\n    cd /ffmpeg-trunk-source;\n    ```\n\n2. **Install [x264]({{% wayback \"http://www.videolan.org/developers/x264.html\" %}}).** Export the latest x264 trunk from Git. Enter the directory, make, install, and go back to the parent directory.\n\n    ```bash\n    git clone git://git.videolan.org/x264.git; \\\n    cd x264; \\\n    ./configure --prefix=/usr --enable-shared --enable-pthread; \\\n    make; \\\n    make install; \\\n    cd ..;\n    ```\n\n3. **Install [liba52]({{% wayback \"http://liba52.sourceforge.net/\" %}}).** Download the latest version of liba52 (Currently 0.7.4). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\n\n    ```bash\n    wget http://liba52.sourceforge.net/files/a52dec-0.7.4.tar.gz; \\\n    tar -zxvf a52dec-0.7.4.tar.gz; \\\n    cd a52dec-0.7.4; \\\n    ./configure --prefix=/usr --enable-double; \\\n    make; \\\n    make install; \\\n    cd ..;\n    ```\n\n4. **Install [FAAC]({{% wayback \"http://www.audiocoding.com/\" %}}).** Download the latest version of FAAC (Currently 1.26). Decompress the package, enter the directory, create the configure file, run configure, make, install, and go back to the parent directory.\n\n    ```bash\n    wget http://downloads.sourceforge.net/faac/faac-1.26.tar.gz; \\\n    tar -zxvf faac-1.26.tar.gz; \\\n    cd faac; \\\n    autoreconf -vif; \\\n    ./configure --prefix=/usr; \\\n    make; \\\n    make install; \\\n    cd ..;\n    ```\n\n5. **Install [FAAD]({{% wayback \"http://www.audiocoding.com/\" %}}).** Download the latest version of FAAD (Currently 2.6.1). Decompress the package, enter the directory, create the configure file, run configure, make, install, and go back to the parent directory.\n\n    ```bash\n    wget http://downloads.sourceforge.net/faac/faad2-2.6.1.tar.gz; \\\n    tar -zxvf faad2-2.6.1.tar.gz; \\\n    cd faad2; \\\n    autoreconf -vif; \\\n    ./configure --prefix=/usr; \\\n    make; \\\n    make install; \\\n    cd ..;\n    ```\n\n6. **Install [LAME]({{% wayback \"http://lame.sourceforge.net/\" %}}).** Download the latest version of LAME (Currently 3.98b8). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\n\n    ```bash\n    wget http://downloads.sourceforge.net/lame/lame-3.98b8.tar.gz; \\\n    tar -zxvf lame-3.98b8.tar.gz; \\\n    cd lame-3.98b8; \\\n    ./configure --prefix=/usr; \\\n    make; \\\n    make install; \\\n    cd ..;\n    ```\n\n7. **Install [libmpeg2]({{% wayback \"http://libmpeg2.sourceforge.net/\" %}}).** Download the latest version of libmpeg2 (Currently 0.4.1). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\n\n    ```bash\n    wget http://libmpeg2.sourceforge.net/files/mpeg2dec-0.4.1.tar.gz; \\\n    tar -zxvf mpeg2dec-0.4.1.tar.gz; \\\n    cd mpeg2dec-0.4.1; \\\n    ./configure --prefix=/usr; \\\n    make; \\\n    make install; \\\n    cd ..;\n    ```\n\n8. **Install [Xvid]({{% wayback \"http://xvid.org/\" %}}).** Download the latest version of Xvid (Currently 1.1.3). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\n\n    ```bash\n    wget http://downloads.xvid.org/downloads/xvidcore-1.1.3.tar.gz; \\\n    tar -zxvf xvidcore-1.1.3.tar.gz; \\\n    cd xvidcore-1.1.3/build/generic; \\\n    ./configure --prefix=/usr; \\\n    make; \\\n    make install; \\\n    cd ../../../;\n    ```\n\n9. **Install [AMR/3GPP]({{% wayback \"http://www.penguin.cz/~utx/amr\" %}}).** Download the latest version of AMR (Currently 7.0.0.1). Decompress the package, enter the directory, run configure, make, install, and go back to the parent directory.\n\n    ```bash\n    wget http://ftp.penguin.cz/pub/users/utx/amr/amrnb-7.0.0.1.tar.bz2; \\\n    tar -jxvf amrnb-7.0.0.1.tar.bz2; \\\n    cd amrnb-7.0.0.1; \\\n    ./configure --prefix=/usr; \\\n    make; \\\n    make install; \\\n    cd ../;\n    ```\n\n10. **Compile FFMPEG.** Configure, make, and install the software, including all options that enable enhanced functionality.\n\n    ```bash\n    ./configure \\\n        --prefix=/usr \\\n        --enable-static \\\n        --enable-gpl \\\n        --enable-nonfree \\\n        --enable-postproc \\\n        --enable-avfilter \\\n        --enable-avfilter-lavf \\\n        --enable-liba52 \\\n        --enable-liba52bin \\\n        --enable-libamr-nb \\\n        --enable-libfaac \\\n        --enable-libfaad \\\n        --enable-libfaadbin \\\n        --enable-libgsm \\\n        --enable-libmp3lame \\\n        --enable-libtheora \\\n        --enable-libvorbis \\\n        --enable-libx264 \\\n        --enable-libxvid \\\n    ;\n\n    make; make install;\n    ```\n\n## Installing FFMPEG-PHP\n\nOnce you have FFMPEG functioning properly, you can install the FFMPEG-PHP extension.\n\n1. Download and install FFMPEG-PHP source. Enter the directory, download the source, run phpize, configure, make, install, and go back to the parent directory.\n\n    ```bash\n    cd /ffmpeg-trunk-source; \\\n    wget http://downloads.sourceforge.net/ffmpeg-php/ffmpeg-php-0.5.3.1.tbz2; \\\n    tar -jxvf ffmpeg-php-0.5.3.1.tbz2; \\\n    cd ffmpeg-php-0.5.3.1; \\\n    phpize; \\\n    ./configure --prefix=/usr; \\\n    make; \\\n    make install; \\\n    cd ..;\n    ```\n\n2. Add FFMPEG-PHP to the PHP configuration.\n\n    ```bash\n    echo \"extension=ffmpeg.so\" \u003e /www-config/php-ini/ffmpeg.ini\n    ```\n\n3. Restart Apache.\n\n    ```bash\n    /www-config/httpd restart\n    ```\n\n## All done!\n\nFFMPEG and FFMPEG-PHP should now be installed and ready to go. Make sure to check your error log if something isn’t working properly.\n\n```bash\ncat /www-config/logs/error_log\n```\n"},
    "links": {
        "prev": {"title": "Yahoo! Messenger redesign is live!", "permalink": "https://ryanparman.com/posts/2008/yahoo-messenger-redesign-is-live/"},
        "next": {"title": "Visiting Chicago", "permalink": "https://ryanparman.com/posts/2008/visiting-chicago/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Yahoo! Messenger redesign is live!",
    "description": "",
    "summary": {
        "content": "Internally known as “Aurora,” the new Yahoo! Messenger redesign has finally launched! I was going to write something up about it, but Ryan Doherty and Adrien Cahen have all written plenty. Check it out! :) Also, Digg it!",
        "isTruncated": false
    },
    "published": "2008-05-12T05:48:59Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2008/yahoo-messenger-redesign-is-live/",
    "relativePermalink": "/posts/2008/yahoo-messenger-redesign-is-live/",
    "aliases": ["/2008/05/11/yahoo-messenger-redesign-is-live/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 38,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2008/20080512-yahoo-messenger-redesign-is-live.md",
        "logicalName": "20080512-yahoo-messenger-redesign-is-live.md",
        "translationBaseName": "20080512-yahoo-messenger-redesign-is-live",
        "baseFileName": "20080512-yahoo-messenger-redesign-is-live",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2008/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eInternally known as “Aurora,” the new \u003ca href=\"https://web.archive.org/web/20080512054859/http://messenger.yahoo.com\"\u003eYahoo! Messenger\u003c/a\u003e redesign has finally launched! I was going to write something up about it, but \u003ca href=\"https://web.archive.org/web/20080512054859/http://www.ryandoherty.net/2008/05/10/yahoo-messenger-website-redesign/\"\u003eRyan Doherty\u003c/a\u003e and \u003ca href=\"https://web.archive.org/web/20080512054859/http://gaarf.info/2008/05/06/aurora-lives/\"\u003eAdrien Cahen\u003c/a\u003e have all written plenty. Check it out! :) Also, \u003ca href=\"https://web.archive.org/web/20080512054859/http://digg.com/tech_news/New_Yahoo_Messenger_website_is_LIVE\"\u003eDigg it!\u003c/a\u003e\u003c/p\u003e\n",
        "plain":"Internally known as “Aurora,” the new Yahoo! Messenger redesign has finally launched! I was going to write something up about it, but Ryan Doherty and Adrien Cahen have all written plenty. Check it out! :) Also, Digg it!\n",
        "source":"\nInternally known as “Aurora,” the new [Yahoo! Messenger]({{% wayback \"http://messenger.yahoo.com\" %}}) redesign has finally launched! I was going to write something up about it, but [Ryan Doherty]({{% wayback \"http://www.ryandoherty.net/2008/05/10/yahoo-messenger-website-redesign/\" %}}) and [Adrien Cahen]({{% wayback \"http://gaarf.info/2008/05/06/aurora-lives/\" %}}) have all written plenty. Check it out! :) Also, [Digg it!]({{% wayback \"http://digg.com/tech_news/New_Yahoo_Messenger_website_is_LIVE\" %}})\n"},
    "links": {
        "prev": {"title": "My thoughts on Twitter", "permalink": "https://ryanparman.com/posts/2008/my-thoughts-on-twitter/"},
        "next": {"title": "Installing FFMPEG and FFMPEG-PHP in Fedora 8 running on Amazon EC2", "permalink": "https://ryanparman.com/posts/2008/installing-ffmpeg-php-fedora-amazon-aws/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "SimplePie Plugin for Wordpress",
    "description": "",
    "summary": {
        "content": "When we launched SimplePie Beta 2 last week, we launched with a couple of plugins. The first is a SimplePie Plugin for Wordpress, the ever-popular blogging tool from the fine folks at automattic. This plugin adds a single function to your Wordpress function ensemble that makes it simple to add SimplePie to your Wordpress templates. The other was the SimplePie Plugin for MediaWiki, the wiki software that powers the popular Wikipedia, by adding support for the \u0026lt;feed\u0026gt; tag in your wiki pages.",
        "isTruncated": true
    },
    "published": "2006-06-07T16:50:24Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2006/simplepie-plugin-for-wordpress/",
    "relativePermalink": "/posts/2006/simplepie-plugin-for-wordpress/",
    "aliases": ["/2006/06/07/simplepie-plugin-for-wordpress/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 99,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2006/20060607-simplepie-plugin-for-wordpress.md",
        "logicalName": "20060607-simplepie-plugin-for-wordpress.md",
        "translationBaseName": "20060607-simplepie-plugin-for-wordpress",
        "baseFileName": "20060607-simplepie-plugin-for-wordpress",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2006/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eWhen we launched SimplePie Beta 2 last week, we launched with a couple of plugins. The first is a SimplePie Plugin for Wordpress, the ever-popular blogging tool from the fine folks at automattic. This plugin adds a single function to your Wordpress function ensemble that makes it simple to add SimplePie to your Wordpress templates. The other was the SimplePie Plugin for MediaWiki, the wiki software that powers the popular Wikipedia, by adding support for the \u003ccode\u003e\u0026lt;feed\u0026gt;\u003c/code\u003e tag in your wiki pages. If you’re using either of these software packages, check out these plugins!\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://web.archive.org/web/20060607165024/http://simplepie.org/docs/installation/wordpress/\"\u003eread more\u003c/a\u003e | \u003ca href=\"https://web.archive.org/web/20060607165024/http://digg.com/software/SimplePie_Plugin_for_Wordpress\"\u003edigg story\u003c/a\u003e\u003c/p\u003e\n",
        "plain":"When we launched SimplePie Beta 2 last week, we launched with a couple of plugins. The first is a SimplePie Plugin for Wordpress, the ever-popular blogging tool from the fine folks at automattic. This plugin adds a single function to your Wordpress function ensemble that makes it simple to add SimplePie to your Wordpress templates. The other was the SimplePie Plugin for MediaWiki, the wiki software that powers the popular Wikipedia, by adding support for the \u0026lt;feed\u0026gt; tag in your wiki pages. If you’re using either of these software packages, check out these plugins!\nread more | digg story\n",
        "source":"\nWhen we launched SimplePie Beta 2 last week, we launched with a couple of plugins. The first is a SimplePie Plugin for Wordpress, the ever-popular blogging tool from the fine folks at automattic. This plugin adds a single function to your Wordpress function ensemble that makes it simple to add SimplePie to your Wordpress templates. The other was the SimplePie Plugin for MediaWiki, the wiki software that powers the popular Wikipedia, by adding support for the `\u003cfeed\u003e` tag in your wiki pages. If you’re using either of these software packages, check out these plugins!\n\n[read more]({{% wayback \"http://simplepie.org/docs/installation/wordpress/\" %}}) | [digg story]({{% wayback \"http://digg.com/software/SimplePie_Plugin_for_Wordpress\" %}})\n"},
    "links": {
        "prev": {"title": "SimplePie Beta 2 is now available!", "permalink": "https://ryanparman.com/posts/2006/simplepie-beta-2-is-now-available/"},
        "next": {"title": "Google Toolbar Awesomeness!", "permalink": "https://ryanparman.com/posts/2006/google-toolbar-awesomeness/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "SimplePie Beta 2 is now available!",
    "description": "",
    "summary": {
        "content": "After several months of toiling over this release, and the past few weekends pouring over the documentation, we are now very proud to release SimplePie Beta 2! Nearly every major feature has been enhanced, as well as the addition of several new ones. Be sure to read the upgrade docs if you’re upgrading from Beta 1 or the Preview Release. People who were using trunk builds should be able to just drop this file in as a replacement for any previous simplepie.",
        "isTruncated": true
    },
    "published": "2006-06-03T07:56:50Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2006/simplepie-beta-2-is-now-available/",
    "relativePermalink": "/posts/2006/simplepie-beta-2-is-now-available/",
    "aliases": ["/2006/06/02/simplepie-beta-2-is-now-available/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 124,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2006/20060603-simplepie-beta-2-is-now-available.md",
        "logicalName": "20060603-simplepie-beta-2-is-now-available.md",
        "translationBaseName": "20060603-simplepie-beta-2-is-now-available",
        "baseFileName": "20060603-simplepie-beta-2-is-now-available",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2006/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eAfter several months of toiling over this release, and the past few weekends pouring over the documentation, we are now very proud to release \u003cstrong\u003eSimplePie Beta 2!\u003c/strong\u003e\u003c/p\u003e\n\u003cp\u003eNearly every major feature has been enhanced, as well as the addition of several new ones. Be sure to read the \u003ca href=\"https://web.archive.org/web/20060603075650/http://simplepie.org/docs/upgrade/\"\u003eupgrade docs\u003c/a\u003e if you’re upgrading from Beta 1 or the Preview Release. People who were using trunk builds should be able to just drop this file in as a replacement for any previous \u003ccode\u003esimplepie.inc\u003c/code\u003e file.\u003c/p\u003e\n\u003cp\u003eWe’ve also added a \u003ca href=\"https://web.archive.org/web/20060603075650/http://simplepie.org/docs/installation/wordpress/\"\u003eWordpress plugin\u003c/a\u003e and a \u003ca href=\"https://web.archive.org/web/20060603075650/http://simplepie.org/docs/installation/mediawiki/\"\u003eMediaWiki extension\u003c/a\u003e to the mix. And as always, if you have any questions, comments, or need clarification on anything, be sure to swing by the \u003ca href=\"https://web.archive.org/web/20060603075650/http://simplepie.org/support/\"\u003esupport forums\u003c/a\u003e. We’re there a lot. :) Enjoy!\u003c/p\u003e\n",
        "plain":"After several months of toiling over this release, and the past few weekends pouring over the documentation, we are now very proud to release SimplePie Beta 2!\nNearly every major feature has been enhanced, as well as the addition of several new ones. Be sure to read the upgrade docs if you’re upgrading from Beta 1 or the Preview Release. People who were using trunk builds should be able to just drop this file in as a replacement for any previous simplepie.inc file.\nWe’ve also added a Wordpress plugin and a MediaWiki extension to the mix. And as always, if you have any questions, comments, or need clarification on anything, be sure to swing by the support forums. We’re there a lot. :) Enjoy!\n",
        "source":"\nAfter several months of toiling over this release, and the past few weekends pouring over the documentation, we are now very proud to release **SimplePie Beta 2!**\n\nNearly every major feature has been enhanced, as well as the addition of several new ones. Be sure to read the [upgrade docs]({{% wayback \"http://simplepie.org/docs/upgrade/\" %}}) if you’re upgrading from Beta 1 or the Preview Release. People who were using trunk builds should be able to just drop this file in as a replacement for any previous `simplepie.inc` file.\n\nWe’ve also added a [Wordpress plugin]({{% wayback \"http://simplepie.org/docs/installation/wordpress/\" %}}) and a [MediaWiki extension]({{% wayback \"http://simplepie.org/docs/installation/mediawiki/\" %}}) to the mix. And as always, if you have any questions, comments, or need clarification on anything, be sure to swing by the [support forums]({{% wayback \"http://simplepie.org/support/\" %}}). We’re there a lot. :) Enjoy!\n"},
    "links": {
        "prev": {"title": "The proper way to blow your nose", "permalink": "https://ryanparman.com/posts/2006/the-proper-way-to-blow-your-nose/"},
        "next": {"title": "SimplePie Plugin for Wordpress", "permalink": "https://ryanparman.com/posts/2006/simplepie-plugin-for-wordpress/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "We need your feeds!",
    "description": "",
    "summary": {
        "content": "RSS and Atom feeds that aren’t either UTF–8 or ISO–8859–1 have proven difficult to find, so I’m calling out to all of you. If you read or publish feeds that are in a character set other than these two, please post them here in the comments. We’ve just finished adding iconv support to SimplePie, and want to test that support (it’s in the trunk build as of this moment). Any help along these lines would be appreciated.",
        "isTruncated": false
    },
    "published": "2006-03-26T23:33:22Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2006/we-need-your-feeds/",
    "relativePermalink": "/posts/2006/we-need-your-feeds/",
    "aliases": ["/2006/03/26/we-need-your-feeds/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 77,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2006/20060326-we-need-your-feeds.md",
        "logicalName": "20060326-we-need-your-feeds.md",
        "translationBaseName": "20060326-we-need-your-feeds",
        "baseFileName": "20060326-we-need-your-feeds",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2006/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eRSS and Atom feeds that aren’t either UTF–8 or ISO–8859–1 have proven difficult to find, so I’m calling out to all of you. If you read or publish feeds that are in a character set other than these two, please post them here in the comments. We’ve just finished adding \u003ccode\u003eiconv\u003c/code\u003e support to SimplePie, and want to test that support (it’s in the trunk build as of this moment). Any help along these lines would be appreciated.\u003c/p\u003e\n",
        "plain":"RSS and Atom feeds that aren’t either UTF–8 or ISO–8859–1 have proven difficult to find, so I’m calling out to all of you. If you read or publish feeds that are in a character set other than these two, please post them here in the comments. We’ve just finished adding iconv support to SimplePie, and want to test that support (it’s in the trunk build as of this moment). Any help along these lines would be appreciated.\n",
        "source":"\nRSS and Atom feeds that aren’t either UTF–8 or ISO–8859–1 have proven difficult to find, so I’m calling out to all of you. If you read or publish feeds that are in a character set other than these two, please post them here in the comments. We’ve just finished adding `iconv` support to SimplePie, and want to test that support (it’s in the trunk build as of this moment). Any help along these lines would be appreciated.\n"},
    "links": {
        "prev": {"title": "Vasecto-who?", "permalink": "https://ryanparman.com/posts/2006/vasecto-who/"},
        "next": {"title": "Movie Makers Just Don't Get It", "permalink": "https://ryanparman.com/posts/2006/movie-makers-just-dont-get-it/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "TinyMCE Issue",
    "description": "",
    "summary": {
        "content": "I had a problem with TinyMCE initializing on a new page today. After about 10 seconds of Googling, I had my answer: If you’re using both libraries, TinyMCE needs to be loaded before Scriptaculous. Thought I’d pass this little nugget along from one front-end developer to another. In completely unrelated news, I really need to fix up skyzyx.com don’t I? Yeah, it’s in bad shape. *Adds it to the list.* I finally have a strategy for it… I just need to execute that strategy.",
        "isTruncated": true
    },
    "published": "2006-03-13T19:27:04Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2006/tinymce-issue/",
    "relativePermalink": "/posts/2006/tinymce-issue/",
    "aliases": ["/2006/03/13/tinymce-issue/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 87,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2006/20060313-tinymce-issue.md",
        "logicalName": "20060313-tinymce-issue.md",
        "translationBaseName": "20060313-tinymce-issue",
        "baseFileName": "20060313-tinymce-issue",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2006/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI had a problem with \u003ca href=\"https://web.archive.org/web/20060313192704/http://tinymce.moxiecode.com\"\u003eTinyMCE\u003c/a\u003e initializing on a new page today. After about 10 seconds of Googling, I had my answer: If you’re using both libraries, \u003ca href=\"https://web.archive.org/web/20060313192704/http://www.systemmobile.com/wp/?p=184\"\u003eTinyMCE needs to be loaded before Scriptaculous\u003c/a\u003e. Thought I’d pass this little nugget along from one front-end developer to another. In completely unrelated news, I really need to fix up \u003ca href=\"https://web.archive.org/web/20060313192704/http://skyzyx.com\"\u003eskyzyx.com\u003c/a\u003e don’t I? Yeah, it’s in bad shape. *Adds it to the list.* I finally have a strategy for it… I just need to execute that strategy. Maybe next weekend…\u003c/p\u003e\n",
        "plain":"I had a problem with TinyMCE initializing on a new page today. After about 10 seconds of Googling, I had my answer: If you’re using both libraries, TinyMCE needs to be loaded before Scriptaculous. Thought I’d pass this little nugget along from one front-end developer to another. In completely unrelated news, I really need to fix up skyzyx.com don’t I? Yeah, it’s in bad shape. *Adds it to the list.* I finally have a strategy for it… I just need to execute that strategy. Maybe next weekend…\n",
        "source":"\nI had a problem with [TinyMCE]({{% wayback \"http://tinymce.moxiecode.com\" %}}) initializing on a new page today. After about 10 seconds of Googling, I had my answer: If you’re using both libraries, [TinyMCE needs to be loaded before Scriptaculous]({{% wayback \"http://www.systemmobile.com/wp/?p=184\" %}}). Thought I’d pass this little nugget along from one front-end developer to another. In completely unrelated news, I really need to fix up [skyzyx.com]({{% wayback \"http://skyzyx.com\" %}}) don’t I? Yeah, it’s in bad shape. \\*Adds it to the list.\\* I finally have a strategy for it… I just need to execute that strategy. Maybe next weekend…\n"},
    "links": {
        "prev": {"title": "document.createTextNode and entities", "permalink": "https://ryanparman.com/posts/2006/document-createtextnode-and-entities/"},
        "next": {"title": "Internet Explorer 7.0 Beta 2 (Build 5335.5)", "permalink": "https://ryanparman.com/posts/2006/internet-explorer-70-beta-2-build-53355/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "document.createTextNode and entities",
    "description": "",
    "summary": {
        "content": "One problem that I’ve had when working with dynamic DOM nodes is the inability to use entities with document.createTextElement(). I’ve read suggestions about using utf–16/ucs–2 values, but how do you find them and how do you convert them? This led me on a journey to figure out how to handle this. I ended up digging through some TinyMCE source code, and found a gem of a function that I then added a ‘stupefy’ mode to. Here’s the code: function entity(str, mode) { var str = (str) ?",
        "isTruncated": true
    },
    "published": "2006-02-25T19:32:33Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2006/document-createtextnode-and-entities/",
    "relativePermalink": "/posts/2006/document-createtextnode-and-entities/",
    "aliases": ["/2006/02/25/document-createtextnode-and-entities/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 254,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2006/20060225-document-createtextnode-and-entities.md",
        "logicalName": "20060225-document-createtextnode-and-entities.md",
        "translationBaseName": "20060225-document-createtextnode-and-entities",
        "baseFileName": "20060225-document-createtextnode-and-entities",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2006/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eOne problem that I’ve had when working with dynamic DOM nodes is the inability to use entities with \u003ccode\u003edocument.createTextElement()\u003c/code\u003e. I’ve read suggestions about using utf–16/ucs–2 values, but how do you find them and how do you convert them? This led me on a journey to figure out how to handle this. I ended up digging through some \u003ca href=\"https://web.archive.org/web/20060225193233/http://tinymce.moxiecode.com/\"\u003eTinyMCE\u003c/a\u003e source code, and found a gem of a function that I then added a ‘stupefy’ mode to. Here’s the code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eentity\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e, \u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e) {\n    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#39;\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e?\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e:\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;string\u0026#39;\u003c/span\u003e;\n\n    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document.\u003cspan style=\"color:#a6e22e\"\u003ecreateElement\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;div\u0026#34;\u003c/span\u003e);\n    \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einnerHTML\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003estr\u003c/span\u003e;\n\n    \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;numeric\u0026#39;\u003c/span\u003e) {\n        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026amp;#\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einnerHTML\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003echarCodeAt\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;;\u0026#39;\u003c/span\u003e;\n    } \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003emode\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e===\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf16\u0026#39;\u003c/span\u003e) {\n        \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eun\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einnerHTML\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003echarCodeAt\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003etoString\u003c/span\u003e(\u003cspan style=\"color:#ae81ff\"\u003e16\u003c/span\u003e);\n\n        \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e (\u003cspan style=\"color:#a6e22e\"\u003eun\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e4\u003c/span\u003e) {\n            \u003cspan style=\"color:#a6e22e\"\u003eun\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;0\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eun\u003c/span\u003e;\n        }\n\n        \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\\\\u\u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eun\u003c/span\u003e;\n    }\n\n    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ee\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003einnerHTML\u003c/span\u003e;\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003ccode\u003eentity()\u003c/code\u003e has two parameters:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\u003cstrong\u003eentity:\u003c/strong\u003e is a string which can be either a named entity (») or a numeric entity (\u0026amp;#187;)\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003emode:\u003c/strong\u003e is an optional value that accepts ‘numeric’, ‘utf16’, or ‘string’. Defaults to ‘string’.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYou’d use it like this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"color:#75715e\"\u003e// Normal mode\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ediv\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document.\u003cspan style=\"color:#a6e22e\"\u003ecreateElement\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;div\u0026#39;\u003c/span\u003e);\n\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e document.\u003cspan style=\"color:#a6e22e\"\u003ecreateTextNode\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Parent \u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eentity\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;»\u0026#39;\u003c/span\u003e) \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39; Child\u0026#39;\u003c/span\u003e);\n\u003cspan style=\"color:#a6e22e\"\u003ediv\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003eappendChild\u003c/span\u003e(\u003cspan style=\"color:#a6e22e\"\u003etext\u003c/span\u003e);\n\n\u003cspan style=\"color:#75715e\"\u003e// Stupefy mode\n\u003c/span\u003e\u003cspan style=\"color:#75715e\"\u003e\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003enum\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The numeric entity for » is \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eentity\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;»\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;numeric\u0026#39;\u003c/span\u003e);\n\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eutf\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The UTF-16 entity for » is \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e+\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eentity\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;»\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;utf16\u0026#39;\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eI hope this can help other people out there who’ve run into the same problem as many times as I have!\u003c/p\u003e\n",
        "plain":"One problem that I’ve had when working with dynamic DOM nodes is the inability to use entities with document.createTextElement(). I’ve read suggestions about using utf–16/ucs–2 values, but how do you find them and how do you convert them? This led me on a journey to figure out how to handle this. I ended up digging through some TinyMCE source code, and found a gem of a function that I then added a ‘stupefy’ mode to. Here’s the code:\nfunction entity(str, mode) { var str = (str) ? str : \u0026#39;\u0026#39;; var mode = (mode) ? mode : \u0026#39;string\u0026#39;; var e = document.createElement(\u0026#34;div\u0026#34;); e.innerHTML = str; if (mode === \u0026#39;numeric\u0026#39;) { return \u0026#39;\u0026amp;#\u0026#39; + e.innerHTML.charCodeAt(0) + \u0026#39;;\u0026#39;; } else if (mode === \u0026#39;utf16\u0026#39;) { var un = e.innerHTML.charCodeAt(0).toString(16); while (un.length \u0026lt; 4) { un = \u0026#34;0\u0026#34; + un; } return \u0026#34;\\\\u\u0026#34; + un; } return e.innerHTML; } entity() has two parameters:\n entity: is a string which can be either a named entity (») or a numeric entity (\u0026amp;#187;) mode: is an optional value that accepts ‘numeric’, ‘utf16’, or ‘string’. Defaults to ‘string’.  You’d use it like this:\n// Normal mode var div = document.createElement(\u0026#39;div\u0026#39;); var text = document.createTextNode(\u0026#39;Parent \u0026#39; + entity(\u0026#39;»\u0026#39;) + \u0026#39; Child\u0026#39;); div.appendChild(text); // Stupefy mode var num = \u0026#34;The numeric entity for » is \u0026#34; + entity(\u0026#39;»\u0026#39;, \u0026#39;numeric\u0026#39;); var utf = \u0026#34;The UTF-16 entity for » is \u0026#34; + entity(\u0026#39;»\u0026#39;, \u0026#39;utf16\u0026#39;); I hope this can help other people out there who’ve run into the same problem as many times as I have!\n",
        "source":"\nOne problem that I’ve had when working with dynamic DOM nodes is the inability to use entities with `document.createTextElement()`. I’ve read suggestions about using utf–16/ucs–2 values, but how do you find them and how do you convert them? This led me on a journey to figure out how to handle this. I ended up digging through some [TinyMCE]({{% wayback \"http://tinymce.moxiecode.com/\" %}}) source code, and found a gem of a function that I then added a ‘stupefy’ mode to. Here’s the code:\n\n```javascript\nfunction entity(str, mode) {\n    var str = (str) ? str : '';\n    var mode = (mode) ? mode : 'string';\n\n    var e = document.createElement(\"div\");\n    e.innerHTML = str;\n\n    if (mode === 'numeric') {\n        return '\u0026#' + e.innerHTML.charCodeAt(0) + ';';\n    } else if (mode === 'utf16') {\n        var un = e.innerHTML.charCodeAt(0).toString(16);\n\n        while (un.length \u003c 4) {\n            un = \"0\" + un;\n        }\n\n        return \"\\\\u\" + un;\n    }\n\n    return e.innerHTML;\n}\n```\n\n`entity()` has two parameters:\n\n1. **entity:** is a string which can be either a named entity (\u0026raquo;) or a numeric entity (\u0026\\#187;)\n2. **mode:** is an optional value that accepts ‘numeric’, ‘utf16’, or ‘string’. Defaults to ‘string’.\n\nYou’d use it like this:\n\n```javascript\n// Normal mode\nvar div = document.createElement('div');\nvar text = document.createTextNode('Parent ' + entity('»') + ' Child');\ndiv.appendChild(text);\n\n// Stupefy mode\nvar num = \"The numeric entity for » is \" + entity('»', 'numeric');\nvar utf = \"The UTF-16 entity for » is \" + entity('»', 'utf16');\n```\n\nI hope this can help other people out there who’ve run into the same problem as many times as I have!\n"},
    "links": {
        "prev": {"title": "Camino has left the building", "permalink": "https://ryanparman.com/posts/2006/camino-has-left-the-building/"},
        "next": {"title": "TinyMCE Issue", "permalink": "https://ryanparman.com/posts/2006/tinymce-issue/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Awesome view-source trick for JavaScript developers",
    "description": "",
    "summary": {
        "content": "Maybe I’m a little slow, but I’ve found an awesome little trick for people who use Firefox, and who need to dynamically add elements to the page via JavaScript. I’ve been doing a lot of Ajax development lately for an internal webapp where I need to dynamically add nodes to lists. In my source code, I’ll have an empty \u0026lt;ul\u0026gt; tag with an ID, then I use that ID when I go and add \u0026lt;li\u0026gt;’s to it. No big deal, right?",
        "isTruncated": true
    },
    "published": "2006-02-15T01:15:39Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2006/awesome-view-source-trick-for-javascript-developers/",
    "relativePermalink": "/posts/2006/awesome-view-source-trick-for-javascript-developers/",
    "aliases": ["/2006/02/14/awesome-view-source-trick-for-javascript-developers/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 191,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2006/20060215-awesome-view-source-trick-for-javascript-developers.md",
        "logicalName": "20060215-awesome-view-source-trick-for-javascript-developers.md",
        "translationBaseName": "20060215-awesome-view-source-trick-for-javascript-developers",
        "baseFileName": "20060215-awesome-view-source-trick-for-javascript-developers",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2006/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eMaybe I’m a little slow, but I’ve found an awesome little trick for people who use Firefox, and who need to dynamically add elements to the page via JavaScript.\u003c/p\u003e\n\u003cp\u003eI’ve been doing a lot of Ajax development lately for an internal webapp where I need to dynamically add nodes to lists. In my source code, I’ll have an empty \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e tag with an ID, then I use that ID when I go and add \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e’s to it. No big deal, right? If you use the standard view-source contextual menu item, it will show you the source code that you coded in: the empty \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e tag. BUT, if after you’ve added your \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e nodes dynamically, you click-and-drag to select the rendered area, and choose “View Selection Source”, Firefox will show you the fully-rendered HTML for that area.\u003c/p\u003e\n\u003cp\u003eAs in, it will show you the \u003ccode\u003e\u0026lt;ul\u0026gt;\u003c/code\u003e tag with all of your \u003ccode\u003e\u0026lt;li\u0026gt;\u003c/code\u003e tags inside of it… just as though you’d coded it like that in the first place. How awesome is that? So if you need to see what HTML your JavaScript is generating, simply select the area, and choose “View Selection Source”.\u003c/p\u003e\n",
        "plain":"Maybe I’m a little slow, but I’ve found an awesome little trick for people who use Firefox, and who need to dynamically add elements to the page via JavaScript.\nI’ve been doing a lot of Ajax development lately for an internal webapp where I need to dynamically add nodes to lists. In my source code, I’ll have an empty \u0026lt;ul\u0026gt; tag with an ID, then I use that ID when I go and add \u0026lt;li\u0026gt;’s to it. No big deal, right? If you use the standard view-source contextual menu item, it will show you the source code that you coded in: the empty \u0026lt;ul\u0026gt; tag. BUT, if after you’ve added your \u0026lt;li\u0026gt; nodes dynamically, you click-and-drag to select the rendered area, and choose “View Selection Source”, Firefox will show you the fully-rendered HTML for that area.\nAs in, it will show you the \u0026lt;ul\u0026gt; tag with all of your \u0026lt;li\u0026gt; tags inside of it… just as though you’d coded it like that in the first place. How awesome is that? So if you need to see what HTML your JavaScript is generating, simply select the area, and choose “View Selection Source”.\n",
        "source":"\nMaybe I’m a little slow, but I’ve found an awesome little trick for people who use Firefox, and who need to dynamically add elements to the page via JavaScript.\n\nI’ve been doing a lot of Ajax development lately for an internal webapp where I need to dynamically add nodes to lists. In my source code, I’ll have an empty `\u003cul\u003e` tag with an ID, then I use that ID when I go and add `\u003cli\u003e`’s to it. No big deal, right? If you use the standard view-source contextual menu item, it will show you the source code that you coded in: the empty `\u003cul\u003e` tag. BUT, if after you’ve added your `\u003cli\u003e` nodes dynamically, you click-and-drag to select the rendered area, and choose “View Selection Source”, Firefox will show you the fully-rendered HTML for that area.\n\nAs in, it will show you the `\u003cul\u003e` tag with all of your `\u003cli\u003e` tags inside of it… just as though you’d coded it like that in the first place. How awesome is that? So if you need to see what HTML your JavaScript is generating, simply select the area, and choose “View Selection Source”.\n"},
    "links": {
        "prev": {"title": "Okay, some people are seriously retarded", "permalink": "https://ryanparman.com/posts/2006/okay-some-people-are-seriously-retarded/"},
        "next": {"title": "YouTube: Travis Barker - Snare Drum Solo", "permalink": "https://ryanparman.com/posts/2006/youtube-travis-barker-snare-drum-solo/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "SimplePie 1.0 Preview Release is now available!",
    "description": "",
    "summary": {
        "content": "The newest release of SimplePie is here! There is barely a single unchanged line of code in this release, as we’ve been working for months to completely overhaul the entire SimplePie engine, and we’ve added several new features while we were at it. I could sit here and go over each and every things that’s new or better or changed, but I’ve already done that. To find out more about SimplePie, and what all it can do, check out the official SimplePie website.",
        "isTruncated": true
    },
    "published": "2006-01-09T18:15:06Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2006/simplepie-10-preview-release-is-now-available/",
    "relativePermalink": "/posts/2006/simplepie-10-preview-release-is-now-available/",
    "aliases": ["/2006/01/09/simplepie-10-preview-release-is-now-available/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 83,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2006/20060109-simplepie-10-preview-release-is-now-available.md",
        "logicalName": "20060109-simplepie-10-preview-release-is-now-available.md",
        "translationBaseName": "20060109-simplepie-10-preview-release-is-now-available",
        "baseFileName": "20060109-simplepie-10-preview-release-is-now-available",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2006/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eThe newest release of SimplePie is here! There is barely a single unchanged line of code in this release, as we’ve been working for months to completely overhaul the entire SimplePie engine, and we’ve added several new features while we were at it. I could sit here and go over each and every things that’s new or better or changed, but \u003ca href=\"https://web.archive.org/web/20060109181506/http://www.simplepie.org\"\u003eI’ve already done that\u003c/a\u003e. To find out more about \u003ca href=\"https://web.archive.org/web/20060109181506/http://www.simplepie.org\"\u003eSimplePie\u003c/a\u003e, and what all it can do, check out the \u003ca href=\"https://web.archive.org/web/20060109181506/http://www.simplepie.org\"\u003eofficial SimplePie website\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"The newest release of SimplePie is here! There is barely a single unchanged line of code in this release, as we’ve been working for months to completely overhaul the entire SimplePie engine, and we’ve added several new features while we were at it. I could sit here and go over each and every things that’s new or better or changed, but I’ve already done that. To find out more about SimplePie, and what all it can do, check out the official SimplePie website.\n",
        "source":"\nThe newest release of SimplePie is here! There is barely a single unchanged line of code in this release, as we’ve been working for months to completely overhaul the entire SimplePie engine, and we’ve added several new features while we were at it. I could sit here and go over each and every things that’s new or better or changed, but [I’ve already done that]({{% wayback \"http://www.simplepie.org\" %}}). To find out more about [SimplePie]({{% wayback \"http://www.simplepie.org\" %}}), and what all it can do, check out the [official SimplePie website]({{% wayback \"http://www.simplepie.org\" %}}).\n"},
    "links": {
        "prev": {"title": "SimplePie's Triumphant Return!", "permalink": "https://ryanparman.com/posts/2006/simplepies-triumphant-return/"},
        "next": {"title": "Internet Explorer 7.0 Beta 2 Standalone is available", "permalink": "https://ryanparman.com/posts/2006/internet-explorer-70-beta-2-standalone-is-available/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "SimplePie's Triumphant Return!",
    "description": "",
    "summary": {
        "content": "It’s been a year since the last SimplePie release, but that doesn’t mean the project is dead. Fortunately I was able to get some help from Geoffers, and he actually ended up driving most of the development since he came on board over the summer. I wish I could tell you that a shiny new version 1.0 was available, but alas, not yet. What we do have, however, is a shiny new Preview Release — soon. What is SimplePie?",
        "isTruncated": true
    },
    "published": "2006-01-06T18:34:47Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2006/simplepies-triumphant-return/",
    "relativePermalink": "/posts/2006/simplepies-triumphant-return/",
    "aliases": ["/2006/01/06/simplepies-triumphant-return/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 152,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2006/20060106-simplepies-triumphant-return.md",
        "logicalName": "20060106-simplepies-triumphant-return.md",
        "translationBaseName": "20060106-simplepies-triumphant-return",
        "baseFileName": "20060106-simplepies-triumphant-return",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2006/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/wp-content/uploads/2006/01/logo_simplepie_large.webp\" alt=\"SimplePie Preview Release\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/wp-content/uploads/2006/01/logo_simplepie_large.png\" alt=\"SimplePie Preview Release\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eIt’s been a year since the last SimplePie release, but that doesn’t mean the project is dead. Fortunately I was able to get some help from \u003ca href=\"https://web.archive.org/web/20060106183447/http://geoffers.uni.cc\"\u003eGeoffers\u003c/a\u003e, and he actually ended up driving most of the development since he came on board over the summer. I wish I could tell you that a shiny new version 1.0 was available, but alas, not yet. What we do have, however, is a shiny new Preview Release — soon. What is SimplePie? Let me tell you:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eSimplePie is a very fast and easy-to-use class, written in PHP, for reading RSS and Atom syndication feeds. By keeping it simple, and focusing on what’s important, we’ve built a pretty sweet little API. SimplePie’s focus has been two-fold: speed and ease of use, and has been very successful on both fronts.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eExpect to see a new SimplePie Preview Release and a matching \u003ca href=\"https://web.archive.org/web/20060106183447/http://www.simplepie.org\"\u003ewebsite\u003c/a\u003e in the next few days.\u003c/p\u003e\n",
        "plain":"  It’s been a year since the last SimplePie release, but that doesn’t mean the project is dead. Fortunately I was able to get some help from Geoffers, and he actually ended up driving most of the development since he came on board over the summer. I wish I could tell you that a shiny new version 1.0 was available, but alas, not yet. What we do have, however, is a shiny new Preview Release — soon. What is SimplePie? Let me tell you:\n SimplePie is a very fast and easy-to-use class, written in PHP, for reading RSS and Atom syndication feeds. By keeping it simple, and focusing on what’s important, we’ve built a pretty sweet little API. SimplePie’s focus has been two-fold: speed and ease of use, and has been very successful on both fronts.\n Expect to see a new SimplePie Preview Release and a matching website in the next few days.\n",
        "source":"\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/wp-content/uploads/2006/01/logo_simplepie_large.png\" alt=\"SimplePie Preview Release\"\u003e}}\n\nIt’s been a year since the last SimplePie release, but that doesn’t mean the project is dead. Fortunately I was able to get some help from [Geoffers]({{% wayback \"http://geoffers.uni.cc\" %}}), and he actually ended up driving most of the development since he came on board over the summer. I wish I could tell you that a shiny new version 1.0 was available, but alas, not yet. What we do have, however, is a shiny new Preview Release — soon. What is SimplePie? Let me tell you:\n\n\u003e SimplePie is a very fast and easy-to-use class, written in PHP, for reading RSS and Atom syndication feeds. By keeping it simple, and focusing on what’s important, we’ve built a pretty sweet little API. SimplePie’s focus has been two-fold: speed and ease of use, and has been very successful on both fronts.\n\nExpect to see a new SimplePie Preview Release and a matching [website]({{% wayback \"http://www.simplepie.org\" %}}) in the next few days.\n"},
    "links": {
        "prev": {"title": "And the “Best Wife in the World” award goes to...", "permalink": "https://ryanparman.com/posts/2005/and-the-best-wife-in-the-world-award-goes-to/"},
        "next": {"title": "SimplePie 1.0 Preview Release is now available!", "permalink": "https://ryanparman.com/posts/2006/simplepie-10-preview-release-is-now-available/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Draggable Lists",
    "description": "",
    "summary": {
        "content": "I’ve been working a lot with Oracle Portal over the last few months. My company is in the process of moving everything over to Oracle technology, and I’m a UI designer on the Portal team. We’ve been in the midst of usability testing over the last week or so, and one thing that has been coming up is the suggestion to make the “Other Tools” list of links customizable in some way. Most implementations typically involve clicking a button or link to go to the Edit page.",
        "isTruncated": true
    },
    "published": "2005-09-13T05:32:54Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2005/draggable-lists/",
    "relativePermalink": "/posts/2005/draggable-lists/",
    "aliases": ["/2005/09/12/draggable-lists/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 305,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2005/20050913-draggable-lists.md",
        "logicalName": "20050913-draggable-lists.md",
        "translationBaseName": "20050913-draggable-lists",
        "baseFileName": "20050913-draggable-lists",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2005/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI’ve been working a lot with Oracle Portal over the last few months. My company is in the process of moving everything over to Oracle technology, and I’m a UI designer on the Portal team. We’ve been in the midst of usability testing over the last week or so, and one thing that has been coming up is the suggestion to make the “Other Tools” list of links customizable in some way.\u003c/p\u003e\n\u003cp\u003eMost implementations typically involve clicking a button or link to go to the Edit page. From there, you typically have to go through some moderately unusable process for reordering links, changing descriptions or current links, or adding new links. This may or may not include several pages and several page refreshes to get it all done the way you want it to be. Quite frankly, that sucks.\u003c/p\u003e\n\u003cp\u003eSo, I spent several hours over the weekend digging through the documentation for \u003ca href=\"https://web.archive.org/web/20050913053254/http://prototype.conio.net/\"\u003ePrototype\u003c/a\u003e and Scriptaculous in order to build a much more usable, natural, intuitive system for making these kinds of customizations. It’s not quite the same as the lists used in \u003ca href=\"https://web.archive.org/web/20050913053254/http://www.basecamphq.com\"\u003eBasecamp\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20050913053254/http://www.backpackit.com\"\u003eBackpack\u003c/a\u003e, or \u003ca href=\"https://web.archive.org/web/20050913053254/http://www.tadalist.com\"\u003eTa-Da\u003c/a\u003e lists, but these services were definitely an inspiration. \u003ca href=\"https://web.archive.org/web/20050913053254/http://downloads.skyzyx.net/Video%20Clips/Draggable%20Links.mov\"\u003eHere’s a video\u003c/a\u003e of what I’ve got so far. The video is a little tall for standard 1024x768 monitors, so you may have to size it down a smidge to see it all. QuickTime 6 or 7 should be plenty new enough to watch the video.\u003c/p\u003e\n\u003cp\u003eI’m not quite ready to release the code yet, as it’s not completely done, but once I add the few more things to it that I plan to, you can download the code and do whatever you want with it. The backend is done in PHP with text files, and shouldn’t require anything special except for a relatively modern browser (released in 2001 or later).\u003c/p\u003e\n",
        "plain":"I’ve been working a lot with Oracle Portal over the last few months. My company is in the process of moving everything over to Oracle technology, and I’m a UI designer on the Portal team. We’ve been in the midst of usability testing over the last week or so, and one thing that has been coming up is the suggestion to make the “Other Tools” list of links customizable in some way.\nMost implementations typically involve clicking a button or link to go to the Edit page. From there, you typically have to go through some moderately unusable process for reordering links, changing descriptions or current links, or adding new links. This may or may not include several pages and several page refreshes to get it all done the way you want it to be. Quite frankly, that sucks.\nSo, I spent several hours over the weekend digging through the documentation for Prototype and Scriptaculous in order to build a much more usable, natural, intuitive system for making these kinds of customizations. It’s not quite the same as the lists used in Basecamp, Backpack, or Ta-Da lists, but these services were definitely an inspiration. Here’s a video of what I’ve got so far. The video is a little tall for standard 1024x768 monitors, so you may have to size it down a smidge to see it all. QuickTime 6 or 7 should be plenty new enough to watch the video.\nI’m not quite ready to release the code yet, as it’s not completely done, but once I add the few more things to it that I plan to, you can download the code and do whatever you want with it. The backend is done in PHP with text files, and shouldn’t require anything special except for a relatively modern browser (released in 2001 or later).\n",
        "source":"\nI’ve been working a lot with Oracle Portal over the last few months. My company is in the process of moving everything over to Oracle technology, and I’m a UI designer on the Portal team. We’ve been in the midst of usability testing over the last week or so, and one thing that has been coming up is the suggestion to make the “Other Tools” list of links customizable in some way.\n\nMost implementations typically involve clicking a button or link to go to the Edit page. From there, you typically have to go through some moderately unusable process for reordering links, changing descriptions or current links, or adding new links. This may or may not include several pages and several page refreshes to get it all done the way you want it to be. Quite frankly, that sucks.\n\nSo, I spent several hours over the weekend digging through the documentation for [Prototype]({{% wayback \"http://prototype.conio.net/\" %}}) and Scriptaculous in order to build a much more usable, natural, intuitive system for making these kinds of customizations. It’s not quite the same as the lists used in [Basecamp]({{% wayback \"http://www.basecamphq.com\" %}}), [Backpack]({{% wayback \"http://www.backpackit.com\" %}}), or [Ta-Da]({{% wayback \"http://www.tadalist.com\" %}}) lists, but these services were definitely an inspiration. [Here’s a video]({{% wayback \"http://downloads.skyzyx.net/Video%20Clips/Draggable%20Links.mov\" %}}) of what I’ve got so far. The video is a little tall for standard 1024x768 monitors, so you may have to size it down a smidge to see it all. QuickTime 6 or 7 should be plenty new enough to watch the video.\n\nI’m not quite ready to release the code yet, as it’s not completely done, but once I add the few more things to it that I plan to, you can download the code and do whatever you want with it. The backend is done in PHP with text files, and shouldn’t require anything special except for a relatively modern browser (released in 2001 or later).\n"},
    "links": {
        "prev": {"title": "iCal TV Show Schedules", "permalink": "https://ryanparman.com/posts/2005/ical-tv-show-schedules/"},
        "next": {"title": "Status Icon Sets: Flat, Glass, and Shadow", "permalink": "https://ryanparman.com/posts/2005/status-icon-sets-flat-glass-and-shadow/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Tarzan Incomplete Pre-Release Nightly Beta",
    "description": "",
    "summary": {
        "content": "If you’re one of the many people clamoring about getting their hands on a Tarzan 1.2 Beta, check out the Tarzan Project Page for a link to the latest Incomplete Pre-Release Nightly Beta builds. Don’t cry if they break your computer. Have fun!",
        "isTruncated": false
    },
    "published": "2005-04-18T03:05:20Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2005/tarzan-incomplete-pre-release-nightly-beta/",
    "relativePermalink": "/posts/2005/tarzan-incomplete-pre-release-nightly-beta/",
    "aliases": ["/2005/04/17/tarzan-incomplete-pre-release-nightly-beta/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 43,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2005/20050418-tarzan-incomplete-pre-release-nightly-beta.md",
        "logicalName": "20050418-tarzan-incomplete-pre-release-nightly-beta.md",
        "translationBaseName": "20050418-tarzan-incomplete-pre-release-nightly-beta",
        "baseFileName": "20050418-tarzan-incomplete-pre-release-nightly-beta",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2005/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eIf you’re one of the many people clamoring about getting their hands on a Tarzan 1.2 Beta, check out the \u003ca href=\"/projects/tarzan/\"\u003eTarzan Project Page\u003c/a\u003e for a link to the latest Incomplete Pre-Release Nightly Beta builds. Don’t cry if they break your computer. Have fun!\u003c/p\u003e\n",
        "plain":"If you’re one of the many people clamoring about getting their hands on a Tarzan 1.2 Beta, check out the Tarzan Project Page for a link to the latest Incomplete Pre-Release Nightly Beta builds. Don’t cry if they break your computer. Have fun!\n",
        "source":"\nIf you’re one of the many people clamoring about getting their hands on a Tarzan 1.2 Beta, check out the [Tarzan Project Page](/projects/tarzan/) for a link to the latest Incomplete Pre-Release Nightly Beta builds. Don’t cry if they break your computer. Have fun!\n"},
    "links": {
        "prev": {"title": "Good News, Bad News", "permalink": "https://ryanparman.com/posts/2005/good-news-bad-news/"},
        "next": {"title": "Switching to Apple Mail/Safari", "permalink": "https://ryanparman.com/posts/2005/switching-to-apple-mailsafari/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Sneak Peek",
    "description": "",
    "summary": {
        "content": "It’s still in the works, but I thought I’d give you all a sneak peek of the new Tarzan Control Panel. Check it out: I’ve still got some things to implement, bugs to fix, design tweaks to make, and API to build, but overall the new 1.2 version of Tarzan is shaping up extemely well. I don’t like to announce timelines for personal projects (as work/professional projects have been known to take up large chunks of time, and I have to dedicate myself to those in order to pay the bills), but I can say “soon”.",
        "isTruncated": true
    },
    "published": "2005-03-31T23:38:25Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2005/sneak-peek/",
    "relativePermalink": "/posts/2005/sneak-peek/",
    "aliases": ["/2005/03/31/sneak-peek/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 155,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2005/20050331-sneak-peek.md",
        "logicalName": "20050331-sneak-peek.md",
        "translationBaseName": "20050331-sneak-peek",
        "baseFileName": "20050331-sneak-peek",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2005/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eIt’s still in the works, but I thought I’d give you all a sneak peek of the new Tarzan Control Panel. Check it out:\u003c/p\u003e\n\u003cdiv class=\"pa2-ns\"\u003e\n    \u003cpicture\u003e\u003csource type=\"image/webp\" srcset=\"https://cdn.ryanparman.com/img/tarzan_cp.webp\" alt=\"Tarzan Control Panel 1.2 Beta\" class=\"db fullimage\" decoding=\"async\"\u003e\n        \u003cimg src=\"https://cdn.ryanparman.com/img/tarzan_cp.png\" alt=\"Tarzan Control Panel 1.2 Beta\" class=\"db fullimage\" decoding=\"async\"\u003e\n    \u003c/picture\u003e\n    \u003cp class=\"f6 gray tc db\"\u003e\u003c/p\u003e\n\u003c/div\u003e\n\n\u003cp\u003eI’ve still got some things to implement, bugs to fix, design tweaks to make, and API to build, but overall the new 1.2 version of Tarzan is shaping up extemely well. I don’t like to announce timelines for \u003cem\u003epersonal projects\u003c/em\u003e (as work/professional projects have been known to take up large chunks of time, and I have to dedicate myself to those in order to pay the bills), but I can say “soon”.\u003c/p\u003e\n\u003cp\u003eI’m also hoping to put out a v1.1.1 release to address \u003ca href=\"https://web.archive.org/web/20050331233825/http://www.dreamhost.com\"\u003eDreamhost’s\u003c/a\u003e recent decision to disable the use of PHP’s \u003ccode\u003efopen()\u003c/code\u003e function for accessing data from external sites. This decision directly affects both \u003ca href=\"/projects/tarzan/\"\u003eTarzan\u003c/a\u003e and \u003ca href=\"/projects/simplepie/\"\u003eSimplePie\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eI know that this is just a visual sneak peek, and there isn’t much here for Tarzan \u003cem\u003edevelopers\u003c/em\u003e, but what do you think?\u003c/p\u003e\n",
        "plain":"It’s still in the works, but I thought I’d give you all a sneak peek of the new Tarzan Control Panel. Check it out:\n  I’ve still got some things to implement, bugs to fix, design tweaks to make, and API to build, but overall the new 1.2 version of Tarzan is shaping up extemely well. I don’t like to announce timelines for personal projects (as work/professional projects have been known to take up large chunks of time, and I have to dedicate myself to those in order to pay the bills), but I can say “soon”.\nI’m also hoping to put out a v1.1.1 release to address Dreamhost’s recent decision to disable the use of PHP’s fopen() function for accessing data from external sites. This decision directly affects both Tarzan and SimplePie.\nI know that this is just a visual sneak peek, and there isn’t much here for Tarzan developers, but what do you think?\n",
        "source":"\nIt’s still in the works, but I thought I’d give you all a sneak peek of the new Tarzan Control Panel. Check it out:\n\n{{\u003cfullimage src=\"https://cdn.ryanparman.com/img/tarzan_cp.png\" alt=\"Tarzan Control Panel 1.2 Beta\"\u003e}}\n\nI’ve still got some things to implement, bugs to fix, design tweaks to make, and API to build, but overall the new 1.2 version of Tarzan is shaping up extemely well. I don’t like to announce timelines for *personal projects* (as work/professional projects have been known to take up large chunks of time, and I have to dedicate myself to those in order to pay the bills), but I can say “soon”.\n\nI’m also hoping to put out a v1.1.1 release to address [Dreamhost’s]({{% wayback \"http://www.dreamhost.com\" %}}) recent decision to disable the use of PHP’s `fopen()` function for accessing data from external sites. This decision directly affects both [Tarzan](/projects/tarzan/) and [SimplePie](/projects/simplepie/).\n\nI know that this is just a visual sneak peek, and there isn’t much here for Tarzan *developers*, but what do you think?\n"},
    "links": {
        "prev": {"title": "What's New?", "permalink": "https://ryanparman.com/posts/2005/whats-new-3/"},
        "next": {"title": "Good News, Bad News", "permalink": "https://ryanparman.com/posts/2005/good-news-bad-news/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Tarzan 1.1 Now Available!",
    "description": "",
    "summary": {
        "content": "Tarzan 1.1 is now available. This release has so many new features, I can’t list them all. For that, you can read the release notes. There are also some minor changes for people upgrading from 1.0.x, so please look over the release notes anyways. Although there are zero API changes in this release, there are lots and lots of web interface improvements for people administering Tarzan installations. I’ve also laid the groundwork for keyword searching, which will be the primary feature of the next release.",
        "isTruncated": true
    },
    "published": "2005-03-12T10:58:53Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2005/tarzan-11-now-available/",
    "relativePermalink": "/posts/2005/tarzan-11-now-available/",
    "aliases": ["/2005/03/12/tarzan-11-now-available/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 276,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2005/20050312-tarzan-11-now-available.md",
        "logicalName": "20050312-tarzan-11-now-available.md",
        "translationBaseName": "20050312-tarzan-11-now-available",
        "baseFileName": "20050312-tarzan-11-now-available",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2005/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003e\u003ca href=\"/projects/tarzan/\"\u003eTarzan 1.1\u003c/a\u003e is now available. This release has so many new features, I can’t list them all. For that, you can read the \u003ca href=\"/projects/tarzan/\"\u003erelease notes\u003c/a\u003e. There are also some minor changes for people upgrading from 1.0.x, so please look over the release notes anyways.\u003c/p\u003e\n\u003cp\u003eAlthough there are zero API changes in this release, there are lots and lots of web interface improvements for people administering Tarzan installations. I’ve also laid the groundwork for keyword searching, which will be the primary feature of the next release.\u003c/p\u003e\n\u003cp\u003eBeyond that, here’s a short list of what’s new:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003eThe Tarzan information page has become the Tarzan Control Panel. You’ve got access to more information, and have more control over what all is going on with your Tarzan system. It now requires a login, and has been localized into English, French, German, and Japanese.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eAutomatic Update Detection for both the Tarzan software and your Tarzan Extensions. Color-coded notifiers in the Tarzan Control Panel allow you to know if updates are available just by glancing at them.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eThe lifespan of the cache is now a configurable option.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eYou can either use Tarzan’s built-in error messages, or enable error handling to handle your own Amazon errors.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eTarzan can work configuration-free for people who just want to upload and go. Even better is the new Tarzan Setup Assistant, which will import your old configuration settings (if any), ask you a few questions, then create the new configuration file automatically.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eLOTS of other changes, tweaks, and improvements.\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAs always, you can see the \u003ca href=\"/projects/tarzan/\"\u003edemo\u003c/a\u003e, view a \u003ca href=\"/wishlist/\"\u003eworking implementation\u003c/a\u003e, read the \u003ca href=\"/projects/tarzan/\"\u003erelease notes\u003c/a\u003e, ask a \u003ca href=\"https://web.archive.org/web/20050312105853/http://support.skyzyx.net/viewforum.php?f=10\"\u003equestion\u003c/a\u003e, or just get to the point and \u003ca href=\"/projects/tarzan/\"\u003edownload the software\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"Tarzan 1.1 is now available. This release has so many new features, I can’t list them all. For that, you can read the release notes. There are also some minor changes for people upgrading from 1.0.x, so please look over the release notes anyways.\nAlthough there are zero API changes in this release, there are lots and lots of web interface improvements for people administering Tarzan installations. I’ve also laid the groundwork for keyword searching, which will be the primary feature of the next release.\nBeyond that, here’s a short list of what’s new:\n  The Tarzan information page has become the Tarzan Control Panel. You’ve got access to more information, and have more control over what all is going on with your Tarzan system. It now requires a login, and has been localized into English, French, German, and Japanese.\n  Automatic Update Detection for both the Tarzan software and your Tarzan Extensions. Color-coded notifiers in the Tarzan Control Panel allow you to know if updates are available just by glancing at them.\n  The lifespan of the cache is now a configurable option.\n  You can either use Tarzan’s built-in error messages, or enable error handling to handle your own Amazon errors.\n  Tarzan can work configuration-free for people who just want to upload and go. Even better is the new Tarzan Setup Assistant, which will import your old configuration settings (if any), ask you a few questions, then create the new configuration file automatically.\n  LOTS of other changes, tweaks, and improvements.\n  As always, you can see the demo, view a working implementation, read the release notes, ask a question, or just get to the point and download the software.\n",
        "source":"\n[Tarzan 1.1](/projects/tarzan/) is now available. This release has so many new features, I can’t list them all. For that, you can read the [release notes](/projects/tarzan/). There are also some minor changes for people upgrading from 1.0.x, so please look over the release notes anyways.\n\nAlthough there are zero API changes in this release, there are lots and lots of web interface improvements for people administering Tarzan installations. I’ve also laid the groundwork for keyword searching, which will be the primary feature of the next release.\n\nBeyond that, here’s a short list of what’s new:\n\n* The Tarzan information page has become the Tarzan Control Panel. You’ve got access to more information, and have more control over what all is going on with your Tarzan system. It now requires a login, and has been localized into English, French, German, and Japanese.\n\n* Automatic Update Detection for both the Tarzan software and your Tarzan Extensions. Color-coded notifiers in the Tarzan Control Panel allow you to know if updates are available just by glancing at them.\n\n* The lifespan of the cache is now a configurable option.\n\n* You can either use Tarzan’s built-in error messages, or enable error handling to handle your own Amazon errors.\n\n* Tarzan can work configuration-free for people who just want to upload and go. Even better is the new Tarzan Setup Assistant, which will import your old configuration settings (if any), ask you a few questions, then create the new configuration file automatically.\n\n* LOTS of other changes, tweaks, and improvements.\n\nAs always, you can see the [demo](/projects/tarzan/), view a [working implementation](/wishlist/), read the [release notes](/projects/tarzan/), ask a [question]({{% wayback \"http://support.skyzyx.net/viewforum.php?f=10\" %}}), or just get to the point and [download the software](/projects/tarzan/).\n"},
    "links": {
        "prev": {"title": "Mathematical Proof That Girls Are Evil", "permalink": "https://ryanparman.com/posts/2005/mathematical-proof-that-girls-are-evil/"},
        "next": {"title": "What's New?", "permalink": "https://ryanparman.com/posts/2005/whats-new-3/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Tarzan 1.0.1 Now Available!",
    "description": "",
    "summary": {
        "content": "Tarzan 1.0.1 is now available. This is a relatively minor update where only three things were changed: I resolved some localization issues that primarily affected France, Germany, and Japan. If you’re currently localized as an english-speaking country, you probably won’t notice anything new. However, setting the character encoding for your Tarzan-enabled pages to UTF–8 is highly recommended for US, UK, and Canadian installations, and required for French, German, and Japanese installations. I also tweaked the get_rating() function to add /5 to the end of the rating (since it’s out of 5 anyways).",
        "isTruncated": true
    },
    "published": "2005-02-04T04:10:44Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2005/tarzan-101-now-available/",
    "relativePermalink": "/posts/2005/tarzan-101-now-available/",
    "aliases": ["/2005/02/03/tarzan-101-now-available/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 166,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2005/20050204-tarzan-101-now-available.md",
        "logicalName": "20050204-tarzan-101-now-available.md",
        "translationBaseName": "20050204-tarzan-101-now-available",
        "baseFileName": "20050204-tarzan-101-now-available",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2005/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003e\u003ca href=\"/projects/tarzan/\"\u003eTarzan 1.0.1\u003c/a\u003e is now available. This is a relatively minor update where only three things were changed:\u003c/p\u003e\n\u003cp\u003eI resolved some localization issues that primarily affected France, Germany, and Japan. If you’re currently localized as an english-speaking country, you probably won’t notice anything new. However, setting the character encoding for your Tarzan-enabled pages to UTF–8 is \u003cem\u003ehighly recommended\u003c/em\u003e for US, UK, and Canadian installations, and \u003cem\u003erequired\u003c/em\u003e for French, German, and Japanese installations.\u003c/p\u003e\n\u003cp\u003eI also tweaked the \u003ccode\u003eget_rating()\u003c/code\u003e function to add \u003ccode\u003e/5\u003c/code\u003e to the end of the rating (since it’s out of 5 anyways). If you’re currently adding \u003ccode\u003e/5\u003c/code\u003e or “out of 5” manually after using this function, you should remove it when you upgrade.\u003c/p\u003e\n\u003cp\u003eLastly, I made some very minor, primarily subtle cosmetic changes to the Tarzan Information Page. Mostly just tweaking the margins and padding. I also added the quantity of cached files alongside the cache file size.\u003c/p\u003e\n\u003cp\u003eAs always, you can check out a rough \u003ca href=\"/projects/tarzan/demo.php\"\u003edemo\u003c/a\u003e, ask a \u003ca href=\"https://web.archive.org/web/20050204041044/http://support.skyzyx.net/viewforum.php?f=10\"\u003equestion\u003c/a\u003e, or see a \u003ca href=\"/wishlist/\"\u003ereal live implementation\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"Tarzan 1.0.1 is now available. This is a relatively minor update where only three things were changed:\nI resolved some localization issues that primarily affected France, Germany, and Japan. If you’re currently localized as an english-speaking country, you probably won’t notice anything new. However, setting the character encoding for your Tarzan-enabled pages to UTF–8 is highly recommended for US, UK, and Canadian installations, and required for French, German, and Japanese installations.\nI also tweaked the get_rating() function to add /5 to the end of the rating (since it’s out of 5 anyways). If you’re currently adding /5 or “out of 5” manually after using this function, you should remove it when you upgrade.\nLastly, I made some very minor, primarily subtle cosmetic changes to the Tarzan Information Page. Mostly just tweaking the margins and padding. I also added the quantity of cached files alongside the cache file size.\nAs always, you can check out a rough demo, ask a question, or see a real live implementation.\n",
        "source":"\n[Tarzan 1.0.1](/projects/tarzan/) is now available. This is a relatively minor update where only three things were changed:\n\nI resolved some localization issues that primarily affected France, Germany, and Japan. If you’re currently localized as an english-speaking country, you probably won’t notice anything new. However, setting the character encoding for your Tarzan-enabled pages to UTF–8 is *highly recommended* for US, UK, and Canadian installations, and *required* for French, German, and Japanese installations.\n\nI also tweaked the `get_rating()` function to add `/5` to the end of the rating (since it’s out of 5 anyways). If you’re currently adding `/5` or “out of 5” manually after using this function, you should remove it when you upgrade.\n\nLastly, I made some very minor, primarily subtle cosmetic changes to the Tarzan Information Page. Mostly just tweaking the margins and padding. I also added the quantity of cached files alongside the cache file size.\n\nAs always, you can check out a rough [demo](/projects/tarzan/demo.php), ask a [question]({{% wayback \"http://support.skyzyx.net/viewforum.php?f=10\" %}}), or see a [real live implementation](/wishlist/).\n"},
    "links": {
        "prev": {"title": "Which Napoleon Dynamite Character Are You?", "permalink": "https://ryanparman.com/posts/2005/which-napoleon-dynamite-character-are-you/"},
        "next": {"title": "Mac OS X 10.3.8 Is Now Available!", "permalink": "https://ryanparman.com/posts/2005/mac-os-x-1038-is-now-available/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Tarzan 1.0 Is Now Available!",
    "description": "",
    "summary": {
        "content": "Tarzan 1.0 is now available! There were only a couple of minor bug fixes since RC2, so existing installations shouldn’t be affected at all. I’ve also written a custom extension for displaying my own wishlist. If you’re interested in checking it out to build off of for your own wishlists (or whatever else it might be useful for), you can get ryan_wishlist.tzx here. And although I had wanted to add search capabilities to Tarzan by 1.0, I’ve decided to build an extension for that.",
        "isTruncated": true
    },
    "published": "2005-01-31T21:15:30Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2005/tarzan-10-is-now-available/",
    "relativePermalink": "/posts/2005/tarzan-10-is-now-available/",
    "aliases": ["/2005/01/31/tarzan-10-is-now-available/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 329,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2005/20050131-tarzan-10-is-now-available.md",
        "logicalName": "20050131-tarzan-10-is-now-available.md",
        "translationBaseName": "20050131-tarzan-10-is-now-available",
        "baseFileName": "20050131-tarzan-10-is-now-available",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2005/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#tips-and-tricks\"\u003eTips and Tricks\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#resizing-images-based-on-the-size-of-a-single-side\"\u003eResizing images based on the size of a single side\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#php-running-out-of-memory\"\u003ePHP running out of memory?\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003e\u003ca href=\"/projects/tarzan/\"\u003eTarzan 1.0\u003c/a\u003e is now available! There were only a couple of minor bug fixes since RC2, so existing installations shouldn’t be affected at all.\u003c/p\u003e\n\u003cp\u003eI’ve also written a custom extension for displaying my own \u003ca href=\"/wishlist/\"\u003ewishlist\u003c/a\u003e. If you’re interested in checking it out to build off of for your own wishlists (or whatever else it might be useful for), you can get \u003ca href=\"/wishlist/extensions/ryan_wishlist.tzx\"\u003eryan_wishlist.tzx\u003c/a\u003e here.\u003c/p\u003e\n\u003cp\u003eAnd although I had wanted to add search capabilities to Tarzan by 1.0, I’ve decided to build an extension for that. I’m planning to have this extension ready by next week sometime.\u003c/p\u003e\n\u003ch2 id=\"tips-and-tricks\"\u003eTips and Tricks\u003c/h2\u003e\n\u003cp\u003eThere are a couple of tips and tricks that can be used with Tarzan. I’ll post them over to the \u003ca href=\"https://web.archive.org/web/20050131211530/http://support.skyzyx.net/viewforum.php?f=10\"\u003eTarzan Support Forum\u003c/a\u003e later on today.\u003c/p\u003e\n\u003ch2 id=\"resizing-images-based-on-the-size-of-a-single-side\"\u003eResizing images based on the size of a single side\u003c/h2\u003e\n\u003cp\u003eFor my wishlist, I’m more concerned about items being the same height, rather than the same width. How do I manage that? Setting either the width or height value to zero will allow image resizing of one sider to rely solely on the other. For example, if I wanted to set an item to a height of 90 pixels without caring how wide the image is, you could use this:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ephp\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003eecho\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget_image\u003c/span\u003e($asin, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e90\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThe first is the ASIN/ISBN number of the item. The second parameter (set to zero) tells Tarzan that you want to resize the image. The third parameter (also set to zero) is the width. Since the width is set to zero, then resizing will depend entirely on the fourth parameter, height, which is set to 90 pixels.\u003c/p\u003e\n\u003ch2 id=\"php-running-out-of-memory\"\u003ePHP running out of memory?\u003c/h2\u003e\n\u003cp\u003eSome webhosts have limits on how much memory a process can use (like the webhost for Skyzyx.com, \u003ca href=\"https://web.archive.org/web/20050131211530/http://www.ipowerweb.com\"\u003eiPowerWeb\u003c/a\u003e). In this case, the new \u003ccode\u003eclear_memory()\u003c/code\u003e function is helpful. This allows you to \u003ccode\u003eunset()\u003c/code\u003e the value of an array node, particularly the product that you just finished processing. You can read more about this function in the \u003ca href=\"/projects/tarzan/docs/documentation.htm\"\u003eTarzan Documentation\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"Tarzan 1.0 is now available! There were only a couple of minor bug fixes since RC2, so existing installations shouldn’t be affected at all.\nI’ve also written a custom extension for displaying my own wishlist. If you’re interested in checking it out to build off of for your own wishlists (or whatever else it might be useful for), you can get ryan_wishlist.tzx here.\nAnd although I had wanted to add search capabilities to Tarzan by 1.0, I’ve decided to build an extension for that. I’m planning to have this extension ready by next week sometime.\nTips and Tricks There are a couple of tips and tricks that can be used with Tarzan. I’ll post them over to the Tarzan Support Forum later on today.\nResizing images based on the size of a single side For my wishlist, I’m more concerned about items being the same height, rather than the same width. How do I manage that? Setting either the width or height value to zero will allow image resizing of one sider to rely solely on the other. For example, if I wanted to set an item to a height of 90 pixels without caring how wide the image is, you could use this:\n\u0026lt;?php echo get_image($asin, 0, 0, 90); The first is the ASIN/ISBN number of the item. The second parameter (set to zero) tells Tarzan that you want to resize the image. The third parameter (also set to zero) is the width. Since the width is set to zero, then resizing will depend entirely on the fourth parameter, height, which is set to 90 pixels.\nPHP running out of memory? Some webhosts have limits on how much memory a process can use (like the webhost for Skyzyx.com, iPowerWeb). In this case, the new clear_memory() function is helpful. This allows you to unset() the value of an array node, particularly the product that you just finished processing. You can read more about this function in the Tarzan Documentation.\n",
        "source":"\n[Tarzan 1.0](/projects/tarzan/) is now available! There were only a couple of minor bug fixes since RC2, so existing installations shouldn’t be affected at all.\n\nI’ve also written a custom extension for displaying my own [wishlist](/wishlist/). If you’re interested in checking it out to build off of for your own wishlists (or whatever else it might be useful for), you can get [ryan_wishlist.tzx](/wishlist/extensions/ryan_wishlist.tzx) here.\n\nAnd although I had wanted to add search capabilities to Tarzan by 1.0, I’ve decided to build an extension for that. I’m planning to have this extension ready by next week sometime.\n\n## Tips and Tricks\n\nThere are a couple of tips and tricks that can be used with Tarzan. I’ll post them over to the [Tarzan Support Forum]({{% wayback \"http://support.skyzyx.net/viewforum.php?f=10\" %}}) later on today.\n\n## Resizing images based on the size of a single side\n\nFor my wishlist, I’m more concerned about items being the same height, rather than the same width. How do I manage that? Setting either the width or height value to zero will allow image resizing of one sider to rely solely on the other. For example, if I wanted to set an item to a height of 90 pixels without caring how wide the image is, you could use this:\n\n```php\n\u003c?php\necho get_image($asin, 0, 0, 90);\n```\n\nThe first is the ASIN/ISBN number of the item. The second parameter (set to zero) tells Tarzan that you want to resize the image. The third parameter (also set to zero) is the width. Since the width is set to zero, then resizing will depend entirely on the fourth parameter, height, which is set to 90 pixels.\n\n## PHP running out of memory?\n\nSome webhosts have limits on how much memory a process can use (like the webhost for Skyzyx.com, [iPowerWeb]({{% wayback \"http://www.ipowerweb.com)\" %}}). In this case, the new `clear_memory()` function is helpful. This allows you to `unset()` the value of an array node, particularly the product that you just finished processing. You can read more about this function in the [Tarzan Documentation](/projects/tarzan/docs/documentation.htm).\n"},
    "links": {
        "prev": {"title": "Tarzan 1.0 RC2 Now Available!", "permalink": "https://ryanparman.com/posts/2005/tarzan-10-rc2-now-available/"},
        "next": {"title": "Which Napoleon Dynamite Character Are You?", "permalink": "https://ryanparman.com/posts/2005/which-napoleon-dynamite-character-are-you/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Tarzan 1.0 RC2 Now Available!",
    "description": "",
    "summary": {
        "content": "Tarzan 1.0 RC2 is now available for download. There are several new things in this version, including: Full support for all of Amazon’s locales (US, Canada, UK, France, Germany, and Japan), improved error handling, redesigned Tarzan info page, and a new demo page which combines the old sample.php and breakdown.php pages. All you UK’ers should now be set to go! I’ll be converting my wishlist over the next few days in an effort to flush out any remaining bugs before I declare this a 1.",
        "isTruncated": true
    },
    "published": "2005-01-27T01:50:31Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2005/tarzan-10-rc2-now-available/",
    "relativePermalink": "/posts/2005/tarzan-10-rc2-now-available/",
    "aliases": ["/2005/01/26/tarzan-10-rc2-now-available/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 89,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2005/20050127-tarzan-10-rc2-now-available.md",
        "logicalName": "20050127-tarzan-10-rc2-now-available.md",
        "translationBaseName": "20050127-tarzan-10-rc2-now-available",
        "baseFileName": "20050127-tarzan-10-rc2-now-available",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2005/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003e\u003ca href=\"/projects/tarzan/\"\u003eTarzan 1.0 RC2\u003c/a\u003e is now available for download. There are several new things in this version, including: Full support for all of Amazon’s locales (US, Canada, UK, France, Germany, and Japan), improved error handling, redesigned Tarzan info page, and a new \u003ca href=\"/projects/tarzan/demo.php\"\u003edemo page\u003c/a\u003e which combines the old \u003ccode\u003esample.php\u003c/code\u003e and \u003ccode\u003ebreakdown.php\u003c/code\u003e pages.\u003c/p\u003e\n\u003cp\u003eAll you UK’ers should now be set to go! I’ll be converting my \u003ca href=\"/wishlist/\"\u003ewishlist\u003c/a\u003e over the next few days in an effort to flush out any remaining bugs before I declare this a 1.0 final.\u003c/p\u003e\n\u003cp\u003eHave at it!\u003c/p\u003e\n",
        "plain":"Tarzan 1.0 RC2 is now available for download. There are several new things in this version, including: Full support for all of Amazon’s locales (US, Canada, UK, France, Germany, and Japan), improved error handling, redesigned Tarzan info page, and a new demo page which combines the old sample.php and breakdown.php pages.\nAll you UK’ers should now be set to go! I’ll be converting my wishlist over the next few days in an effort to flush out any remaining bugs before I declare this a 1.0 final.\nHave at it!\n",
        "source":"\n[Tarzan 1.0 RC2](/projects/tarzan/) is now available for download. There are several new things in this version, including: Full support for all of Amazon’s locales (US, Canada, UK, France, Germany, and Japan), improved error handling, redesigned Tarzan info page, and a new [demo page](/projects/tarzan/demo.php) which combines the old `sample.php` and `breakdown.php` pages.\n\nAll you UK’ers should now be set to go! I’ll be converting my [wishlist](/wishlist/) over the next few days in an effort to flush out any remaining bugs before I declare this a 1.0 final.\n\nHave at it!\n"},
    "links": {
        "prev": {"title": "Localizing Tarzan and AWS 4.0", "permalink": "https://ryanparman.com/posts/2005/localizing-tarzan-and-aws-40/"},
        "next": {"title": "Tarzan 1.0 Is Now Available!", "permalink": "https://ryanparman.com/posts/2005/tarzan-10-is-now-available/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Localizing Tarzan and AWS 4.0",
    "description": "",
    "summary": {
        "content": "The inital response to Tarzan has been very good! I got a handful of comments and several messages through my contact form about it. Overwhelmingly, people want to see Tarzan localized for their country’s version of Amazon. Initially, I started digging around to start implementing support for the UK. After a while of digging, however, I found out that I’m using an older version of the Amazon Web Services API. Fantastic. The new version (AWS 4.0) supports full localization in all of Amazon’s countries (U.",
        "isTruncated": true
    },
    "published": "2005-01-25T23:07:03Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2005/localizing-tarzan-and-aws-40/",
    "relativePermalink": "/posts/2005/localizing-tarzan-and-aws-40/",
    "aliases": ["/2005/01/25/localizing-tarzan-and-aws-40/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 315,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2005/20050125-localizing-tarzan-and-aws-40.md",
        "logicalName": "20050125-localizing-tarzan-and-aws-40.md",
        "translationBaseName": "20050125-localizing-tarzan-and-aws-40",
        "baseFileName": "20050125-localizing-tarzan-and-aws-40",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2005/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eThe inital response to Tarzan has been very good! I got a handful of comments and several messages through my contact form about it. Overwhelmingly, people want to see Tarzan localized for their country’s version of Amazon.\u003c/p\u003e\n\u003cp\u003eInitially, I started digging around to start implementing support for the UK. After a while of digging, however, I found out that I’m using an older version of the Amazon Web Services API. Fantastic. The new version (AWS 4.0) supports full localization in all of Amazon’s countries (U.S., Canada, U.K., France, Germany, and Japan).\u003c/p\u003e\n\u003cp\u003eIf I’m going to be able to stay on top of this, I’m going to need to upgrade Tarzan’s core code to support and use the newer API. It sucks that I thought I was almost done and I’m not, but this should only take me a few hours to recode now that I have Tarzan’s implementation figured out. Re-writing the necessary parts of the documentation will take a bit, and re-writing the Sample page and Breakdown Tool will take a bit of time too.\u003c/p\u003e\n\u003cp\u003eThe good news is that Tarzan 1.0 final will be compatible with all of Amazon’s countries, without any code changes on your end. Tarzan’s functions will continue to work seamlessly and upgrading to the next release candidate will not affect current installations, despite all of the code upheaval. The bad news is that parts of the extension model have changed a bit. If you’re a go-getter of a developer who has already started writing their own extensions for Tarzan, then I’m talking to you. Hold off until RC2. If you’re not an extension developer, and you don’t care about support for countries other than America, then you can ignore this entire post. If you’ve been asking me about support for the UK, France or Germany, then RC2 will be something to look forward to. Overzealous developers, just sit tight.\u003c/p\u003e\n",
        "plain":"The inital response to Tarzan has been very good! I got a handful of comments and several messages through my contact form about it. Overwhelmingly, people want to see Tarzan localized for their country’s version of Amazon.\nInitially, I started digging around to start implementing support for the UK. After a while of digging, however, I found out that I’m using an older version of the Amazon Web Services API. Fantastic. The new version (AWS 4.0) supports full localization in all of Amazon’s countries (U.S., Canada, U.K., France, Germany, and Japan).\nIf I’m going to be able to stay on top of this, I’m going to need to upgrade Tarzan’s core code to support and use the newer API. It sucks that I thought I was almost done and I’m not, but this should only take me a few hours to recode now that I have Tarzan’s implementation figured out. Re-writing the necessary parts of the documentation will take a bit, and re-writing the Sample page and Breakdown Tool will take a bit of time too.\nThe good news is that Tarzan 1.0 final will be compatible with all of Amazon’s countries, without any code changes on your end. Tarzan’s functions will continue to work seamlessly and upgrading to the next release candidate will not affect current installations, despite all of the code upheaval. The bad news is that parts of the extension model have changed a bit. If you’re a go-getter of a developer who has already started writing their own extensions for Tarzan, then I’m talking to you. Hold off until RC2. If you’re not an extension developer, and you don’t care about support for countries other than America, then you can ignore this entire post. If you’ve been asking me about support for the UK, France or Germany, then RC2 will be something to look forward to. Overzealous developers, just sit tight.\n",
        "source":"\nThe inital response to Tarzan has been very good! I got a handful of comments and several messages through my contact form about it. Overwhelmingly, people want to see Tarzan localized for their country’s version of Amazon.\n\nInitially, I started digging around to start implementing support for the UK. After a while of digging, however, I found out that I’m using an older version of the Amazon Web Services API. Fantastic. The new version (AWS 4.0) supports full localization in all of Amazon’s countries (U.S., Canada, U.K., France, Germany, and Japan).\n\nIf I’m going to be able to stay on top of this, I’m going to need to upgrade Tarzan’s core code to support and use the newer API. It sucks that I thought I was almost done and I’m not, but this should only take me a few hours to recode now that I have Tarzan’s implementation figured out. Re-writing the necessary parts of the documentation will take a bit, and re-writing the Sample page and Breakdown Tool will take a bit of time too.\n\nThe good news is that Tarzan 1.0 final will be compatible with all of Amazon’s countries, without any code changes on your end. Tarzan’s functions will continue to work seamlessly and upgrading to the next release candidate will not affect current installations, despite all of the code upheaval. The bad news is that parts of the extension model have changed a bit. If you’re a go-getter of a developer who has already started writing their own extensions for Tarzan, then I’m talking to you. Hold off until RC2. If you’re not an extension developer, and you don’t care about support for countries other than America, then you can ignore this entire post. If you’ve been asking me about support for the UK, France or Germany, then RC2 will be something to look forward to. Overzealous developers, just sit tight.\n"},
    "links": {
        "prev": {"title": "Introducing Tarzan", "permalink": "https://ryanparman.com/posts/2005/introducing-tarzan/"},
        "next": {"title": "Tarzan 1.0 RC2 Now Available!", "permalink": "https://ryanparman.com/posts/2005/tarzan-10-rc2-now-available/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Introducing Tarzan",
    "description": "",
    "summary": {
        "content": "My birthday is in November, and Christmas is in December, so the “holidays” go for about a month-and-a-half. Every year, I’d start getting these questions like “What do you want for your birthday? What do you want for Christmas?”. Of course, when you’re asked on the spot like that, you can never remember what it is that you want, and you end up like the kid from A Christmas Story telling people you want a football or something. So, a few years ago, I came up with the brilliant idea of making my wishlist available on my website somewhere.",
        "isTruncated": true
    },
    "published": "2005-01-23T16:08:47Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2005/introducing-tarzan/",
    "relativePermalink": "/posts/2005/introducing-tarzan/",
    "aliases": ["/2005/01/23/introducing-tarzan/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 481,
        "readingTime": "3 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2005/20050123-introducing-tarzan.md",
        "logicalName": "20050123-introducing-tarzan.md",
        "translationBaseName": "20050123-introducing-tarzan",
        "baseFileName": "20050123-introducing-tarzan",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2005/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#update\"\u003eUpdate\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eMy birthday is in November, and Christmas is in December, so the “holidays” go for about a month-and-a-half. Every year, I’d start getting these questions like “What do you want for your birthday? What do you want for Christmas?”. Of course, when you’re asked on the spot like that, you can never remember what it is that you want, and you end up like the kid from \u003ca href=\"https://web.archive.org/web/20050123160847/http://www.amazon.com/dp/B0000AYJUW/skyzyxcom-20/\"\u003eA Christmas Story\u003c/a\u003e telling people you want a football or something.\u003c/p\u003e\n\u003cp\u003eSo, a few years ago, I came up with the brilliant idea of making my wishlist available on my website somewhere. That way, when people asked what I wanted for Christmas or my birthday, I could just point them over to some big-ticket items on my list, and wouldn’t have to waste brain cycles on it. Great idea, huh?\u003c/p\u003e\n\u003cp\u003eWell, my website has certainly evolved over the last few years, and so has my wishlist. This past holiday saw my biggest wishlist ever with over 170 items (mostly old CD’s that are scratched and need to be re-bought). Updating and adding items was a real pain, and I figured that after the holidays I’d try to figure out a way to make it all easier.\u003c/p\u003e\n\u003cp\u003eMost of the items on my wishlist are pointing back to Amazon, and I’ve got my referral ID in there so that I also get credited on all of the purchases made from my site. I also know that Amazon makes their database information available through their Web Services program. Ideally, all I’d like to have to do is pass either the ISBN number (of a book), or the ASIN number (of most other items) to a function, and have that function figure it all out for me. How on earth can I make it all happen?\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"/projects/tarzan/\"\u003eIntroducing Tarzan\u003c/a\u003e\u003c/strong\u003e, an easy-to-use set of functions for accessing all sorts of data from Amazon’s product database. It’s as simple to use as \u003ca href=\"/projects/simplepie/\"\u003eSimplePie\u003c/a\u003e (if not, simpler), and has a built-in extension model that allows developers to extend the functionality of Tarzan simply and easily.\u003c/p\u003e\n\u003cp\u003eTarzan caches everything it can for 30 days (since Amazon’s data doesn’t change much, and as to not overload anyone’s server), supports resizing images using GD functions (all behind the scenes), and most functions will work as expected by just passing the ASIN/ISBN number as a parameter. For more \u003ca href=\"/projects/tarzan/\"\u003einformation\u003c/a\u003e, \u003ca href=\"/projects/tarzan/docs/documentation.htm\"\u003edocumentation\u003c/a\u003e, a \u003ca href=\"/projects/tarzan/sample.php\"\u003esample demo\u003c/a\u003e, \u003ca href=\"/projects/tarzan/breakdown.php\"\u003etools\u003c/a\u003e for \u003ca href=\"/projects/tarzan/docs/extension_guidelines.htm\"\u003ebuilding your own extensions\u003c/a\u003e, and \u003ca href=\"/projects/tarzan/#get\"\u003edownloads\u003c/a\u003e, check out the \u003ca href=\"/projects/tarzan/\"\u003eTarzan Project Page\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"update\"\u003eUpdate\u003c/h2\u003e\n\u003cp\u003eI make a minor tweak to the code and released Tarzan 1.0 RC1a. I added cache stats to the \u003ccode\u003etarzaninfo()\u003c/code\u003e function (which can be seen in action by viewing your \u003ccode\u003etarzan_info.php\u003c/code\u003e page.) This certainly isn’t critical, and you can definitely wait for RC2, but if you got Tarzan already and you want to see the new info, simply replace your current \u003ccode\u003etarzan.inc\u003c/code\u003e file with the new one.\u003c/p\u003e\n",
        "plain":"My birthday is in November, and Christmas is in December, so the “holidays” go for about a month-and-a-half. Every year, I’d start getting these questions like “What do you want for your birthday? What do you want for Christmas?”. Of course, when you’re asked on the spot like that, you can never remember what it is that you want, and you end up like the kid from A Christmas Story telling people you want a football or something.\nSo, a few years ago, I came up with the brilliant idea of making my wishlist available on my website somewhere. That way, when people asked what I wanted for Christmas or my birthday, I could just point them over to some big-ticket items on my list, and wouldn’t have to waste brain cycles on it. Great idea, huh?\nWell, my website has certainly evolved over the last few years, and so has my wishlist. This past holiday saw my biggest wishlist ever with over 170 items (mostly old CD’s that are scratched and need to be re-bought). Updating and adding items was a real pain, and I figured that after the holidays I’d try to figure out a way to make it all easier.\nMost of the items on my wishlist are pointing back to Amazon, and I’ve got my referral ID in there so that I also get credited on all of the purchases made from my site. I also know that Amazon makes their database information available through their Web Services program. Ideally, all I’d like to have to do is pass either the ISBN number (of a book), or the ASIN number (of most other items) to a function, and have that function figure it all out for me. How on earth can I make it all happen?\nIntroducing Tarzan, an easy-to-use set of functions for accessing all sorts of data from Amazon’s product database. It’s as simple to use as SimplePie (if not, simpler), and has a built-in extension model that allows developers to extend the functionality of Tarzan simply and easily.\nTarzan caches everything it can for 30 days (since Amazon’s data doesn’t change much, and as to not overload anyone’s server), supports resizing images using GD functions (all behind the scenes), and most functions will work as expected by just passing the ASIN/ISBN number as a parameter. For more information, documentation, a sample demo, tools for building your own extensions, and downloads, check out the Tarzan Project Page.\nUpdate I make a minor tweak to the code and released Tarzan 1.0 RC1a. I added cache stats to the tarzaninfo() function (which can be seen in action by viewing your tarzan_info.php page.) This certainly isn’t critical, and you can definitely wait for RC2, but if you got Tarzan already and you want to see the new info, simply replace your current tarzan.inc file with the new one.\n",
        "source":"\nMy birthday is in November, and Christmas is in December, so the “holidays” go for about a month-and-a-half. Every year, I’d start getting these questions like “What do you want for your birthday? What do you want for Christmas?”. Of course, when you’re asked on the spot like that, you can never remember what it is that you want, and you end up like the kid from [A Christmas Story]({{% wayback \"http://www.amazon.com/dp/B0000AYJUW/skyzyxcom-20/\" %}}) telling people you want a football or something.\n\nSo, a few years ago, I came up with the brilliant idea of making my wishlist available on my website somewhere. That way, when people asked what I wanted for Christmas or my birthday, I could just point them over to some big-ticket items on my list, and wouldn’t have to waste brain cycles on it. Great idea, huh?\n\nWell, my website has certainly evolved over the last few years, and so has my wishlist. This past holiday saw my biggest wishlist ever with over 170 items (mostly old CD’s that are scratched and need to be re-bought). Updating and adding items was a real pain, and I figured that after the holidays I’d try to figure out a way to make it all easier.\n\nMost of the items on my wishlist are pointing back to Amazon, and I’ve got my referral ID in there so that I also get credited on all of the purchases made from my site. I also know that Amazon makes their database information available through their Web Services program. Ideally, all I’d like to have to do is pass either the ISBN number (of a book), or the ASIN number (of most other items) to a function, and have that function figure it all out for me. How on earth can I make it all happen?\n\n**[Introducing Tarzan](/projects/tarzan/)**, an easy-to-use set of functions for accessing all sorts of data from Amazon’s product database. It’s as simple to use as [SimplePie](/projects/simplepie/) (if not, simpler), and has a built-in extension model that allows developers to extend the functionality of Tarzan simply and easily.\n\nTarzan caches everything it can for 30 days (since Amazon’s data doesn’t change much, and as to not overload anyone’s server), supports resizing images using GD functions (all behind the scenes), and most functions will work as expected by just passing the ASIN/ISBN number as a parameter. For more [information](/projects/tarzan/), [documentation](/projects/tarzan/docs/documentation.htm), a [sample demo](/projects/tarzan/sample.php), [tools](/projects/tarzan/breakdown.php) for [building your own extensions](/projects/tarzan/docs/extension_guidelines.htm), and [downloads](/projects/tarzan/#get), check out the [Tarzan Project Page](/projects/tarzan/).\n\n## Update\n\nI make a minor tweak to the code and released Tarzan 1.0 RC1a. I added cache stats to the `tarzaninfo()` function (which can be seen in action by viewing your `tarzan_info.php` page.) This certainly isn’t critical, and you can definitely wait for RC2, but if you got Tarzan already and you want to see the new info, simply replace your current `tarzan.inc` file with the new one.\n"},
    "links": {
        "prev": {"title": "Guys Rules", "permalink": "https://ryanparman.com/posts/2005/guys-rules/"},
        "next": {"title": "Localizing Tarzan and AWS 4.0", "permalink": "https://ryanparman.com/posts/2005/localizing-tarzan-and-aws-40/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "SimplePie 0.96 Now Available!",
    "description": "",
    "summary": {
        "content": "I quietly posted SimplePie 0.96 a few days ago, after having it in place in SimpleReader for about a week before that. So far, so good. For those of you currently using SimplePie, this new version makes more strides towards improving support for sucky feeds, tested support for PHP 5, and other bits of fine-tuning. You can download it, read the documentation for changes in this version, and report bugs and get support.",
        "isTruncated": false
    },
    "published": "2005-01-15T06:38:52Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2005/simplepie-096-now-available/",
    "relativePermalink": "/posts/2005/simplepie-096-now-available/",
    "aliases": ["/2005/01/14/simplepie-096-now-available/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 73,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2005/20050115-simplepie-096-now-available.md",
        "logicalName": "20050115-simplepie-096-now-available.md",
        "translationBaseName": "20050115-simplepie-096-now-available",
        "baseFileName": "20050115-simplepie-096-now-available",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2005/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI quietly posted \u003ca href=\"/projects/simplepie/\"\u003eSimplePie 0.96\u003c/a\u003e a few days ago, after having it in place in \u003ca href=\"/rss/\"\u003eSimpleReader\u003c/a\u003e for about a week before that. So far, so good.\u003c/p\u003e\n\u003cp\u003eFor those of you currently using SimplePie, this new version makes more strides towards improving support for sucky feeds, tested support for PHP 5, and other bits of fine-tuning.\u003c/p\u003e\n\u003cp\u003eYou can \u003ca href=\"/projects/simplepie/simplepie_0.96.zip\"\u003edownload\u003c/a\u003e it, read the \u003ca href=\"/projects/simplepie/documentation.htm\"\u003edocumentation\u003c/a\u003e for changes in this version, and \u003ca href=\"https://web.archive.org/web/20050115063852/http://support.skyzyx.net/\"\u003ereport bugs and get support\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"I quietly posted SimplePie 0.96 a few days ago, after having it in place in SimpleReader for about a week before that. So far, so good.\nFor those of you currently using SimplePie, this new version makes more strides towards improving support for sucky feeds, tested support for PHP 5, and other bits of fine-tuning.\nYou can download it, read the documentation for changes in this version, and report bugs and get support.\n",
        "source":"\nI quietly posted [SimplePie 0.96](/projects/simplepie/) a few days ago, after having it in place in [SimpleReader](/rss/) for about a week before that. So far, so good.\n\nFor those of you currently using SimplePie, this new version makes more strides towards improving support for sucky feeds, tested support for PHP 5, and other bits of fine-tuning.\n\nYou can [download](/projects/simplepie/simplepie_0.96.zip) it, read the [documentation](/projects/simplepie/documentation.htm) for changes in this version, and [report bugs and get support]({{% wayback \"http://support.skyzyx.net/\" %}}).\n"},
    "links": {
        "prev": {"title": "Do Not Eat iPod shuffle", "permalink": "https://ryanparman.com/posts/2005/do-not-eat-ipod-shuffle/"},
        "next": {"title": "Guys Rules", "permalink": "https://ryanparman.com/posts/2005/guys-rules/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Using Del.icio.us Feeds With SimplePie",
    "description": "",
    "summary": {
        "content": "I know that a lot of people are using Magpie RSS to power their del.icio.us sidebar links, so I figured I’d throw out a code sample showing how you could use SimplePie for the same task. If you need to come to terms with why SimplePie might be a better choice of RSS parser, check out the SimplePie project page. The only other thing that might be worth mentioning is that SimplePie still has a difficult time with non-encoded special characters in feeds and feeds in non-western-european/non-american/non-australian languages.",
        "isTruncated": true
    },
    "published": "2004-12-14T05:42:42Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/using-delicious-feeds-with-simplepie/",
    "relativePermalink": "/posts/2004/using-delicious-feeds-with-simplepie/",
    "aliases": ["/2004/12/13/using-delicious-feeds-with-simplepie/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 504,
        "readingTime": "3 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20041214-using-delicious-feeds-with-simplepie.md",
        "logicalName": "20041214-using-delicious-feeds-with-simplepie.md",
        "translationBaseName": "20041214-using-delicious-feeds-with-simplepie",
        "baseFileName": "20041214-using-delicious-feeds-with-simplepie",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI know that a lot of people are using Magpie RSS to power their del.icio.us sidebar links, so I figured I’d throw out a code sample showing how you could use SimplePie for the same task. If you need to come to terms with why SimplePie might be a better choice of RSS parser, check out the \u003ca href=\"/projects/simplepie/\"\u003eSimplePie project page\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe only other thing that might be worth mentioning is that SimplePie still has a difficult time with non-encoded special characters in feeds and feeds in non-western-european/non-american/non-australian languages. Beyond that, it’s pretty solid so far.\u003c/p\u003e\n\u003cp\u003eNow, before I get to explaining, I’ll point to a \u003ca href=\"/dev/simplepie/delicious/\"\u003edel.icio.us demo\u003c/a\u003e with SimplePie in action. Now, here’s the code as a whole:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ephp\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003einclude_once\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;../simplepie.inc\u0026#34;\u003c/span\u003e);\n\n\u003cspan style=\"color:#f92672\"\u003e@\u003c/span\u003e$rss \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esimplepie\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://del.icio.us/rss/tag/web\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0.02\u003c/span\u003e);\n\n\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e ($rss \u003cspan style=\"color:#f92672\"\u003e!=\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e) {\n    \u003cspan style=\"color:#66d9ef\"\u003eprint\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026lt;p\u0026gt;Reading from \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget_feed_url\u003c/span\u003e() \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026lt;/p\u0026gt;\u0026#34;\u003c/span\u003e);\n    \u003cspan style=\"color:#66d9ef\"\u003eprint\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026lt;ul\u0026gt;\u0026#34;\u003c/span\u003e);\n\n    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e ($x\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; $x \u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003e \u003cspan style=\"color:#ae81ff\"\u003e15\u003c/span\u003e; $x\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n        \u003cspan style=\"color:#66d9ef\"\u003eprint\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget_item_permalink\u003c/span\u003e($x, $rss) \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026#34;\u0026gt;\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eget_item_title\u003c/span\u003e($x, $rss) \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;\u003c/span\u003e);\n    }\n\n    \u003cspan style=\"color:#66d9ef\"\u003eprint\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026lt;/ul\u0026gt;\u0026#34;\u003c/span\u003e);\n}\n\u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n    \u003cspan style=\"color:#66d9ef\"\u003eprint\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;The del.icio.us feed is not currently available.\u0026#34;\u003c/span\u003e);\n}\n\n\u003cspan style=\"color:#66d9ef\"\u003eprint\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Powered by \u0026#34;\u003c/span\u003e \u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esp_linkback\u003c/span\u003e());\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eLet’s begin with the first part, \u003ccode\u003einclude_once(\u0026quot;../simplepie.inc\u0026quot;);\u003c/code\u003e. This is an instance of including the SimplePie library. In my example, the \u003ccode\u003esimplepie.inc\u003c/code\u003e file is located in the subdirectory.\u003c/p\u003e\n\u003cp\u003eThe next line is where we start processing the rss feed:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-php\" data-lang=\"php\"\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;?\u003c/span\u003e\u003cspan style=\"color:#a6e22e\"\u003ephp\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003e@\u003c/span\u003e$rss \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003esimplepie\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;http://del.icio.us/rss/tag/web\u0026#34;\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003efalse\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003etrue\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e0.02\u003c/span\u003e);\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eWe start by passing the first parameter, which tells SimplePie where the feed is that we want to process. The second parameter asks whether or not to enable a mode called XMLDump, which we don’t need for this excersize. The third parameter asks whether we want to cache the feed that we’re reading. Since SimplePie currently doesn’t work if the feed isn’t cached (unless it’s a local file), this needs to be true. Lastly, we tell SimplePie how many hours before refreshing the cached feed. We then set the feed to the \u003ccode\u003e$rss\u003c/code\u003e variable.\u003c/p\u003e\n\u003cp\u003eNext, we check whether the feed actually exists and was processed. If the expression \u003ccode\u003eif ($rss != false)\u003c/code\u003e (if \u003ccode\u003e$rss\u003c/code\u003e is not false…) is true, then we begin displaying the del.icio.us feed.\u003c/p\u003e\n\u003cp\u003eIf you so choose, you can display the URL of the feed you’re using with the \u003ccode\u003eget_feed_url()\u003c/code\u003e function. I also chose to have this display as an unordered list, since that’s really what it is.\u003c/p\u003e\n\u003cp\u003eInside of that \u003ccode\u003e\u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt;\u003c/code\u003e code block, I’ve set up a for-loop. Using \u003ccode\u003e$x\u003c/code\u003e as my counter variable, I decided to display only the most recent 15 entries. If you want to display all entries in the feed, you can use the \u003ccode\u003eget_item_quantity($rss)\u003c/code\u003e function.\u003c/p\u003e\n\u003cp\u003eAs a backup plan, I like to add a short message for when the feed isn’t working. In my case, I said that “The del.icio.us feed is not currently available.” Simple and to-the-point.\u003c/p\u003e\n\u003cp\u003eNext, you want to tell everybody how you made all of this really cool stuff happen by linking back to the SimplePie project page. The easiest way is with the \u003ccode\u003esp_linkback()\u003c/code\u003e function.\u003c/p\u003e\n\u003cp\u003eThere! You should now have a fully-functional del.icio.us sidebar right there in your website.\u003c/p\u003e\n",
        "plain":"I know that a lot of people are using Magpie RSS to power their del.icio.us sidebar links, so I figured I’d throw out a code sample showing how you could use SimplePie for the same task. If you need to come to terms with why SimplePie might be a better choice of RSS parser, check out the SimplePie project page.\nThe only other thing that might be worth mentioning is that SimplePie still has a difficult time with non-encoded special characters in feeds and feeds in non-western-european/non-american/non-australian languages. Beyond that, it’s pretty solid so far.\nNow, before I get to explaining, I’ll point to a del.icio.us demo with SimplePie in action. Now, here’s the code as a whole:\n\u0026lt;?php include_once(\u0026#34;../simplepie.inc\u0026#34;); @$rss = simplepie(\u0026#34;http://del.icio.us/rss/tag/web\u0026#34;, false, true, 0.02); if ($rss != false) { print(\u0026#34;\u0026lt;p\u0026gt;Reading from \u0026#34; . get_feed_url() . \u0026#34;\u0026lt;/p\u0026gt;\u0026#34;); print(\u0026#34;\u0026lt;ul\u0026gt;\u0026#34;); for ($x=0; $x \u0026lt; 15; $x++) { print(\u0026#39;\u0026lt;li\u0026gt;\u0026lt;a href=\u0026#34;\u0026#39; . get_item_permalink($x, $rss) . \u0026#39;\u0026#34;\u0026gt;\u0026#39; . get_item_title($x, $rss) . \u0026#39;\u0026lt;/a\u0026gt;\u0026lt;/li\u0026gt;\u0026#39;); } print(\u0026#34;\u0026lt;/ul\u0026gt;\u0026#34;); } else { print(\u0026#34;The del.icio.us feed is not currently available.\u0026#34;); } print(\u0026#34;Powered by \u0026#34; . sp_linkback()); Let’s begin with the first part, include_once(\u0026quot;../simplepie.inc\u0026quot;);. This is an instance of including the SimplePie library. In my example, the simplepie.inc file is located in the subdirectory.\nThe next line is where we start processing the rss feed:\n\u0026lt;?php @$rss = simplepie(\u0026#34;http://del.icio.us/rss/tag/web\u0026#34;, false, true, 0.02); We start by passing the first parameter, which tells SimplePie where the feed is that we want to process. The second parameter asks whether or not to enable a mode called XMLDump, which we don’t need for this excersize. The third parameter asks whether we want to cache the feed that we’re reading. Since SimplePie currently doesn’t work if the feed isn’t cached (unless it’s a local file), this needs to be true. Lastly, we tell SimplePie how many hours before refreshing the cached feed. We then set the feed to the $rss variable.\nNext, we check whether the feed actually exists and was processed. If the expression if ($rss != false) (if $rss is not false…) is true, then we begin displaying the del.icio.us feed.\nIf you so choose, you can display the URL of the feed you’re using with the get_feed_url() function. I also chose to have this display as an unordered list, since that’s really what it is.\nInside of that \u0026lt;ul\u0026gt;\u0026lt;/ul\u0026gt; code block, I’ve set up a for-loop. Using $x as my counter variable, I decided to display only the most recent 15 entries. If you want to display all entries in the feed, you can use the get_item_quantity($rss) function.\nAs a backup plan, I like to add a short message for when the feed isn’t working. In my case, I said that “The del.icio.us feed is not currently available.” Simple and to-the-point.\nNext, you want to tell everybody how you made all of this really cool stuff happen by linking back to the SimplePie project page. The easiest way is with the sp_linkback() function.\nThere! You should now have a fully-functional del.icio.us sidebar right there in your website.\n",
        "source":"\nI know that a lot of people are using Magpie RSS to power their del.icio.us sidebar links, so I figured I’d throw out a code sample showing how you could use SimplePie for the same task. If you need to come to terms with why SimplePie might be a better choice of RSS parser, check out the [SimplePie project page](/projects/simplepie/).\n\nThe only other thing that might be worth mentioning is that SimplePie still has a difficult time with non-encoded special characters in feeds and feeds in non-western-european/non-american/non-australian languages. Beyond that, it’s pretty solid so far.\n\nNow, before I get to explaining, I’ll point to a [del.icio.us demo](/dev/simplepie/delicious/) with SimplePie in action. Now, here’s the code as a whole:\n\n```php\n\u003c?php\ninclude_once(\"../simplepie.inc\");\n\n@$rss = simplepie(\"http://del.icio.us/rss/tag/web\", false, true, 0.02);\n\nif ($rss != false) {\n    print(\"\u003cp\u003eReading from \" . get_feed_url() . \"\u003c/p\u003e\");\n    print(\"\u003cul\u003e\");\n\n    for ($x=0; $x \u003c 15; $x++) {\n        print('\u003cli\u003e\u003ca href=\"' . get_item_permalink($x, $rss) . '\"\u003e' . get_item_title($x, $rss) . '\u003c/a\u003e\u003c/li\u003e');\n    }\n\n    print(\"\u003c/ul\u003e\");\n}\nelse {\n    print(\"The del.icio.us feed is not currently available.\");\n}\n\nprint(\"Powered by \" . sp_linkback());\n```\n\nLet’s begin with the first part, `include_once(\"../simplepie.inc\");`. This is an instance of including the SimplePie library. In my example, the `simplepie.inc` file is located in the subdirectory.\n\nThe next line is where we start processing the rss feed:\n\n```php\n\u003c?php\n@$rss = simplepie(\"http://del.icio.us/rss/tag/web\", false, true, 0.02);\n```\n\nWe start by passing the first parameter, which tells SimplePie where the feed is that we want to process. The second parameter asks whether or not to enable a mode called XMLDump, which we don’t need for this excersize. The third parameter asks whether we want to cache the feed that we’re reading. Since SimplePie currently doesn’t work if the feed isn’t cached (unless it’s a local file), this needs to be true. Lastly, we tell SimplePie how many hours before refreshing the cached feed. We then set the feed to the `$rss` variable.\n\nNext, we check whether the feed actually exists and was processed. If the expression `if ($rss != false)` (if `$rss` is not false…) is true, then we begin displaying the del.icio.us feed.\n\nIf you so choose, you can display the URL of the feed you’re using with the `get_feed_url()` function. I also chose to have this display as an unordered list, since that’s really what it is.\n\nInside of that `\u003cul\u003e\u003c/ul\u003e` code block, I’ve set up a for-loop. Using `$x` as my counter variable, I decided to display only the most recent 15 entries. If you want to display all entries in the feed, you can use the `get_item_quantity($rss)` function.\n\nAs a backup plan, I like to add a short message for when the feed isn’t working. In my case, I said that “The del.icio.us feed is not currently available.” Simple and to-the-point.\n\nNext, you want to tell everybody how you made all of this really cool stuff happen by linking back to the SimplePie project page. The easiest way is with the `sp_linkback()` function.\n\nThere! You should now have a fully-functional del.icio.us sidebar right there in your website.\n"},
    "links": {
        "prev": {"title": "Happy Birthday, Emily Ann Boydston", "permalink": "https://ryanparman.com/posts/2004/happy-birthday-emily-ann-boydston/"},
        "next": {"title": "God Came Near", "permalink": "https://ryanparman.com/posts/2004/god-came-near/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "SimplePie Beta Testing",
    "description": "",
    "summary": {
        "content": "Rather than completely hold off the next version of SimplePie until it’s totally complete (which appears to be taking some time), I’ve decided to make the current Beta versions available for testing purposes. Although it appears to be fairly stable, I wouldn’t recommend this for a production site just yet. If you’d like to test out the current Beta build (2004.12.03), you can do so a couple of ways: Basic Online Feed Reader utilizing the latest version of SimplePie The SimplePie source file The documentation file for this particular build Please take the time to test it with your feeds that you read.",
        "isTruncated": true
    },
    "published": "2004-12-04T02:26:55Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/simplepie-beta-testing/",
    "relativePermalink": "/posts/2004/simplepie-beta-testing/",
    "aliases": ["/2004/12/03/simplepie-beta-testing/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 162,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20041204-simplepie-beta-testing.md",
        "logicalName": "20041204-simplepie-beta-testing.md",
        "translationBaseName": "20041204-simplepie-beta-testing",
        "baseFileName": "20041204-simplepie-beta-testing",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eRather than completely hold off the next version of SimplePie until it’s totally complete (which appears to be taking some time), I’ve decided to make the current Beta versions available for testing purposes. Although it appears to be fairly stable, I wouldn’t recommend this for a production site just yet.\u003c/p\u003e\n\u003cp\u003eIf you’d like to test out the current Beta build (2004.12.03), you can do so a couple of ways:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"/dev/simplepie/\"\u003eBasic Online Feed Reader utilizing the latest version of SimplePie\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/dev/simplepie/simplepie.inc\"\u003eThe SimplePie source file\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"/dev/simplepie/documentation.htm\"\u003eThe documentation file for this particular build\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003ePlease take the time to test it with your feeds that you read. I’ve also enabled an option that allows you to see how the feed’s source code is modified by SimplePie. This is great for debugging and for helping test.\u003c/p\u003e\n\u003cp\u003eIf you have any bug reports, please list them in the \u003ca href=\"https://web.archive.org/web/20041204022655/http://www.skyzyx.net/forums/viewforum.php?f=7\"\u003eBug Report forum\u003c/a\u003e. The same goes for \u003ca href=\"https://web.archive.org/web/20041204022655/http://www.skyzyx.net/forums/viewforum.php?f=8\"\u003efeature requests\u003c/a\u003e and \u003ca href=\"https://web.archive.org/web/20041204022655/http://www.skyzyx.net/forums/viewforum.php?f=1\"\u003equestions and comments\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThanks for helping to make SimplePie great!\u003c/p\u003e\n",
        "plain":"Rather than completely hold off the next version of SimplePie until it’s totally complete (which appears to be taking some time), I’ve decided to make the current Beta versions available for testing purposes. Although it appears to be fairly stable, I wouldn’t recommend this for a production site just yet.\nIf you’d like to test out the current Beta build (2004.12.03), you can do so a couple of ways:\n Basic Online Feed Reader utilizing the latest version of SimplePie The SimplePie source file The documentation file for this particular build  Please take the time to test it with your feeds that you read. I’ve also enabled an option that allows you to see how the feed’s source code is modified by SimplePie. This is great for debugging and for helping test.\nIf you have any bug reports, please list them in the Bug Report forum. The same goes for feature requests and questions and comments.\nThanks for helping to make SimplePie great!\n",
        "source":"\nRather than completely hold off the next version of SimplePie until it’s totally complete (which appears to be taking some time), I’ve decided to make the current Beta versions available for testing purposes. Although it appears to be fairly stable, I wouldn’t recommend this for a production site just yet.\n\nIf you’d like to test out the current Beta build (2004.12.03), you can do so a couple of ways:\n\n* [Basic Online Feed Reader utilizing the latest version of SimplePie](/dev/simplepie/)\n* [The SimplePie source file](/dev/simplepie/simplepie.inc)\n* [The documentation file for this particular build](/dev/simplepie/documentation.htm)\n\nPlease take the time to test it with your feeds that you read. I’ve also enabled an option that allows you to see how the feed’s source code is modified by SimplePie. This is great for debugging and for helping test.\n\nIf you have any bug reports, please list them in the [Bug Report forum]({{% wayback \"http://www.skyzyx.net/forums/viewforum.php?f=7\" %}}). The same goes for [feature requests]({{% wayback \"http://www.skyzyx.net/forums/viewforum.php?f=8\" %}}) and [questions and comments]({{% wayback \"http://www.skyzyx.net/forums/viewforum.php?f=1\" %}}).\n\nThanks for helping to make SimplePie great!\n"},
    "links": {
        "prev": {"title": "Screen Grab Confab", "permalink": "https://ryanparman.com/posts/2004/screen-grab-confab/"},
        "next": {"title": "Happy Birthday, Emily Ann Boydston", "permalink": "https://ryanparman.com/posts/2004/happy-birthday-emily-ann-boydston/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Simple PHP Gallery 1.1",
    "description": "",
    "summary": {
        "content": "Paul Griffin has just released SPG 1.1! For those who aren’t familiar with this project, Simple PHP Gallery is exactly that—an easy-to-use image gallery system, written in PHP. There are several new features listed on Paul’s SPG Mini-Site, but there are a few that are my favorites (as I was a beta tester for this and the last versions): Image Precaching This was one of the two features that I actually coded the original code for *grin*. In v1.0 and the early v1.",
        "isTruncated": true
    },
    "published": "2004-11-19T16:42:06Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/simple-php-gallery-11/",
    "relativePermalink": "/posts/2004/simple-php-gallery-11/",
    "aliases": ["/2004/11/19/simple-php-gallery-11/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 695,
        "readingTime": "4 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20041119-simple-php-gallery-11.md",
        "logicalName": "20041119-simple-php-gallery-11.md",
        "translationBaseName": "20041119-simple-php-gallery-11",
        "baseFileName": "20041119-simple-php-gallery-11",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#image-precaching\"\u003eImage Precaching\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#image-resizing\"\u003eImage Resizing\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#accesskey-navigation\"\u003eAccesskey Navigation\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#automatically-generated-sub-folder-details\"\u003eAutomatically Generated Sub-Folder Details\u003c/a\u003e\u003c/li\u003e\n    \u003cli\u003e\u003ca href=\"#conclusion\"\u003eConclusion\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003e\u003ca href=\"https://web.archive.org/web/20041119164206/http://www.relativelyabsolute.com\"\u003ePaul Griffin\u003c/a\u003e has just released \u003ca href=\"https://web.archive.org/web/20041119164206/http://www.relativelyabsolute.com/spg/\"\u003eSPG 1.1\u003c/a\u003e! For those who aren’t familiar with this project, Simple PHP Gallery is exactly that—an easy-to-use image gallery system, written in PHP.\u003c/p\u003e\n\u003cp\u003eThere are several new features listed on Paul’s \u003ca href=\"\"\u003eSPG Mini-Site\u003c/a\u003e, but there are a few that are my favorites (as I was a beta tester for this and the last versions):\u003c/p\u003e\n\u003ch2 id=\"image-precaching\"\u003eImage Precaching\u003c/h2\u003e\n\u003cp\u003eThis was one of the two features that I actually coded the original code for *grin*. In v1.0 and the early v1.1 betas, I got tired of clicking the Next and Previous buttons and having to wait for the new image to load, after I’d just spent several seconds looking at a single picture. It didn’t seem very efficient to me, so I figured why not allow the image loading to happen in the background while I’m spending time looking at this picture anyways.\u003c/p\u003e\n\u003cp\u003eSo, what I did was I figured out what images the Next and Previous buttons were pointing to (which is all dynamic, BTW), and added the Next and Previous to the page at a size of 1x1. I then added inline styles to the image that absolutely positioned them to the top-left corner of the page, and set the visibility to hidden. Doing so allowed the images to load into the cache, while remaining invisible to CSS-enabled browsers (and as two 1 pixel dots on CSS-disabled browsers).\u003c/p\u003e\n\u003cp\u003eVoila! Image precaching for the previous and next images in sequence.\u003c/p\u003e\n\u003ch2 id=\"image-resizing\"\u003eImage Resizing\u003c/h2\u003e\n\u003cp\u003eDo you have a digital camera that takes pictures at a ridiculously gargantuan size? I used to have one that saved images at 1600x1200. With this feature, you can upload these images, and they will automatically be resized and cached according to the settings in your \u003ccode\u003esp_config.php\u003c/code\u003e file. Very useful.\u003c/p\u003e\n\u003ch2 id=\"accesskey-navigation\"\u003eAccesskey Navigation\u003c/h2\u003e\n\u003cp\u003eThis was my first suggestion for features in SPG 1.1 after 1.0 launched. I took a 3ds Max class in college, and we had to build something cool from the things we’d learned in the class, and make both a still frame as well as a short rendered video. Mine was about \u003ca href=\"/portfolio/threemacs/\"\u003e3 Macs\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eAnyways, I went online to grab various images about the computers that I was going to be building. At first, I’d have to open one, then another, then another. Tiring of this quickly, I wrote up a quick HTML page with a JavaScript that would allow me to simply hit Previous or Next to move from one image to the next. The it dawned on me to use accesskeys, since I knew they at least worked in IE and Mozilla (this was during the pre-Firefox “Phoenix” days).\u003c/p\u003e\n\u003cp\u003eInstantly, I was able to hit Alt+Plus and Alt+Minus to move back and forth through the images. When I recommended this to Paul, we had some discussion, and this is what ended up getting implemented:\u003c/p\u003e\n\u003cp\u003eThe Previous button is Alt+Minus[-]. The Next button is both Alt+Plus[+] as well as Alt+Equals[=]. This is because most QWERTY-language desktop keyboards have a 10-key number pad on the right where [+] and [-] are right next to each other. Most laptops, however, don’t have that, but rather a [-/_] key right next to a [=/+] key (where you have to press shift for the latter). This means that you’d have to press Alt+Minus to move back, and Alt+Shift+Plus to move forward, and that sucks. Allowing Alt+Equals to move forward makes it easy for both Laptop and Desktop QWERTY-keyboards.\u003c/p\u003e\n\u003ch2 id=\"automatically-generated-sub-folder-details\"\u003eAutomatically Generated Sub-Folder Details\u003c/h2\u003e\n\u003cp\u003eThis was yet another idea that I had for the 1.1 release, and that was to add the number of images in a folder, much like how many people will display the number of comments a blog post has. It just seemed to make sense.\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003ePaul has done a terrific job with writing this software, and I have really enjoyed the opportunity to be a part of it. Heck, I’m probably just as proud of this release as he is, and I’m excited that so many of my suggestions made it into the final release. If you’ve got an image gallery, or you’ve been thinking of setting one up, I would highly recommend Paul Griffin’s \u003ca href=\"https://web.archive.org/web/20041119164206/http://www.relativelyabsolute.com/spg/\"\u003eSimple PHP Gallery\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"Paul Griffin has just released SPG 1.1! For those who aren’t familiar with this project, Simple PHP Gallery is exactly that—an easy-to-use image gallery system, written in PHP.\nThere are several new features listed on Paul’s SPG Mini-Site, but there are a few that are my favorites (as I was a beta tester for this and the last versions):\nImage Precaching This was one of the two features that I actually coded the original code for *grin*. In v1.0 and the early v1.1 betas, I got tired of clicking the Next and Previous buttons and having to wait for the new image to load, after I’d just spent several seconds looking at a single picture. It didn’t seem very efficient to me, so I figured why not allow the image loading to happen in the background while I’m spending time looking at this picture anyways.\nSo, what I did was I figured out what images the Next and Previous buttons were pointing to (which is all dynamic, BTW), and added the Next and Previous to the page at a size of 1x1. I then added inline styles to the image that absolutely positioned them to the top-left corner of the page, and set the visibility to hidden. Doing so allowed the images to load into the cache, while remaining invisible to CSS-enabled browsers (and as two 1 pixel dots on CSS-disabled browsers).\nVoila! Image precaching for the previous and next images in sequence.\nImage Resizing Do you have a digital camera that takes pictures at a ridiculously gargantuan size? I used to have one that saved images at 1600x1200. With this feature, you can upload these images, and they will automatically be resized and cached according to the settings in your sp_config.php file. Very useful.\nAccesskey Navigation This was my first suggestion for features in SPG 1.1 after 1.0 launched. I took a 3ds Max class in college, and we had to build something cool from the things we’d learned in the class, and make both a still frame as well as a short rendered video. Mine was about 3 Macs.\nAnyways, I went online to grab various images about the computers that I was going to be building. At first, I’d have to open one, then another, then another. Tiring of this quickly, I wrote up a quick HTML page with a JavaScript that would allow me to simply hit Previous or Next to move from one image to the next. The it dawned on me to use accesskeys, since I knew they at least worked in IE and Mozilla (this was during the pre-Firefox “Phoenix” days).\nInstantly, I was able to hit Alt+Plus and Alt+Minus to move back and forth through the images. When I recommended this to Paul, we had some discussion, and this is what ended up getting implemented:\nThe Previous button is Alt+Minus[-]. The Next button is both Alt+Plus[+] as well as Alt+Equals[=]. This is because most QWERTY-language desktop keyboards have a 10-key number pad on the right where [+] and [-] are right next to each other. Most laptops, however, don’t have that, but rather a [-/_] key right next to a [=/+] key (where you have to press shift for the latter). This means that you’d have to press Alt+Minus to move back, and Alt+Shift+Plus to move forward, and that sucks. Allowing Alt+Equals to move forward makes it easy for both Laptop and Desktop QWERTY-keyboards.\nAutomatically Generated Sub-Folder Details This was yet another idea that I had for the 1.1 release, and that was to add the number of images in a folder, much like how many people will display the number of comments a blog post has. It just seemed to make sense.\nConclusion Paul has done a terrific job with writing this software, and I have really enjoyed the opportunity to be a part of it. Heck, I’m probably just as proud of this release as he is, and I’m excited that so many of my suggestions made it into the final release. If you’ve got an image gallery, or you’ve been thinking of setting one up, I would highly recommend Paul Griffin’s Simple PHP Gallery.\n",
        "source":"\n[Paul Griffin]({{% wayback \"http://www.relativelyabsolute.com\" %}}) has just released [SPG 1.1]({{% wayback \"http://www.relativelyabsolute.com/spg/\" %}})! For those who aren’t familiar with this project, Simple PHP Gallery is exactly that—an easy-to-use image gallery system, written in PHP.\n\nThere are several new features listed on Paul’s [SPG Mini-Site](), but there are a few that are my favorites (as I was a beta tester for this and the last versions):\n\n## Image Precaching\n\nThis was one of the two features that I actually coded the original code for \\*grin\\*. In v1.0 and the early v1.1 betas, I got tired of clicking the Next and Previous buttons and having to wait for the new image to load, after I’d just spent several seconds looking at a single picture. It didn’t seem very efficient to me, so I figured why not allow the image loading to happen in the background while I’m spending time looking at this picture anyways.\n\nSo, what I did was I figured out what images the Next and Previous buttons were pointing to (which is all dynamic, BTW), and added the Next and Previous to the page at a size of 1x1. I then added inline styles to the image that absolutely positioned them to the top-left corner of the page, and set the visibility to hidden. Doing so allowed the images to load into the cache, while remaining invisible to CSS-enabled browsers (and as two 1 pixel dots on CSS-disabled browsers).\n\nVoila! Image precaching for the previous and next images in sequence.\n\n## Image Resizing\n\nDo you have a digital camera that takes pictures at a ridiculously gargantuan size? I used to have one that saved images at 1600x1200. With this feature, you can upload these images, and they will automatically be resized and cached according to the settings in your `sp_config.php` file. Very useful.\n\n## Accesskey Navigation\n\nThis was my first suggestion for features in SPG 1.1 after 1.0 launched. I took a 3ds Max class in college, and we had to build something cool from the things we’d learned in the class, and make both a still frame as well as a short rendered video. Mine was about [3 Macs](/portfolio/threemacs/).\n\nAnyways, I went online to grab various images about the computers that I was going to be building. At first, I’d have to open one, then another, then another. Tiring of this quickly, I wrote up a quick HTML page with a JavaScript that would allow me to simply hit Previous or Next to move from one image to the next. The it dawned on me to use accesskeys, since I knew they at least worked in IE and Mozilla (this was during the pre-Firefox “Phoenix” days).\n\nInstantly, I was able to hit Alt+Plus and Alt+Minus to move back and forth through the images. When I recommended this to Paul, we had some discussion, and this is what ended up getting implemented:\n\nThe Previous button is Alt+Minus\\[-\\]. The Next button is both Alt+Plus\\[+\\] as well as Alt+Equals\\[=\\]. This is because most QWERTY-language desktop keyboards have a 10-key number pad on the right where \\[+\\] and \\[-\\] are right next to each other. Most laptops, however, don’t have that, but rather a \\[-/\\_\\] key right next to a \\[=/+\\] key (where you have to press shift for the latter). This means that you’d have to press Alt+Minus to move back, and Alt+Shift+Plus to move forward, and that sucks. Allowing Alt+Equals to move forward makes it easy for both Laptop and Desktop QWERTY-keyboards.\n\n## Automatically Generated Sub-Folder Details\n\nThis was yet another idea that I had for the 1.1 release, and that was to add the number of images in a folder, much like how many people will display the number of comments a blog post has. It just seemed to make sense.\n\n## Conclusion\n\nPaul has done a terrific job with writing this software, and I have really enjoyed the opportunity to be a part of it. Heck, I’m probably just as proud of this release as he is, and I’m excited that so many of my suggestions made it into the final release. If you’ve got an image gallery, or you’ve been thinking of setting one up, I would highly recommend Paul Griffin’s [Simple PHP Gallery]({{% wayback \"http://www.relativelyabsolute.com/spg/\" %}}).\n"},
    "links": {
        "prev": {"title": "I Got iBalls… I mean iSight", "permalink": "https://ryanparman.com/posts/2004/i-got-iballs-i-mean-isight/"},
        "next": {"title": "Our First Christmas Tree", "permalink": "https://ryanparman.com/posts/2004/our-first-christmas-tree/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "SimplePie 0.95",
    "description": "",
    "summary": {
        "content": "SimplePie 0.95 is now available. Anyone who is using any other version of SimplePie should update now. Major features/changes in this version include: Much improved support for reading all feeds, resolved display issues with \u0026lt;code\u0026gt; and \u0026lt;pre\u0026gt; tags, and added the ability to alter the display of feed dates using PHP’s date() variables. This version is pretty much feature-complete. The only remaining pre–1.0 work will be testing and catching any remaining bugs. I might add a couple of minor features, but nothing too major.",
        "isTruncated": true
    },
    "published": "2004-10-11T05:42:40Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/simplepie-095/",
    "relativePermalink": "/posts/2004/simplepie-095/",
    "aliases": ["/2004/10/10/simplepie-095/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 146,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20041011-simplepie-095.md",
        "logicalName": "20041011-simplepie-095.md",
        "translationBaseName": "20041011-simplepie-095",
        "baseFileName": "20041011-simplepie-095",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003e\u003ca href=\"/projects/simplepie/\"\u003eSimplePie 0.95\u003c/a\u003e is now available. Anyone who is using any other version of SimplePie should update now. Major features/changes in this version include: Much improved support for reading all feeds, resolved display issues with \u003ccode\u003e\u0026lt;code\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;pre\u0026gt;\u003c/code\u003e tags, and added the ability to alter the display of feed dates using PHP’s \u003ccode\u003edate()\u003c/code\u003e variables.\u003c/p\u003e\n\u003cp\u003eThis version is pretty much feature-complete. The only remaining pre–1.0 work will be testing and catching any remaining bugs. I might add a couple of minor features, but nothing too major. I’m open to feature requests for the 1.0 - 1.1 releases, so if SimplePie is missing something or if it should have something that other parsers don’t, let me know.\u003c/p\u003e\n\u003cp\u003e\u003cspan class=\"personal\"\u003e« Update »\u003c/span\u003e If you downloaded SimplePie within 60 minutes of this posting, you should re-download it. I fixed a glitch that affected feeds from East of GMT, and some related documentation.\u003c/p\u003e\n",
        "plain":"SimplePie 0.95 is now available. Anyone who is using any other version of SimplePie should update now. Major features/changes in this version include: Much improved support for reading all feeds, resolved display issues with \u0026lt;code\u0026gt; and \u0026lt;pre\u0026gt; tags, and added the ability to alter the display of feed dates using PHP’s date() variables.\nThis version is pretty much feature-complete. The only remaining pre–1.0 work will be testing and catching any remaining bugs. I might add a couple of minor features, but nothing too major. I’m open to feature requests for the 1.0 - 1.1 releases, so if SimplePie is missing something or if it should have something that other parsers don’t, let me know.\n« Update » If you downloaded SimplePie within 60 minutes of this posting, you should re-download it. I fixed a glitch that affected feeds from East of GMT, and some related documentation.\n",
        "source":"\n[SimplePie 0.95](/projects/simplepie/) is now available. Anyone who is using any other version of SimplePie should update now. Major features/changes in this version include: Much improved support for reading all feeds, resolved display issues with `\u003ccode\u003e` and `\u003cpre\u003e` tags, and added the ability to alter the display of feed dates using PHP’s `date()` variables.\n\nThis version is pretty much feature-complete. The only remaining pre–1.0 work will be testing and catching any remaining bugs. I might add a couple of minor features, but nothing too major. I’m open to feature requests for the 1.0 - 1.1 releases, so if SimplePie is missing something or if it should have something that other parsers don’t, let me know.\n\n\u003cspan class=\"personal\"\u003e« Update »\u003c/span\u003e If you downloaded SimplePie within 60 minutes of this posting, you should re-download it. I fixed a glitch that affected feeds from East of GMT, and some related documentation.\n"},
    "links": {
        "prev": {"title": "Clientcopia", "permalink": "https://ryanparman.com/posts/2004/clientcopia/"},
        "next": {"title": "Why Did The Chicken Cross The Road?", "permalink": "https://ryanparman.com/posts/2004/why-did-the-chicken-cross-the-road/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "A New License",
    "description": "",
    "summary": {
        "content": "When I had originally written the SkyGPL license, my intent was to allow people to do all kinds of cool, creative things with my scripts, while still allowing me some sort of ownership and credit for my own work. That has been more or less the case. However, today I was going through the licenses available from Creative Commons, and I’ve decided to drop the SkyGPL all-together. All of my scripts will soon be re-licensed under either the Attribution License, Attribution-ShareAlike License, or the Attribution-NonCommercial License.",
        "isTruncated": true
    },
    "published": "2004-10-09T19:53:19Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/a-new-license/",
    "relativePermalink": "/posts/2004/a-new-license/",
    "aliases": ["/2004/10/09/a-new-license/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 183,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20041009-a-new-license.md",
        "logicalName": "20041009-a-new-license.md",
        "translationBaseName": "20041009-a-new-license",
        "baseFileName": "20041009-a-new-license",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eWhen I had originally written the \u003ca href=\"/license/\"\u003eSkyGPL license\u003c/a\u003e, my intent was to allow people to do all kinds of cool, creative things with my scripts, while still allowing me some sort of ownership and credit for my own work. That has been more or less the case.\u003c/p\u003e\n\u003cp\u003eHowever, today I was going through the licenses available from \u003ca href=\"https://web.archive.org/web/20041009195319/http://www.creativecommons.org\"\u003eCreative Commons\u003c/a\u003e, and I’ve decided to drop the SkyGPL all-together. All of my scripts will soon be re-licensed under either the \u003ca href=\"https://web.archive.org/web/20041009195319/http://creativecommons.org/licenses/by/2.0/\"\u003eAttribution License\u003c/a\u003e, \u003ca href=\"https://web.archive.org/web/20041009195319/http://creativecommons.org/licenses/by-sa/2.0/\"\u003eAttribution-ShareAlike License\u003c/a\u003e, or the \u003ca href=\"https://web.archive.org/web/20041009195319/http://creativecommons.org/licenses/by-nc/2.0/\"\u003eAttribution-NonCommercial License\u003c/a\u003e. I’ve found that these licenses are more specific and less restrictive than my own, so I’d highly doubt that anyone will have a problem with it.\u003c/p\u003e\n\u003cp\u003eThe first script to take on a new license will be \u003ca href=\"/projects/simplepie/\"\u003eSimplePie 0.95\u003c/a\u003e, once it comes out of Beta. Although previous versions (0.94 and older) are not bound by this license, newer versions will be. I don’t think that it’ll make much difference to anyone who’s already using SimplePie, but if you’re unsure if this affects you at all, drop me a line, and we’ll see what we can work out.\u003c/p\u003e\n",
        "plain":"When I had originally written the SkyGPL license, my intent was to allow people to do all kinds of cool, creative things with my scripts, while still allowing me some sort of ownership and credit for my own work. That has been more or less the case.\nHowever, today I was going through the licenses available from Creative Commons, and I’ve decided to drop the SkyGPL all-together. All of my scripts will soon be re-licensed under either the Attribution License, Attribution-ShareAlike License, or the Attribution-NonCommercial License. I’ve found that these licenses are more specific and less restrictive than my own, so I’d highly doubt that anyone will have a problem with it.\nThe first script to take on a new license will be SimplePie 0.95, once it comes out of Beta. Although previous versions (0.94 and older) are not bound by this license, newer versions will be. I don’t think that it’ll make much difference to anyone who’s already using SimplePie, but if you’re unsure if this affects you at all, drop me a line, and we’ll see what we can work out.\n",
        "source":"\nWhen I had originally written the [SkyGPL license](/license/), my intent was to allow people to do all kinds of cool, creative things with my scripts, while still allowing me some sort of ownership and credit for my own work. That has been more or less the case.\n\nHowever, today I was going through the licenses available from [Creative Commons]({{% wayback \"http://www.creativecommons.org\" %}}), and I’ve decided to drop the SkyGPL all-together. All of my scripts will soon be re-licensed under either the [Attribution License]({{% wayback \"http://creativecommons.org/licenses/by/2.0/\" %}}), [Attribution-ShareAlike License]({{% wayback \"http://creativecommons.org/licenses/by-sa/2.0/\" %}}), or the [Attribution-NonCommercial License]({{% wayback \"http://creativecommons.org/licenses/by-nc/2.0/\" %}}). I’ve found that these licenses are more specific and less restrictive than my own, so I’d highly doubt that anyone will have a problem with it.\n\nThe first script to take on a new license will be [SimplePie 0.95](/projects/simplepie/), once it comes out of Beta. Although previous versions (0.94 and older) are not bound by this license, newer versions will be. I don’t think that it’ll make much difference to anyone who’s already using SimplePie, but if you’re unsure if this affects you at all, drop me a line, and we’ll see what we can work out.\n"},
    "links": {
        "prev": {"title": "Little Joys", "permalink": "https://ryanparman.com/posts/2004/little-joys/"},
        "next": {"title": "Clientcopia", "permalink": "https://ryanparman.com/posts/2004/clientcopia/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "It Took Me Long Enough...",
    "description": "",
    "summary": {
        "content": "The new and improved SimplePie 0.94 is out. Major features/changes in this version include: Better support for non-English feeds, significantly improved support for poorly written feeds, automatic deletion of outdated cache files, and the stripping-out of potentially harmful tags (as per Mark Pilgrim’s suggestions). There’s still a smidge of fine-tuning left to do. Although I fixed a very high number of feeds in this release, I broke a small handful of others. The newly broken feeds include Forever Geek’s RSS (not Atom) feed, Asa’s notblog*, News.",
        "isTruncated": true
    },
    "published": "2004-09-24T08:09:35Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/it-took-me-long-enough/",
    "relativePermalink": "/posts/2004/it-took-me-long-enough/",
    "aliases": ["/2004/09/24/it-took-me-long-enough/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 251,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040924-it-took-me-long-enough.md",
        "logicalName": "20040924-it-took-me-long-enough.md",
        "translationBaseName": "20040924-it-took-me-long-enough",
        "baseFileName": "20040924-it-took-me-long-enough",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eThe new and improved \u003ca href=\"/projects/simplepie/\"\u003eSimplePie 0.94\u003c/a\u003e is out. Major features/changes in this version include: Better support for non-English feeds, significantly improved support for poorly written feeds, automatic deletion of outdated cache files, and the stripping-out of potentially harmful tags (as per Mark Pilgrim’s \u003ca href=\"https://web.archive.org/web/20040924080935/http://diveintomark.org/archives/2003/06/12/how_to_consume_rss_safely\"\u003esuggestions\u003c/a\u003e).\u003c/p\u003e\n\u003cp\u003eThere’s still a smidge of fine-tuning left to do. Although I fixed a very high number of feeds in this release, I broke a small handful of others. The newly broken feeds include Forever Geek’s RSS (not Atom) feed, Asa’s notblog*, News.com, and GameSpot feeds. Out of a list of approximately \u003ca href=\"/dev/simplepie/parseopml.php\"\u003e334 test feeds\u003c/a\u003e (374 total - 30 duplicates - 10 no longer exist), only 9 aren’t working. Not too shabby, I’d say.\u003c/p\u003e\n\u003cp\u003eI’ll probably begin working on v0.95 on Saturday. Here is a list of things I plan to do in time for the 0.95 release:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eFinish fine-tuning the regular expressions I use for supporting bad feeds.\u003c/li\u003e\n\u003cli\u003eAdd the ability to display images in feeds, even though the server is set to block the display of images on other sites.\u003c/li\u003e\n\u003cli\u003eEncode all tags used inside \u003ccode\u003e\u0026lt;code\u0026gt;\u0026lt;/code\u0026gt;\u003c/code\u003e tags.\u003c/li\u003e\n\u003cli\u003eGet speed back to v0.93 levels.\u003c/li\u003e\n\u003cli\u003eImprove the ability to display feed dates.\u003c/li\u003e\n\u003cli\u003eImprove support for relative URL’s in feeds.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eKeep watching this space. Hopefully it won’t take me another month to get the new version out. Come to think of it, have you all gone and bugged \u003ca href=\"https://web.archive.org/web/20040924080935/http://www.relativelyabsolute.com\"\u003eSeñor Paul\u003c/a\u003e about getting \u003ca href=\"https://web.archive.org/web/20040924080935/http://www.relativelyabsolute.com/spg/\"\u003eSPG 1.1\u003c/a\u003e done yet? If not, you should. He might forget to work on it otherwise. *grin*\u003c/p\u003e\n",
        "plain":"The new and improved SimplePie 0.94 is out. Major features/changes in this version include: Better support for non-English feeds, significantly improved support for poorly written feeds, automatic deletion of outdated cache files, and the stripping-out of potentially harmful tags (as per Mark Pilgrim’s suggestions).\nThere’s still a smidge of fine-tuning left to do. Although I fixed a very high number of feeds in this release, I broke a small handful of others. The newly broken feeds include Forever Geek’s RSS (not Atom) feed, Asa’s notblog*, News.com, and GameSpot feeds. Out of a list of approximately 334 test feeds (374 total - 30 duplicates - 10 no longer exist), only 9 aren’t working. Not too shabby, I’d say.\nI’ll probably begin working on v0.95 on Saturday. Here is a list of things I plan to do in time for the 0.95 release:\n Finish fine-tuning the regular expressions I use for supporting bad feeds. Add the ability to display images in feeds, even though the server is set to block the display of images on other sites. Encode all tags used inside \u0026lt;code\u0026gt;\u0026lt;/code\u0026gt; tags. Get speed back to v0.93 levels. Improve the ability to display feed dates. Improve support for relative URL’s in feeds.  Keep watching this space. Hopefully it won’t take me another month to get the new version out. Come to think of it, have you all gone and bugged Señor Paul about getting SPG 1.1 done yet? If not, you should. He might forget to work on it otherwise. *grin*\n",
        "source":"\nThe new and improved [SimplePie 0.94](/projects/simplepie/) is out. Major features/changes in this version include: Better support for non-English feeds, significantly improved support for poorly written feeds, automatic deletion of outdated cache files, and the stripping-out of potentially harmful tags (as per Mark Pilgrim’s [suggestions]({{% wayback \"http://diveintomark.org/archives/2003/06/12/how_to_consume_rss_safely\" %}})).\n\nThere’s still a smidge of fine-tuning left to do. Although I fixed a very high number of feeds in this release, I broke a small handful of others. The newly broken feeds include Forever Geek’s RSS (not Atom) feed, Asa’s notblog\\*, News.com, and GameSpot feeds. Out of a list of approximately [334 test feeds](/dev/simplepie/parseopml.php) (374 total - 30 duplicates - 10 no longer exist), only 9 aren’t working. Not too shabby, I’d say.\n\nI’ll probably begin working on v0.95 on Saturday. Here is a list of things I plan to do in time for the 0.95 release:\n\n* Finish fine-tuning the regular expressions I use for supporting bad feeds.\n* Add the ability to display images in feeds, even though the server is set to block the display of images on other sites.\n* Encode all tags used inside `\u003ccode\u003e\u003c/code\u003e` tags.\n* Get speed back to v0.93 levels.\n* Improve the ability to display feed dates.\n* Improve support for relative URL’s in feeds.\n\nKeep watching this space. Hopefully it won’t take me another month to get the new version out. Come to think of it, have you all gone and bugged [Señor Paul]({{% wayback \"http://www.relativelyabsolute.com\" %}}) about getting [SPG 1.1]({{% wayback \"http://www.relativelyabsolute.com/spg/\" %}}) done yet? If not, you should. He might forget to work on it otherwise. \\*grin\\*\n"},
    "links": {
        "prev": {"title": "SimplePie... Mmmm, Yummy!", "permalink": "https://ryanparman.com/posts/2004/simplepie-mmmm-yummy/"},
        "next": {"title": "Little Joys", "permalink": "https://ryanparman.com/posts/2004/little-joys/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "SimplePie... Mmmm, Yummy!",
    "description": "",
    "summary": {
        "content": "I finally cracked the nut on the problem I was having with SimplePie. The compatibility fix I’ve been working on finally works for the two feeds that I was having a problem with. Thanks to Mark IJbema for nudging me in the right direction. The downside is that it slowed SimplePie down a bit. I think that it’s something I’ll let slide for this version, and try to tackle it for the next. I still need to go back through the list of 300+ feeds to make sure I haven’t broken something else, but assuming that all goes well, I’ll post SimplePie 0.",
        "isTruncated": true
    },
    "published": "2004-09-21T20:13:08Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/simplepie-mmmm-yummy/",
    "relativePermalink": "/posts/2004/simplepie-mmmm-yummy/",
    "aliases": ["/2004/09/21/simplepie-mmmm-yummy/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 149,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040921-simplepie-mmmm-yummy.md",
        "logicalName": "20040921-simplepie-mmmm-yummy.md",
        "translationBaseName": "20040921-simplepie-mmmm-yummy",
        "baseFileName": "20040921-simplepie-mmmm-yummy",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI finally cracked the nut on the problem I was having with \u003ca href=\"/projects/simplepie/\"\u003eSimplePie\u003c/a\u003e. The compatibility fix I’ve been working on finally works for the two feeds that I was having a problem with. Thanks to Mark IJbema for nudging me in the right direction.\u003c/p\u003e\n\u003cp\u003eThe downside is that it slowed SimplePie down a bit. I think that it’s something I’ll let slide for this version, and try to tackle it for the next. I still need to go back through the list of 300+ feeds to make sure I haven’t broken something else, but assuming that all goes well, I’ll post SimplePie 0.94 sometime tonight or tomorrow.\u003c/p\u003e\n\u003cp\u003eI hope you all are using it, or are planning to use it. It’s good software, really… and no, I’m not trying to float my own boat. If you find any bugs or would like to see something added, \u003ca href=\"/projects/simplepie/contact.php\"\u003elet me know\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"I finally cracked the nut on the problem I was having with SimplePie. The compatibility fix I’ve been working on finally works for the two feeds that I was having a problem with. Thanks to Mark IJbema for nudging me in the right direction.\nThe downside is that it slowed SimplePie down a bit. I think that it’s something I’ll let slide for this version, and try to tackle it for the next. I still need to go back through the list of 300+ feeds to make sure I haven’t broken something else, but assuming that all goes well, I’ll post SimplePie 0.94 sometime tonight or tomorrow.\nI hope you all are using it, or are planning to use it. It’s good software, really… and no, I’m not trying to float my own boat. If you find any bugs or would like to see something added, let me know.\n",
        "source":"\nI finally cracked the nut on the problem I was having with [SimplePie](/projects/simplepie/). The compatibility fix I’ve been working on finally works for the two feeds that I was having a problem with. Thanks to Mark IJbema for nudging me in the right direction.\n\nThe downside is that it slowed SimplePie down a bit. I think that it’s something I’ll let slide for this version, and try to tackle it for the next. I still need to go back through the list of 300+ feeds to make sure I haven’t broken something else, but assuming that all goes well, I’ll post SimplePie 0.94 sometime tonight or tomorrow.\n\nI hope you all are using it, or are planning to use it. It’s good software, really… and no, I’m not trying to float my own boat. If you find any bugs or would like to see something added, [let me know](/projects/simplepie/contact.php).\n"},
    "links": {
        "prev": {"title": "One Million and Counting...", "permalink": "https://ryanparman.com/posts/2004/one-million-and-counting/"},
        "next": {"title": "It Took Me Long Enough...", "permalink": "https://ryanparman.com/posts/2004/it-took-me-long-enough/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "“Wait, Didn't He Just...?”",
    "description": "",
    "summary": {
        "content": "SimplePie 0.93 is now available. This release adds support for RSS and Atom auto-discovery, converting relative-to-the-root URL’s into absolute URL’s (like web browsers do), an improved caching process, and a variety of fixes to aid compatibility with poorly written feeds. SimplePie takes a very Apple-esque approach to feed parsing. Coming from the use of MagpieRSS, I decided to create a “feed parser for the rest of us”. One that is easy, logical, and doesn’t require too much of a background in PHP to use it.",
        "isTruncated": true
    },
    "published": "2004-09-02T09:51:51Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/wait-didnt-he-just/",
    "relativePermalink": "/posts/2004/wait-didnt-he-just/",
    "aliases": ["/2004/09/02/wait-didnt-he-just/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 480,
        "readingTime": "3 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040902-wait-didnt-he-just.md",
        "logicalName": "20040902-wait-didnt-he-just.md",
        "translationBaseName": "20040902-wait-didnt-he-just",
        "baseFileName": "20040902-wait-didnt-he-just",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003e\u003ca href=\"/projects/simplepie/\"\u003eSimplePie 0.93\u003c/a\u003e is now available. This release adds support for RSS and Atom auto-discovery, converting relative-to-the-root URL’s into absolute URL’s (like web browsers do), an improved caching process, and a variety of fixes to aid compatibility with poorly written feeds.\u003c/p\u003e\n\u003cp\u003eSimplePie takes a very Apple-esque approach to feed parsing. Coming from the use of MagpieRSS, I decided to create a “feed parser for the rest of us”. One that is easy, logical, and doesn’t require too much of a background in PHP to use it. My background is in JavaScript, so I believe that if you have a handle on JavaScript and can spend an hour learning about some of the nuances of basic PHP, you should be able to implement SimplePie with little or no fuss.\u003c/p\u003e\n\u003cp\u003eThere are many feed parsers out there that only support one or two flavors of RSS. Most still don’t even have Atom support yet. They all go through and create this whole big array, and then just leave it all sitting there for you to figure out. Maybe they’ll even throw in some caching while they’re at it. Good for them.\u003c/p\u003e\n\u003cp\u003eWhen building SimplePie, I wanted to make it as easy as possible for someone to be able to use it. I looked at a variety of desktop and web-based feed readers to get a feel for the most used and most useful RSS tags, and then I created a collection of functions for those specific purposes. Going with a Firefox-like mentality, I made sure to support everything that most people would want/need while maintaining the ability to extend it as need be.\u003c/p\u003e\n\u003cp\u003eAs Mac OS X is built upon a powerful Unix-based core, SimplePie is built upon a very powerful, yet easy-to-use XML parsing library called XMLize. XMLize takes a fantastic approach to parsing XML documents in a very simple, logical way. I was parsing XML documents within 10 minutes of having found it. This easy-to-use software makes it easy for anyone — even PHP newbies — to extend the power of SimplePie.\u003c/p\u003e\n\u003cp\u003eSwitching from MagpieRSS to using XMLize at the core allows SimplePie to process RSS and Atom feeds at incredible speeds. SimplePie is also aware of some common problems in feeds and makes adjustments as necessary. Does your current feed reader leave you with visible entities or odd question marks? SimplePie automatically handles some of these common glitches, so that the end user doesn’t see anything too wierd when trying to view their favorite feeds.\u003c/p\u003e\n\u003cp\u003eIf you’re looking for new feed parser software, or even if you’re not, give SimplePie a try. If you’re new to PHP, or even if you’re not, SimplePie can save you time and stress. If you’re looking for a feed parser that can be easily extended to do more than it currently does out-of-the-box, SimplePie is your answer.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003e\u003ca href=\"/projects/simplepie/\"\u003eDownload Now!\u003c/a\u003e\u003c/strong\u003e File servers are standing by.\u003c/p\u003e\n",
        "plain":"SimplePie 0.93 is now available. This release adds support for RSS and Atom auto-discovery, converting relative-to-the-root URL’s into absolute URL’s (like web browsers do), an improved caching process, and a variety of fixes to aid compatibility with poorly written feeds.\nSimplePie takes a very Apple-esque approach to feed parsing. Coming from the use of MagpieRSS, I decided to create a “feed parser for the rest of us”. One that is easy, logical, and doesn’t require too much of a background in PHP to use it. My background is in JavaScript, so I believe that if you have a handle on JavaScript and can spend an hour learning about some of the nuances of basic PHP, you should be able to implement SimplePie with little or no fuss.\nThere are many feed parsers out there that only support one or two flavors of RSS. Most still don’t even have Atom support yet. They all go through and create this whole big array, and then just leave it all sitting there for you to figure out. Maybe they’ll even throw in some caching while they’re at it. Good for them.\nWhen building SimplePie, I wanted to make it as easy as possible for someone to be able to use it. I looked at a variety of desktop and web-based feed readers to get a feel for the most used and most useful RSS tags, and then I created a collection of functions for those specific purposes. Going with a Firefox-like mentality, I made sure to support everything that most people would want/need while maintaining the ability to extend it as need be.\nAs Mac OS X is built upon a powerful Unix-based core, SimplePie is built upon a very powerful, yet easy-to-use XML parsing library called XMLize. XMLize takes a fantastic approach to parsing XML documents in a very simple, logical way. I was parsing XML documents within 10 minutes of having found it. This easy-to-use software makes it easy for anyone — even PHP newbies — to extend the power of SimplePie.\nSwitching from MagpieRSS to using XMLize at the core allows SimplePie to process RSS and Atom feeds at incredible speeds. SimplePie is also aware of some common problems in feeds and makes adjustments as necessary. Does your current feed reader leave you with visible entities or odd question marks? SimplePie automatically handles some of these common glitches, so that the end user doesn’t see anything too wierd when trying to view their favorite feeds.\nIf you’re looking for new feed parser software, or even if you’re not, give SimplePie a try. If you’re new to PHP, or even if you’re not, SimplePie can save you time and stress. If you’re looking for a feed parser that can be easily extended to do more than it currently does out-of-the-box, SimplePie is your answer.\nDownload Now! File servers are standing by.\n",
        "source":"\n[SimplePie 0.93](/projects/simplepie/) is now available. This release adds support for RSS and Atom auto-discovery, converting relative-to-the-root URL’s into absolute URL’s (like web browsers do), an improved caching process, and a variety of fixes to aid compatibility with poorly written feeds.\n\nSimplePie takes a very Apple-esque approach to feed parsing. Coming from the use of MagpieRSS, I decided to create a “feed parser for the rest of us”. One that is easy, logical, and doesn’t require too much of a background in PHP to use it. My background is in JavaScript, so I believe that if you have a handle on JavaScript and can spend an hour learning about some of the nuances of basic PHP, you should be able to implement SimplePie with little or no fuss.\n\nThere are many feed parsers out there that only support one or two flavors of RSS. Most still don’t even have Atom support yet. They all go through and create this whole big array, and then just leave it all sitting there for you to figure out. Maybe they’ll even throw in some caching while they’re at it. Good for them.\n\nWhen building SimplePie, I wanted to make it as easy as possible for someone to be able to use it. I looked at a variety of desktop and web-based feed readers to get a feel for the most used and most useful RSS tags, and then I created a collection of functions for those specific purposes. Going with a Firefox-like mentality, I made sure to support everything that most people would want/need while maintaining the ability to extend it as need be.\n\nAs Mac OS X is built upon a powerful Unix-based core, SimplePie is built upon a very powerful, yet easy-to-use XML parsing library called XMLize. XMLize takes a fantastic approach to parsing XML documents in a very simple, logical way. I was parsing XML documents within 10 minutes of having found it. This easy-to-use software makes it easy for anyone — even PHP newbies — to extend the power of SimplePie.\n\nSwitching from MagpieRSS to using XMLize at the core allows SimplePie to process RSS and Atom feeds at incredible speeds. SimplePie is also aware of some common problems in feeds and makes adjustments as necessary. Does your current feed reader leave you with visible entities or odd question marks? SimplePie automatically handles some of these common glitches, so that the end user doesn’t see anything too wierd when trying to view their favorite feeds.\n\nIf you’re looking for new feed parser software, or even if you’re not, give SimplePie a try. If you’re new to PHP, or even if you’re not, SimplePie can save you time and stress. If you’re looking for a feed parser that can be easily extended to do more than it currently does out-of-the-box, SimplePie is your answer.\n\n**[Download Now!](/projects/simplepie/)** File servers are standing by.\n"},
    "links": {
        "prev": {"title": "Five Hundred Thousand", "permalink": "https://ryanparman.com/posts/2004/five-hundred-thousand/"},
        "next": {"title": "What's New?", "permalink": "https://ryanparman.com/posts/2004/whats-new-2/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "I Need Your Help!",
    "description": "",
    "summary": {
        "content": "I’ve been on a roll with SimplePie development lately (if you couldn’t already tell). Version 0.93 will probably be released in the next day or so, and at that point should be feature-complete. The remaining Pre–1.0 releases (0.94, 0.95, 0.96, etc.) will be dedicated to compatibility fixes. There are a lot of poorly coded feeds out there, and I need to know about them to that I can patch them up as best as possible. What I need from you are your reading lists.",
        "isTruncated": true
    },
    "published": "2004-08-31T23:10:18Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/i-need-your-help/",
    "relativePermalink": "/posts/2004/i-need-your-help/",
    "aliases": ["/2004/08/31/i-need-your-help/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 250,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040831-i-need-your-help.md",
        "logicalName": "20040831-i-need-your-help.md",
        "translationBaseName": "20040831-i-need-your-help",
        "baseFileName": "20040831-i-need-your-help",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI’ve been on a roll with SimplePie development lately (if you couldn’t already tell). Version 0.93 will probably be released in the next day or so, and at that point should be feature-complete. The remaining Pre–1.0 releases (0.94, 0.95, 0.96, etc.) will be dedicated to compatibility fixes. There are a lot of poorly coded feeds out there, and I need to know about them to that I can patch them up as best as possible.\u003c/p\u003e\n\u003cp\u003eWhat I need from you are your reading lists. Whatever sites you read or follow via RSS or Atom, I want to know about them. If you’ve got Feed Demon, SharpReader, RSS Bandit, NetNewsWire, Shrook, PulpFiction, or another feed reader, do me a favor and export your feed listings in OPML format (which would be the easiest thing for you) and upload them to your website somewhere. Then, leave a comment that contains the URL to that OPML file. I’ll then go through each and every site and find each and every RSS or Atom feed and test them one-by-one to make sure that SimplePie is as solid and production-ready as possible.\u003c/p\u003e\n\u003cp\u003eThe higher the quantity of feeds I’m able to test, the better SimplePie will be. I know that most of the (standards-compliant) blogging world is pretty solid, but I’ve noticed that many development and programming-related sites have horrendous feeds. I’m also going through the Feed Demon forums and testing as many of those feeds as I can.\u003c/p\u003e\n\u003cp\u003eYour help would be tremendously appreciated!\u003c/p\u003e\n",
        "plain":"I’ve been on a roll with SimplePie development lately (if you couldn’t already tell). Version 0.93 will probably be released in the next day or so, and at that point should be feature-complete. The remaining Pre–1.0 releases (0.94, 0.95, 0.96, etc.) will be dedicated to compatibility fixes. There are a lot of poorly coded feeds out there, and I need to know about them to that I can patch them up as best as possible.\nWhat I need from you are your reading lists. Whatever sites you read or follow via RSS or Atom, I want to know about them. If you’ve got Feed Demon, SharpReader, RSS Bandit, NetNewsWire, Shrook, PulpFiction, or another feed reader, do me a favor and export your feed listings in OPML format (which would be the easiest thing for you) and upload them to your website somewhere. Then, leave a comment that contains the URL to that OPML file. I’ll then go through each and every site and find each and every RSS or Atom feed and test them one-by-one to make sure that SimplePie is as solid and production-ready as possible.\nThe higher the quantity of feeds I’m able to test, the better SimplePie will be. I know that most of the (standards-compliant) blogging world is pretty solid, but I’ve noticed that many development and programming-related sites have horrendous feeds. I’m also going through the Feed Demon forums and testing as many of those feeds as I can.\nYour help would be tremendously appreciated!\n",
        "source":"\nI’ve been on a roll with SimplePie development lately (if you couldn’t already tell). Version 0.93 will probably be released in the next day or so, and at that point should be feature-complete. The remaining Pre–1.0 releases (0.94, 0.95, 0.96, etc.) will be dedicated to compatibility fixes. There are a lot of poorly coded feeds out there, and I need to know about them to that I can patch them up as best as possible.\n\nWhat I need from you are your reading lists. Whatever sites you read or follow via RSS or Atom, I want to know about them. If you’ve got Feed Demon, SharpReader, RSS Bandit, NetNewsWire, Shrook, PulpFiction, or another feed reader, do me a favor and export your feed listings in OPML format (which would be the easiest thing for you) and upload them to your website somewhere. Then, leave a comment that contains the URL to that OPML file. I’ll then go through each and every site and find each and every RSS or Atom feed and test them one-by-one to make sure that SimplePie is as solid and production-ready as possible.\n\nThe higher the quantity of feeds I’m able to test, the better SimplePie will be. I know that most of the (standards-compliant) blogging world is pretty solid, but I’ve noticed that many development and programming-related sites have horrendous feeds. I’m also going through the Feed Demon forums and testing as many of those feeds as I can.\n\nYour help would be tremendously appreciated!\n"},
    "links": {
        "prev": {"title": "Newer-er.  Better-er.  Simpler-er.", "permalink": "https://ryanparman.com/posts/2004/newer-er-better-er-simpler-er/"},
        "next": {"title": "Five Hundred Thousand", "permalink": "https://ryanparman.com/posts/2004/five-hundred-thousand/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Newer-er.  Better-er.  Simpler-er.",
    "description": "",
    "summary": {
        "content": "In record time, SimplePie 0.92 is now available. This release adds all sorts of things such as better (and faster) caching, a user agent string, smarter handling of problematic characters and entities, and a fix for Mr. Dunstan’s feed. For those who are skeptical of “yet another feed parser”, or are hesitant to switch to (or begin using) SimplePie, let me explain it this way. Most RSS parsers go through this process of breaking a feed down into this big array, which may be fine for some, but can be impossible for beginners and newbies.",
        "isTruncated": true
    },
    "published": "2004-08-30T03:55:24Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/newer-er-better-er-simpler-er/",
    "relativePermalink": "/posts/2004/newer-er-better-er-simpler-er/",
    "aliases": ["/2004/08/29/newer-er-better-er-simpler-er/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 278,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040830-newer-er-better-er-simpler-er.md",
        "logicalName": "20040830-newer-er-better-er-simpler-er.md",
        "translationBaseName": "20040830-newer-er-better-er-simpler-er",
        "baseFileName": "20040830-newer-er-better-er-simpler-er",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eIn record time, \u003ca href=\"/projects/simplepie/\"\u003eSimplePie 0.92\u003c/a\u003e is now available. This release adds all sorts of things such as better (and faster) caching, a user agent string, smarter handling of problematic characters and entities, and a fix for \u003ca href=\"https://web.archive.org/web/20040830035524/http://www.1976design.com/blog/\"\u003eMr. Dunstan’s\u003c/a\u003e feed.\u003c/p\u003e\n\u003cp\u003eFor those who are skeptical of “yet another feed parser”, or are hesitant to switch to (or begin using) SimplePie, let me explain it this way. Most RSS parsers go through this process of breaking a feed down into this big array, which may be fine for some, but can be impossible for beginners and newbies. SimplePie takes an Apple-esque approach by providing thoughtfully-named, easy to use functions that do what one would expect them to do.\u003c/p\u003e\n\u003cp\u003eAt the core, SimplePie relies on \u003ca href=\"https://web.archive.org/web/20040830035524/http://www.hansanderson.com/php/xml/\"\u003eXMLize\u003c/a\u003e (as the easy-to-use Mac OS X relies on the more powerful Unix-based core), which is a very powerful, yet elegantly simple class for parsing XML documents with PHP. This means that if SimplePie doesn’t do all that you want it to out-of-the-box (which would be suprising, but possible), you can easily extend it to support whatever else you might want.\u003c/p\u003e\n\u003cp\u003eI’ve frozen the current function set where it’s at. This means that if you’ve been using SimplePie already, or if you’re wanting to start using it, you won’t need to change any of your code as new versions get released. You’ll simply need to replace the old SimplePie library with the new one to take advantage of new improvements. New functions may become available to use, but new versions of SimplePie will not break existing services and applications.\u003c/p\u003e\n\u003cp\u003eIf you’ve been thinking about building your own web-based RSS/Atom reader, why not give SimplePie a try?\u003c/p\u003e\n",
        "plain":"In record time, SimplePie 0.92 is now available. This release adds all sorts of things such as better (and faster) caching, a user agent string, smarter handling of problematic characters and entities, and a fix for Mr. Dunstan’s feed.\nFor those who are skeptical of “yet another feed parser”, or are hesitant to switch to (or begin using) SimplePie, let me explain it this way. Most RSS parsers go through this process of breaking a feed down into this big array, which may be fine for some, but can be impossible for beginners and newbies. SimplePie takes an Apple-esque approach by providing thoughtfully-named, easy to use functions that do what one would expect them to do.\nAt the core, SimplePie relies on XMLize (as the easy-to-use Mac OS X relies on the more powerful Unix-based core), which is a very powerful, yet elegantly simple class for parsing XML documents with PHP. This means that if SimplePie doesn’t do all that you want it to out-of-the-box (which would be suprising, but possible), you can easily extend it to support whatever else you might want.\nI’ve frozen the current function set where it’s at. This means that if you’ve been using SimplePie already, or if you’re wanting to start using it, you won’t need to change any of your code as new versions get released. You’ll simply need to replace the old SimplePie library with the new one to take advantage of new improvements. New functions may become available to use, but new versions of SimplePie will not break existing services and applications.\nIf you’ve been thinking about building your own web-based RSS/Atom reader, why not give SimplePie a try?\n",
        "source":"\nIn record time, [SimplePie 0.92](/projects/simplepie/) is now available. This release adds all sorts of things such as better (and faster) caching, a user agent string, smarter handling of problematic characters and entities, and a fix for [Mr. Dunstan’s]({{% wayback \"http://www.1976design.com/blog/\" %}}) feed.\n\nFor those who are skeptical of “yet another feed parser”, or are hesitant to switch to (or begin using) SimplePie, let me explain it this way. Most RSS parsers go through this process of breaking a feed down into this big array, which may be fine for some, but can be impossible for beginners and newbies. SimplePie takes an Apple-esque approach by providing thoughtfully-named, easy to use functions that do what one would expect them to do.\n\nAt the core, SimplePie relies on [XMLize]({{% wayback \"http://www.hansanderson.com/php/xml/\" %}}) (as the easy-to-use Mac OS X relies on the more powerful Unix-based core), which is a very powerful, yet elegantly simple class for parsing XML documents with PHP. This means that if SimplePie doesn’t do all that you want it to out-of-the-box (which would be suprising, but possible), you can easily extend it to support whatever else you might want.\n\nI’ve frozen the current function set where it’s at. This means that if you’ve been using SimplePie already, or if you’re wanting to start using it, you won’t need to change any of your code as new versions get released. You’ll simply need to replace the old SimplePie library with the new one to take advantage of new improvements. New functions may become available to use, but new versions of SimplePie will not break existing services and applications.\n\nIf you’ve been thinking about building your own web-based RSS/Atom reader, why not give SimplePie a try?\n"},
    "links": {
        "prev": {"title": "The Battle of Dunstan vs. Andrei vs. Mark", "permalink": "https://ryanparman.com/posts/2004/the-battle-of-dunstan-vs-andrei-vs-mark/"},
        "next": {"title": "I Need Your Help!", "permalink": "https://ryanparman.com/posts/2004/i-need-your-help/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "The Battle of Dunstan vs. Andrei vs. Mark",
    "description": "",
    "summary": {
        "content": "…well, their syndication feeds anyways. Here’s the problem: While working on SimplePie initially, I used copies of Dunstan’s Atom and RSS feeds because I felt that they’d be representative of most people’s decently well-formed feeds. I know that some people have worse feeds, and that Mark Pilgrim’s feeds are a bit too “academically” correct. Dunstan has a problem with his feed. He uses the numeric entity for a “smart-apostrophe” in his feed’s \u0026lt;title\u0026gt; tag. This happens to be a UTF–8 character.",
        "isTruncated": true
    },
    "published": "2004-08-29T19:38:27Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/the-battle-of-dunstan-vs-andrei-vs-mark/",
    "relativePermalink": "/posts/2004/the-battle-of-dunstan-vs-andrei-vs-mark/",
    "aliases": ["/2004/08/29/the-battle-of-dunstan-vs-andrei-vs-mark/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 378,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040829-the-battle-of-dunstan-vs-andrei-vs-mark.md",
        "logicalName": "20040829-the-battle-of-dunstan-vs-andrei-vs-mark.md",
        "translationBaseName": "20040829-the-battle-of-dunstan-vs-andrei-vs-mark",
        "baseFileName": "20040829-the-battle-of-dunstan-vs-andrei-vs-mark",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003e…well, their syndication feeds anyways. Here’s the problem:\u003c/p\u003e\n\u003cp\u003eWhile working on \u003ca href=\"/projects/simplepie/\"\u003eSimplePie\u003c/a\u003e initially, I used copies of \u003ca href=\"https://web.archive.org/web/20040829193827/http://www.1976design.com/blog/\"\u003eDunstan’s\u003c/a\u003e Atom and RSS feeds because I felt that they’d be representative of most people’s decently well-formed feeds. I know that some people have worse feeds, and that \u003ca href=\"https://web.archive.org/web/20040829193827/http://www.diveintomark.org\"\u003eMark Pilgrim’s\u003c/a\u003e feeds are a bit too “academically” correct.\u003c/p\u003e\n\u003cp\u003eDunstan has a problem with his feed. He uses the numeric entity for a “smart-apostrophe” in his feed’s \u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e tag. This happens to be a UTF–8 character. For whatever reason, parsing his feed in every PHP-based feed reader I’ve ever used displays that smart-apostrophe as a question mark. In wanting to build a “feed parser for the rest of us”, I decided to be smart and wrap a CDATA section around the contents of the \u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e, and \u003ccode\u003e\u0026lt;description\u0026gt;\u003c/code\u003e on the fly for those that don’t already have them. Dunstan’s question mark becomes the character that it’s supposed to be. No problem.\u003c/p\u003e\n\u003cp\u003eOn the other hand, \u003ca href=\"https://web.archive.org/web/20040829193827/http://www.designbyfire.com\"\u003eAndrei\u003c/a\u003e also has a problem with his feed. Well, not really… it’s just that the fix I put in place to fix Dunstan’s feed broke Andrei’s feed. Andrei does a fake-out with his CDATA sections. He closes the CDATA section in \u003ccode\u003e\u0026lt;description\u0026gt;\u003c/code\u003e, then has one last bit of content before closing the tag. This is just enough to get past SimplePie’s logic. Wonderful.\u003c/p\u003e\n\u003cp\u003eSince Dunstan’s issue is only in the feed’s \u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e tag, I went ahead and changed how SimplePie handles the feeds by removing the code for wrapping CDATA sections around \u003ccode\u003e\u0026lt;link\u0026gt;\u003c/code\u003e and \u003ccode\u003e\u0026lt;description\u0026gt;\u003c/code\u003e. Both Dunstan and Andrei have working feeds again.\u003c/p\u003e\n\u003cp\u003eThen, I go and test it on \u003ca href=\"https://web.archive.org/web/20040829193827/http://www.diveintomark.org\"\u003eMark’s\u003c/a\u003e Feed Parser project feed. SimplePie breaks down again. Well, crap. Instead of using \u003ccode\u003e\u0026lt;title\u0026gt;\u003c/code\u003e like normal people, Mark has to be all cool by using \u003ccode\u003e\u0026lt;title type=\u0026quot;text/plain\u0026quot;\u0026gt;\u003c/code\u003e. Argh.\u003c/p\u003e\n\u003cp\u003eSo, I’m off to find some code that can resolve this little quarrel. I’m thinking about going through and looking for UTF–8 entities (4-digit, typically begins with an 8: \u003ccode\u003e\u0026amp;#8217;\u003c/code\u003e) and wrapping CDATA sections around those entities alone, which will probably work. I don’t want to release this software as 1.0 until it performs satisfactorily with every single feed in my entire \u003ca href=\"/blogs/\"\u003ereading list\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eVersion 0.92 is \u003cdel\u003eon it’s way\u003c/del\u003e \u003ca href=\"/projects/simplepie/\"\u003ehere\u003c/a\u003e folks. \u003ca href=\"https://web.archive.org/web/20040829193827/http://www.leftjustified.net\"\u003eAndrew\u003c/a\u003e, how’s that WordPress plug-in coming along?\u003c/p\u003e\n",
        "plain":"…well, their syndication feeds anyways. Here’s the problem:\nWhile working on SimplePie initially, I used copies of Dunstan’s Atom and RSS feeds because I felt that they’d be representative of most people’s decently well-formed feeds. I know that some people have worse feeds, and that Mark Pilgrim’s feeds are a bit too “academically” correct.\nDunstan has a problem with his feed. He uses the numeric entity for a “smart-apostrophe” in his feed’s \u0026lt;title\u0026gt; tag. This happens to be a UTF–8 character. For whatever reason, parsing his feed in every PHP-based feed reader I’ve ever used displays that smart-apostrophe as a question mark. In wanting to build a “feed parser for the rest of us”, I decided to be smart and wrap a CDATA section around the contents of the \u0026lt;title\u0026gt;, \u0026lt;link\u0026gt;, and \u0026lt;description\u0026gt; on the fly for those that don’t already have them. Dunstan’s question mark becomes the character that it’s supposed to be. No problem.\nOn the other hand, Andrei also has a problem with his feed. Well, not really… it’s just that the fix I put in place to fix Dunstan’s feed broke Andrei’s feed. Andrei does a fake-out with his CDATA sections. He closes the CDATA section in \u0026lt;description\u0026gt;, then has one last bit of content before closing the tag. This is just enough to get past SimplePie’s logic. Wonderful.\nSince Dunstan’s issue is only in the feed’s \u0026lt;title\u0026gt; tag, I went ahead and changed how SimplePie handles the feeds by removing the code for wrapping CDATA sections around \u0026lt;link\u0026gt; and \u0026lt;description\u0026gt;. Both Dunstan and Andrei have working feeds again.\nThen, I go and test it on Mark’s Feed Parser project feed. SimplePie breaks down again. Well, crap. Instead of using \u0026lt;title\u0026gt; like normal people, Mark has to be all cool by using \u0026lt;title type=\u0026quot;text/plain\u0026quot;\u0026gt;. Argh.\nSo, I’m off to find some code that can resolve this little quarrel. I’m thinking about going through and looking for UTF–8 entities (4-digit, typically begins with an 8: \u0026amp;#8217;) and wrapping CDATA sections around those entities alone, which will probably work. I don’t want to release this software as 1.0 until it performs satisfactorily with every single feed in my entire reading list.\nVersion 0.92 is on it’s way here folks. Andrew, how’s that WordPress plug-in coming along?\n",
        "source":"\n…well, their syndication feeds anyways. Here’s the problem:\n\nWhile working on [SimplePie](/projects/simplepie/) initially, I used copies of [Dunstan’s]({{% wayback \"http://www.1976design.com/blog/\" %}}) Atom and RSS feeds because I felt that they’d be representative of most people’s decently well-formed feeds. I know that some people have worse feeds, and that [Mark Pilgrim’s]({{% wayback \"http://www.diveintomark.org\" %}}) feeds are a bit too “academically” correct.\n\nDunstan has a problem with his feed. He uses the numeric entity for a “smart-apostrophe” in his feed’s `\u003ctitle\u003e` tag. This happens to be a UTF–8 character. For whatever reason, parsing his feed in every PHP-based feed reader I’ve ever used displays that smart-apostrophe as a question mark. In wanting to build a “feed parser for the rest of us”, I decided to be smart and wrap a CDATA section around the contents of the `\u003ctitle\u003e`, `\u003clink\u003e`, and `\u003cdescription\u003e` on the fly for those that don’t already have them. Dunstan’s question mark becomes the character that it’s supposed to be. No problem.\n\nOn the other hand, [Andrei]({{% wayback \"http://www.designbyfire.com\" %}}) also has a problem with his feed. Well, not really… it’s just that the fix I put in place to fix Dunstan’s feed broke Andrei’s feed. Andrei does a fake-out with his CDATA sections. He closes the CDATA section in `\u003cdescription\u003e`, then has one last bit of content before closing the tag. This is just enough to get past SimplePie’s logic. Wonderful.\n\nSince Dunstan’s issue is only in the feed’s `\u003ctitle\u003e` tag, I went ahead and changed how SimplePie handles the feeds by removing the code for wrapping CDATA sections around `\u003clink\u003e` and `\u003cdescription\u003e`. Both Dunstan and Andrei have working feeds again.\n\nThen, I go and test it on [Mark’s]({{% wayback \"http://www.diveintomark.org\" %}}) Feed Parser project feed. SimplePie breaks down again. Well, crap. Instead of using `\u003ctitle\u003e` like normal people, Mark has to be all cool by using `\u003ctitle type=\"text/plain\"\u003e`. Argh.\n\nSo, I’m off to find some code that can resolve this little quarrel. I’m thinking about going through and looking for UTF–8 entities (4-digit, typically begins with an 8: `\u0026#8217;`) and wrapping CDATA sections around those entities alone, which will probably work. I don’t want to release this software as 1.0 until it performs satisfactorily with every single feed in my entire [reading list](/blogs/).\n\nVersion 0.92 is ~~on it’s way~~ [here](/projects/simplepie/) folks. [Andrew]({{% wayback \"http://www.leftjustified.net\" %}}), how’s that WordPress plug-in coming along?\n"},
    "links": {
        "prev": {"title": "Newer.  Better.  Simpler.", "permalink": "https://ryanparman.com/posts/2004/newer-better-simpler/"},
        "next": {"title": "Newer-er.  Better-er.  Simpler-er.", "permalink": "https://ryanparman.com/posts/2004/newer-er-better-er-simpler-er/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Newer.  Better.  Simpler.",
    "description": "",
    "summary": {
        "content": "SimplePie 0.91 is now available. This release adds support for URL’s with a relative path, better handling of some improperly written feeds, and fixes a problem where feeds weren’t getting loaded all the way before trying to parse them, causing SimplePie to choke.",
        "isTruncated": false
    },
    "published": "2004-08-28T22:29:31Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/newer-better-simpler/",
    "relativePermalink": "/posts/2004/newer-better-simpler/",
    "aliases": ["/2004/08/28/newer-better-simpler/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 43,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040828-newer-better-simpler.md",
        "logicalName": "20040828-newer-better-simpler.md",
        "translationBaseName": "20040828-newer-better-simpler",
        "baseFileName": "20040828-newer-better-simpler",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003e\u003ca href=\"/projects/simplepie/\"\u003eSimplePie 0.91\u003c/a\u003e is now available. This release adds support for URL’s with a relative path, better handling of some improperly written feeds, and fixes a problem where feeds weren’t getting loaded all the way before trying to parse them, causing SimplePie to choke.\u003c/p\u003e\n",
        "plain":"SimplePie 0.91 is now available. This release adds support for URL’s with a relative path, better handling of some improperly written feeds, and fixes a problem where feeds weren’t getting loaded all the way before trying to parse them, causing SimplePie to choke.\n",
        "source":"\n[SimplePie 0.91](/projects/simplepie/) is now available. This release adds support for URL’s with a relative path, better handling of some improperly written feeds, and fixes a problem where feeds weren’t getting loaded all the way before trying to parse them, causing SimplePie to choke.\n"},
    "links": {
        "prev": {"title": "Movie Reviews 2004", "permalink": "https://ryanparman.com/posts/2004/movie-reviews-2004/"},
        "next": {"title": "The Battle of Dunstan vs. Andrei vs. Mark", "permalink": "https://ryanparman.com/posts/2004/the-battle-of-dunstan-vs-andrei-vs-mark/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "The Ultrafast SimplePie 0.9 Is Now Available!",
    "description": "",
    "summary": {
        "content": "Responses to the release of SimplePie 0.8 have been very positive. SimplePie has accomplished it’s goal of making it easier to create online feed readers, or anything else that requires RSS parsing. The only complaints that I got were mostly speed-related. Most people who sent me feedback thought that SimplePie was just too darn slow. Unfortunately, the speed issues were directly related to my use of Magpie RSS as the parsing engine. So, I decided to re-write it completely from scratch.",
        "isTruncated": true
    },
    "published": "2004-08-04T05:50:55Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/the-ultrafast-simplepie-09-is-now-available/",
    "relativePermalink": "/posts/2004/the-ultrafast-simplepie-09-is-now-available/",
    "aliases": ["/2004/08/03/the-ultrafast-simplepie-09-is-now-available/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 239,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040804-the-ultrafast-simplepie-09-is-now-available.md",
        "logicalName": "20040804-the-ultrafast-simplepie-09-is-now-available.md",
        "translationBaseName": "20040804-the-ultrafast-simplepie-09-is-now-available",
        "baseFileName": "20040804-the-ultrafast-simplepie-09-is-now-available",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eResponses to the release of \u003ca href=\"/projects/simplepie/\"\u003eSimplePie\u003c/a\u003e 0.8 have been very positive. SimplePie has accomplished it’s goal of making it easier to create online feed readers, or anything else that requires RSS parsing.\u003c/p\u003e\n\u003cp\u003eThe only complaints that I got were mostly speed-related. Most people who sent me feedback thought that SimplePie was just too darn slow. Unfortunately, the speed issues were directly related to my use of \u003ca href=\"https://web.archive.org/web/20040804055055/http://magpierss.sourceforge.net\"\u003eMagpie RSS\u003c/a\u003e as the parsing engine.\u003c/p\u003e\n\u003cp\u003eSo, I decided to re-write it completely from scratch. I did away with Magpie altogether, and built a brand-new feed parser based around Hans Anderson’s \u003ca href=\"https://web.archive.org/web/20040804055055/http://www.hansanderson.com/php/xml/\"\u003eXMLize\u003c/a\u003e library for parsing XML documents with PHP. The results were astounding!\u003c/p\u003e\n\u003cp\u003eI removed all external dependencies. SimplePie is now completely self-contained. Also, I tweaked with the way that SimplePie parses RSS feeds. In doing so, I’ve got v0.9 running anywhere from 20 to \u003cem\u003e162 times faster\u003c/em\u003e than v0.8. Specifically, it’s a maximum speed increase of over 16215%. On average, however, it only runs around 100 times faster than the previous version. As a matter of fact, I’ve never seen v0.9 take longer than 0.35 seconds to process and render a RSS feed.\u003c/p\u003e\n\u003cp\u003eIf you’re looking for some RSS parsing software for PHP, I hope that SimplePie will be your choice. Of course, I’m always open to feature requests and bug reports, so let me know if you have something to say…\u003c/p\u003e\n\u003cp\u003eYou can download SimplePie 0.9 from the \u003ca href=\"/projects/simplepie/\"\u003eSimplePie Project Page\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"Responses to the release of SimplePie 0.8 have been very positive. SimplePie has accomplished it’s goal of making it easier to create online feed readers, or anything else that requires RSS parsing.\nThe only complaints that I got were mostly speed-related. Most people who sent me feedback thought that SimplePie was just too darn slow. Unfortunately, the speed issues were directly related to my use of Magpie RSS as the parsing engine.\nSo, I decided to re-write it completely from scratch. I did away with Magpie altogether, and built a brand-new feed parser based around Hans Anderson’s XMLize library for parsing XML documents with PHP. The results were astounding!\nI removed all external dependencies. SimplePie is now completely self-contained. Also, I tweaked with the way that SimplePie parses RSS feeds. In doing so, I’ve got v0.9 running anywhere from 20 to 162 times faster than v0.8. Specifically, it’s a maximum speed increase of over 16215%. On average, however, it only runs around 100 times faster than the previous version. As a matter of fact, I’ve never seen v0.9 take longer than 0.35 seconds to process and render a RSS feed.\nIf you’re looking for some RSS parsing software for PHP, I hope that SimplePie will be your choice. Of course, I’m always open to feature requests and bug reports, so let me know if you have something to say…\nYou can download SimplePie 0.9 from the SimplePie Project Page.\n",
        "source":"\nResponses to the release of [SimplePie](/projects/simplepie/) 0.8 have been very positive. SimplePie has accomplished it’s goal of making it easier to create online feed readers, or anything else that requires RSS parsing.\n\nThe only complaints that I got were mostly speed-related. Most people who sent me feedback thought that SimplePie was just too darn slow. Unfortunately, the speed issues were directly related to my use of [Magpie RSS]({{% wayback \"http://magpierss.sourceforge.net\" %}}) as the parsing engine.\n\nSo, I decided to re-write it completely from scratch. I did away with Magpie altogether, and built a brand-new feed parser based around Hans Anderson’s [XMLize]({{% wayback \"http://www.hansanderson.com/php/xml/\" %}}) library for parsing XML documents with PHP. The results were astounding!\n\nI removed all external dependencies. SimplePie is now completely self-contained. Also, I tweaked with the way that SimplePie parses RSS feeds. In doing so, I’ve got v0.9 running anywhere from 20 to *162 times faster* than v0.8. Specifically, it’s a maximum speed increase of over 16215%. On average, however, it only runs around 100 times faster than the previous version. As a matter of fact, I’ve never seen v0.9 take longer than 0.35 seconds to process and render a RSS feed.\n\nIf you’re looking for some RSS parsing software for PHP, I hope that SimplePie will be your choice. Of course, I’m always open to feature requests and bug reports, so let me know if you have something to say…\n\nYou can download SimplePie 0.9 from the [SimplePie Project Page](/projects/simplepie/).\n"},
    "links": {
        "prev": {"title": "Current Stats", "permalink": "https://ryanparman.com/posts/2004/current-stats/"},
        "next": {"title": "Windows XP SP2 and Mac OS X 10.3.5", "permalink": "https://ryanparman.com/posts/2004/windows-xp-sp2-and-mac-os-x-1035/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "SimplePie... Yummy!",
    "description": "",
    "summary": {
        "content": "Have you ever wanted to create your own online RSS/Atom feed reader? Did you fiddle around with other solutions that just plain sucked? Did you try to use the awesome Magpie RSS, and just couldn’t get it to work like you wanted? Personally, I’m still fairly new to PHP, but I have a solid understanding of scripting principles and grasp of basic PHP syntax. Even still, I found Magpie a bit confusing sometimes as I was starting out with it. Because of this, I figured I’d try to make it easier for people like me to leverage Magpie’s power with a simpler command set.",
        "isTruncated": true
    },
    "published": "2004-07-20T21:08:15Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/simplepie-yummy/",
    "relativePermalink": "/posts/2004/simplepie-yummy/",
    "aliases": ["/2004/07/20/simplepie-yummy/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 175,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040720-simplepie-yummy.md",
        "logicalName": "20040720-simplepie-yummy.md",
        "translationBaseName": "20040720-simplepie-yummy",
        "baseFileName": "20040720-simplepie-yummy",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eHave you ever wanted to create your own online RSS/Atom feed reader? Did you fiddle around with other solutions that just plain sucked? Did you try to use the awesome \u003ca href=\"https://web.archive.org/web/20040720210815/http://magpierss.sourceforge.net\"\u003eMagpie RSS\u003c/a\u003e, and just couldn’t get it to work like you wanted?\u003c/p\u003e\n\u003cp\u003ePersonally, I’m still fairly new to PHP, but I have a solid understanding of scripting principles and grasp of basic PHP syntax. Even still, I found Magpie a bit confusing sometimes as I was starting out with it. Because of this, I figured I’d try to make it easier for people like me to leverage Magpie’s power with a simpler command set.\u003c/p\u003e\n\u003cp\u003eI’d like you all to welcome \u003ca href=\"/projects/simplepie/\"\u003eSimplePie\u003c/a\u003e. SimplePie is short for “Simple API for Magpie”, and makes it very easy to create your own PHP-based feed readers on your own sites.\u003c/p\u003e\n\u003cp\u003eI’m sure it’s not flawless, so I’d like you all to download the latest copy of \u003ca href=\"https://web.archive.org/web/20040720210815/http://sourceforge.net/project/showfiles.php?group_id=55691\u0026amp;package_id=50728\"\u003eMagpie RSS\u003c/a\u003e and \u003ca href=\"/projects/simplepie/\"\u003eSimplePie\u003c/a\u003e, give it a try, and tell me how you like it and what I can do to make it better.\u003c/p\u003e\n",
        "plain":"Have you ever wanted to create your own online RSS/Atom feed reader? Did you fiddle around with other solutions that just plain sucked? Did you try to use the awesome Magpie RSS, and just couldn’t get it to work like you wanted?\nPersonally, I’m still fairly new to PHP, but I have a solid understanding of scripting principles and grasp of basic PHP syntax. Even still, I found Magpie a bit confusing sometimes as I was starting out with it. Because of this, I figured I’d try to make it easier for people like me to leverage Magpie’s power with a simpler command set.\nI’d like you all to welcome SimplePie. SimplePie is short for “Simple API for Magpie”, and makes it very easy to create your own PHP-based feed readers on your own sites.\nI’m sure it’s not flawless, so I’d like you all to download the latest copy of Magpie RSS and SimplePie, give it a try, and tell me how you like it and what I can do to make it better.\n",
        "source":"\nHave you ever wanted to create your own online RSS/Atom feed reader? Did you fiddle around with other solutions that just plain sucked? Did you try to use the awesome [Magpie RSS]({{% wayback \"http://magpierss.sourceforge.net\" %}}), and just couldn’t get it to work like you wanted?\n\nPersonally, I’m still fairly new to PHP, but I have a solid understanding of scripting principles and grasp of basic PHP syntax. Even still, I found Magpie a bit confusing sometimes as I was starting out with it. Because of this, I figured I’d try to make it easier for people like me to leverage Magpie’s power with a simpler command set.\n\nI’d like you all to welcome [SimplePie](/projects/simplepie/). SimplePie is short for “Simple API for Magpie”, and makes it very easy to create your own PHP-based feed readers on your own sites.\n\nI’m sure it’s not flawless, so I’d like you all to download the latest copy of [Magpie RSS]({{% wayback \"http://sourceforge.net/project/showfiles.php?group_id=55691\u0026package_id=50728\" %}}) and [SimplePie](/projects/simplepie/), give it a try, and tell me how you like it and what I can do to make it better.\n"},
    "links": {
        "prev": {"title": "My Apple Store Experience", "permalink": "https://ryanparman.com/posts/2004/my-apple-store-experience/"},
        "next": {"title": "Psychos Need Not Apply", "permalink": "https://ryanparman.com/posts/2004/psychos-need-not-apply/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Lots of Little Things",
    "description": "",
    "summary": {
        "content": "I’ve got two posts on my laptop that I simply haven’t had the time to post. I’ll try to get to it this evening. Meanwhile, I recently found out that my cookie script has been recommended on IBM’s forums, my Java detection script has been talked about on Sun’s Java forums, my Message Center 5.5 script is gaining popularity at Coding Forums, and I continue to get help with ideas to improve my Flash detection script (which uses a format that I will soon switch all of my other detection scripts to because it’s more flexible).",
        "isTruncated": true
    },
    "published": "2004-07-07T20:30:55Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/lots-of-little-things/",
    "relativePermalink": "/posts/2004/lots-of-little-things/",
    "aliases": ["/2004/07/07/lots-of-little-things/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 306,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040707-lots-of-little-things.md",
        "logicalName": "20040707-lots-of-little-things.md",
        "translationBaseName": "20040707-lots-of-little-things",
        "baseFileName": "20040707-lots-of-little-things",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI’ve got two posts on my laptop that I simply haven’t had the time to post. I’ll try to get to it this evening.\u003c/p\u003e\n\u003cp\u003eMeanwhile, I recently found out that my \u003ca href=\"/scripts/cookies.php\"\u003ecookie script\u003c/a\u003e has been recommended on IBM’s forums, my \u003ca href=\"/scripts/java.php\"\u003eJava detection script\u003c/a\u003e has been talked about on Sun’s Java forums, my \u003ca href=\"/scripts/messagecenter.php\"\u003eMessage Center 5.5\u003c/a\u003e script is gaining popularity at \u003ca href=\"https://web.archive.org/web/20040707203055/http://www.codingforums.com\"\u003eCoding Forums\u003c/a\u003e, and I continue to get help with ideas to improve my \u003ca href=\"/scripts/flash.php\"\u003eFlash detection script\u003c/a\u003e (which uses a format that I will soon switch all of my other detection scripts to because it’s more flexible).\u003c/p\u003e\n\u003cp\u003eI’m aware of two different projects that are using the \u003ca href=\"/downloads/\"\u003estandalone IE’s\u003c/a\u003e: \u003ca href=\"https://web.archive.org/web/20040707203055/http://kreacom.dk/tools/optool/2.0/\"\u003eOpTool\u003c/a\u003e, which appears to add the ability to load any URL into any browser, and \u003ca href=\"https://web.archive.org/web/20040707203055/http://www.zeit.ca/mozie/\"\u003eMozIE\u003c/a\u003e that allows you to have a split-screen view of a webpage with multiple browsers at once.\u003c/p\u003e\n\u003cp\u003eI’ve also been contacted about using my \u003ca href=\"/projects/feedparser/\"\u003eFeed Parser\u003c/a\u003e engine in an upcoming application he’s writing. Nothing too nailed down yet though, as I’m still working out bugs for a v0.7 release.\u003c/p\u003e\n\u003cp\u003eLastly, I came across a site today that points to one of my posts about the browser wars. This is what she had to say:\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eThis article/story about the Browser Wars is brilliant. How the writer has managed to make a fairy story out of the browser wars makes it amusing to read. It provides the story in such a way that you would find it so easy to understand. I feel that he is more biased towards Netscape than to Internet Explorer. He talks about the domination of King Explorer and the Emperor of AOL. But waiting in the wings patiently is Inigo Mozilla.\u003c/p\u003e\n\u003cp\u003eI think this is the best article I have read in a long time.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://web.archive.org/web/20040707203055/http://oufcnt2.open.ac.uk/~sue_holland_2/part3.html\"\u003eSue Holland\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIf you missed it when I first wrote it, \u003ca href=\"/archives/000166.php\"\u003ehere it is again\u003c/a\u003e.\u003c/p\u003e\n",
        "plain":"I’ve got two posts on my laptop that I simply haven’t had the time to post. I’ll try to get to it this evening.\nMeanwhile, I recently found out that my cookie script has been recommended on IBM’s forums, my Java detection script has been talked about on Sun’s Java forums, my Message Center 5.5 script is gaining popularity at Coding Forums, and I continue to get help with ideas to improve my Flash detection script (which uses a format that I will soon switch all of my other detection scripts to because it’s more flexible).\nI’m aware of two different projects that are using the standalone IE’s: OpTool, which appears to add the ability to load any URL into any browser, and MozIE that allows you to have a split-screen view of a webpage with multiple browsers at once.\nI’ve also been contacted about using my Feed Parser engine in an upcoming application he’s writing. Nothing too nailed down yet though, as I’m still working out bugs for a v0.7 release.\nLastly, I came across a site today that points to one of my posts about the browser wars. This is what she had to say:\n This article/story about the Browser Wars is brilliant. How the writer has managed to make a fairy story out of the browser wars makes it amusing to read. It provides the story in such a way that you would find it so easy to understand. I feel that he is more biased towards Netscape than to Internet Explorer. He talks about the domination of King Explorer and the Emperor of AOL. But waiting in the wings patiently is Inigo Mozilla.\nI think this is the best article I have read in a long time.\nSue Holland\n If you missed it when I first wrote it, here it is again.\n",
        "source":"\nI’ve got two posts on my laptop that I simply haven’t had the time to post. I’ll try to get to it this evening.\n\nMeanwhile, I recently found out that my [cookie script](/scripts/cookies.php) has been recommended on IBM’s forums, my [Java detection script](/scripts/java.php) has been talked about on Sun’s Java forums, my [Message Center 5.5](/scripts/messagecenter.php) script is gaining popularity at [Coding Forums]({{% wayback \"http://www.codingforums.com\" %}}), and I continue to get help with ideas to improve my [Flash detection script](/scripts/flash.php) (which uses a format that I will soon switch all of my other detection scripts to because it’s more flexible).\n\nI’m aware of two different projects that are using the [standalone IE’s](/downloads/): [OpTool]({{% wayback \"http://kreacom.dk/tools/optool/2.0/\" %}}), which appears to add the ability to load any URL into any browser, and [MozIE]({{% wayback \"http://www.zeit.ca/mozie/\" %}}) that allows you to have a split-screen view of a webpage with multiple browsers at once.\n\nI’ve also been contacted about using my [Feed Parser](/projects/feedparser/) engine in an upcoming application he’s writing. Nothing too nailed down yet though, as I’m still working out bugs for a v0.7 release.\n\nLastly, I came across a site today that points to one of my posts about the browser wars. This is what she had to say:\n\n\u003e This article/story about the Browser Wars is brilliant. How the writer has managed to make a fairy story out of the browser wars makes it amusing to read. It provides the story in such a way that you would find it so easy to understand. I feel that he is more biased towards Netscape than to Internet Explorer. He talks about the domination of King Explorer and the Emperor of AOL. But waiting in the wings patiently is Inigo Mozilla.\n\u003e\n\u003e I think this is the best article I have read in a long time.\n\u003e\n\u003e [Sue Holland]({{% wayback \"http://oufcnt2.open.ac.uk/~sue_holland_2/part3.html\" %}})\n\nIf you missed it when I first wrote it, [here it is again](/archives/000166.php).\n"},
    "links": {
        "prev": {"title": "Growwwwwl...", "permalink": "https://ryanparman.com/posts/2004/growwwwwl/"},
        "next": {"title": "My Apple Store Experience", "permalink": "https://ryanparman.com/posts/2004/my-apple-store-experience/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Re-learning Macs",
    "description": "",
    "summary": {
        "content": "Well, I’m getting better at this Mac OS X thing. I’ve been fiddling with it all for far too long today — trying to get some essentials installed — and I’m getting better. There are some things, however, that are irritating me although it’s not really Apple’s fault. The first would definitely be the lack of Feed Demon (my absolute favorite RSS reader) for Mac. I got NetNewsWire Lite installed, but ease of use and features aren’t even comparable to Feed Demon.",
        "isTruncated": true
    },
    "published": "2004-06-13T06:36:56Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/re-learning-macs/",
    "relativePermalink": "/posts/2004/re-learning-macs/",
    "aliases": ["/2004/06/12/re-learning-macs/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 444,
        "readingTime": "3 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040613-re-learning-macs.md",
        "logicalName": "20040613-re-learning-macs.md",
        "translationBaseName": "20040613-re-learning-macs",
        "baseFileName": "20040613-re-learning-macs",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eWell, I’m getting better at this Mac OS X thing. I’ve been fiddling with it all for far too long today — trying to get some essentials installed — and I’m getting better. There are some things, however, that are irritating me although it’s not really Apple’s fault.\u003c/p\u003e\n\u003cp\u003eThe first would definitely be the lack of \u003ca href=\"https://web.archive.org/web/20040613063656/http://www.feeddemon.com\"\u003eFeed Demon\u003c/a\u003e (my absolute favorite RSS reader) for Mac. I got NetNewsWire Lite installed, but ease of use and features aren’t even comparable to Feed Demon. *sigh*. I need to get my PC up and running again.\u003c/p\u003e\n\u003cp\u003eThe second would be a lack of a really good hand-coding tool that has code coloring. I’m using BB Edit to type this right now, and it’s beginning to drive me nuts. I used to use BB Edit Lite 4.1 back in the day, but aparently there isn’t even a Lite version anymore. Argh.\u003c/p\u003e\n\u003cp\u003eOne thing that I love is the iLife Suite. I’m having some minor issues going between my Windows iTunes to my iPod to Mac iTunes. My genres are all messed up. I’ll have to mess around with them. A good thing, though, is that the music I bought from iTMS on my PC still works on my Mac.\u003c/p\u003e\n\u003cp\u003eI’m having trouble getting Apache 1.3.x installed. I downloaded the Mac OS X binary from the Apache site, installed it, but couldn’t get it to start. After Googling around to figure out what might be wrong, I found out that Mac OS X already has Apache installed. Now I’m trying to figure out where all the Apache files live between the two versions (the manually-installed version is showing up on my localhost).\u003c/p\u003e\n\u003cp\u003eI don’t anticipate any problems getting PHP or MySQL installed, and after that I think I’ll be ready for some full-blown web development while I ride the train to work everyday. I’m wanting to finish up the 0.7 final for \u003ca href=\"/projects/feedparser/\"\u003eFeed Parser\u003c/a\u003e. I just need to implement support for the Creative Commons metadata in RSS 1.0 and add support for the RSS 1.0 Content Module. I’m trying not to get behind the FP roadmap too much.\u003c/p\u003e\n\u003cp\u003eIt will also allow me to move forward with some of the really, really cool features of \u003ca href=\"/projects/blocker/\"\u003eBlocker\u003c/a\u003e 2.0. I’ve got a whole slew of new features I am (was — before my computer crashed) working on for the next release. An early alpha of \u003ca href=\"/projects/blogroller/\"\u003eBlogroller\u003c/a\u003e will be available as soon as I have some time to get to it.\u003c/p\u003e\n\u003cp\u003eAnyways, I’ve rambled enough for this posting. I’ve been thinking about a lot of stuff lately, that I’m wanting to post about here. We’ll see what I have time to write.\u003c/p\u003e\n",
        "plain":"Well, I’m getting better at this Mac OS X thing. I’ve been fiddling with it all for far too long today — trying to get some essentials installed — and I’m getting better. There are some things, however, that are irritating me although it’s not really Apple’s fault.\nThe first would definitely be the lack of Feed Demon (my absolute favorite RSS reader) for Mac. I got NetNewsWire Lite installed, but ease of use and features aren’t even comparable to Feed Demon. *sigh*. I need to get my PC up and running again.\nThe second would be a lack of a really good hand-coding tool that has code coloring. I’m using BB Edit to type this right now, and it’s beginning to drive me nuts. I used to use BB Edit Lite 4.1 back in the day, but aparently there isn’t even a Lite version anymore. Argh.\nOne thing that I love is the iLife Suite. I’m having some minor issues going between my Windows iTunes to my iPod to Mac iTunes. My genres are all messed up. I’ll have to mess around with them. A good thing, though, is that the music I bought from iTMS on my PC still works on my Mac.\nI’m having trouble getting Apache 1.3.x installed. I downloaded the Mac OS X binary from the Apache site, installed it, but couldn’t get it to start. After Googling around to figure out what might be wrong, I found out that Mac OS X already has Apache installed. Now I’m trying to figure out where all the Apache files live between the two versions (the manually-installed version is showing up on my localhost).\nI don’t anticipate any problems getting PHP or MySQL installed, and after that I think I’ll be ready for some full-blown web development while I ride the train to work everyday. I’m wanting to finish up the 0.7 final for Feed Parser. I just need to implement support for the Creative Commons metadata in RSS 1.0 and add support for the RSS 1.0 Content Module. I’m trying not to get behind the FP roadmap too much.\nIt will also allow me to move forward with some of the really, really cool features of Blocker 2.0. I’ve got a whole slew of new features I am (was — before my computer crashed) working on for the next release. An early alpha of Blogroller will be available as soon as I have some time to get to it.\nAnyways, I’ve rambled enough for this posting. I’ve been thinking about a lot of stuff lately, that I’m wanting to post about here. We’ll see what I have time to write.\n",
        "source":"\nWell, I’m getting better at this Mac OS X thing. I’ve been fiddling with it all for far too long today — trying to get some essentials installed — and I’m getting better. There are some things, however, that are irritating me although it’s not really Apple’s fault.\n\nThe first would definitely be the lack of [Feed Demon]({{% wayback \"http://www.feeddemon.com\" %}}) (my absolute favorite RSS reader) for Mac. I got NetNewsWire Lite installed, but ease of use and features aren’t even comparable to Feed Demon. \\*sigh\\*. I need to get my PC up and running again.\n\nThe second would be a lack of a really good hand-coding tool that has code coloring. I’m using BB Edit to type this right now, and it’s beginning to drive me nuts. I used to use BB Edit Lite 4.1 back in the day, but aparently there isn’t even a Lite version anymore. Argh.\n\nOne thing that I love is the iLife Suite. I’m having some minor issues going between my Windows iTunes to my iPod to Mac iTunes. My genres are all messed up. I’ll have to mess around with them. A good thing, though, is that the music I bought from iTMS on my PC still works on my Mac.\n\nI’m having trouble getting Apache 1.3.x installed. I downloaded the Mac OS X binary from the Apache site, installed it, but couldn’t get it to start. After Googling around to figure out what might be wrong, I found out that Mac OS X already has Apache installed. Now I’m trying to figure out where all the Apache files live between the two versions (the manually-installed version is showing up on my localhost).\n\nI don’t anticipate any problems getting PHP or MySQL installed, and after that I think I’ll be ready for some full-blown web development while I ride the train to work everyday. I’m wanting to finish up the 0.7 final for [Feed Parser](/projects/feedparser/). I just need to implement support for the Creative Commons metadata in RSS 1.0 and add support for the RSS 1.0 Content Module. I’m trying not to get behind the FP roadmap too much.\n\nIt will also allow me to move forward with some of the really, really cool features of [Blocker](/projects/blocker/) 2.0. I’ve got a whole slew of new features I am (was — before my computer crashed) working on for the next release. An early alpha of [Blogroller](/projects/blogroller/) will be available as soon as I have some time to get to it.\n\nAnyways, I’ve rambled enough for this posting. I’ve been thinking about a lot of stuff lately, that I’m wanting to post about here. We’ll see what I have time to write.\n"},
    "links": {
        "prev": {"title": "PowerBook Goodness!", "permalink": "https://ryanparman.com/posts/2004/powerbook-goodness/"},
        "next": {"title": "OpenOffice.org, Mac OS X, and X11", "permalink": "https://ryanparman.com/posts/2004/openofficeorg-mac-os-x-and-x11/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Blocker and Comment Spam",
    "description": "",
    "summary": {
        "content": "Something has just occurred to me: I haven’t had hardly any comment spam for a few months now. Did the spammers forget about me? I doubt it. Does Blocker have another side-effect that I hadn’t realized earlier? I’d appreciate any feedback from other Blocker users on this. Have you guys noticed a sharp decline in the comment spam you’ve been getting? Are you still having problems with certain ReferSpam entries? Are you getting more or less spam email in your inboxes?",
        "isTruncated": true
    },
    "published": "2004-04-05T19:00:35Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/blocker-and-comment-spam/",
    "relativePermalink": "/posts/2004/blocker-and-comment-spam/",
    "aliases": ["/2004/04/05/blocker-and-comment-spam/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 100,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040405-blocker-and-comment-spam.md",
        "logicalName": "20040405-blocker-and-comment-spam.md",
        "translationBaseName": "20040405-blocker-and-comment-spam",
        "baseFileName": "20040405-blocker-and-comment-spam",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eSomething has just occurred to me: I haven’t had hardly any comment spam for a few months now. Did the spammers forget about me? I doubt it. Does \u003ca href=\"/projects/blocker/\"\u003eBlocker\u003c/a\u003e have another side-effect that I hadn’t realized earlier?\u003c/p\u003e\n\u003cp\u003eI’d appreciate any feedback from other Blocker users on this. Have you guys noticed a sharp decline in the comment spam you’ve been getting? Are you still having problems with certain ReferSpam entries? Are you getting more or less spam email in your inboxes?\u003c/p\u003e\n\u003cp\u003eInput and feedback would be most helpful. I’m also open to ideas and suggestions to make this script better.\u003c/p\u003e\n",
        "plain":"Something has just occurred to me: I haven’t had hardly any comment spam for a few months now. Did the spammers forget about me? I doubt it. Does Blocker have another side-effect that I hadn’t realized earlier?\nI’d appreciate any feedback from other Blocker users on this. Have you guys noticed a sharp decline in the comment spam you’ve been getting? Are you still having problems with certain ReferSpam entries? Are you getting more or less spam email in your inboxes?\nInput and feedback would be most helpful. I’m also open to ideas and suggestions to make this script better.\n",
        "source":"\nSomething has just occurred to me: I haven’t had hardly any comment spam for a few months now. Did the spammers forget about me? I doubt it. Does [Blocker](/projects/blocker/) have another side-effect that I hadn’t realized earlier?\n\nI’d appreciate any feedback from other Blocker users on this. Have you guys noticed a sharp decline in the comment spam you’ve been getting? Are you still having problems with certain ReferSpam entries? Are you getting more or less spam email in your inboxes?\n\nInput and feedback would be most helpful. I’m also open to ideas and suggestions to make this script better.\n"},
    "links": {
        "prev": {"title": "Pretty Freakin' Fast!", "permalink": "https://ryanparman.com/posts/2004/pretty-freakin-fast/"},
        "next": {"title": "Re: How I stopped buying CDs and started loving music", "permalink": "https://ryanparman.com/posts/2004/re-how-i-stopped-buying-cds-and-started-loving-music/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Blocker 1.3 Revision 2",
    "description": "",
    "summary": {
        "content": "Blocker 1.3r2 is now available. Revision 2 includes a few more referrers, and takes into consideration some ideas from other Blocker users. Get it while it’s hot.",
        "isTruncated": false
    },
    "published": "2004-03-28T01:12:46Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/blocker-13-revision-2/",
    "relativePermalink": "/posts/2004/blocker-13-revision-2/",
    "aliases": ["/2004/03/27/blocker-13-revision-2/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 27,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040328-blocker-13-revision-2.md",
        "logicalName": "20040328-blocker-13-revision-2.md",
        "translationBaseName": "20040328-blocker-13-revision-2",
        "baseFileName": "20040328-blocker-13-revision-2",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003e\u003ca href=\"/projects/blocker/\"\u003eBlocker 1.3r2\u003c/a\u003e is now available. Revision 2 includes a few more referrers, and takes into consideration some ideas from other Blocker users. Get it while it’s hot.\u003c/p\u003e\n",
        "plain":"Blocker 1.3r2 is now available. Revision 2 includes a few more referrers, and takes into consideration some ideas from other Blocker users. Get it while it’s hot.\n",
        "source":"\n[Blocker 1.3r2](/projects/blocker/) is now available. Revision 2 includes a few more referrers, and takes into consideration some ideas from other Blocker users. Get it while it’s hot.\n"},
    "links": {
        "prev": {"title": "Pro-Choice", "permalink": "https://ryanparman.com/posts/2004/pro-choice/"},
        "next": {"title": "Bye, Bye, BuyMusic.com", "permalink": "https://ryanparman.com/posts/2004/bye-bye-buymusiccom/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "They're Out!",
    "description": "",
    "summary": {
        "content": "New releases of Blocker and Feed Parser are now available. Blocker 1.3 sports the blocking of 120 more bots than v1.2 did, as well as some new referrers that I’ve just been made aware of over the last week. I’ll be releasing point-point-releases to this as I’m able to analyze more Blocker data from users. Feed Parser 0.6 sports support for RSS 0.9x, RSS 2.0, RSS 1.0 (RDF), and Atom 0.3. Support for RSS 1.0 Modules and OPML is in the works.",
        "isTruncated": true
    },
    "published": "2004-03-23T17:30:57Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/theyre-out/",
    "relativePermalink": "/posts/2004/theyre-out/",
    "aliases": ["/2004/03/23/theyre-out/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 110,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040323-theyre-out.md",
        "logicalName": "20040323-theyre-out.md",
        "translationBaseName": "20040323-theyre-out",
        "baseFileName": "20040323-theyre-out",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eNew releases of \u003ca href=\"/projects/blocker/\"\u003eBlocker\u003c/a\u003e and \u003ca href=\"/projects/feedparser/\"\u003eFeed Parser\u003c/a\u003e are now available. Blocker 1.3 sports the blocking of 120 more bots than v1.2 did, as well as some new referrers that I’ve just been made aware of over the last week. I’ll be releasing point-point-releases to this as I’m able to analyze more Blocker data from users. Feed Parser 0.6 sports support for RSS 0.9x, RSS 2.0, RSS 1.0 (RDF), and Atom 0.3. Support for RSS 1.0 Modules and OPML is in the works.\u003c/p\u003e\n\u003cp\u003eHere, you can get the latest and greatest version of both \u003ca href=\"/projects/blocker/blocker_1.3r1.zip\"\u003eBlocker\u003c/a\u003e and \u003ca href=\"/projects/feedparser/feedparser_0.6.zip\"\u003eFeed Parser\u003c/a\u003e. Have any questions or comments? Let me know about them in the comments!\u003c/p\u003e\n",
        "plain":"New releases of Blocker and Feed Parser are now available. Blocker 1.3 sports the blocking of 120 more bots than v1.2 did, as well as some new referrers that I’ve just been made aware of over the last week. I’ll be releasing point-point-releases to this as I’m able to analyze more Blocker data from users. Feed Parser 0.6 sports support for RSS 0.9x, RSS 2.0, RSS 1.0 (RDF), and Atom 0.3. Support for RSS 1.0 Modules and OPML is in the works.\nHere, you can get the latest and greatest version of both Blocker and Feed Parser. Have any questions or comments? Let me know about them in the comments!\n",
        "source":"\nNew releases of [Blocker](/projects/blocker/) and [Feed Parser](/projects/feedparser/) are now available. Blocker 1.3 sports the blocking of 120 more bots than v1.2 did, as well as some new referrers that I’ve just been made aware of over the last week. I’ll be releasing point-point-releases to this as I’m able to analyze more Blocker data from users. Feed Parser 0.6 sports support for RSS 0.9x, RSS 2.0, RSS 1.0 (RDF), and Atom 0.3. Support for RSS 1.0 Modules and OPML is in the works.\n\nHere, you can get the latest and greatest version of both [Blocker](/projects/blocker/blocker_1.3r1.zip) and [Feed Parser](/projects/feedparser/feedparser_0.6.zip). Have any questions or comments? Let me know about them in the comments!\n"},
    "links": {
        "prev": {"title": "Feed Parser and Blocker Updates", "permalink": "https://ryanparman.com/posts/2004/feed-parser-and-blocker-updates/"},
        "next": {"title": "iPod Goodness", "permalink": "https://ryanparman.com/posts/2004/ipod-goodness/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Feed Parser and Blocker Updates",
    "description": "",
    "summary": {
        "content": "I’ve just released an update for Feed Parser bringing us up to version 0.5.1. This release sports full support for RSS 1.0, as well as the RSS 0.9x and 2.0 support that’s been there for a while. Credits for the people who’ve helped me get through tough spots are listed in the release notes and in the code (wherever they contributed). If you’re a Gecko/Mozilla Application Developer itching to develop your own Syndicated News Reader, this engine will do the bulk of the dirty work for you.",
        "isTruncated": true
    },
    "published": "2004-03-18T22:44:37Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/feed-parser-and-blocker-updates/",
    "relativePermalink": "/posts/2004/feed-parser-and-blocker-updates/",
    "aliases": ["/2004/03/18/feed-parser-and-blocker-updates/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 196,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040318-feed-parser-and-blocker-updates.md",
        "logicalName": "20040318-feed-parser-and-blocker-updates.md",
        "translationBaseName": "20040318-feed-parser-and-blocker-updates",
        "baseFileName": "20040318-feed-parser-and-blocker-updates",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI’ve just released an update for \u003ca href=\"/projects/feedparser/\"\u003eFeed Parser\u003c/a\u003e bringing us up to version 0.5.1. This release sports full support for RSS 1.0, as well as the RSS 0.9x and 2.0 support that’s been there for a while.\u003c/p\u003e\n\u003cp\u003eCredits for the people who’ve helped me get through tough spots are listed in the release notes and in the code (wherever they contributed). If you’re a Gecko/Mozilla Application Developer itching to develop your own Syndicated News Reader, this engine will do the bulk of the dirty work for you. Read the release notes for my project roadmap.\u003c/p\u003e\n\u003cp\u003eI’ve also got another update to my \u003ca href=\"/projects/blocker/\"\u003eBlocker\u003c/a\u003e software coming up that’s been in Beta for a couple of weeks now. You should all see that by this weekend (hopefully — no promises though). I’ve also got the next major release in the works. The new version works in conjunction with Dean Allen’s \u003ca href=\"https://web.archive.org/web/20040318224437/http://www.textism.com/tools/refer/\"\u003eRefer 2.x\u003c/a\u003e to keep spambots far, far away. Hopefully, it’ll even render the \u003ca href=\"https://web.archive.org/web/20040318224437/http://astrogibs.com/eric/archives/technology/botwhack_10.html\"\u003eBotWhack patch\u003c/a\u003e useless. Not that it’s a bad patch (I use it myself), but I just think it can be improved upon.\u003c/p\u003e\n\u003cp\u003eGot comments, questions, or suggestions about any of this? Let me know. =)\u003c/p\u003e\n",
        "plain":"I’ve just released an update for Feed Parser bringing us up to version 0.5.1. This release sports full support for RSS 1.0, as well as the RSS 0.9x and 2.0 support that’s been there for a while.\nCredits for the people who’ve helped me get through tough spots are listed in the release notes and in the code (wherever they contributed). If you’re a Gecko/Mozilla Application Developer itching to develop your own Syndicated News Reader, this engine will do the bulk of the dirty work for you. Read the release notes for my project roadmap.\nI’ve also got another update to my Blocker software coming up that’s been in Beta for a couple of weeks now. You should all see that by this weekend (hopefully — no promises though). I’ve also got the next major release in the works. The new version works in conjunction with Dean Allen’s Refer 2.x to keep spambots far, far away. Hopefully, it’ll even render the BotWhack patch useless. Not that it’s a bad patch (I use it myself), but I just think it can be improved upon.\nGot comments, questions, or suggestions about any of this? Let me know. =)\n",
        "source":"\nI’ve just released an update for [Feed Parser](/projects/feedparser/) bringing us up to version 0.5.1. This release sports full support for RSS 1.0, as well as the RSS 0.9x and 2.0 support that’s been there for a while.\n\nCredits for the people who’ve helped me get through tough spots are listed in the release notes and in the code (wherever they contributed). If you’re a Gecko/Mozilla Application Developer itching to develop your own Syndicated News Reader, this engine will do the bulk of the dirty work for you. Read the release notes for my project roadmap.\n\nI’ve also got another update to my [Blocker](/projects/blocker/) software coming up that’s been in Beta for a couple of weeks now. You should all see that by this weekend (hopefully — no promises though). I’ve also got the next major release in the works. The new version works in conjunction with Dean Allen’s [Refer 2.x]({{% wayback \"http://www.textism.com/tools/refer/\" %}}) to keep spambots far, far away. Hopefully, it’ll even render the [BotWhack patch]({{% wayback \"http://astrogibs.com/eric/archives/technology/botwhack_10.html\" %}}) useless. Not that it’s a bad patch (I use it myself), but I just think it can be improved upon.\n\nGot comments, questions, or suggestions about any of this? Let me know. =)\n"},
    "links": {
        "prev": {"title": "100 Miles an Hour with My Hair on Fire!", "permalink": "https://ryanparman.com/posts/2004/100-miles-an-hour-with-my-hair-on-fire/"},
        "next": {"title": "They're Out!", "permalink": "https://ryanparman.com/posts/2004/theyre-out/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "ALA Favelet",
    "description": "",
    "summary": {
        "content": "I remember when I first came across A List Apart. It was a great e-zine that taught me a great deal about web design, web standards, and how to be an all-around better web guy. It was great. I also remember seeing the teaser for ALA 3.0. I couldn’t wait for the awesome design that would come out of the mind of my favorite web guy, Jeffrey Zeldman. Then it debuted. Ugh. Are they serious? But, as many people commented, the content is key.",
        "isTruncated": true
    },
    "published": "2004-03-05T22:31:25Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/ala-favelet/",
    "relativePermalink": "/posts/2004/ala-favelet/",
    "aliases": ["/2004/03/05/ala-favelet/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 543,
        "readingTime": "3 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040305-ala-favelet.md",
        "logicalName": "20040305-ala-favelet.md",
        "translationBaseName": "20040305-ala-favelet",
        "baseFileName": "20040305-ala-favelet",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI remember when I first came across \u003ca href=\"https://web.archive.org/web/20040305223125/http://www.alistapart.com\"\u003eA List Apart\u003c/a\u003e. It was a great e-zine that taught me a great deal about web design, web standards, and how to be an all-around better web guy. It was great.\u003c/p\u003e\n\u003cp\u003eI also remember seeing the teaser for ALA 3.0. I couldn’t wait for the awesome design that would come out of the mind of my favorite web guy, Jeffrey Zeldman. Then it debuted. Ugh. Are they serious?\u003c/p\u003e\n\u003cp\u003eBut, as many people commented, the content is key. And even though I’m not too fond of the current design of ALA, they still have some of the most informative articles around to help us all grow as web designers.\u003c/p\u003e\n\u003cp\u003eHowever, over time, I realized that I would avoid going to the ALA site because I had a hard time reading it. Everything seemed to blur together, sections of the article weren’t made obvious enough to be able to visibly scan, and so I’ve missed out on some fantastic articles over the last few months. Grrr…\u003c/p\u003e\n\u003cp\u003eSo, this morning, I was sitting at work going through my feeds in \u003ca href=\"https://web.archive.org/web/20040305223125/http://www.bradsoft.com/feeddemon/\"\u003eFeed Demon\u003c/a\u003e. \u003ca href=\"https://web.archive.org/web/20040305223125/http://www.cssvault.com\"\u003eCSS Vault\u003c/a\u003e had some nice new designs, and so did the \u003ca href=\"https://web.archive.org/web/20040305223125/http://www.csszengarden.com\"\u003eZen Garden\u003c/a\u003e (you can find the feed URL by looking at the source). I noticed that ALA had two new articles posted, so I clicked through and opened them up in my browser. Drat. Readability is foiled again!\u003c/p\u003e\n\u003cp\u003eI finally decided to do something about it. I realized that my complaining isn’t going to change Zeldman’s mind about certain design elements, but I can always change them myself through the use of a favelet! I spent a couple of hours writing scripts and tweaking things until I got it how I liked it. Here you go: ALA Styles Favelet.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan style=\"color:#f92672\"\u003e!\u003c/span\u003e(\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e() {\n    document.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;body\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;font-family:verdana; font-size:11px;\u0026#39;\u003c/span\u003e);\n    document.\u003cspan style=\"color:#a6e22e\"\u003egetElementById\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;wrapper\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;width:95%; background-image:none;\u0026#39;\u003c/span\u003e);\n    document.\u003cspan style=\"color:#a6e22e\"\u003egetElementById\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;sidebar\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;float:right; width:180px; position:absolute; top:30px; right:30px;\u0026#39;\u003c/span\u003e);\n    document.\u003cspan style=\"color:#a6e22e\"\u003egetElementById\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;maincontent\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;float:left; width:70%;\u0026#39;\u003c/span\u003e);\n    document.\u003cspan style=\"color:#a6e22e\"\u003egetElementById\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;authorbio\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;font-size:11px; background-color:#f9f9f9; border-top:1px solid #aaa; border-bottom:none; padding:10px 5px;\u0026#39;\u003c/span\u003e);\n\n    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003edocument.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;pre\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n        document.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;pre\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;background-color:#e9f5ff; border:1px dotted #333; font-family:verdana; font-size:11px; padding:5px;\u0026#39;\u003c/span\u003e);\n    }\n\n    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003edocument.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;code\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n        document.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;code\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;background-color:#eef; padding:0 3px;\u0026#39;\u003c/span\u003e);\n    }\n\n    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003edocument.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;li\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n        document.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;li\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;font-size:11px;\u0026#39;\u003c/span\u003e);\n    }\n\n    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003edocument.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;h1\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n        document.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;h1\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;font-weight:bold; font-family:\u0026#34;trebuchet ms\u0026#34;, trebuchet; font-size:20px; color:#000;\u0026#39;\u003c/span\u003e);\n    }\n\n    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003edocument.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;h2\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n        document.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;h2\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;font-weight:bold; font-family:verdana; font-size:12px; text-transform:uppercase; border-bottom:2px solid #333; margin-top:30px;\u0026#39;\u003c/span\u003e);\n    }\n\n    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003edocument.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;h3\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n        document.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;h3\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;font-weight:bold; font-family:verdana; font-size:12px; text-transform:uppercase; border-bottom:2px solid #333; margin-top:30px;\u0026#39;\u003c/span\u003e);\n    }\n\n    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003edocument.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;blockquote\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n        document.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;blockquote\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;margin:0; padding:0; border-left:2px solid #ccc; padding:7px 15px; margin:10px 0 15px 30px; background-color:#eee;\u0026#39;\u003c/span\u003e);\n\n        \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003edocument.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;blockquote\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003echildNodes\u003c/span\u003e.\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n            document.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;blockquote\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003echildNodes\u003c/span\u003e[\u003cspan style=\"color:#a6e22e\"\u003ey\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;font-size:11px; padding:0; margin:0;\u0026#39;\u003c/span\u003e);\n        }\n    }\n\n    \u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e (\u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e\u0026lt;\u003c/span\u003edocument.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;acronym\u0026#39;\u003c/span\u003e).\u003cspan style=\"color:#a6e22e\"\u003elength\u003c/span\u003e; \u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e++\u003c/span\u003e) {\n        document.\u003cspan style=\"color:#a6e22e\"\u003egetElementsByTagName\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;acronym\u0026#39;\u003c/span\u003e)[\u003cspan style=\"color:#a6e22e\"\u003ex\u003c/span\u003e].\u003cspan style=\"color:#a6e22e\"\u003esetAttribute\u003c/span\u003e(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;style\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;border-bottom:1px dotted #333; cursor:help;\u0026#39;\u003c/span\u003e);\n    }\n})();\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou should right/command-click the favelet link and save it to your clipboard, then create a new bookmark with this as the location.\u003c/p\u003e\n\u003cp\u003eThankfully, ALA is very standards compliant, so I didn’t have to do a lot of CSS hacking through JavaScript. Although this Favelet is only intended to alter the design of ALA to be more readable and aesthetically pleasing, it might very well work on other standards-compliant sites as well. Who knows.\u003c/p\u003e\n\u003cp\u003eIf you like it, let me know. If you hate it, let me know. If you think I could improve, let me know.\u003c/p\u003e\n",
        "plain":"I remember when I first came across A List Apart. It was a great e-zine that taught me a great deal about web design, web standards, and how to be an all-around better web guy. It was great.\nI also remember seeing the teaser for ALA 3.0. I couldn’t wait for the awesome design that would come out of the mind of my favorite web guy, Jeffrey Zeldman. Then it debuted. Ugh. Are they serious?\nBut, as many people commented, the content is key. And even though I’m not too fond of the current design of ALA, they still have some of the most informative articles around to help us all grow as web designers.\nHowever, over time, I realized that I would avoid going to the ALA site because I had a hard time reading it. Everything seemed to blur together, sections of the article weren’t made obvious enough to be able to visibly scan, and so I’ve missed out on some fantastic articles over the last few months. Grrr…\nSo, this morning, I was sitting at work going through my feeds in Feed Demon. CSS Vault had some nice new designs, and so did the Zen Garden (you can find the feed URL by looking at the source). I noticed that ALA had two new articles posted, so I clicked through and opened them up in my browser. Drat. Readability is foiled again!\nI finally decided to do something about it. I realized that my complaining isn’t going to change Zeldman’s mind about certain design elements, but I can always change them myself through the use of a favelet! I spent a couple of hours writing scripts and tweaking things until I got it how I liked it. Here you go: ALA Styles Favelet.\n!(function() { document.getElementsByTagName(\u0026#39;body\u0026#39;)[0].setAttribute(\u0026#39;style\u0026#39;, \u0026#39;font-family:verdana; font-size:11px;\u0026#39;); document.getElementById(\u0026#39;wrapper\u0026#39;).setAttribute(\u0026#39;style\u0026#39;, \u0026#39;width:95%; background-image:none;\u0026#39;); document.getElementById(\u0026#39;sidebar\u0026#39;).setAttribute(\u0026#39;style\u0026#39;, \u0026#39;float:right; width:180px; position:absolute; top:30px; right:30px;\u0026#39;); document.getElementById(\u0026#39;maincontent\u0026#39;).setAttribute(\u0026#39;style\u0026#39;, \u0026#39;float:left; width:70%;\u0026#39;); document.getElementById(\u0026#39;authorbio\u0026#39;).setAttribute(\u0026#39;style\u0026#39;, \u0026#39;font-size:11px; background-color:#f9f9f9; border-top:1px solid #aaa; border-bottom:none; padding:10px 5px;\u0026#39;); for (var x=0; x\u0026lt;document.getElementsByTagName(\u0026#39;pre\u0026#39;).length; x++) { document.getElementsByTagName(\u0026#39;pre\u0026#39;)[x].setAttribute(\u0026#39;style\u0026#39;, \u0026#39;background-color:#e9f5ff; border:1px dotted #333; font-family:verdana; font-size:11px; padding:5px;\u0026#39;); } for (var x=0; x\u0026lt;document.getElementsByTagName(\u0026#39;code\u0026#39;).length; x++) { document.getElementsByTagName(\u0026#39;code\u0026#39;)[x].setAttribute(\u0026#39;style\u0026#39;, \u0026#39;background-color:#eef; padding:0 3px;\u0026#39;); } for (var x=0; x\u0026lt;document.getElementsByTagName(\u0026#39;li\u0026#39;).length; x++) { document.getElementsByTagName(\u0026#39;li\u0026#39;)[x].setAttribute(\u0026#39;style\u0026#39;, \u0026#39;font-size:11px;\u0026#39;); } for (var x=0; x\u0026lt;document.getElementsByTagName(\u0026#39;h1\u0026#39;).length; x++) { document.getElementsByTagName(\u0026#39;h1\u0026#39;)[x].setAttribute(\u0026#39;style\u0026#39;, \u0026#39;font-weight:bold; font-family:\u0026#34;trebuchet ms\u0026#34;, trebuchet; font-size:20px; color:#000;\u0026#39;); } for (var x=0; x\u0026lt;document.getElementsByTagName(\u0026#39;h2\u0026#39;).length; x++) { document.getElementsByTagName(\u0026#39;h2\u0026#39;)[x].setAttribute(\u0026#39;style\u0026#39;, \u0026#39;font-weight:bold; font-family:verdana; font-size:12px; text-transform:uppercase; border-bottom:2px solid #333; margin-top:30px;\u0026#39;); } for (var x=0; x\u0026lt;document.getElementsByTagName(\u0026#39;h3\u0026#39;).length; x++) { document.getElementsByTagName(\u0026#39;h3\u0026#39;)[x].setAttribute(\u0026#39;style\u0026#39;, \u0026#39;font-weight:bold; font-family:verdana; font-size:12px; text-transform:uppercase; border-bottom:2px solid #333; margin-top:30px;\u0026#39;); } for (var x=0; x\u0026lt;document.getElementsByTagName(\u0026#39;blockquote\u0026#39;).length; x++) { document.getElementsByTagName(\u0026#39;blockquote\u0026#39;)[x].setAttribute(\u0026#39;style\u0026#39;, \u0026#39;margin:0; padding:0; border-left:2px solid #ccc; padding:7px 15px; margin:10px 0 15px 30px; background-color:#eee;\u0026#39;); for (var y=0; y\u0026lt;document.getElementsByTagName(\u0026#39;blockquote\u0026#39;)[x].childNodes.length; y++) { document.getElementsByTagName(\u0026#39;blockquote\u0026#39;)[x].childNodes[y].setAttribute(\u0026#39;style\u0026#39;, \u0026#39;font-size:11px; padding:0; margin:0;\u0026#39;); } } for (var x=0; x\u0026lt;document.getElementsByTagName(\u0026#39;acronym\u0026#39;).length; x++) { document.getElementsByTagName(\u0026#39;acronym\u0026#39;)[x].setAttribute(\u0026#39;style\u0026#39;, \u0026#39;border-bottom:1px dotted #333; cursor:help;\u0026#39;); } })(); You should right/command-click the favelet link and save it to your clipboard, then create a new bookmark with this as the location.\nThankfully, ALA is very standards compliant, so I didn’t have to do a lot of CSS hacking through JavaScript. Although this Favelet is only intended to alter the design of ALA to be more readable and aesthetically pleasing, it might very well work on other standards-compliant sites as well. Who knows.\nIf you like it, let me know. If you hate it, let me know. If you think I could improve, let me know.\n",
        "source":"\nI remember when I first came across [A List Apart]({{% wayback \"http://www.alistapart.com\" %}}). It was a great e-zine that taught me a great deal about web design, web standards, and how to be an all-around better web guy. It was great.\n\nI also remember seeing the teaser for ALA 3.0. I couldn’t wait for the awesome design that would come out of the mind of my favorite web guy, Jeffrey Zeldman. Then it debuted. Ugh. Are they serious?\n\nBut, as many people commented, the content is key. And even though I’m not too fond of the current design of ALA, they still have some of the most informative articles around to help us all grow as web designers.\n\nHowever, over time, I realized that I would avoid going to the ALA site because I had a hard time reading it. Everything seemed to blur together, sections of the article weren’t made obvious enough to be able to visibly scan, and so I’ve missed out on some fantastic articles over the last few months. Grrr…\n\nSo, this morning, I was sitting at work going through my feeds in [Feed Demon]({{% wayback \"http://www.bradsoft.com/feeddemon/\" %}}). [CSS Vault]({{% wayback \"http://www.cssvault.com\" %}}) had some nice new designs, and so did the [Zen Garden]({{% wayback \"http://www.csszengarden.com\" %}}) (you can find the feed URL by looking at the source). I noticed that ALA had two new articles posted, so I clicked through and opened them up in my browser. Drat. Readability is foiled again!\n\nI finally decided to do something about it. I realized that my complaining isn’t going to change Zeldman’s mind about certain design elements, but I can always change them myself through the use of a favelet! I spent a couple of hours writing scripts and tweaking things until I got it how I liked it. Here you go: ALA Styles Favelet.\n\n```javascript\n!(function() {\n    document.getElementsByTagName('body')[0].setAttribute('style', 'font-family:verdana; font-size:11px;');\n    document.getElementById('wrapper').setAttribute('style', 'width:95%; background-image:none;');\n    document.getElementById('sidebar').setAttribute('style', 'float:right; width:180px; position:absolute; top:30px; right:30px;');\n    document.getElementById('maincontent').setAttribute('style', 'float:left; width:70%;');\n    document.getElementById('authorbio').setAttribute('style', 'font-size:11px; background-color:#f9f9f9; border-top:1px solid #aaa; border-bottom:none; padding:10px 5px;');\n\n    for (var x=0; x\u003cdocument.getElementsByTagName('pre').length; x++) {\n        document.getElementsByTagName('pre')[x].setAttribute('style', 'background-color:#e9f5ff; border:1px dotted #333; font-family:verdana; font-size:11px; padding:5px;');\n    }\n\n    for (var x=0; x\u003cdocument.getElementsByTagName('code').length; x++) {\n        document.getElementsByTagName('code')[x].setAttribute('style', 'background-color:#eef; padding:0 3px;');\n    }\n\n    for (var x=0; x\u003cdocument.getElementsByTagName('li').length; x++) {\n        document.getElementsByTagName('li')[x].setAttribute('style', 'font-size:11px;');\n    }\n\n    for (var x=0; x\u003cdocument.getElementsByTagName('h1').length; x++) {\n        document.getElementsByTagName('h1')[x].setAttribute('style', 'font-weight:bold; font-family:\"trebuchet ms\", trebuchet; font-size:20px; color:#000;');\n    }\n\n    for (var x=0; x\u003cdocument.getElementsByTagName('h2').length; x++) {\n        document.getElementsByTagName('h2')[x].setAttribute('style', 'font-weight:bold; font-family:verdana; font-size:12px; text-transform:uppercase; border-bottom:2px solid #333; margin-top:30px;');\n    }\n\n    for (var x=0; x\u003cdocument.getElementsByTagName('h3').length; x++) {\n        document.getElementsByTagName('h3')[x].setAttribute('style', 'font-weight:bold; font-family:verdana; font-size:12px; text-transform:uppercase; border-bottom:2px solid #333; margin-top:30px;');\n    }\n\n    for (var x=0; x\u003cdocument.getElementsByTagName('blockquote').length; x++) {\n        document.getElementsByTagName('blockquote')[x].setAttribute('style', 'margin:0; padding:0; border-left:2px solid #ccc; padding:7px 15px; margin:10px 0 15px 30px; background-color:#eee;');\n\n        for (var y=0; y\u003cdocument.getElementsByTagName('blockquote')[x].childNodes.length; y++) {\n            document.getElementsByTagName('blockquote')[x].childNodes[y].setAttribute('style', 'font-size:11px; padding:0; margin:0;');\n        }\n    }\n\n    for (var x=0; x\u003cdocument.getElementsByTagName('acronym').length; x++) {\n        document.getElementsByTagName('acronym')[x].setAttribute('style', 'border-bottom:1px dotted #333; cursor:help;');\n    }\n})();\n```\n\nYou should right/command-click the favelet link and save it to your clipboard, then create a new bookmark with this as the location.\n\nThankfully, ALA is very standards compliant, so I didn’t have to do a lot of CSS hacking through JavaScript. Although this Favelet is only intended to alter the design of ALA to be more readable and aesthetically pleasing, it might very well work on other standards-compliant sites as well. Who knows.\n\nIf you like it, let me know. If you hate it, let me know. If you think I could improve, let me know.\n"},
    "links": {
        "prev": {"title": "Multiple Internet Explorers Revisited", "permalink": "https://ryanparman.com/posts/2004/multiple-internet-explorers-revisited/"},
        "next": {"title": "Lockergnome Regresses", "permalink": "https://ryanparman.com/posts/2004/lockergnome-regresses/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Blocking Spambots",
    "description": "",
    "summary": {
        "content": "I’ve been using a PHP script called “Blocker” to block unwanted visitors to my website for several months now. It started out as a way to block refer spam from my refer list, and has grown to a full-fledged blocker of IP’s, Hostnames, Referrers, and User Agents. About once a month, I go through my raw access logs and check to see who’s been visiting me (and who I need to block from visiting me again). This morning, I’ve added several new spambots to the list of things to block.",
        "isTruncated": true
    },
    "published": "2004-02-10T19:25:03Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/blocking-spambots/",
    "relativePermalink": "/posts/2004/blocking-spambots/",
    "aliases": ["/2004/02/10/blocking-spambots/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 231,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040210-blocking-spambots.md",
        "logicalName": "20040210-blocking-spambots.md",
        "translationBaseName": "20040210-blocking-spambots",
        "baseFileName": "20040210-blocking-spambots",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI’ve been using a PHP script called “Blocker” to block unwanted visitors to my website for several months now. It started out as a way to block refer spam from my refer list, and has grown to a full-fledged blocker of IP’s, Hostnames, Referrers, and User Agents.\u003c/p\u003e\n\u003cp\u003eAbout once a month, I go through my raw access logs and check to see who’s been visiting me (and who I need to block from visiting me again). This morning, I’ve added several new spambots to the list of things to block. If you’re using Blocker already, go to my \u003ca href=\"/downloads/\"\u003edownloads\u003c/a\u003e page and download the latest update. If you’re not using it yet, I suggest you begin to, as it’s helped me in the fight against website spam tremendously. This update has no functional changes, only blocking additions.\u003c/p\u003e\n\u003cp\u003eIf you’ve manually added things you want to block in your copy of Blocker, you’ll have to manually add them to the new version. If you’re blocking spambots, referrers, etc. that are not on my list, email them to me for inclusion in the next release.\u003c/p\u003e\n\u003cp\u003eTwo Bots that I’ve been getting pounded by are the “Turntin” bot and the “Microsoft URL Control” bot. Two weeks ago, Turntin nailed me over 220 times in 48 hours. Microsoft URL Control nailed me about 70 times last night. Both were blocked already before they hit me. Whew!\u003c/p\u003e\n",
        "plain":"I’ve been using a PHP script called “Blocker” to block unwanted visitors to my website for several months now. It started out as a way to block refer spam from my refer list, and has grown to a full-fledged blocker of IP’s, Hostnames, Referrers, and User Agents.\nAbout once a month, I go through my raw access logs and check to see who’s been visiting me (and who I need to block from visiting me again). This morning, I’ve added several new spambots to the list of things to block. If you’re using Blocker already, go to my downloads page and download the latest update. If you’re not using it yet, I suggest you begin to, as it’s helped me in the fight against website spam tremendously. This update has no functional changes, only blocking additions.\nIf you’ve manually added things you want to block in your copy of Blocker, you’ll have to manually add them to the new version. If you’re blocking spambots, referrers, etc. that are not on my list, email them to me for inclusion in the next release.\nTwo Bots that I’ve been getting pounded by are the “Turntin” bot and the “Microsoft URL Control” bot. Two weeks ago, Turntin nailed me over 220 times in 48 hours. Microsoft URL Control nailed me about 70 times last night. Both were blocked already before they hit me. Whew!\n",
        "source":"\nI’ve been using a PHP script called “Blocker” to block unwanted visitors to my website for several months now. It started out as a way to block refer spam from my refer list, and has grown to a full-fledged blocker of IP’s, Hostnames, Referrers, and User Agents.\n\nAbout once a month, I go through my raw access logs and check to see who’s been visiting me (and who I need to block from visiting me again). This morning, I’ve added several new spambots to the list of things to block. If you’re using Blocker already, go to my [downloads](/downloads/) page and download the latest update. If you’re not using it yet, I suggest you begin to, as it’s helped me in the fight against website spam tremendously. This update has no functional changes, only blocking additions.\n\nIf you’ve manually added things you want to block in your copy of Blocker, you’ll have to manually add them to the new version. If you’re blocking spambots, referrers, etc. that are not on my list, email them to me for inclusion in the next release.\n\nTwo Bots that I’ve been getting pounded by are the “Turntin” bot and the “Microsoft URL Control” bot. Two weeks ago, Turntin nailed me over 220 times in 48 hours. Microsoft URL Control nailed me about 70 times last night. Both were blocked already before they hit me. Whew!\n"},
    "links": {
        "prev": {"title": "Extensibly Extensible", "permalink": "https://ryanparman.com/posts/2004/extensibly-extensible/"},
        "next": {"title": "Tweaking My RSS/Atom Feed Reader", "permalink": "https://ryanparman.com/posts/2004/tweaking-my-rssatom-feed-reader/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "SpamMaster Joe",
    "description": "",
    "summary": {
        "content": "Joe Lieberman spammed me today! Well, kind of. He’s apparently using the very-evil “StarProse Referrer Advertising System 2004” to spam people’s Refer lists so that he can rank higher in search engines, or at least get people to click through to his site. Y’know all of that comment spam going around? Yeah, well this is the same thing, except for referrer lists. Lucky, I have “refer spam” countermeasures in place. I’ve got a series of IP’s, Referrers, Hostnames, and SpamBot User Agents that have been blocked for one reason or another.",
        "isTruncated": true
    },
    "published": "2004-01-26T16:48:30Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2004/spammaster-joe/",
    "relativePermalink": "/posts/2004/spammaster-joe/",
    "aliases": ["/archives/000160.php", "/articles/000160.php", "/2004/01/26/spammaster-joe/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 153,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2004/20040126-spammaster-joe.md",
        "logicalName": "20040126-spammaster-joe.md",
        "translationBaseName": "20040126-spammaster-joe",
        "baseFileName": "20040126-spammaster-joe",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2004/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#update-hahahugoshortcode-s1-hbhb\"\u003eUpdate (HAHAHUGOSHORTCODE-s1-HBHB)\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp itemprop=\"description\" class=\"f5 f4-m f3-l mt0 lh-copy p-summary entry-summary\"\u003e\nJoe Lieberman spammed me today!\n\u003c/p\u003e\n\n\u003cp\u003eWell, kind of. He’s apparently using the very-evil “StarProse Referrer Advertising System 2004” to spam people’s Refer lists so that he can rank higher in search engines, or at least get people to click through to his site. Y’know all of that comment spam going around? Yeah, well this is the same thing, except for referrer lists.\u003c/p\u003e\n\u003cp\u003eLucky, I have “refer spam” countermeasures in place. I’ve got a series of IP’s, Referrers, Hostnames, and SpamBot User Agents that have been blocked for one reason or another. Usually, it’s because they’ve done something not too cool, so I’ve banned them. Generally, these are spammers. If anyone wants this list, let me know.\u003c/p\u003e\n\u003cp\u003eIf Joe wants to be president, then he can go about doing it the right way. But spamming my website is not one of those ways.\u003c/p\u003e\n\u003ch2 id=\"update-hahahugoshortcode-s1-hbhb\"\u003eUpdate (\u003ctime datetime=\"2004-02-12\"\u003e2004-02-12\u003c/time\u003e\n)\u003c/h2\u003e\n\u003cp\u003eNow \u003ca href=\"https://web.archive.org/web/20040126164830/http://blog.johnkerry.com/\"\u003eJohn Kerry\u003c/a\u003e is doing it too. *sigh*\u003c/p\u003e\n",
        "plain":"Joe Lieberman spammed me today! Well, kind of. He’s apparently using the very-evil “StarProse Referrer Advertising System 2004” to spam people’s Refer lists so that he can rank higher in search engines, or at least get people to click through to his site. Y’know all of that comment spam going around? Yeah, well this is the same thing, except for referrer lists.\nLucky, I have “refer spam” countermeasures in place. I’ve got a series of IP’s, Referrers, Hostnames, and SpamBot User Agents that have been blocked for one reason or another. Usually, it’s because they’ve done something not too cool, so I’ve banned them. Generally, these are spammers. If anyone wants this list, let me know.\nIf Joe wants to be president, then he can go about doing it the right way. But spamming my website is not one of those ways.\nUpdate (2004-02-12 ) Now John Kerry is doing it too. *sigh*\n",
        "source":"\n{{\u003cdescription\u003e}}\nJoe Lieberman spammed me today!\n{{\u003c/description\u003e}}\n\nWell, kind of. He’s apparently using the very-evil “StarProse Referrer Advertising System 2004” to spam people’s Refer lists so that he can rank higher in search engines, or at least get people to click through to his site. Y’know all of that comment spam going around? Yeah, well this is the same thing, except for referrer lists.\n\nLucky, I have “refer spam” countermeasures in place. I’ve got a series of IP’s, Referrers, Hostnames, and SpamBot User Agents that have been blocked for one reason or another. Usually, it’s because they’ve done something not too cool, so I’ve banned them. Generally, these are spammers. If anyone wants this list, let me know.\n\nIf Joe wants to be president, then he can go about doing it the right way. But spamming my website is not one of those ways.\n\n## Update ({{\u003cdate \"2004-02-12\"\u003e}})\n\nNow [John Kerry]({{% wayback \"http://blog.johnkerry.com/\" %}}) is doing it too. \\*sigh\\*\n"},
    "links": {
        "prev": {"title": "Corporate-Speak", "permalink": "https://ryanparman.com/posts/2004/corporate-speak/"},
        "next": {"title": "The Power of Feedback", "permalink": "https://ryanparman.com/posts/2004/the-power-of-feedback/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Spam Blocking",
    "description": "",
    "summary": {
        "content": "After going back and checking my referrers over the last month, I’ve noticed a few spam bots coming to my website, I assume trying to harvest email addresses. I’ve encoded mine as unicode, so I haven’t been too worried. This past Saturday I received my first spam email on my oh-so-secret personal email account. I was rather irritated to say the least. Also, this morning, I got some comment spam on one of my earlier posts. Luckily, Movable Type emails me the IP of people who make comments on my site.",
        "isTruncated": true
    },
    "published": "2003-11-05T18:06:38Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2003/spam-blocking/",
    "relativePermalink": "/posts/2003/spam-blocking/",
    "aliases": ["/2003/11/05/spam-blocking/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 210,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2003/20031105-spam-blocking.md",
        "logicalName": "20031105-spam-blocking.md",
        "translationBaseName": "20031105-spam-blocking",
        "baseFileName": "20031105-spam-blocking",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2003/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eAfter going back and checking my referrers over the last month, I’ve noticed a few spam bots coming to my website, I assume trying to harvest email addresses. I’ve encoded mine as unicode, so I haven’t been too worried. This past Saturday I received my first spam email on my oh-so-secret personal email account. I was rather irritated to say the least.\u003c/p\u003e\n\u003cp\u003eAlso, this morning, I got some comment spam on one of my earlier posts. Luckily, Movable Type emails me the IP of people who make comments on my site.\u003c/p\u003e\n\u003cp\u003eI did a little bit of digging and found a PHP script that allows me to block entrance to my website based on the user’s IP address. I immediately blocked the IP of the guy who gave me some oh-so-wonderful comment spam this morning, as well as the IP’s and User Agents of some of the spambots I’ve been experiencing. We’ll see how it all works out.\u003c/p\u003e\n\u003cp\u003eI’ve also been getting some messages from the Suck-O-Meter that I have in the JavaScript section of my website. There are alot of people who are causing me stress by abusing this feature, so I’m going to begin blocking those IP’s as well. Hopefully, I’ll be able to sleep better at night.\u003c/p\u003e\n",
        "plain":"After going back and checking my referrers over the last month, I’ve noticed a few spam bots coming to my website, I assume trying to harvest email addresses. I’ve encoded mine as unicode, so I haven’t been too worried. This past Saturday I received my first spam email on my oh-so-secret personal email account. I was rather irritated to say the least.\nAlso, this morning, I got some comment spam on one of my earlier posts. Luckily, Movable Type emails me the IP of people who make comments on my site.\nI did a little bit of digging and found a PHP script that allows me to block entrance to my website based on the user’s IP address. I immediately blocked the IP of the guy who gave me some oh-so-wonderful comment spam this morning, as well as the IP’s and User Agents of some of the spambots I’ve been experiencing. We’ll see how it all works out.\nI’ve also been getting some messages from the Suck-O-Meter that I have in the JavaScript section of my website. There are alot of people who are causing me stress by abusing this feature, so I’m going to begin blocking those IP’s as well. Hopefully, I’ll be able to sleep better at night.\n",
        "source":"\nAfter going back and checking my referrers over the last month, I’ve noticed a few spam bots coming to my website, I assume trying to harvest email addresses. I’ve encoded mine as unicode, so I haven’t been too worried. This past Saturday I received my first spam email on my oh-so-secret personal email account. I was rather irritated to say the least.\n\nAlso, this morning, I got some comment spam on one of my earlier posts. Luckily, Movable Type emails me the IP of people who make comments on my site.\n\nI did a little bit of digging and found a PHP script that allows me to block entrance to my website based on the user’s IP address. I immediately blocked the IP of the guy who gave me some oh-so-wonderful comment spam this morning, as well as the IP’s and User Agents of some of the spambots I’ve been experiencing. We’ll see how it all works out.\n\nI’ve also been getting some messages from the Suck-O-Meter that I have in the JavaScript section of my website. There are alot of people who are causing me stress by abusing this feature, so I’m going to begin blocking those IP’s as well. Hopefully, I’ll be able to sleep better at night.\n"},
    "links": {
        "prev": {"title": "Freakin' DNS and TCP/IP...", "permalink": "https://ryanparman.com/posts/2003/freakin-dns-and-tcpip/"},
        "next": {"title": "Rock The Vote", "permalink": "https://ryanparman.com/posts/2003/rock-the-vote/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Subtle Changes And My Calendar",
    "description": "",
    "summary": {
        "content": "I’ve made a few subtle changes to my CSS stylesheet. The yellow I used for quoting and noting code was beginning to hurt my eyes. So, I’ve changed a few colors to make it all blend a little better. I’ve also done some fine-tuning on the spacing of certain elements (namely \u0026lt;h?\u0026gt; tags). I also released the new version of my calendar script tonight. It’s a shiny, new version 1.2 and a whopping 7.19k for the JavaScript library, the CSS file, three (count them, three) demo files, and an XML document.",
        "isTruncated": true
    },
    "published": "2003-09-17T08:41:18Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2003/subtle-changes-and-my-calendar/",
    "relativePermalink": "/posts/2003/subtle-changes-and-my-calendar/",
    "aliases": ["/2003/09/17/subtle-changes-and-my-calendar/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 281,
        "readingTime": "2 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2003/20030917-subtle-changes-and-my-calendar.md",
        "logicalName": "20030917-subtle-changes-and-my-calendar.md",
        "translationBaseName": "20030917-subtle-changes-and-my-calendar",
        "baseFileName": "20030917-subtle-changes-and-my-calendar",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2003/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\n  \u003cul\u003e\n    \u003cli\u003e\u003ca href=\"#update\"\u003eUpdate\u003c/a\u003e\u003c/li\u003e\n  \u003c/ul\u003e\n\u003c/nav\u003e",
        "html":"\u003cp\u003eI’ve made a few subtle changes to my CSS stylesheet. The yellow I used for quoting and noting code was beginning to hurt my eyes. So, I’ve changed a few colors to make it all blend a little better. I’ve also done some fine-tuning on the spacing of certain elements (namely \u003ccode\u003e\u0026lt;h?\u0026gt;\u003c/code\u003e tags).\u003c/p\u003e\n\u003cp\u003eI also released the new version of my \u003ca href=\"/scripts/calendar.php\"\u003ecalendar script\u003c/a\u003e tonight. It’s a shiny, new version 1.2 and a whopping 7.19k for the JavaScript library, the CSS file, three (count them, three) demo files, and an XML document. Gah-head. Give it a whirl. You know you want a calendar on your website… you know you do.\u003c/p\u003e\n\u003ch2 id=\"update\"\u003eUpdate\u003c/h2\u003e\n\u003cp\u003eI \u003ca href=\"/scripts/calendar-revisions.php\"\u003eposted a list\u003c/a\u003e of the features and such that I want to build into my calendar script over time. This morning, I sat down and began working on them. Out of 13 or 14 new features, I got 8 of them done all in only a few hours. How cool. I’m not planning on releasing anything until version 2.0 is complete, so if you’ve been chomping at the bit, you’ll probably have to wait another week or so for me to finish up this release, and then a couple more days to update the documentation.\u003c/p\u003e\n\u003cp\u003eThere have been mostly additions to the API… only minimal tweaking has been done to the v1.x command set. Users of any 1.x version should be able to upgrade without a hitch. The most drastic noticable changes are how much of the layout has been offloaded to CSS. The sample CSS file, although the concepts are the same, offers \u003cem\u003esignificantly\u003c/em\u003e more flexibility in styling the calendar. Upgraders will definitely have to update their CSS stylesheets.\u003c/p\u003e\n",
        "plain":"I’ve made a few subtle changes to my CSS stylesheet. The yellow I used for quoting and noting code was beginning to hurt my eyes. So, I’ve changed a few colors to make it all blend a little better. I’ve also done some fine-tuning on the spacing of certain elements (namely \u0026lt;h?\u0026gt; tags).\nI also released the new version of my calendar script tonight. It’s a shiny, new version 1.2 and a whopping 7.19k for the JavaScript library, the CSS file, three (count them, three) demo files, and an XML document. Gah-head. Give it a whirl. You know you want a calendar on your website… you know you do.\nUpdate I posted a list of the features and such that I want to build into my calendar script over time. This morning, I sat down and began working on them. Out of 13 or 14 new features, I got 8 of them done all in only a few hours. How cool. I’m not planning on releasing anything until version 2.0 is complete, so if you’ve been chomping at the bit, you’ll probably have to wait another week or so for me to finish up this release, and then a couple more days to update the documentation.\nThere have been mostly additions to the API… only minimal tweaking has been done to the v1.x command set. Users of any 1.x version should be able to upgrade without a hitch. The most drastic noticable changes are how much of the layout has been offloaded to CSS. The sample CSS file, although the concepts are the same, offers significantly more flexibility in styling the calendar. Upgraders will definitely have to update their CSS stylesheets.\n",
        "source":"\nI’ve made a few subtle changes to my CSS stylesheet. The yellow I used for quoting and noting code was beginning to hurt my eyes. So, I’ve changed a few colors to make it all blend a little better. I’ve also done some fine-tuning on the spacing of certain elements (namely `\u003ch?\u003e` tags).\n\nI also released the new version of my [calendar script](/scripts/calendar.php) tonight. It’s a shiny, new version 1.2 and a whopping 7.19k for the JavaScript library, the CSS file, three (count them, three) demo files, and an XML document. Gah-head. Give it a whirl. You know you want a calendar on your website… you know you do.\n\n## Update\n\nI [posted a list](/scripts/calendar-revisions.php) of the features and such that I want to build into my calendar script over time. This morning, I sat down and began working on them. Out of 13 or 14 new features, I got 8 of them done all in only a few hours. How cool. I’m not planning on releasing anything until version 2.0 is complete, so if you’ve been chomping at the bit, you’ll probably have to wait another week or so for me to finish up this release, and then a couple more days to update the documentation.\n\nThere have been mostly additions to the API… only minimal tweaking has been done to the v1.x command set. Users of any 1.x version should be able to upgrade without a hitch. The most drastic noticable changes are how much of the layout has been offloaded to CSS. The sample CSS file, although the concepts are the same, offers *significantly* more flexibility in styling the calendar. Upgraders will definitely have to update their CSS stylesheets.\n"},
    "links": {
        "prev": {"title": "Snoop Dogg Shizzolator", "permalink": "https://ryanparman.com/posts/2003/snoop-dogg-shizzolator/"},
        "next": {"title": "Ye Scurvy Dogs!", "permalink": "https://ryanparman.com/posts/2003/ye-scurvy-dogs/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Which is Kosher?",
    "description": "",
    "summary": {
        "content": "I got a message today from Henrik Gemal. He pointed out to me that there are differences in how my Flash Detection Script displays the Flash Version. Flash 7.0 r2 displays as “7.0.2” when flash.version is called. To me, this makes the most sense, since that’s what an “r2” would mean anyways. It also makes it easier when comparing Flash versions to do a String.split() followed by a parseInt() on a particular section of the version string. However, I didn’t know about the occasional developer’s build, namely “Shockwave Flash 7.",
        "isTruncated": true
    },
    "published": "2003-09-10T06:33:02Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2003/which-is-kosher/",
    "relativePermalink": "/posts/2003/which-is-kosher/",
    "aliases": ["/2003/09/09/which-is-kosher/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 169,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2003/20030910-which-is-kosher.md",
        "logicalName": "20030910-which-is-kosher.md",
        "translationBaseName": "20030910-which-is-kosher",
        "baseFileName": "20030910-which-is-kosher",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2003/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI got a message today from \u003ca href=\"https://web.archive.org/web/20030910063302/http://www.gemal.dk\"\u003eHenrik Gemal\u003c/a\u003e. He pointed out to me that there are differences in how my \u003ca href=\"/scripts/flash.php\"\u003eFlash Detection Script\u003c/a\u003e displays the Flash Version.\u003c/p\u003e\n\u003cp\u003eFlash 7.0 r2 displays as “7.0.2” when \u003ccode\u003eflash.version\u003c/code\u003e is called. To me, this makes the most sense, since that’s what an “r2” would mean anyways. It also makes it easier when comparing Flash versions to do a \u003ccode\u003eString.split()\u003c/code\u003e followed by a \u003ccode\u003eparseInt()\u003c/code\u003e on a particular section of the version string.\u003c/p\u003e\n\u003cp\u003eHowever, I didn’t know about the occasional developer’s build, namely “Shockwave Flash 7.0 d249”. Making this return a value of “7.0.249” would be misleading and inaccurate since a developers/beta build is a precursor to a release build. Logically, I could append a “0” before the 249 (i.e. “7.0.0249”) which would \u003cem\u003ework\u003c/em\u003e, but wouldn’t necessarily be correct.\u003c/p\u003e\n\u003cp\u003eThe only way to stay \u003cem\u003etruly\u003c/em\u003e correct would be to leave the “7.0 r2” or “6.0 r79” monikers as-is, but it makes less sense, in my opinion. So, what do you think? “7.0.x” or “7.0 rX”?\u003c/p\u003e\n",
        "plain":"I got a message today from Henrik Gemal. He pointed out to me that there are differences in how my Flash Detection Script displays the Flash Version.\nFlash 7.0 r2 displays as “7.0.2” when flash.version is called. To me, this makes the most sense, since that’s what an “r2” would mean anyways. It also makes it easier when comparing Flash versions to do a String.split() followed by a parseInt() on a particular section of the version string.\nHowever, I didn’t know about the occasional developer’s build, namely “Shockwave Flash 7.0 d249”. Making this return a value of “7.0.249” would be misleading and inaccurate since a developers/beta build is a precursor to a release build. Logically, I could append a “0” before the 249 (i.e. “7.0.0249”) which would work, but wouldn’t necessarily be correct.\nThe only way to stay truly correct would be to leave the “7.0 r2” or “6.0 r79” monikers as-is, but it makes less sense, in my opinion. So, what do you think? “7.0.x” or “7.0 rX”?\n",
        "source":"\nI got a message today from [Henrik Gemal]({{% wayback \"http://www.gemal.dk\" %}}). He pointed out to me that there are differences in how my [Flash Detection Script](/scripts/flash.php) displays the Flash Version.\n\nFlash 7.0 r2 displays as “7.0.2” when `flash.version` is called. To me, this makes the most sense, since that’s what an “r2” would mean anyways. It also makes it easier when comparing Flash versions to do a `String.split()` followed by a `parseInt()` on a particular section of the version string.\n\nHowever, I didn’t know about the occasional developer’s build, namely “Shockwave Flash 7.0 d249”. Making this return a value of “7.0.249” would be misleading and inaccurate since a developers/beta build is a precursor to a release build. Logically, I could append a “0” before the 249 (i.e. “7.0.0249”) which would *work*, but wouldn’t necessarily be correct.\n\nThe only way to stay *truly* correct would be to leave the “7.0 r2” or “6.0 r79” monikers as-is, but it makes less sense, in my opinion. So, what do you think? “7.0.x” or “7.0 rX”?\n"},
    "links": {
        "prev": {"title": "Simple Pleasures", "permalink": "https://ryanparman.com/posts/2003/simple-pleasures/"},
        "next": {"title": "Sickness", "permalink": "https://ryanparman.com/posts/2003/sickness/"},
        "ignore": "me"
    }
}

            
            , {
    "kind": "page",
    "title": "Blogs and Scripts and Code, Oh My!",
    "description": "",
    "summary": {
        "content": "I’ve been eyeing PPK’s Flash Detection Script for quite some time now. The only problem is that the IE part is written in VBScript, and I’m not familiar with the nuances of VBScript yet. After taking a look at the security hole in Internet Explorer posted below, and looking at the VBScript version that I’ve posted as “CD Voodoo”, I managed to figure out (with the help of try-catch error handling) how to re-write PPK’s script in JavaScript/JScript, thus enabling the script to live happily inside a JavaScript Library (.",
        "isTruncated": true
    },
    "published": "2003-06-13T01:30:00Z",
    "updated": "2019-02-10T21:35:12-08:00",
    "permalink": "https://ryanparman.com/posts/2003/blogs-and-scripts-and-code-oh-my/",
    "relativePermalink": "/posts/2003/blogs-and-scripts-and-code-oh-my/",
    "aliases": ["/2003/06/12/blogs-and-scripts-and-code-oh-my/"],
    "images": [],
    "videos": [],
    "categories": ["Projects and Code"],
    "tags": [],
    "series": [],
    "keywords": [],
    "meta": {
        "wordCount": 160,
        "readingTime": "1 minutes",
        "language": "en",
        "isDraft": false,
        "isHome": false,
        "isNode": false,
        "isPage": true,
        "isTranslated": false
    },
    "sourceFile": {
        "path": "posts/2003/20030613-blogs-and-scripts-and-code-oh-my.md",
        "logicalName": "20030613-blogs-and-scripts-and-code-oh-my.md",
        "translationBaseName": "20030613-blogs-and-scripts-and-code-oh-my",
        "baseFileName": "20030613-blogs-and-scripts-and-code-oh-my",
        "ext": "md",
        "lang": "en",
        "dir": "posts/2003/"
    },
    "content": {
        "tableOfContents": "\u003cnav id=\"TableOfContents\"\u003e\u003c/nav\u003e",
        "html":"\u003cp\u003eI’ve been eyeing \u003ca href=\"https://web.archive.org/web/20030613013000/http://www.xs4all.nl/~ppk/js/index.html?/~ppk/js/flash.html\"\u003ePPK’s Flash Detection Script\u003c/a\u003e for quite some time now. The only problem is that the IE part is written in VBScript, and I’m not familiar with the nuances of VBScript yet. After taking a look at the \u003ca href=\"/2003/06/11/another-internet-explorer-feature/\"\u003esecurity hole in Internet Explorer\u003c/a\u003e posted below, and looking at the VBScript version that I’ve posted as \u003ca href=\"/scripts/cdvoodoo.htm\"\u003e“CD Voodoo”\u003c/a\u003e, I managed to figure out (with the help of try-catch error handling) how to re-write PPK’s script in JavaScript/JScript, thus enabling the script to live happily inside a JavaScript Library (\u003ccode\u003e.js\u003c/code\u003e). From there, I managed to write one for Adobe Acrobat, and Windows Media Player. Check them out in the \u003ca href=\"/scripts/\"\u003e“Scripts”\u003c/a\u003e section of this site.\u003c/p\u003e\n\u003cp\u003eI’ve also added a couple more “MozBlogs”, or “Weblogs concerning Mozilla”. One of which is Dave Hyatt’s \u003ca href=\"https://web.archive.org/web/20030613013000/http://weblogs.mozillazine.org/hyatt/\"\u003eSurfin’ Safari\u003c/a\u003e (if that counts as a MozBlog), and the other is called \u003ca href=\"https://web.archive.org/web/20030613013000/http://weblogs.mozillazine.org/pinkerton/\"\u003e“Sucking less, on a budget”\u003c/a\u003e. They’re pretty good! Check them out in the \u003ca href=\"/rss/feeds.php\"\u003e“RSS Feeds”\u003c/a\u003e section.\u003c/p\u003e\n",
        "plain":"I’ve been eyeing PPK’s Flash Detection Script for quite some time now. The only problem is that the IE part is written in VBScript, and I’m not familiar with the nuances of VBScript yet. After taking a look at the security hole in Internet Explorer posted below, and looking at the VBScript version that I’ve posted as “CD Voodoo”, I managed to figure out (with the help of try-catch error handling) how to re-write PPK’s script in JavaScript/JScript, thus enabling the script to live happily inside a JavaScript Library (.js). From there, I managed to write one for Adobe Acrobat, and Windows Media Player. Check them out in the “Scripts” section of this site.\nI’ve also added a couple more “MozBlogs”, or “Weblogs concerning Mozilla”. One of which is Dave Hyatt’s Surfin’ Safari (if that counts as a MozBlog), and the other is called “Sucking less, on a budget”. They’re pretty good! Check them out in the “RSS Feeds” section.\n",
        "source":"\nI’ve been eyeing [PPK’s Flash Detection Script]({{% wayback \"http://www.xs4all.nl/~ppk/js/index.html?/~ppk/js/flash.html\" %}}) for quite some time now. The only problem is that the IE part is written in VBScript, and I’m not familiar with the nuances of VBScript yet. After taking a look at the [security hole in Internet Explorer](/2003/06/11/another-internet-explorer-feature/) posted below, and looking at the VBScript version that I’ve posted as [“CD Voodoo”](/scripts/cdvoodoo.htm), I managed to figure out (with the help of try-catch error handling) how to re-write PPK’s script in JavaScript/JScript, thus enabling the script to live happily inside a JavaScript Library (`.js`). From there, I managed to write one for Adobe Acrobat, and Windows Media Player. Check them out in the [“Scripts”](/scripts/) section of this site.\n\nI’ve also added a couple more “MozBlogs”, or “Weblogs concerning Mozilla”. One of which is Dave Hyatt’s [Surfin’ Safari]({{% wayback \"http://weblogs.mozillazine.org/hyatt/\" %}}) (if that counts as a MozBlog), and the other is called [“Sucking less, on a budget”]({{% wayback \"http://weblogs.mozillazine.org/pinkerton/\" %}}). They’re pretty good! Check them out in the [“RSS Feeds”](/rss/feeds.php) section.\n"},
    "links": {
        "prev": {"title": "Nearing Mozilla 1.4rc2", "permalink": "https://ryanparman.com/posts/2003/nearing-mozilla-14rc2/"},
        "next": {"title": "Twenty Cows and a Chicken", "permalink": "https://ryanparman.com/posts/2003/twenty-cows-and-a-chicken/"},
        "ignore": "me"
    }
}

            
        ]
    }
}
